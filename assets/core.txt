(function(){"use strict";function _mergeNamespaces(ha,aa){return aa.forEach(function(xa){xa&&typeof xa!="string"&&!Array.isArray(xa)&&Object.keys(xa).forEach(function(ba){if(ba!=="default"&&!(ba in ha)){var Sa=Object.getOwnPropertyDescriptor(xa,ba);Object.defineProperty(ha,ba,Sa.get?Sa:{enumerable:!0,get:function(){return xa[ba]}})}})}),Object.freeze(ha)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EPSILON_FLOAT32$3=1e-7,EPSILON_FLOAT16$3=1e-4;let DataStorage$1=class{constructor(aa,xa){this.backend=aa,this.dataMover=xa,this.data=new WeakMap,this.dataIdsCount=0}get(aa){return this.data.has(aa)||this.dataMover.moveData(this.backend,aa),this.data.get(aa)}set(aa,xa){this.dataIdsCount++,this.data.set(aa,xa)}has(aa){return this.data.has(aa)}delete(aa){return this.dataIdsCount--,this.data.delete(aa)}numDataIds(){return this.dataIdsCount}},KernelBackend$1=class{refCount(aa){return notYetImplemented$1("refCount")}incRef(aa){return notYetImplemented$1("incRef")}timerAvailable(){return!0}time(aa){return notYetImplemented$1("time")}read(aa){return notYetImplemented$1("read")}readSync(aa){return notYetImplemented$1("readSync")}readToGPU(aa,xa){return notYetImplemented$1("readToGPU")}numDataIds(){return notYetImplemented$1("numDataIds")}disposeData(aa,xa){return notYetImplemented$1("disposeData")}write(aa,xa,ba){return notYetImplemented$1("write")}move(aa,xa,ba,Sa,Ta){return notYetImplemented$1("move")}createTensorFromGPUData(aa,xa,ba){return notYetImplemented$1("createTensorFromGPUData")}memory(){return notYetImplemented$1("memory")}floatPrecision(){return notYetImplemented$1("floatPrecision")}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32$3:EPSILON_FLOAT16$3}dispose(){return notYetImplemented$1("dispose")}};function notYetImplemented$1(ha){throw new Error(`'${ha}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shuffle(ha){let aa=ha.length,xa=0;for(;aa>0;)xa=Math.random()*aa|0,aa--,swap$1(ha,aa,xa)}function clamp$1(ha,aa,xa){return Math.max(ha,Math.min(aa,xa))}function nearestLargerEven$1(ha){return ha%2===0?ha:ha+1}function swap$1(ha,aa,xa){const ba=ha[aa];ha[aa]=ha[xa],ha[xa]=ba}function sum$6(ha){let aa=0;for(let xa=0;xa<ha.length;xa++)aa+=ha[xa];return aa}function assert$2(ha,aa){if(!ha)throw new Error(typeof aa=="string"?aa:aa())}function assertShapesMatch$1(ha,aa,xa=""){assert$2(arraysEqual$1(ha,aa),()=>xa+` Shapes ${ha} and ${aa} must match`)}function assertNonNull(ha){assert$2(ha!=null,()=>"The input to the tensor constructor must be a non-null value.")}function sizeFromShape$1(ha){if(ha.length===0)return 1;let aa=ha[0];for(let xa=1;xa<ha.length;xa++)aa*=ha[xa];return aa}function arraysEqualWithNull(ha,aa){if(ha===aa)return!0;if(ha==null||aa==null||ha.length!==aa.length)return!1;for(let xa=0;xa<ha.length;xa++)if(ha[xa]!==null&&aa[xa]!==null&&ha[xa]!==aa[xa])return!1;return!0}function arraysEqual$1(ha,aa){if(ha===aa)return!0;if(ha==null||aa==null||ha.length!==aa.length)return!1;for(let xa=0;xa<ha.length;xa++)if(ha[xa]!==aa[xa])return!1;return!0}function isInt$1(ha){return ha%1===0}function sizeToSquarishShape$1(ha){const aa=Math.ceil(Math.sqrt(ha));return[aa,Math.ceil(ha/aa)]}function rightPad$1(ha,aa){return aa<=ha.length?ha:ha+" ".repeat(aa-ha.length)}function repeatedTry$1(ha,aa=Sa=>0,xa,ba){return new Promise((Sa,Ta)=>{let wa=0;const Ea=()=>{if(ha()){Sa();return}wa++;const ka=aa(wa);if(xa!=null&&wa>=xa){Ta();return}ba!=null?ba(Ea,ka):setTimeout(Ea,ka)};Ea()})}function inferFromImplicitShape$1(ha,aa){let xa=1,ba=-1;for(let Ta=0;Ta<ha.length;++Ta)if(ha[Ta]>=0)xa*=ha[Ta];else if(ha[Ta]===-1){if(ba!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${ba} and dim ${Ta}`);ba=Ta}else if(ha[Ta]<0)throw Error(`Shapes can not be < 0. Found ${ha[Ta]} at dim ${Ta}`);if(ba===-1){if(aa>0&&aa!==xa)throw Error(`Size(${aa}) must match the product of shape ${ha}`);return ha}if(xa===0)throw Error(`Cannot infer the missing size in [${ha}] when there are 0 elements`);if(aa%xa!==0)throw Error(`The implicit shape can't be a fractional number. Got ${aa} / ${xa}`);const Sa=ha.slice();return Sa[ba]=aa/xa,Sa}function parseAxisParam$1(ha,aa){const xa=aa.length;return ha=ha==null?aa.map((ba,Sa)=>Sa):[].concat(ha),assert$2(ha.every(ba=>ba>=-xa&&ba<xa),()=>`All values in axis param must be in range [-${xa}, ${xa}) but got axis ${ha}`),assert$2(ha.every(ba=>isInt$1(ba)),()=>`All values in axis param must be integers but got axis ${ha}`),ha.map(ba=>ba<0?xa+ba:ba)}function squeezeShape$1(ha,aa){const xa=[],ba=[],Sa=aa!=null&&Array.isArray(aa)&&aa.length===0,Ta=aa==null||Sa?null:parseAxisParam$1(aa,ha).sort();let wa=0;for(let Ea=0;Ea<ha.length;++Ea){if(Ta!=null){if(Ta[wa]===Ea&&ha[Ea]!==1)throw new Error(`Can't squeeze axis ${Ea} since its dim '${ha[Ea]}' is not 1`);(Ta[wa]==null||Ta[wa]>Ea)&&ha[Ea]===1&&(xa.push(ha[Ea]),ba.push(Ea)),Ta[wa]<=Ea&&wa++}ha[Ea]!==1&&(xa.push(ha[Ea]),ba.push(Ea))}return{newShape:xa,keptDims:ba}}function getTypedArrayFromDType$1(ha,aa){return getArrayFromDType$1(ha,aa)}function getArrayFromDType$1(ha,aa){let xa=null;if(ha==null||ha==="float32")xa=new Float32Array(aa);else if(ha==="int32")xa=new Int32Array(aa);else if(ha==="bool")xa=new Uint8Array(aa);else if(ha==="string")xa=new Array(aa);else throw new Error(`Unknown data type ${ha}`);return xa}function checkConversionForErrors$1(ha,aa){for(let xa=0;xa<ha.length;xa++){const ba=ha[xa];if(isNaN(ba)||!isFinite(ba))throw Error(`A tensor of type ${aa} being uploaded contains ${ba}.`)}}function isValidDtype$1(ha){return ha==="bool"||ha==="complex64"||ha==="float32"||ha==="int32"||ha==="string"}function hasEncodingLoss$1(ha,aa){return!(aa==="complex64"||aa==="float32"&&ha!=="complex64"||aa==="int32"&&ha!=="float32"&&ha!=="complex64"||aa==="bool"&&ha==="bool")}function bytesPerElement$1(ha){if(ha==="float32"||ha==="int32")return 4;if(ha==="complex64")return 8;if(ha==="bool")return 1;throw new Error(`Unknown dtype ${ha}`)}function bytesFromStringArray$1(ha){if(ha==null)return 0;let aa=0;return ha.forEach(xa=>aa+=xa.length),aa}function isString$1(ha){return typeof ha=="string"||ha instanceof String}function isBoolean$1(ha){return typeof ha=="boolean"}function isNumber$1(ha){return typeof ha=="number"}function inferDtype$1(ha){return Array.isArray(ha)?inferDtype$1(ha[0]):ha instanceof Float32Array?"float32":ha instanceof Int32Array||ha instanceof Uint8Array||ha instanceof Uint8ClampedArray?"int32":isNumber$1(ha)?"float32":isString$1(ha)?"string":isBoolean$1(ha)?"bool":"float32"}function isFunction$1(ha){return!!(ha&&ha.constructor&&ha.call&&ha.apply)}function nearestDivisor$1(ha,aa){for(let xa=aa;xa<ha;++xa)if(ha%xa===0)return xa;return ha}function computeStrides$1(ha){const aa=ha.length;if(aa<2)return[];const xa=new Array(aa-1);xa[aa-2]=ha[aa-1];for(let ba=aa-3;ba>=0;--ba)xa[ba]=xa[ba+1]*ha[ba+1];return xa}function createNestedArray$1(ha,aa,xa,ba=!1){const Sa=new Array;if(aa.length===1){const Ta=aa[0]*(ba?2:1);for(let wa=0;wa<Ta;wa++)Sa[wa]=xa[ha+wa]}else{const Ta=aa[0],wa=aa.slice(1),Ea=wa.reduce((ka,Aa)=>ka*Aa)*(ba?2:1);for(let ka=0;ka<Ta;ka++)Sa[ka]=createNestedArray$1(ha+ka*Ea,wa,xa,ba)}return Sa}function toNestedArray$1(ha,aa,xa=!1){if(ha.length===0)return aa[0];const ba=ha.reduce((Sa,Ta)=>Sa*Ta)*(xa?2:1);if(ba===0)return[];if(ba!==aa.length)throw new Error(`[${ha}] does not match the input size ${aa.length}${xa?" for a complex tensor":""}.`);return createNestedArray$1(0,ha,aa,xa)}function convertBackendValuesAndArrayBuffer(ha,aa){if(Array.isArray(ha))return ha;if(aa==="float32")return ha instanceof Float32Array?ha:new Float32Array(ha);if(aa==="int32")return ha instanceof Int32Array?ha:new Int32Array(ha);if(aa==="bool"||aa==="string")return Uint8Array.from(new Int32Array(ha));throw new Error(`Unknown dtype ${aa}`)}function makeOnesTypedArray$1(ha,aa){const xa=makeZerosTypedArray$1(ha,aa);for(let ba=0;ba<xa.length;ba++)xa[ba]=1;return xa}function makeZerosTypedArray$1(ha,aa){if(aa==null||aa==="float32"||aa==="complex64")return new Float32Array(ha);if(aa==="int32")return new Int32Array(ha);if(aa==="bool")return new Uint8Array(ha);throw new Error(`Unknown data type ${aa}`)}function makeZerosNestedTypedArray(ha,aa){const xa=ha.reduce((ba,Sa)=>ba*Sa,1);if(aa==null||aa==="float32")return toNestedArray$1(ha,new Float32Array(xa));if(aa==="int32")return toNestedArray$1(ha,new Int32Array(xa));if(aa==="bool")return toNestedArray$1(ha,new Uint8Array(xa));throw new Error(`Unknown data type ${aa}`)}function assertNonNegativeIntegerDimensions$1(ha){ha.forEach(aa=>{assert$2(Number.isInteger(aa)&&aa>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${ha}].`)})}function locToIndex$1(ha,aa,xa){if(aa===0)return 0;if(aa===1)return ha[0];let ba=ha[ha.length-1];for(let Sa=0;Sa<ha.length-1;++Sa)ba+=xa[Sa]*ha[Sa];return ba}function indexToLoc$1(ha,aa,xa){if(aa===0)return[];if(aa===1)return[ha];const ba=new Array(aa);for(let Sa=0;Sa<ba.length-1;++Sa)ba[Sa]=Math.floor(ha/xa[Sa]),ha-=ba[Sa]*xa[Sa];return ba[ba.length-1]=ha,ba}function isPromise$1(ha){return ha&&ha.then&&typeof ha.then=="function"}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TENSORFLOWJS_FLAGS_PREFIX$1="tfjsflags";let Environment$1=class{constructor(aa){this.global=aa,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=getQueryParams$1,this.populateURLFlags()}setPlatform(aa,xa){this.platform!=null&&(env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${aa}.`)),this.platformName=aa,this.platform=xa}registerFlag(aa,xa,ba){if(this.flagRegistry[aa]={evaluationFn:xa,setHook:ba},this.urlFlags[aa]!=null){const Sa=this.urlFlags[aa];env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.warn(`Setting feature override from URL ${aa}: ${Sa}.`),this.set(aa,Sa)}}async getAsync(aa){return aa in this.flags?this.flags[aa]:(this.flags[aa]=await this.evaluateFlag(aa),this.flags[aa])}get(aa){if(aa in this.flags)return this.flags[aa];const xa=this.evaluateFlag(aa);if(isPromise$1(xa))throw new Error(`Flag ${aa} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[aa]=xa,this.flags[aa]}getNumber(aa){return this.get(aa)}getBool(aa){return this.get(aa)}getString(aa){return this.get(aa)}getFlags(){return this.flags}get features(){return this.flags}set(aa,xa){if(this.flagRegistry[aa]==null)throw new Error(`Cannot set flag ${aa} as it has not been registered.`);this.flags[aa]=xa,this.flagRegistry[aa].setHook!=null&&this.flagRegistry[aa].setHook(xa)}evaluateFlag(aa){if(this.flagRegistry[aa]==null)throw new Error(`Cannot evaluate flag '${aa}': no evaluation function found.`);return this.flagRegistry[aa].evaluationFn()}setFlags(aa){this.flags=Object.assign({},aa)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const aa=this.getQueryParams(this.global.location.search);TENSORFLOWJS_FLAGS_PREFIX$1 in aa&&aa[TENSORFLOWJS_FLAGS_PREFIX$1].split(",").forEach(ba=>{const[Sa,Ta]=ba.split(":");this.urlFlags[Sa]=parseValue$1(Sa,Ta)})}};function getQueryParams$1(ha){const aa={};return ha.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(xa,...ba)=>(decodeParam$1(aa,ba[0],ba[1]),ba.join("="))),aa}function decodeParam$1(ha,aa,xa){ha[decodeURIComponent(aa)]=decodeURIComponent(xa||"")}function parseValue$1(ha,aa){const xa=aa.toLowerCase();return xa==="true"||xa==="false"?xa==="true":`${+xa}`===xa?+xa:aa}function env$1(){return ENV$7}let ENV$7=null;function setEnvironmentGlobal$1(ha){ENV$7=ha}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let globalNameSpace$1;function getGlobalNamespace$1(){if(globalNameSpace$1==null){let ha;if(typeof window<"u")ha=window;else if(typeof global<"u")ha=global;else if(typeof process<"u")ha=process;else if(typeof self<"u")ha=self;else throw new Error("Could not find a global object");globalNameSpace$1=ha}return globalNameSpace$1}function getGlobalMap$1(){const ha=getGlobalNamespace$1();return ha._tfGlobals==null&&(ha._tfGlobals=new Map),ha._tfGlobals}function getGlobal$1(ha,aa){const xa=getGlobalMap$1();if(xa.has(ha))return xa.get(ha);{const ba=aa();return xa.set(ha,ba),xa.get(ha)}}const Abs$1="Abs",Acos$1="Acos",Acosh$1="Acosh",Add$2="Add",AddN$1="AddN",All$1="All",Any$1="Any",ArgMax$1="ArgMax",ArgMin$1="ArgMin",Asin$1="Asin",Asinh$1="Asinh",Atan$1="Atan",Atanh$1="Atanh",Atan2$1="Atan2",AvgPool$1="AvgPool",AvgPoolGrad$1="AvgPoolGrad",AvgPool3D$1="AvgPool3D",AvgPool3DGrad$1="AvgPool3DGrad",BatchMatMul$1="BatchMatMul",BatchToSpaceND$1="BatchToSpaceND",Bincount$1="Bincount",BitwiseAnd$1="BitwiseAnd",BroadcastTo="BroadcastTo",BroadcastArgs$1="BroadcastArgs",Cast$1="Cast",Ceil$1="Ceil",ClipByValue$1="ClipByValue",Complex$1="Complex",ComplexAbs$1="ComplexAbs",Concat$1="Concat",Conv2D$2="Conv2D",Conv2DBackpropFilter$1="Conv2DBackpropFilter",Conv2DBackpropInput$1="Conv2DBackpropInput",Conv3D$2="Conv3D",Conv3DBackpropFilterV2$1="Conv3DBackpropFilterV2",Conv3DBackpropInputV2$1="Conv3DBackpropInputV2",Cos$1="Cos",Cosh$1="Cosh",Cumprod$1="Cumprod",Cumsum$1="Cumsum",CropAndResize$1="CropAndResize",DenseBincount$1="DenseBincount",DepthToSpace$1="DepthToSpace",DepthwiseConv2dNative$1="DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter$1="DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput$1="DepthwiseConv2dNativeBackpropInput",Diag$1="Diag",Dilation2D$1="Dilation2D",Dilation2DBackpropInput="Dilation2DBackpropInput",Dilation2DBackpropFilter="Dilation2DBackpropFilter",Draw="Draw",RealDiv$1="RealDiv",Einsum$1="Einsum",Elu$2="Elu",EluGrad$1="EluGrad",Erf$1="Erf",Equal$1="Equal",Exp$1="Exp",ExpandDims$1="ExpandDims",Expm1$1="Expm1",FFT$1="FFT",Fill$1="Fill",FlipLeftRight$1="FlipLeftRight",Floor$1="Floor",FloorDiv$1="FloorDiv",FusedBatchNorm$1="FusedBatchNorm",GatherV2$1="GatherV2",GatherNd$1="GatherNd",Greater$1="Greater",GreaterEqual$1="GreaterEqual",Identity$2="Identity",IFFT$1="IFFT",Imag$1="Imag",IsFinite$1="IsFinite",IsInf$1="IsInf",IsNan$1="IsNan",LeakyRelu$1="LeakyRelu",Less$1="Less",LessEqual$1="LessEqual",LinSpace$1="LinSpace",Log$1="Log",Log1p$1="Log1p",LogicalAnd$1="LogicalAnd",LogicalNot$1="LogicalNot",LogicalOr$1="LogicalOr",LogSoftmax$1="LogSoftmax",LRN$1="LRN",LRNGrad$1="LRNGrad",Max$1="Max",Maximum$2="Maximum",MaxPool$1="MaxPool",MaxPoolGrad$1="MaxPoolGrad",MaxPool3D$1="MaxPool3D",MaxPool3DGrad$1="MaxPool3DGrad",MaxPoolWithArgmax$1="MaxPoolWithArgmax",Mean$1="Mean",Min$1="Min",Minimum$2="Minimum",MirrorPad$1="MirrorPad",Mod$1="Mod",Multinomial$1="Multinomial",Multiply$2="Multiply",Neg$1="Neg",NotEqual$1="NotEqual",NonMaxSuppressionV3$1="NonMaxSuppressionV3",NonMaxSuppressionV4$1="NonMaxSuppressionV4",NonMaxSuppressionV5$1="NonMaxSuppressionV5",OnesLike$1="OnesLike",OneHot$1="OneHot",Pack$1="Pack",PadV2$1="PadV2",Pow$1="Pow",Prelu$1="Prelu",Prod$1="Prod",RaggedGather$1="RaggedGather",RaggedRange$1="RaggedRange",RaggedTensorToTensor$1="RaggedTensorToTensor",Range$1="Range",Real$1="Real",Reciprocal$1="Reciprocal",Relu$2="Relu",Reshape$2="Reshape",ResizeNearestNeighbor$1="ResizeNearestNeighbor",ResizeNearestNeighborGrad$1="ResizeNearestNeighborGrad",ResizeBilinear$1="ResizeBilinear",ResizeBilinearGrad$1="ResizeBilinearGrad",Relu6$2="Relu6",Reverse$1="Reverse",Round$1="Round",Rsqrt$1="Rsqrt",ScatterNd$1="ScatterNd",TensorScatterUpdate$1="TensorScatterUpdate",SearchSorted$1="SearchSorted",Select$1="Select",Selu$2="Selu",Slice$1="Slice",Sin$1="Sin",Sinh$1="Sinh",Sign$1="Sign",Sigmoid$2="Sigmoid",Softplus$2="Softplus",Sqrt$1="Sqrt",Sum$1="Sum",SpaceToBatchND$1="SpaceToBatchND",SplitV$1="SplitV",Softmax$3="Softmax",SparseFillEmptyRows$1="SparseFillEmptyRows",SparseReshape$1="SparseReshape",SparseSegmentMean$1="SparseSegmentMean",SparseSegmentSum$1="SparseSegmentSum",SparseToDense$1="SparseToDense",SquaredDifference$1="SquaredDifference",Square$1="Square",StaticRegexReplace$1="StaticRegexReplace",StridedSlice$1="StridedSlice",StringNGrams$1="StringNGrams",StringSplit$1="StringSplit",StringToHashBucketFast$1="StringToHashBucketFast",Sub$1="Sub",Tan$1="Tan",Tanh$2="Tanh",Tile$1="Tile",TopK$1="TopK",Transform$1="Transform",Transpose$1="Transpose",Unique$1="Unique",Unpack$1="Unpack",UnsortedSegmentSum$1="UnsortedSegmentSum",ZerosLike$1="ZerosLike",Step$1="Step",FromPixels$1="FromPixels",RotateWithOffset$1="RotateWithOffset",_FusedMatMul$1="_FusedMatMul",FusedConv2D$1="FusedConv2D",FusedDepthwiseConv2D$1="FusedDepthwiseConv2D";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function warn$1(...ha){env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.warn(...ha)}function log$5(...ha){env$1().getBool("IS_TEST")||env$1().getBool("PROD")||console.log(...ha)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelRegistry$1=getGlobal$1("kernelRegistry",()=>new Map),gradRegistry$1=getGlobal$1("gradRegistry",()=>new Map);function getKernel$1(ha,aa){const xa=makeKey$1(ha,aa);return kernelRegistry$1.get(xa)}function getGradient$1(ha){return gradRegistry$1.get(ha)}function getKernelsForBackend$1(ha){const aa=kernelRegistry$1.entries(),xa=[];for(;;){const{done:ba,value:Sa}=aa.next();if(ba)break;const[Ta,wa]=Sa,[Ea]=Ta.split("_");Ea===ha&&xa.push(wa)}return xa}function registerKernel$1(ha){const{kernelName:aa,backendName:xa}=ha,ba=makeKey$1(aa,xa);kernelRegistry$1.has(ba)&&warn$1(`The kernel '${aa}' for backend '${xa}' is already registered`),kernelRegistry$1.set(ba,ha)}function registerGradient(ha){const{kernelName:aa}=ha;gradRegistry$1.has(aa)&&env$1().getBool("DEBUG")&&warn$1(`Overriding the gradient for '${aa}'`),gradRegistry$1.set(aa,ha)}function makeKey$1(ha,aa){return`${aa}_${ha}`}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isTypedArrayBrowser$1(ha){return ha instanceof Float32Array||ha instanceof Int32Array||ha instanceof Uint8Array||ha instanceof Uint8ClampedArray}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function getDefaultExportFromCjs(ha){return ha&&ha.__esModule&&Object.prototype.hasOwnProperty.call(ha,"default")?ha.default:ha}function getAugmentedNamespace(ha){if(ha.__esModule)return ha;var aa=ha.default;if(typeof aa=="function"){var xa=function ba(){return this instanceof ba?Reflect.construct(aa,arguments,this.constructor):aa.apply(this,arguments)};xa.prototype=aa.prototype}else xa={};return Object.defineProperty(xa,"__esModule",{value:!0}),Object.keys(ha).forEach(function(ba){var Sa=Object.getOwnPropertyDescriptor(ha,ba);Object.defineProperty(xa,ba,Sa.get?Sa:{enumerable:!0,get:function(){return ha[ba]}})}),xa}var long=Long$2,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(ha){}function Long$2(ha,aa,xa){this.low=ha|0,this.high=aa|0,this.unsigned=!!xa}Long$2.prototype.__isLong__,Object.defineProperty(Long$2.prototype,"__isLong__",{value:!0});function isLong(ha){return(ha&&ha.__isLong__)===!0}Long$2.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(ha,aa){var xa,ba,Sa;return aa?(ha>>>=0,(Sa=0<=ha&&ha<256)&&(ba=UINT_CACHE[ha],ba)?ba:(xa=fromBits(ha,(ha|0)<0?-1:0,!0),Sa&&(UINT_CACHE[ha]=xa),xa)):(ha|=0,(Sa=-128<=ha&&ha<128)&&(ba=INT_CACHE[ha],ba)?ba:(xa=fromBits(ha,ha<0?-1:0,!1),Sa&&(INT_CACHE[ha]=xa),xa))}Long$2.fromInt=fromInt;function fromNumber(ha,aa){if(isNaN(ha))return aa?UZERO:ZERO;if(aa){if(ha<0)return UZERO;if(ha>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(ha<=-TWO_PWR_63_DBL)return MIN_VALUE;if(ha+1>=TWO_PWR_63_DBL)return MAX_VALUE}return ha<0?fromNumber(-ha,aa).neg():fromBits(ha%TWO_PWR_32_DBL|0,ha/TWO_PWR_32_DBL|0,aa)}Long$2.fromNumber=fromNumber;function fromBits(ha,aa,xa){return new Long$2(ha,aa,xa)}Long$2.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(ha,aa,xa){if(ha.length===0)throw Error("empty string");if(ha==="NaN"||ha==="Infinity"||ha==="+Infinity"||ha==="-Infinity")return ZERO;if(typeof aa=="number"?(xa=aa,aa=!1):aa=!!aa,xa=xa||10,xa<2||36<xa)throw RangeError("radix");var ba;if((ba=ha.indexOf("-"))>0)throw Error("interior hyphen");if(ba===0)return fromString(ha.substring(1),aa,xa).neg();for(var Sa=fromNumber(pow_dbl(xa,8)),Ta=ZERO,wa=0;wa<ha.length;wa+=8){var Ea=Math.min(8,ha.length-wa),ka=parseInt(ha.substring(wa,wa+Ea),xa);if(Ea<8){var Aa=fromNumber(pow_dbl(xa,Ea));Ta=Ta.mul(Aa).add(fromNumber(ka))}else Ta=Ta.mul(Sa),Ta=Ta.add(fromNumber(ka))}return Ta.unsigned=aa,Ta}Long$2.fromString=fromString;function fromValue(ha,aa){return typeof ha=="number"?fromNumber(ha,aa):typeof ha=="string"?fromString(ha,aa):fromBits(ha.low,ha.high,typeof aa=="boolean"?aa:ha.unsigned)}Long$2.fromValue=fromValue;var TWO_PWR_16_DBL=65536,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long$2.ZERO=ZERO;var UZERO=fromInt(0,!0);Long$2.UZERO=UZERO;var ONE=fromInt(1);Long$2.ONE=ONE;var UONE=fromInt(1,!0);Long$2.UONE=UONE;var NEG_ONE=fromInt(-1);Long$2.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long$2.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long$2.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long$2.MIN_VALUE=MIN_VALUE;var LongPrototype=Long$2.prototype;LongPrototype.toInt=function(){return this.unsigned?this.low>>>0:this.low},LongPrototype.toNumber=function(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)},LongPrototype.toString=function(aa){if(aa=aa||10,aa<2||36<aa)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(MIN_VALUE)){var xa=fromNumber(aa),ba=this.div(xa),Sa=ba.mul(xa).sub(this);return ba.toString(aa)+Sa.toInt().toString(aa)}else return"-"+this.neg().toString(aa);for(var Ta=fromNumber(pow_dbl(aa,6),this.unsigned),wa=this,Ea="";;){var ka=wa.div(Ta),Aa=wa.sub(ka.mul(Ta)).toInt()>>>0,Fa=Aa.toString(aa);if(wa=ka,wa.isZero())return Fa+Ea;for(;Fa.length<6;)Fa="0"+Fa;Ea=""+Fa+Ea}},LongPrototype.getHighBits=function(){return this.high},LongPrototype.getHighBitsUnsigned=function(){return this.high>>>0},LongPrototype.getLowBits=function(){return this.low},LongPrototype.getLowBitsUnsigned=function(){return this.low>>>0},LongPrototype.getNumBitsAbs=function(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var aa=this.high!=0?this.high:this.low,xa=31;xa>0&&!(aa&1<<xa);xa--);return this.high!=0?xa+33:xa+1},LongPrototype.isZero=function(){return this.high===0&&this.low===0},LongPrototype.eqz=LongPrototype.isZero,LongPrototype.isNegative=function(){return!this.unsigned&&this.high<0},LongPrototype.isPositive=function(){return this.unsigned||this.high>=0},LongPrototype.isOdd=function(){return(this.low&1)===1},LongPrototype.isEven=function(){return(this.low&1)===0},LongPrototype.equals=function(aa){return isLong(aa)||(aa=fromValue(aa)),this.unsigned!==aa.unsigned&&this.high>>>31===1&&aa.high>>>31===1?!1:this.high===aa.high&&this.low===aa.low},LongPrototype.eq=LongPrototype.equals,LongPrototype.notEquals=function(aa){return!this.eq(aa)},LongPrototype.neq=LongPrototype.notEquals,LongPrototype.ne=LongPrototype.notEquals,LongPrototype.lessThan=function(aa){return this.comp(aa)<0},LongPrototype.lt=LongPrototype.lessThan,LongPrototype.lessThanOrEqual=function(aa){return this.comp(aa)<=0},LongPrototype.lte=LongPrototype.lessThanOrEqual,LongPrototype.le=LongPrototype.lessThanOrEqual,LongPrototype.greaterThan=function(aa){return this.comp(aa)>0},LongPrototype.gt=LongPrototype.greaterThan,LongPrototype.greaterThanOrEqual=function(aa){return this.comp(aa)>=0},LongPrototype.gte=LongPrototype.greaterThanOrEqual,LongPrototype.ge=LongPrototype.greaterThanOrEqual,LongPrototype.compare=function(aa){if(isLong(aa)||(aa=fromValue(aa)),this.eq(aa))return 0;var xa=this.isNegative(),ba=aa.isNegative();return xa&&!ba?-1:!xa&&ba?1:this.unsigned?aa.high>>>0>this.high>>>0||aa.high===this.high&&aa.low>>>0>this.low>>>0?-1:1:this.sub(aa).isNegative()?-1:1},LongPrototype.comp=LongPrototype.compare,LongPrototype.negate=function(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)},LongPrototype.neg=LongPrototype.negate,LongPrototype.add=function(aa){isLong(aa)||(aa=fromValue(aa));var xa=this.high>>>16,ba=this.high&65535,Sa=this.low>>>16,Ta=this.low&65535,wa=aa.high>>>16,Ea=aa.high&65535,ka=aa.low>>>16,Aa=aa.low&65535,Fa=0,La=0,el=0,tl=0;return tl+=Ta+Aa,el+=tl>>>16,tl&=65535,el+=Sa+ka,La+=el>>>16,el&=65535,La+=ba+Ea,Fa+=La>>>16,La&=65535,Fa+=xa+wa,Fa&=65535,fromBits(el<<16|tl,Fa<<16|La,this.unsigned)},LongPrototype.subtract=function(aa){return isLong(aa)||(aa=fromValue(aa)),this.add(aa.neg())},LongPrototype.sub=LongPrototype.subtract,LongPrototype.multiply=function(aa){if(this.isZero())return ZERO;if(isLong(aa)||(aa=fromValue(aa)),wasm){var xa=wasm.mul(this.low,this.high,aa.low,aa.high);return fromBits(xa,wasm.get_high(),this.unsigned)}if(aa.isZero())return ZERO;if(this.eq(MIN_VALUE))return aa.isOdd()?MIN_VALUE:ZERO;if(aa.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return aa.isNegative()?this.neg().mul(aa.neg()):this.neg().mul(aa).neg();if(aa.isNegative())return this.mul(aa.neg()).neg();if(this.lt(TWO_PWR_24)&&aa.lt(TWO_PWR_24))return fromNumber(this.toNumber()*aa.toNumber(),this.unsigned);var ba=this.high>>>16,Sa=this.high&65535,Ta=this.low>>>16,wa=this.low&65535,Ea=aa.high>>>16,ka=aa.high&65535,Aa=aa.low>>>16,Fa=aa.low&65535,La=0,el=0,tl=0,nl=0;return nl+=wa*Fa,tl+=nl>>>16,nl&=65535,tl+=Ta*Fa,el+=tl>>>16,tl&=65535,tl+=wa*Aa,el+=tl>>>16,tl&=65535,el+=Sa*Fa,La+=el>>>16,el&=65535,el+=Ta*Aa,La+=el>>>16,el&=65535,el+=wa*ka,La+=el>>>16,el&=65535,La+=ba*Fa+Sa*Aa+Ta*ka+wa*Ea,La&=65535,fromBits(tl<<16|nl,La<<16|el,this.unsigned)},LongPrototype.mul=LongPrototype.multiply,LongPrototype.divide=function(aa){if(isLong(aa)||(aa=fromValue(aa)),aa.isZero())throw Error("division by zero");if(wasm){if(!this.unsigned&&this.high===-2147483648&&aa.low===-1&&aa.high===-1)return this;var xa=(this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,aa.low,aa.high);return fromBits(xa,wasm.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?UZERO:ZERO;var ba,Sa,Ta;if(this.unsigned){if(aa.unsigned||(aa=aa.toUnsigned()),aa.gt(this))return UZERO;if(aa.gt(this.shru(1)))return UONE;Ta=UZERO}else{if(this.eq(MIN_VALUE)){if(aa.eq(ONE)||aa.eq(NEG_ONE))return MIN_VALUE;if(aa.eq(MIN_VALUE))return ONE;var wa=this.shr(1);return ba=wa.div(aa).shl(1),ba.eq(ZERO)?aa.isNegative()?ONE:NEG_ONE:(Sa=this.sub(aa.mul(ba)),Ta=ba.add(Sa.div(aa)),Ta)}else if(aa.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return aa.isNegative()?this.neg().div(aa.neg()):this.neg().div(aa).neg();if(aa.isNegative())return this.div(aa.neg()).neg();Ta=ZERO}for(Sa=this;Sa.gte(aa);){ba=Math.max(1,Math.floor(Sa.toNumber()/aa.toNumber()));for(var Ea=Math.ceil(Math.log(ba)/Math.LN2),ka=Ea<=48?1:pow_dbl(2,Ea-48),Aa=fromNumber(ba),Fa=Aa.mul(aa);Fa.isNegative()||Fa.gt(Sa);)ba-=ka,Aa=fromNumber(ba,this.unsigned),Fa=Aa.mul(aa);Aa.isZero()&&(Aa=ONE),Ta=Ta.add(Aa),Sa=Sa.sub(Fa)}return Ta},LongPrototype.div=LongPrototype.divide,LongPrototype.modulo=function(aa){if(isLong(aa)||(aa=fromValue(aa)),wasm){var xa=(this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,aa.low,aa.high);return fromBits(xa,wasm.get_high(),this.unsigned)}return this.sub(this.div(aa).mul(aa))},LongPrototype.mod=LongPrototype.modulo,LongPrototype.rem=LongPrototype.modulo,LongPrototype.not=function(){return fromBits(~this.low,~this.high,this.unsigned)},LongPrototype.and=function(aa){return isLong(aa)||(aa=fromValue(aa)),fromBits(this.low&aa.low,this.high&aa.high,this.unsigned)},LongPrototype.or=function(aa){return isLong(aa)||(aa=fromValue(aa)),fromBits(this.low|aa.low,this.high|aa.high,this.unsigned)},LongPrototype.xor=function(aa){return isLong(aa)||(aa=fromValue(aa)),fromBits(this.low^aa.low,this.high^aa.high,this.unsigned)},LongPrototype.shiftLeft=function(aa){return isLong(aa)&&(aa=aa.toInt()),(aa&=63)===0?this:aa<32?fromBits(this.low<<aa,this.high<<aa|this.low>>>32-aa,this.unsigned):fromBits(0,this.low<<aa-32,this.unsigned)},LongPrototype.shl=LongPrototype.shiftLeft,LongPrototype.shiftRight=function(aa){return isLong(aa)&&(aa=aa.toInt()),(aa&=63)===0?this:aa<32?fromBits(this.low>>>aa|this.high<<32-aa,this.high>>aa,this.unsigned):fromBits(this.high>>aa-32,this.high>=0?0:-1,this.unsigned)},LongPrototype.shr=LongPrototype.shiftRight,LongPrototype.shiftRightUnsigned=function(aa){if(isLong(aa)&&(aa=aa.toInt()),aa&=63,aa===0)return this;var xa=this.high;if(aa<32){var ba=this.low;return fromBits(ba>>>aa|xa<<32-aa,xa>>>aa,this.unsigned)}else return aa===32?fromBits(xa,0,this.unsigned):fromBits(xa>>>aa-32,0,this.unsigned)},LongPrototype.shru=LongPrototype.shiftRightUnsigned,LongPrototype.shr_u=LongPrototype.shiftRightUnsigned,LongPrototype.toSigned=function(){return this.unsigned?fromBits(this.low,this.high,!1):this},LongPrototype.toUnsigned=function(){return this.unsigned?this:fromBits(this.low,this.high,!0)},LongPrototype.toBytes=function(aa){return aa?this.toBytesLE():this.toBytesBE()},LongPrototype.toBytesLE=function(){var aa=this.high,xa=this.low;return[xa&255,xa>>>8&255,xa>>>16&255,xa>>>24,aa&255,aa>>>8&255,aa>>>16&255,aa>>>24]},LongPrototype.toBytesBE=function(){var aa=this.high,xa=this.low;return[aa>>>24,aa>>>16&255,aa>>>8&255,aa&255,xa>>>24,xa>>>16&255,xa>>>8&255,xa&255]},Long$2.fromBytes=function(aa,xa,ba){return ba?Long$2.fromBytesLE(aa,xa):Long$2.fromBytesBE(aa,xa)},Long$2.fromBytesLE=function(aa,xa){return new Long$2(aa[0]|aa[1]<<8|aa[2]<<16|aa[3]<<24,aa[4]|aa[5]<<8|aa[6]<<16|aa[7]<<24,xa)},Long$2.fromBytesBE=function(aa,xa){return new Long$2(aa[4]<<24|aa[5]<<16|aa[6]<<8|aa[7],aa[0]<<24|aa[1]<<16|aa[2]<<8|aa[3],xa)};var long$1=getDefaultExportFromCjs(long),LongExports=_mergeNamespaces({__proto__:null,default:long$1},[long]);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Long$1=long$1||LongExports;function hexToLong$1(ha){return Long$1.fromString(ha,!0,16)}const k0$1=hexToLong$1("c3a5c85c97cb3127"),k1$1=hexToLong$1("b492b66fbe98f273"),k2$1=hexToLong$1("9ae16a3b2f90404f");function shiftMix$1(ha){return ha.xor(ha.shru(47))}function fetch$2(ha,aa,xa){const ba=ha.slice(aa,aa+xa);return Long$1.fromBytes(Array.from(ba),!0,!0)}function fetch64$1(ha,aa){return fetch$2(ha,aa,8)}function fetch32$1(ha,aa){return fetch$2(ha,aa,4)}function rotate64$1(ha,aa){return aa===0?ha:ha.shru(aa).or(ha.shl(64-aa))}function hashLen16$1(ha,aa,xa=hexToLong$1("9ddfea08eb382d69")){let ba=ha.xor(aa).mul(xa);ba=ba.xor(ba.shru(47));let Sa=aa.xor(ba).mul(xa);return Sa=Sa.xor(Sa.shru(47)),Sa=Sa.mul(xa),Sa}function weakHashLen32WithSeeds$1(ha,aa,xa,ba,Sa,Ta){Sa=Sa.add(ha),Ta=rotate64$1(Ta.add(Sa).add(ba),21);const wa=Sa;return Sa=Sa.add(aa),Sa=Sa.add(xa),Ta=Ta.add(rotate64$1(Sa,44)),[Sa.add(ba),Ta.add(wa)]}function weakHashLen32WithSeedsStr$1(ha,aa,xa,ba){return weakHashLen32WithSeeds$1(fetch64$1(ha,aa),fetch64$1(ha,aa+8),fetch64$1(ha,aa+16),fetch64$1(ha,aa+24),xa,ba)}function hashLen0to16$1(ha,aa=ha.length){if(aa>=8){const xa=k2$1.add(aa*2),ba=fetch64$1(ha,0).add(k2$1),Sa=fetch64$1(ha,aa-8),Ta=rotate64$1(Sa,37).mul(xa).add(ba),wa=rotate64$1(ba,25).add(Sa).mul(xa);return hashLen16$1(Ta,wa,xa)}if(aa>=4){const xa=k2$1.add(aa*2),ba=fetch32$1(ha,0);return hashLen16$1(ba.shl(3).add(aa),fetch32$1(ha,aa-4),xa)}if(aa>0){const xa=ha[0],ba=ha[aa>>1],Sa=ha[aa-1],Ta=xa+(ba<<8),wa=aa+(Sa<<2);return shiftMix$1(k2$1.mul(Ta).xor(k0$1.mul(wa))).mul(k2$1)}return k2$1}function hashLen17to32$1(ha,aa=ha.length){const xa=k2$1.add(aa*2),ba=fetch64$1(ha,0).mul(k1$1),Sa=fetch64$1(ha,8),Ta=fetch64$1(ha,aa-8).mul(xa),wa=fetch64$1(ha,aa-16).mul(k2$1);return hashLen16$1(rotate64$1(ba.add(Sa),43).add(rotate64$1(Ta,30)).add(wa),ba.add(rotate64$1(Sa.add(k2$1),18)).add(Ta),xa)}function hashLen33to64$1(ha,aa=ha.length){const xa=k2$1.add(aa*2),ba=fetch64$1(ha,0).mul(k2$1),Sa=fetch64$1(ha,8),Ta=fetch64$1(ha,aa-8).mul(xa),wa=fetch64$1(ha,aa-16).mul(k2$1),Ea=rotate64$1(ba.add(Sa),43).add(rotate64$1(Ta,30)).add(wa),ka=hashLen16$1(Ea,ba.add(rotate64$1(Sa.add(k2$1),18)).add(Ta),xa),Aa=fetch64$1(ha,16).mul(xa),Fa=fetch64$1(ha,24),La=Ea.add(fetch64$1(ha,aa-32)).mul(xa),el=ka.add(fetch64$1(ha,aa-24)).mul(xa);return hashLen16$1(rotate64$1(Aa.add(Fa),43).add(rotate64$1(La,30)).add(el),Aa.add(rotate64$1(Fa.add(ba),18)).add(La),xa)}function fingerPrint64$1(ha,aa=ha.length){const xa=Long$1.fromNumber(81,!0);if(aa<=32)return aa<=16?hashLen0to16$1(ha,aa):hashLen17to32$1(ha,aa);if(aa<=64)return hashLen33to64$1(ha,aa);let ba=xa,Sa=xa.mul(k1$1).add(113),Ta=shiftMix$1(Sa.mul(k2$1).add(113)).mul(k2$1),wa=[Long$1.UZERO,Long$1.UZERO],Ea=[Long$1.UZERO,Long$1.UZERO];ba=ba.mul(k2$1).add(fetch64$1(ha,0));let ka=0;const Aa=(aa-1>>6)*64,Fa=Aa+(aa-1&63)-63;do ba=rotate64$1(ba.add(Sa).add(wa[0]).add(fetch64$1(ha,ka+8)),37).mul(k1$1),Sa=rotate64$1(Sa.add(wa[1]).add(fetch64$1(ha,ka+48)),42).mul(k1$1),ba=ba.xor(Ea[1]),Sa=Sa.add(wa[0]).add(fetch64$1(ha,ka+40)),Ta=rotate64$1(Ta.add(Ea[0]),33).mul(k1$1),wa=weakHashLen32WithSeedsStr$1(ha,ka,wa[1].mul(k1$1),ba.add(Ea[0])),Ea=weakHashLen32WithSeedsStr$1(ha,ka+32,Ta.add(Ea[1]),Sa.add(fetch64$1(ha,ka+16))),[Ta,ba]=[ba,Ta],ka+=64;while(ka!==Aa);const La=k1$1.add(Ta.and(255).shl(1));return ka=Fa,Ea[0]=Ea[0].add(aa-1&63),wa[0]=wa[0].add(Ea[0]),Ea[0]=Ea[0].add(wa[0]),ba=rotate64$1(ba.add(Sa).add(wa[0]).add(fetch64$1(ha,ka+8)),37).mul(La),Sa=rotate64$1(Sa.add(wa[1]).add(fetch64$1(ha,ka+48)),42).mul(La),ba=ba.xor(Ea[1].mul(9)),Sa=Sa.add(wa[0].mul(9).add(fetch64$1(ha,ka+40))),Ta=rotate64$1(Ta.add(Ea[0]),33).mul(La),wa=weakHashLen32WithSeedsStr$1(ha,ka,wa[1].mul(La),ba.add(Ea[0])),Ea=weakHashLen32WithSeedsStr$1(ha,ka+32,Ta.add(Ea[1]),Sa.add(fetch64$1(ha,ka+16))),[Ta,ba]=[ba,Ta],hashLen16$1(hashLen16$1(wa[0],Ea[0],La).add(shiftMix$1(Sa).mul(k0$1)).add(Ta),hashLen16$1(wa[1],Ea[1],La).add(ba),La)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createScalarValue$1(ha,aa){return aa==="string"?encodeString$1(ha):toTypedArray$1([ha],aa)}function noConversionNeeded$1(ha,aa){return ha instanceof Float32Array&&aa==="float32"||ha instanceof Int32Array&&aa==="int32"||ha instanceof Uint8Array&&aa==="bool"}function toTypedArray$1(ha,aa){if(aa==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(ha)&&(ha=flatten$2(ha)),env$1().getBool("DEBUG")&&checkConversionForErrors$1(ha,aa),noConversionNeeded$1(ha,aa))return ha;if(aa==null||aa==="float32"||aa==="complex64")return new Float32Array(ha);if(aa==="int32")return new Int32Array(ha);if(aa==="bool"){const xa=new Uint8Array(ha.length);for(let ba=0;ba<xa.length;++ba)Math.round(ha[ba])!==0&&(xa[ba]=1);return xa}else throw new Error(`Unknown data type ${aa}`)}function now$1(){return env$1().platform.now()}function encodeString$1(ha,aa="utf-8"){return aa=aa||"utf-8",env$1().platform.encode(ha,aa)}function decodeString$1(ha,aa="utf-8"){return aa=aa||"utf-8",env$1().platform.decode(ha,aa)}function isTypedArray$1(ha){return env$1().platform.isTypedArray!=null?env$1().platform.isTypedArray(ha):isTypedArrayBrowser$1(ha)}function flatten$2(ha,aa=[],xa=!1){if(aa==null&&(aa=[]),typeof ha=="boolean"||typeof ha=="number"||typeof ha=="string"||isPromise$1(ha)||ha==null||isTypedArray$1(ha)&&xa)aa.push(ha);else if(Array.isArray(ha)||isTypedArray$1(ha))for(let ba=0;ba<ha.length;++ba)flatten$2(ha[ba],aa,xa);else{let ba=-1;for(const Sa of Object.keys(ha))/^([1-9]+[0-9]*|0)$/.test(Sa)&&(ba=Math.max(ba,Number(Sa)));for(let Sa=0;Sa<=ba;Sa++)flatten$2(ha[Sa],aa,xa)}return aa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Profiler$1=class{constructor(aa,xa){this.backendTimer=aa,this.logger=xa,xa==null&&(this.logger=new Logger$1)}profileKernel(aa,xa,ba){let Sa;const Ta=()=>{Sa=ba()};let wa;const Ea=now$1();if(this.backendTimer.timerAvailable())wa=this.backendTimer.time(Ta);else{Ta();for(const Aa of Sa)Aa.dataSync();wa=Promise.resolve({kernelMs:now$1()-Ea})}if(env$1().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let Aa=0;Aa<Sa.length;Aa++){const Fa=Sa[Aa];Fa.data().then(La=>{checkComputationForErrors$1(La,Fa.dtype,aa)})}return{kernelName:aa,outputs:Sa,inputs:xa,timeMs:wa.then(Aa=>Aa.kernelMs),extraInfo:wa.then(Aa=>Aa.getExtraProfileInfo!=null?Aa.getExtraProfileInfo():"")}}logKernelProfile(aa){const{kernelName:xa,outputs:ba,timeMs:Sa,inputs:Ta,extraInfo:wa}=aa;ba.forEach(Ea=>{Promise.all([Ea.data(),Sa,wa]).then(ka=>{this.logger.logKernelProfile(xa,Ea,ka[0],ka[1],Ta,ka[2])})})}};function checkComputationForErrors$1(ha,aa,xa){if(aa!=="float32")return!1;for(let ba=0;ba<ha.length;ba++){const Sa=ha[ba];if(isNaN(Sa)||!isFinite(Sa))return console.warn(`Found ${Sa} in the result of '${xa}'`),!0}return!1}let Logger$1=class{logKernelProfile(aa,xa,ba,Sa,Ta,wa){const Ea=typeof Sa=="number"?rightPad$1(`${Sa}ms`,9):Sa.error,ka=rightPad$1(aa,25),Aa=xa.rank,Fa=xa.size,La=rightPad$1(xa.shape.toString(),14);let el="";for(const tl in Ta){const nl=Ta[tl];if(nl!=null){const rl=nl.shape||xa.shape,sl=rl.length;el+=`${tl}: ${sl}D ${sl>0?rl:""} `}}console.log(`%c${ka}	%c${Ea}	%c${Aa}D ${La}	%c${Fa}	%c${el}	%c${wa}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFilteredNodesXToY$1(ha,aa,xa){const ba={},Sa={};for(let ka=0;ka<aa.length;ka++)ba[aa[ka].id]=!0;for(let ka=0;ka<ha.length;ka++){const Aa=ha[ka],Fa=Aa.inputs;for(const La in Fa){const el=Fa[La];let tl=!1;for(let nl=0;nl<aa.length;nl++)if(ba[el.id]){Aa.outputs.forEach(rl=>ba[rl.id]=!0),tl=!0,Sa[Aa.id]=!0;break}if(tl)break}}const Ta={};Ta[xa.id]=!0;const wa={};for(let ka=ha.length-1;ka>=0;ka--){const Aa=ha[ka],Fa=Aa.inputs;for(let La=0;La<Aa.outputs.length;La++)if(Ta[Aa.outputs[La].id]){for(const el in Fa)Ta[Fa[el].id]=!0,wa[Aa.id]=!0;break}}const Ea=[];for(let ka=0;ka<ha.length;ka++){const Aa=ha[ka];if(Sa[Aa.id]&&wa[Aa.id]){const Fa={};for(const el in Aa.inputs){const tl=Aa.inputs[el];ba[tl.id]&&(Fa[el]=tl)}const La=Object.assign({},Aa);La.inputs=Fa,La.outputs=Aa.outputs,Ea.push(La)}}return Ea}function backpropagateGradients$1(ha,aa,xa,ba){for(let Sa=aa.length-1;Sa>=0;Sa--){const Ta=aa[Sa],wa=[];if(Ta.outputs.forEach(ka=>{const Aa=ha[ka.id];Aa!=null?wa.push(Aa):wa.push(null)}),Ta.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${Ta.kernelName}.`);const Ea=Ta.gradient(wa);for(const ka in Ta.inputs){if(!(ka in Ea))throw new Error(`Cannot backprop through input ${ka}. Available gradients found: ${Object.keys(Ea)}.`);const Aa=xa(()=>Ea[ka]());if(Aa.dtype!=="float32")throw new Error(`Error in gradient for op ${Ta.kernelName}. The gradient of input ${ka} must have 'float32' dtype, but has '${Aa.dtype}'`);const Fa=Ta.inputs[ka];if(!arraysEqual$1(Aa.shape,Fa.shape))throw new Error(`Error in gradient for op ${Ta.kernelName}. The gradient of input '${ka}' has shape '${Aa.shape}', which does not match the shape of the input '${Fa.shape}'`);if(ha[Fa.id]==null)ha[Fa.id]=Aa;else{const La=ha[Fa.id];ha[Fa.id]=ba(La,Aa),La.dispose()}}}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FORMAT_LIMIT_NUM_VALS$1=20,FORMAT_NUM_FIRST_LAST_VALS$1=3,FORMAT_NUM_SIG_DIGITS$1=7;function tensorToString$1(ha,aa,xa,ba){const Sa=computeStrides$1(aa),Ta=computeMaxSizePerColumn$1(ha,aa,xa,Sa),wa=aa.length,Ea=subTensorToString$1(ha,aa,xa,Sa,Ta),ka=["Tensor"];return ba&&(ka.push(`  dtype: ${xa}`),ka.push(`  rank: ${wa}`),ka.push(`  shape: [${aa}]`),ka.push("  values:")),ka.push(Ea.map(Aa=>"    "+Aa).join(`
`)),ka.join(`
`)}function computeMaxSizePerColumn$1(ha,aa,xa,ba){const Sa=sizeFromShape$1(aa),Ta=ba[ba.length-1],wa=new Array(Ta).fill(0),Ea=aa.length,ka=xa==="complex64"?createComplexTuples$1(ha):ha;if(Ea>1)for(let Aa=0;Aa<Sa/Ta;Aa++){const Fa=Aa*Ta;for(let La=0;La<Ta;La++)wa[La]=Math.max(wa[La],valToString$1(ka[Fa+La],0,xa).length)}return wa}function valToString$1(ha,aa,xa){let ba;return Array.isArray(ha)?ba=`${parseFloat(ha[0].toFixed(FORMAT_NUM_SIG_DIGITS$1))} + ${parseFloat(ha[1].toFixed(FORMAT_NUM_SIG_DIGITS$1))}j`:isString$1(ha)?ba=`'${ha}'`:xa==="bool"?ba=boolNumToString$1(ha):ba=parseFloat(ha.toFixed(FORMAT_NUM_SIG_DIGITS$1)).toString(),rightPad$1(ba,aa)}function boolNumToString$1(ha){return ha===0?"false":"true"}function subTensorToString$1(ha,aa,xa,ba,Sa,Ta=!0){const wa=xa==="complex64"?2:1,Ea=aa[0],ka=aa.length;if(ka===0){if(xa==="complex64"){const rl=createComplexTuples$1(ha);return[valToString$1(rl[0],0,xa)]}return xa==="bool"?[boolNumToString$1(ha[0])]:[ha[0].toString()]}if(ka===1){if(Ea>FORMAT_LIMIT_NUM_VALS$1){const sl=FORMAT_NUM_FIRST_LAST_VALS$1*wa;let ol=Array.from(ha.slice(0,sl)),al=Array.from(ha.slice((Ea-FORMAT_NUM_FIRST_LAST_VALS$1)*wa,Ea*wa));return xa==="complex64"&&(ol=createComplexTuples$1(ol),al=createComplexTuples$1(al)),["["+ol.map((ll,il)=>valToString$1(ll,Sa[il],xa)).join(", ")+", ..., "+al.map((ll,il)=>valToString$1(ll,Sa[Ea-FORMAT_NUM_FIRST_LAST_VALS$1+il],xa)).join(", ")+"]"]}return["["+(xa==="complex64"?createComplexTuples$1(ha):Array.from(ha)).map((sl,ol)=>valToString$1(sl,Sa[ol],xa)).join(", ")+"]"]}const Aa=aa.slice(1),Fa=ba.slice(1),La=ba[0]*wa,el=[];if(Ea>FORMAT_LIMIT_NUM_VALS$1){for(let rl=0;rl<FORMAT_NUM_FIRST_LAST_VALS$1;rl++){const sl=rl*La,ol=sl+La;el.push(...subTensorToString$1(ha.slice(sl,ol),Aa,xa,Fa,Sa,!1))}el.push("...");for(let rl=Ea-FORMAT_NUM_FIRST_LAST_VALS$1;rl<Ea;rl++){const sl=rl*La,ol=sl+La;el.push(...subTensorToString$1(ha.slice(sl,ol),Aa,xa,Fa,Sa,rl===Ea-1))}}else for(let rl=0;rl<Ea;rl++){const sl=rl*La,ol=sl+La;el.push(...subTensorToString$1(ha.slice(sl,ol),Aa,xa,Fa,Sa,rl===Ea-1))}const tl=ka===2?",":"";el[0]="["+(Ea>0?el[0]+tl:"");for(let rl=1;rl<el.length-1;rl++)el[rl]=" "+el[rl]+tl;let nl=`,
`;for(let rl=2;rl<ka;rl++)nl+=`
`;return el[el.length-1]=" "+el[el.length-1]+"]"+(Ta?"":nl),el}function createComplexTuples$1(ha){const aa=[];for(let xa=0;xa<ha.length;xa+=2)aa.push([ha[xa],ha[xa+1]]);return aa}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TensorBuffer$1=class{constructor(aa,xa,ba){if(this.dtype=xa,this.shape=aa.slice(),this.size=sizeFromShape$1(aa),ba!=null){const Sa=ba.length;assert$2(Sa===this.size,()=>`Length of values '${Sa}' does not match the size inferred by the shape '${this.size}'.`)}if(xa==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=ba||getArrayFromDType$1(xa,this.size),this.strides=computeStrides$1(aa)}set(aa,...xa){xa.length===0&&(xa=[0]),assert$2(xa.length===this.rank,()=>`The number of provided coordinates (${xa.length}) must match the rank (${this.rank})`);const ba=this.locToIndex(xa);this.values[ba]=aa}get(...aa){aa.length===0&&(aa=[0]);let xa=0;for(const Sa of aa){if(Sa<0||Sa>=this.shape[xa]){const Ta=`Requested out of range element at ${aa}.   Buffer shape=${this.shape}`;throw new Error(Ta)}xa++}let ba=aa[aa.length-1];for(let Sa=0;Sa<aa.length-1;++Sa)ba+=this.strides[Sa]*aa[Sa];return this.values[ba]}locToIndex(aa){if(this.rank===0)return 0;if(this.rank===1)return aa[0];let xa=aa[aa.length-1];for(let ba=0;ba<aa.length-1;++ba)xa+=this.strides[ba]*aa[ba];return xa}indexToLoc(aa){if(this.rank===0)return[];if(this.rank===1)return[aa];const xa=new Array(this.shape.length);for(let ba=0;ba<xa.length-1;++ba)xa[ba]=Math.floor(aa/this.strides[ba]),aa-=xa[ba]*this.strides[ba];return xa[xa.length-1]=aa,xa}get rank(){return this.shape.length}toTensor(){return trackerFn$1().makeTensor(this.values,this.shape,this.dtype)}},trackerFn$1=null,opHandler$3=null;function setTensorTracker$1(ha){trackerFn$1=ha}function setOpHandler$1(ha){opHandler$3=ha}let Tensor$1=class{constructor(aa,xa,ba,Sa){this.kept=!1,this.isDisposedInternal=!1,this.shape=aa.slice(),this.dtype=xa||"float32",this.size=sizeFromShape$1(aa),this.strides=computeStrides$1(aa),this.dataId=ba,this.id=Sa,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const aa=await this.data();return opHandler$3.buffer(this.shape,this.dtype,aa)}bufferSync(){return opHandler$3.buffer(this.shape,this.dtype,this.dataSync())}async array(){const aa=await this.data();return toNestedArray$1(this.shape,aa,this.dtype==="complex64")}arraySync(){return toNestedArray$1(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();const aa=trackerFn$1().read(this.dataId);if(this.dtype==="string"){const xa=await aa;try{return xa.map(ba=>decodeString$1(ba))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return aa}dataToGPU(aa){return this.throwIfDisposed(),trackerFn$1().readToGPU(this.dataId,aa)}dataSync(){this.throwIfDisposed();const aa=trackerFn$1().readSync(this.dataId);if(this.dtype==="string")try{return aa.map(xa=>decodeString$1(xa))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return aa}async bytes(){this.throwIfDisposed();const aa=await trackerFn$1().read(this.dataId);return this.dtype==="string"?aa:new Uint8Array(aa.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),trackerFn$1().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(aa=!1){return opHandler$3.print(this,aa)}clone(){return this.throwIfDisposed(),opHandler$3.clone(this)}toString(aa=!1){const xa=this.dataSync();return tensorToString$1(xa,this.shape,this.dtype,aa)}cast(aa){return this.throwIfDisposed(),opHandler$3.cast(this,aa)}variable(aa=!0,xa,ba){return this.throwIfDisposed(),trackerFn$1().makeVariable(this,aa,xa,ba)}};Object.defineProperty(Tensor$1,Symbol.hasInstance,{value:ha=>!!ha&&ha.data!=null&&ha.dataSync!=null&&ha.throwIfDisposed!=null});function getGlobalTensorClass$1(){return getGlobal$1("Tensor",()=>Tensor$1)}getGlobalTensorClass$1();let Variable$1=class extends Tensor$1{constructor(aa,xa,ba,Sa){super(aa.shape,aa.dtype,aa.dataId,Sa),this.trainable=xa,this.name=ba}assign(aa){if(aa.dtype!==this.dtype)throw new Error(`dtype of the new value (${aa.dtype}) and previous value (${this.dtype}) must match`);if(!arraysEqual$1(aa.shape,this.shape))throw new Error(`shape of the new value (${aa.shape}) and previous value (${this.shape}) must match`);trackerFn$1().disposeTensor(this),this.dataId=aa.dataId,trackerFn$1().incRef(this,null)}dispose(){trackerFn$1().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(Variable$1,Symbol.hasInstance,{value:ha=>ha instanceof Tensor$1&&ha.assign!=null&&ha.assign instanceof Function});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Rank$1;(function(ha){ha.R0="R0",ha.R1="R1",ha.R2="R2",ha.R3="R3",ha.R4="R4",ha.R5="R5",ha.R6="R6"})(Rank$1||(Rank$1={}));var UpcastInt32AndMap$1;(function(ha){ha.float32="float32",ha.int32="int32",ha.bool="int32",ha.complex64="complex64"})(UpcastInt32AndMap$1||(UpcastInt32AndMap$1={}));var UpcastBoolAndMap$1;(function(ha){ha.float32="float32",ha.int32="int32",ha.bool="bool",ha.complex64="complex64"})(UpcastBoolAndMap$1||(UpcastBoolAndMap$1={}));var UpcastFloat32AndMap$1;(function(ha){ha.float32="float32",ha.int32="float32",ha.bool="float32",ha.complex64="complex64"})(UpcastFloat32AndMap$1||(UpcastFloat32AndMap$1={}));var UpcastComplex64AndMap$1;(function(ha){ha.float32="complex64",ha.int32="complex64",ha.bool="complex64",ha.complex64="complex64"})(UpcastComplex64AndMap$1||(UpcastComplex64AndMap$1={}));const upcastTypeMap$1={float32:UpcastFloat32AndMap$1,int32:UpcastInt32AndMap$1,bool:UpcastBoolAndMap$1,complex64:UpcastComplex64AndMap$1};function upcastType$1(ha,aa){if(ha==="string"||aa==="string"){if(ha==="string"&&aa==="string")return"string";throw new Error(`Can not upcast ${ha} with ${aa}`)}return upcastTypeMap$1[ha][aa]}function sumOutType$1(ha){return upcastType$1(ha,"int32")}function isWebGLData$1(ha){return ha!=null&&typeof ha=="object"&&"texture"in ha&&ha.texture instanceof WebGLTexture}function isWebGPUData$1(ha){return typeof GPUBuffer<"u"&&ha!=null&&typeof ha=="object"&&"buffer"in ha&&ha.buffer instanceof GPUBuffer}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTypesMatch$1(ha,aa){if(ha.dtype===aa.dtype)return[ha,aa];const xa=upcastType$1(ha.dtype,aa.dtype);return[ha.cast(xa),aa.cast(xa)]}function assertTypesMatch(ha,aa){assert$2(ha.dtype===aa.dtype,()=>`The dtypes of the first(${ha.dtype}) and second(${aa.dtype}) input must match`)}function getTensorsInContainer$1(ha){const aa=[];return walkTensorContainer$1(ha,aa,new Set),aa}function walkTensorContainer$1(ha,aa,xa){if(ha==null)return;if(ha instanceof Tensor$1){aa.push(ha);return}if(!isIterable$1(ha))return;const ba=ha;for(const Sa in ba){const Ta=ba[Sa];xa.has(Ta)||(xa.add(Ta),walkTensorContainer$1(Ta,aa,xa))}}function isIterable$1(ha){return Array.isArray(ha)||typeof ha=="object"}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isRegisteredKernelInvocation$1(ha){return ha.kernelName!=null}let EngineState$1=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(aa=>aa.name)))}}}dispose(){for(const aa in this.registeredVariables)this.registeredVariables[aa].dispose()}},Engine$1=class ac{constructor(aa){this.ENV=aa,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new EngineState$1}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;const aa=this.getSortedBackends();for(let xa=0;xa<aa.length;xa++){const ba=aa[xa];if(await this.initializeBackend(ba).success){await this.setBackend(ba);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){const{name:aa,asyncInit:xa}=this.initializeBackendsAndReturnBest();if(xa)throw new Error(`The highest priority backend '${aa}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(aa)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(aa){if(!(aa in this.registry))if(aa in this.registryFactory){const{asyncInit:xa}=this.initializeBackend(aa);if(xa)return null}else return null;return this.registry[aa]}findBackendFactory(aa){return aa in this.registryFactory?this.registryFactory[aa].factory:null}registerBackend(aa,xa,ba=1){return aa in this.registryFactory?(warn$1(`${aa} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[aa]={factory:xa,priority:ba},!0)}async setBackend(aa){if(this.registryFactory[aa]==null)throw new Error(`Backend name '${aa}' not found in registry`);if(this.backendName=aa,this.registry[aa]==null){this.backendInstance=null;const{success:xa,asyncInit:ba}=this.initializeBackend(aa);if(!(ba?await xa:xa))return!1}return this.backendInstance=this.registry[aa],this.setupRegisteredKernels(),this.profiler=new Profiler$1(this.backendInstance),!0}setupRegisteredKernels(){getKernelsForBackend$1(this.backendName).forEach(xa=>{xa.setupFunc!=null&&xa.setupFunc(this.backendInstance)})}disposeRegisteredKernels(aa){getKernelsForBackend$1(aa).forEach(ba=>{ba.disposeFunc!=null&&ba.disposeFunc(this.registry[aa])})}initializeBackend(aa){const xa=this.registryFactory[aa];if(xa==null)throw new Error(`Cannot initialize backend ${aa}, no registration found.`);try{const ba=xa.factory();if(ba&&!(ba instanceof KernelBackend$1)&&typeof ba.then=="function"){const Sa=++this.pendingBackendInitId,Ta=ba.then(wa=>Sa<this.pendingBackendInitId?!1:(this.registry[aa]=wa,this.pendingBackendInit=null,!0)).catch(wa=>(Sa<this.pendingBackendInitId||(this.pendingBackendInit=null,warn$1(`Initialization of backend ${aa} failed`),warn$1(wa.stack||wa.message)),!1));return this.pendingBackendInit=Ta,{success:Ta,asyncInit:!0}}else return this.registry[aa]=ba,{success:!0,asyncInit:!1}}catch(ba){return warn$1(`Initialization of backend ${aa} failed`),warn$1(ba.stack||ba.message),{success:!1,asyncInit:!1}}}removeBackend(aa){if(!(aa in this.registryFactory))throw new Error(`${aa} backend not found in registry`);this.backendName===aa&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,aa in this.registry&&(this.disposeRegisteredKernels(aa),this.registry[aa].dispose(),delete this.registry[aa]),delete this.registryFactory[aa],this.backendName===aa&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((aa,xa)=>this.registryFactory[xa].priority-this.registryFactory[aa].priority)}initializeBackendsAndReturnBest(){const aa=this.getSortedBackends();for(let xa=0;xa<aa.length;xa++){const ba=aa[xa],{success:Sa,asyncInit:Ta}=this.initializeBackend(ba);if(Ta||Sa)return{name:ba,asyncInit:Ta}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(aa,xa){const ba=this.state.tensorInfo.get(xa),Sa=ba.backend,Ta=this.readSync(xa),wa=Sa.refCount(xa);Sa.disposeData(xa,!0),ba.backend=aa,aa.move(xa,Ta,ba.shape,ba.dtype,wa),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(aa,xa){let ba=null;if(xa==null){if(typeof aa!="function")throw new Error("Please provide a function to tidy()");xa=aa}else{if(typeof aa!="string"&&!(aa instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof xa!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");ba=aa}let Sa;return this.scopedRun(()=>this.startScope(ba),()=>this.endScope(Sa),()=>(Sa=xa(),Sa instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Sa))}scopedRun(aa,xa,ba){aa();try{const Sa=ba();return xa(),Sa}catch(Sa){throw xa(),Sa}}nextTensorId(){return ac.nextTensorId++}nextVariableId(){return ac.nextVariableId++}clone(aa){const xa=ENGINE$1.runKernel(Identity$2,{x:aa}),ba={x:aa},Sa=wa=>({x:()=>{const Ea="float32",ka={x:wa},Aa={dtype:Ea};return ENGINE$1.runKernel(Cast$1,ka,Aa)}}),Ta=[];return this.addTapeNode(this.state.activeScope.name,ba,[xa],Sa,Ta,{}),xa}runKernel(aa,xa,ba){if(this.backendName==null&&this.backend,!(getKernel$1(aa,this.backendName)!=null))throw new Error(`Kernel '${aa}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:aa,inputs:xa,attrs:ba})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(aa,xa,ba){const Sa=this.backend.numDataIds();let Ta=0;ba.forEach(ka=>{Ta+=ka.dtype==="complex64"?3:1});const wa=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],Ea=Sa-xa-Ta-wa;if(Ea>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${Ea} data ids) after running '${aa}'`)}runKernelFunc(aa){let xa,ba=[];const Sa=this.isTapeOn(),Ta=this.state.numBytes,wa=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let Ea;this.backendName==null&&this.backend;let ka;const Aa=isRegisteredKernelInvocation$1(aa)?aa.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(isRegisteredKernelInvocation$1(aa)){const{kernelName:nl,inputs:rl,attrs:sl}=aa;this.backendName==null&&this.backend;const ol=getKernel$1(nl,this.backendName);assert$2(ol!=null,()=>`Cannot find registered kernel '${nl}' for backend '${this.backendName}'`),Ea=()=>{const al=this.backend.numDataIds();ka=ol.kernelFunc({inputs:rl,attrs:sl,backend:this.backend});const ll=Array.isArray(ka)?ka:[ka];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(nl,al,ll);const il=ll.map(cl=>cl.rank!=null?cl:this.makeTensorFromTensorInfo(cl));if(Sa){const cl=this.getTensorsForGradient(nl,rl,il);ba=this.saveTensorsForBackwardMode(cl)}return il}}else{const{forwardFunc:nl}=aa,rl=sl=>{Sa&&(ba=sl.map(ol=>this.keep(this.clone(ol))))};Ea=()=>{const sl=this.backend.numDataIds();ka=this.tidy(()=>nl(this.backend,rl));const ol=Array.isArray(ka)?ka:[ka];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(Aa,sl,ol),ol}}const{inputs:Fa,attrs:La}=aa,el=isRegisteredKernelInvocation$1(aa)?null:aa.backwardsFunc;let tl;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?xa=Ea():(tl=this.profiler.profileKernel(Aa,Fa,()=>Ea()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(tl),xa=tl.outputs)}),Sa&&this.addTapeNode(Aa,Fa,xa,el,ba,La),this.state.profiling&&this.state.activeProfile.kernels.push({name:Aa,bytesAdded:this.state.numBytes-Ta,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-wa,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(Fa).map(nl=>Fa[nl]!=null?Fa[nl].shape:null),outputShapes:xa.map(nl=>nl.shape),kernelTimeMs:tl.timeMs,extraInfo:tl.extraInfo}),Array.isArray(ka)?xa:xa[0]}saveTensorsForBackwardMode(aa){return aa.map(ba=>this.keep(this.clone(ba)))}getTensorsForGradient(aa,xa,ba){const Sa=getGradient$1(aa);if(Sa!=null){const Ta=Sa.inputsToSave||[],wa=Sa.outputsToSave||[];let Ea;Sa.saveAllInputs?(assert$2(Array.isArray(xa),()=>"saveAllInputs is true, expected inputs to be an array."),Ea=Object.keys(xa).map(Aa=>xa[Aa])):Ea=Ta.map(Aa=>xa[Aa]);const ka=ba.filter((Aa,Fa)=>wa[Fa]);return Ea.concat(ka)}return[]}makeTensor(aa,xa,ba,Sa){if(aa==null)throw new Error("Values passed to engine.makeTensor() are null");ba=ba||"float32",Sa=Sa||this.backend;let Ta=aa;ba==="string"&&isString$1(aa[0])&&(Ta=aa.map(ka=>encodeString$1(ka)));const wa=Sa.write(Ta,xa,ba),Ea=new Tensor$1(xa,ba,wa,this.nextTensorId());if(this.trackTensor(Ea,Sa),ba==="string"){const ka=this.state.tensorInfo.get(wa),Aa=bytesFromStringArray$1(Ta);this.state.numBytes+=Aa-ka.bytes,ka.bytes=Aa}return Ea}makeTensorFromDataId(aa,xa,ba,Sa){ba=ba||"float32";const Ta={dataId:aa,shape:xa,dtype:ba};return this.makeTensorFromTensorInfo(Ta,Sa)}makeTensorFromTensorInfo(aa,xa){const{dataId:ba,shape:Sa,dtype:Ta}=aa,wa=new Tensor$1(Sa,Ta,ba,this.nextTensorId());return this.trackTensor(wa,xa),wa}makeVariable(aa,xa=!0,ba,Sa){ba=ba||this.nextVariableId().toString(),Sa!=null&&Sa!==aa.dtype&&(aa=aa.cast(Sa));const Ta=new Variable$1(aa,xa,ba,this.nextTensorId());if(this.state.registeredVariables[Ta.name]!=null)throw new Error(`Variable with name ${Ta.name} was already registered`);return this.state.registeredVariables[Ta.name]=Ta,this.incRef(Ta,this.backend),Ta}trackTensor(aa,xa){this.state.numTensors++,aa.dtype==="string"&&this.state.numStringTensors++;let ba=0;aa.dtype!=="complex64"&&aa.dtype!=="string"&&(ba=aa.size*bytesPerElement$1(aa.dtype)),this.state.numBytes+=ba,this.state.tensorInfo.has(aa.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(aa.dataId,{backend:xa||this.backend,dtype:aa.dtype,shape:aa.shape,bytes:ba})),aa instanceof Variable$1||this.track(aa)}incRef(aa,xa){this.trackTensor(aa,xa),this.backend.incRef(aa.dataId)}removeDataId(aa,xa){this.state.tensorInfo.has(aa)&&this.state.tensorInfo.get(aa).backend===xa&&(this.state.tensorInfo.delete(aa),this.state.numDataBuffers--)}disposeTensor(aa){if(!this.state.tensorInfo.has(aa.dataId))return;const xa=this.state.tensorInfo.get(aa.dataId);if(this.state.numTensors--,aa.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=xa.bytes),aa.dtype!=="complex64"&&aa.dtype!=="string"){const ba=aa.size*bytesPerElement$1(aa.dtype);this.state.numBytes-=ba}xa.backend.disposeData(aa.dataId)&&this.removeDataId(aa.dataId,xa.backend)}disposeVariables(){for(const aa in this.state.registeredVariables){const xa=this.state.registeredVariables[aa];this.disposeVariable(xa)}}disposeVariable(aa){this.disposeTensor(aa),this.state.registeredVariables[aa.name]!=null&&delete this.state.registeredVariables[aa.name]}memory(){const aa=this.backend.memory();return aa.numTensors=this.state.numTensors,aa.numDataBuffers=this.state.numDataBuffers,aa.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(aa.unreliable=!0,aa.reasons==null&&(aa.reasons=[]),aa.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),aa}async profile(aa){this.state.profiling=!0;const xa=this.state.numBytes,ba=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await aa(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(Sa=>Sa.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-xa,this.state.activeProfile.newTensors=this.state.numTensors-ba;for(const Sa of this.state.activeProfile.kernels)Sa.kernelTimeMs=await Sa.kernelTimeMs,Sa.extraInfo=await Sa.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(aa,xa,ba,Sa,Ta,wa){const Ea={id:this.state.nextTapeNodeId++,kernelName:aa,inputs:xa,outputs:ba,saved:Ta},ka=getGradient$1(aa);ka!=null&&(Sa=ka.gradFunc),Sa!=null&&(Ea.gradient=Aa=>(Aa=Aa.map((Fa,La)=>{if(Fa==null){const el=ba[La],tl=makeZerosTypedArray$1(el.size,el.dtype);return this.makeTensor(tl,el.shape,el.dtype)}return Fa}),Sa(Aa.length>1?Aa:Aa[0],Ta,wa))),this.state.activeTape.push(Ea)}keep(aa){return aa.kept=!0,aa}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(aa){const xa={track:[],name:"unnamed scope",id:this.state.nextScopeId++};aa&&(xa.name=aa),this.state.scopeStack.push(xa),this.state.activeScope=xa}endScope(aa){const xa=getTensorsInContainer$1(aa),ba=new Set(xa.map(Ta=>Ta.id));for(let Ta=0;Ta<this.state.activeScope.track.length;Ta++){const wa=this.state.activeScope.track[Ta];!wa.kept&&!ba.has(wa.id)&&wa.dispose()}const Sa=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],xa.forEach(Ta=>{!Ta.kept&&Ta.scopeId===Sa.id&&this.track(Ta)})}gradients(aa,xa,ba,Sa=!1){if(assert$2(xa.length>0,()=>"gradients() received an empty list of xs."),ba!=null&&ba.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${ba.dtype}'`);const Ta=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",aa));assert$2(Ta instanceof Tensor$1,()=>"The result y returned by f() must be a tensor.");const wa=getFilteredNodesXToY$1(this.state.activeTape,xa,Ta);if(!Sa&&wa.length===0&&xa.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const Ea={};Ea[Ta.id]=ba??ones$2(Ta.shape),backpropagateGradients$1(Ea,wa,Aa=>this.tidy(Aa),add$4);const ka=xa.map(Aa=>Ea[Aa.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(Aa=>{for(const Fa of Aa.saved)Fa.dispose()}),this.state.activeTape=null),{value:Ta,grads:ka}})}customGrad(aa){return assert$2(isFunction$1(aa),()=>"The f passed in customGrad(f) must be a function."),(...xa)=>{assert$2(xa.every(Ea=>Ea instanceof Tensor$1),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let ba;const Sa={};xa.forEach((Ea,ka)=>{Sa[ka]=Ea});const Ta=(Ea,ka)=>(ba=aa(...xa,ka),assert$2(ba.value instanceof Tensor$1,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),assert$2(isFunction$1(ba.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),ba.value),wa=(Ea,ka)=>{const Aa=ba.gradFunc(Ea,ka),Fa=Array.isArray(Aa)?Aa:[Aa];assert$2(Fa.length===xa.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),assert$2(Fa.every(el=>el instanceof Tensor$1),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const La={};return Fa.forEach((el,tl)=>{La[tl]=()=>el}),La};return this.runKernelFunc({forwardFunc:Ta,backwardsFunc:wa,inputs:Sa})}}readSync(aa){return this.state.tensorInfo.get(aa).backend.readSync(aa)}read(aa){return this.state.tensorInfo.get(aa).backend.read(aa)}readToGPU(aa,xa){return this.state.tensorInfo.get(aa).backend.readToGPU(aa,xa)}async time(aa){const xa=now$1(),ba=await this.backend.time(aa);return ba.wallMs=now$1()-xa,ba}track(aa){return this.state.activeScope!=null&&(aa.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(aa)),aa}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new EngineState$1;for(const aa in this.registry)this.disposeRegisteredKernels(aa),this.registry[aa].dispose(),delete this.registry[aa];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};Engine$1.nextTensorId=0,Engine$1.nextVariableId=0;function ones$2(ha){const aa=makeOnesTypedArray$1(sizeFromShape$1(ha),"float32");return ENGINE$1.makeTensor(aa,ha,"float32")}function getOrMakeEngine$1(){const ha=getGlobalNamespace$1();if(ha._tfengine==null){const aa=new Environment$1(ha);ha._tfengine=new Engine$1(aa)}return setEnvironmentGlobal$1(ha._tfengine.ENV),setTensorTracker$1(()=>ha._tfengine),ha._tfengine}const ENGINE$1=getOrMakeEngine$1();function add$4(ha,aa){const xa={a:ha,b:aa};return ENGINE$1.runKernel(Add$2,xa)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _isNavigatorDefined$1(){return typeof navigator<"u"&&navigator!=null}function isMobile$1(ha){if(ha||_isNavigatorDefined$1()){if(ha||(ha=navigator),ha.product==="ReactNative")return!0;const aa=ha.userAgent||ha.vendor||(typeof window<"u"?window.opera:"");if(!aa){const xa=ha;return xa.userAgentData&&xa.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(aa)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(aa.substr(0,4))}return!1}function isBrowser$1(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$6=env$1();ENV$6.registerFlag("DEBUG",()=>!1,ha=>{ha&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),ENV$6.registerFlag("IS_BROWSER",()=>isBrowser$1()),ENV$6.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),ENV$6.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),ENV$6.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),ENV$6.registerFlag("PROD",()=>!1),ENV$6.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>ENV$6.getBool("DEBUG")),ENV$6.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),ENV$6.registerFlag("IS_TEST",()=>!1),ENV$6.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>ENV$6.getBool("DEBUG")),ENV$6.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),ENV$6.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),ENV$6.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function inferShape$1(ha,aa){let xa=ha;if(isTypedArray$1(ha))return aa==="string"?[]:[ha.length];if(isWebGLData$1(ha)){const Sa=ha.channels||"RGBA";return[ha.height,ha.width*Sa.length]}else if(isWebGPUData$1(ha))return[ha.buffer.size/(aa==null?4:bytesPerElement$1(aa))];if(!Array.isArray(ha))return[];const ba=[];for(;Array.isArray(xa)||isTypedArray$1(xa)&&aa!=="string";)ba.push(xa.length),xa=xa[0];return Array.isArray(ha)&&env$1().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&deepAssertShapeConsistency$1(ha,ba,[]),ba}function deepAssertShapeConsistency$1(ha,aa,xa){if(xa=xa||[],!Array.isArray(ha)&&!isTypedArray$1(ha)){assert$2(aa.length===0,()=>`Element arr[${xa.join("][")}] is a primitive, but should be an array/TypedArray of ${aa[0]} elements`);return}assert$2(aa.length>0,()=>`Element arr[${xa.join("][")}] should be a primitive, but is an array of ${ha.length} elements`),assert$2(ha.length===aa[0],()=>`Element arr[${xa.join("][")}] should have ${aa[0]} elements, but has ${ha.length} elements`);const ba=aa.slice(1);for(let Sa=0;Sa<ha.length;++Sa)deepAssertShapeConsistency$1(ha[Sa],ba,xa.concat(Sa))}function assertDtype$1(ha,aa,xa,ba){if(ha!=="string_or_numeric"){if(ha==null)throw new Error("Expected dtype cannot be null.");if(ha!=="numeric"&&ha!==aa||ha==="numeric"&&aa==="string")throw new Error(`Argument '${xa}' passed to '${ba}' must be ${ha} tensor, but got ${aa} tensor`)}}function convertToTensor$1(ha,aa,xa,ba="numeric"){if(ha instanceof getGlobalTensorClass$1())return assertDtype$1(ba,ha.dtype,aa,xa),ha;let Sa=inferDtype$1(ha);if(Sa!=="string"&&["bool","int32","float32"].indexOf(ba)>=0&&(Sa=ba),assertDtype$1(ba,Sa,aa,xa),ha==null||!isTypedArray$1(ha)&&!Array.isArray(ha)&&typeof ha!="number"&&typeof ha!="boolean"&&typeof ha!="string"){const ka=ha==null?"null":ha.constructor.name;throw new Error(`Argument '${aa}' passed to '${xa}' must be a Tensor or TensorLike, but got '${ka}'`)}const Ta=inferShape$1(ha,Sa);!isTypedArray$1(ha)&&!Array.isArray(ha)&&(ha=[ha]);const Ea=Sa!=="string"?toTypedArray$1(ha,Sa):flatten$2(ha,[],!0);return ENGINE$1.makeTensor(Ea,Ta,Sa)}function convertToTensorArray(ha,aa,xa,ba="numeric"){if(!Array.isArray(ha))throw new Error(`Argument ${aa} passed to ${xa} must be a \`Tensor[]\` or \`TensorLike[]\``);return ha.map((Ta,wa)=>convertToTensor$1(Ta,`${aa}[${wa}]`,xa,ba))}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OP_SCOPE_SUFFIX$1="__op";function op$1(ha){const aa=Object.keys(ha);if(aa.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${aa.length} keys.`);let xa=aa[0];const ba=ha[xa];xa.endsWith("_")&&(xa=xa.substring(0,xa.length-1)),xa=xa+OP_SCOPE_SUFFIX$1;const Sa=(...Ta)=>{ENGINE$1.startScope(xa);try{const wa=ba(...Ta);return isPromise$1(wa)&&console.error("Cannot return a Promise inside of tidy."),ENGINE$1.endScope(wa),wa}catch(wa){throw ENGINE$1.endScope(null),wa}};return Object.defineProperty(Sa,"name",{value:xa,configurable:!0}),Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex_$1(ha,aa){const xa=convertToTensor$1(ha,"real","complex"),ba=convertToTensor$1(aa,"imag","complex");assertShapesMatch$1(xa.shape,ba.shape,`real and imag shapes, ${xa.shape} and ${ba.shape}, must match in call to tf.complex().`);const Sa={real:xa,imag:ba};return ENGINE$1.runKernel(Complex$1,Sa)}const complex$4=op$1({complex_:complex_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTensor$1(ha,aa,xa,ba){if(ba==null)ba=inferDtype$1(ha);else if(ba==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(isWebGPUData$1(ha)||isWebGLData$1(ha)){if(ba!=="float32"&&ba!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${ba}.`);return ENGINE$1.backend.createTensorFromGPUData(ha,aa||xa,ba)}if(!isTypedArray$1(ha)&&!Array.isArray(ha)&&typeof ha!="number"&&typeof ha!="boolean"&&typeof ha!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(aa!=null){assertNonNegativeIntegerDimensions$1(aa);const Sa=sizeFromShape$1(aa),Ta=sizeFromShape$1(xa);assert$2(Sa===Ta,()=>`Based on the provided shape, [${aa}], the tensor should have ${Sa} values but has ${Ta}`);for(let wa=0;wa<xa.length;++wa){const Ea=xa[wa],ka=wa===xa.length-1?Ea!==sizeFromShape$1(aa.slice(wa)):!0;assert$2(xa[wa]===aa[wa]||!ka,()=>`Error creating a new Tensor. Inferred shape (${xa}) does not match the provided shape (${aa}). `)}}return!isTypedArray$1(ha)&&!Array.isArray(ha)&&(ha=[ha]),aa=aa||xa,ha=ba!=="string"?toTypedArray$1(ha,ba):flatten$2(ha,[],!0),ENGINE$1.makeTensor(ha,aa,ba)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor(ha,aa,xa){const ba=inferShape$1(ha,xa);return makeTensor$1(ha,aa,ba,xa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DTYPE_VALUE_SIZE_MAP={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};let CompositeArrayBuffer$1=class cc{static join(aa){return new cc(aa).slice()}constructor(aa){if(this.shards=[],this.previousShardIndex=0,aa==null||(aa instanceof Array||(aa=[aa]),aa=aa.map(ba=>isTypedArray$1(ba)?ba.buffer:ba),aa.length===0))return;this.bufferUniformSize=aa[0].byteLength;let xa=0;for(let ba=0;ba<aa.length;ba++){const Sa=aa[ba];ba!==aa.length-1&&Sa.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const Ta=xa+Sa.byteLength;this.shards.push({buffer:Sa,start:xa,end:Ta}),xa=Ta}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(aa=0,xa=this.byteLength){if(this.shards.length===0)return new ArrayBuffer(0);if(aa=isNaN(Number(aa))?0:aa,xa=isNaN(Number(xa))?0:xa,aa=Math.max(0,aa),xa=Math.min(this.byteLength,xa),xa<=aa)return new ArrayBuffer(0);const ba=this.findShardForByte(aa);if(ba===-1)throw new Error(`Could not find start shard for byte ${aa}`);const Sa=xa-aa,Ta=new ArrayBuffer(Sa),wa=new Uint8Array(Ta);let Ea=0;for(let ka=ba;ka<this.shards.length;ka++){const Aa=this.shards[ka],La=aa+Ea-Aa.start,el=Ea,nl=Math.min(xa,Aa.end)-Aa.start,rl=new Uint8Array(Aa.buffer,La,nl-La);if(wa.set(rl,el),Ea+=rl.length,xa<Aa.end)break}return Ta}findShardForByte(aa){if(this.shards.length===0||aa<0||aa>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(aa/this.bufferUniformSize),this.previousShardIndex;function xa(Sa){return aa<Sa.start?-1:aa>=Sa.end?1:0}if(xa(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;const ba=search$1(this.shards,xa);return ba===-1?-1:(this.previousShardIndex=ba,this.previousShardIndex)}};function search$1(ha,aa){let xa=0,ba=ha.length;for(;xa<=ba;){const Sa=Math.floor((ba-xa)/2)+xa,Ta=aa(ha[Sa]);if(Ta===0)return Sa;Ta<0?ba=Sa:xa=Sa+1}return-1}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function engine$1(){return ENGINE$1}function memory(){return ENGINE$1.memory()}function tidy$1(ha,aa){return ENGINE$1.tidy(ha,aa)}function dispose$1(ha){getTensorsInContainer$1(ha).forEach(xa=>xa.dispose())}function keep$1(ha){return ENGINE$1.keep(ha)}function setBackend(ha){return ENGINE$1.setBackend(ha)}function getBackend(){return ENGINE$1.backendName}function registerBackend$1(ha,aa,xa=1){return ENGINE$1.registerBackend(ha,aa,xa)}function backend(){return ENGINE$1.backend}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NUM_BYTES_STRING_LENGTH=4;async function encodeWeights(ha,aa){const xa=[],ba=[],Sa=Array.isArray(ha)?ha.map(wa=>wa.name):Object.keys(ha);for(let wa=0;wa<Sa.length;++wa){const Ea=Sa[wa],ka=Array.isArray(ha)?ha[wa].tensor:ha[Ea];if(ka.dtype!=="float32"&&ka.dtype!=="int32"&&ka.dtype!=="bool"&&ka.dtype!=="string"&&ka.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${Ea}': ${ka.dtype}`);const Aa={name:Ea,shape:ka.shape,dtype:ka.dtype};if(ka.dtype==="string"){const Fa=new Promise(async La=>{const el=await ka.bytes(),tl=el.reduce((sl,ol)=>sl+ol.length,0)+NUM_BYTES_STRING_LENGTH*el.length,nl=new Uint8Array(tl);let rl=0;for(let sl=0;sl<el.length;sl++){const ol=el[sl],al=new Uint8Array(new Uint32Array([ol.length]).buffer);nl.set(al,rl),rl+=NUM_BYTES_STRING_LENGTH,nl.set(ol,rl),rl+=ol.length}La(nl)});ba.push(Fa)}else ba.push(ka.data());aa!=null&&(Aa.group=aa),xa.push(Aa)}const Ta=await Promise.all(ba);return{data:concatenateTypedArrays(Ta),specs:xa}}function decodeWeights(ha,aa){const xa=new CompositeArrayBuffer$1(ha),ba={};let Sa=0;for(const Ta of aa){const wa=getWeightBytelength(Ta,(Ea,ka)=>xa.slice(Sa+Ea,Sa+ka));ba[Ta.name]=decodeWeight(Ta,xa.slice(Sa,Sa+wa)),Sa+=wa}return ba}function getWeightBytelength(ha,aa){const xa=sizeFromShape$1(ha.shape);let ba;if("quantization"in ha){const Sa=ha.quantization;ba=DTYPE_VALUE_SIZE_MAP[Sa.dtype]}else if(ha.dtype==="string"){let Sa=0;for(let Ta=0;Ta<xa;Ta++)Sa+=NUM_BYTES_STRING_LENGTH+new Uint32Array(aa(Sa,Sa+NUM_BYTES_STRING_LENGTH))[0];return Sa}else ba=DTYPE_VALUE_SIZE_MAP[ha.dtype];return xa*ba}async function getWeightBytelengthAsync(ha,aa){const xa=sizeFromShape$1(ha.shape);let ba;if("quantization"in ha){const Sa=ha.quantization;ba=DTYPE_VALUE_SIZE_MAP[Sa.dtype]}else if(ha.dtype==="string"){let Sa=0;for(let Ta=0;Ta<xa;Ta++)Sa+=NUM_BYTES_STRING_LENGTH+new Uint32Array(await aa(Sa,Sa+NUM_BYTES_STRING_LENGTH))[0];return Sa}else ba=DTYPE_VALUE_SIZE_MAP[ha.dtype];return xa*ba}function decodeWeight(ha,aa){const xa=ha.name,ba=ha.dtype,Sa=ha.shape,Ta=sizeFromShape$1(Sa);let wa,Ea=0;if("quantization"in ha){const ka=ha.quantization;if(ka.dtype==="uint8"||ka.dtype==="uint16"){if(!("min"in ka&&"scale"in ka))throw new Error(`Weight ${ha.name} with quantization ${ka.dtype} doesn't have corresponding metadata min and scale.`)}else if(ka.dtype==="float16"){if(ba!=="float32")throw new Error(`Weight ${ha.name} is quantized with ${ka.dtype} which only supports weights of type float32 not ${ba}.`)}else throw new Error(`Weight ${ha.name} has unknown quantization dtype ${ka.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);const Aa=DTYPE_VALUE_SIZE_MAP[ka.dtype],Fa=ka.dtype==="uint8"?new Uint8Array(aa):new Uint16Array(aa);if(ba==="float32")if(ka.dtype==="uint8"||ka.dtype==="uint16"){wa=new Float32Array(Fa.length);for(let La=0;La<Fa.length;La++){const el=Fa[La];wa[La]=el*ka.scale+ka.min}}else if(ka.dtype==="float16")wa=getFloat16Decoder()(Fa);else throw new Error(`Unsupported quantization type ${ka.dtype} for weight type float32.`);else if(ba==="int32"){if(ka.dtype!=="uint8"&&ka.dtype!=="uint16")throw new Error(`Unsupported quantization type ${ka.dtype} for weight type int32.`);wa=new Int32Array(Fa.length);for(let La=0;La<Fa.length;La++){const el=Fa[La];wa[La]=Math.round(el*ka.scale+ka.min)}}else throw new Error(`Unsupported dtype in weight '${xa}': ${ba}`);Ea+=Ta*Aa}else if(ba==="string"){const ka=sizeFromShape$1(ha.shape);wa=[];for(let Aa=0;Aa<ka;Aa++){const Fa=new Uint32Array(aa.slice(Ea,Ea+NUM_BYTES_STRING_LENGTH))[0];Ea+=NUM_BYTES_STRING_LENGTH;const La=new Uint8Array(aa.slice(Ea,Ea+Fa));wa.push(La),Ea+=Fa}}else{const ka=DTYPE_VALUE_SIZE_MAP[ba];if(ba==="float32")wa=new Float32Array(aa);else if(ba==="int32")wa=new Int32Array(aa);else if(ba==="bool")wa=new Uint8Array(aa);else if(ba==="complex64"){wa=new Float32Array(aa);const Aa=new Float32Array(wa.length/2),Fa=new Float32Array(wa.length/2);for(let nl=0;nl<Aa.length;nl++)Aa[nl]=wa[nl*2],Fa[nl]=wa[nl*2+1];const La=tensor(Aa,Sa,"float32"),el=tensor(Fa,Sa,"float32"),tl=complex$4(La,el);return La.dispose(),el.dispose(),tl}else throw new Error(`Unsupported dtype in weight '${xa}': ${ba}`);Ea+=Ta*ka}return tensor(wa,Sa,ba)}async function readToLength(ha,aa,xa){let ba=new Uint8Array(aa);for(;ba.byteLength<xa;){const{done:Sa,value:Ta}=await ha.read();if(Sa&&Ta==null){const Ea=xa-ba.byteLength;throw new Error(`Reader is done but ${Ea} bytes are still expected`)}const wa=new Uint8Array(ba.length+Ta.byteLength);wa.set(ba,0),wa.set(new Uint8Array(Ta),ba.length),ba=wa}return ba.buffer}async function decodeWeightsStream(ha,aa){const xa={},ba=ha.getReader();let Sa=new ArrayBuffer(0);for(const Ta of aa){const wa=await getWeightBytelengthAsync(Ta,async(Aa,Fa)=>(Sa=await readToLength(ba,Sa,Fa),Sa.slice(Aa,Fa)));Sa=await readToLength(ba,Sa,wa);const Ea=Sa.slice(0,wa);Sa=Sa.slice(wa);const ka=decodeWeight(Ta,Ea);if(xa[Ta.name]=ka,getBackend()==="webgpu"){const Aa=backend();"uploadToGPU"in Aa&&sizeFromShape$1(ka.shape)>=env$1().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&Aa.uploadToGPU(ka.dataId)}}return xa}function concatenateTypedArrays(ha){if(ha===null)throw new Error(`Invalid input value: ${JSON.stringify(ha)}`);let aa=0;const xa=[];ha.forEach(Ta=>{if(aa+=Ta.byteLength,xa.push(Ta.byteLength===Ta.buffer.byteLength?Ta:new Ta.constructor(Ta)),!(Ta instanceof Float32Array||Ta instanceof Int32Array||Ta instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${Ta.constructor.name}`)});const ba=new Uint8Array(aa);let Sa=0;return xa.forEach(Ta=>{ba.set(new Uint8Array(Ta.buffer),Sa),Sa+=Ta.byteLength}),ba.buffer}const useNodeBuffer$1=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function stringByteLength$1(ha){return useNodeBuffer$1?Buffer.byteLength(ha,"utf8"):new Blob([ha]).size}function arrayBufferToBase64String$1(ha){if(useNodeBuffer$1)return Buffer.from(ha).toString("base64");const aa=new Uint8Array(ha);let xa="";for(let ba=0,Sa=aa.length;ba<Sa;ba++)xa+=String.fromCharCode(aa[ba]);return btoa(xa)}function base64StringToArrayBuffer$1(ha){if(useNodeBuffer$1){const ba=Buffer.from(ha,"base64");return ba.buffer.slice(ba.byteOffset,ba.byteOffset+ba.byteLength)}const aa=atob(ha),xa=new Uint8Array(aa.length);for(let ba=0;ba<aa.length;++ba)xa.set([aa.charCodeAt(ba)],ba);return xa.buffer}function concatenateArrayBuffers$1(ha){return CompositeArrayBuffer$1.join(ha)}function basename(ha){const aa="/";for(ha=ha.trim();ha.endsWith(aa);)ha=ha.slice(0,ha.length-1);const xa=ha.split(aa);return xa[xa.length-1]}function getModelJSONForModelArtifacts$1(ha,aa){const xa={modelTopology:ha.modelTopology,format:ha.format,generatedBy:ha.generatedBy,convertedBy:ha.convertedBy,weightsManifest:aa};return ha.signature!=null&&(xa.signature=ha.signature),ha.userDefinedMetadata!=null&&(xa.userDefinedMetadata=ha.userDefinedMetadata),ha.modelInitializer!=null&&(xa.modelInitializer=ha.modelInitializer),ha.initializerSignature!=null&&(xa.initializerSignature=ha.initializerSignature),ha.trainingConfig!=null&&(xa.trainingConfig=ha.trainingConfig),xa}function getModelArtifactsForJSONSync$1(ha,aa,xa){const ba={modelTopology:ha.modelTopology,format:ha.format,generatedBy:ha.generatedBy,convertedBy:ha.convertedBy};if(ha.trainingConfig!=null&&(ba.trainingConfig=ha.trainingConfig),ha.weightsManifest!=null){if(!aa)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!xa)throw new Error("modelJSON has weightsManifest but weightData is null");ba.weightSpecs=aa,ba.weightData=xa}return ha.signature!=null&&(ba.signature=ha.signature),ha.userDefinedMetadata!=null&&(ba.userDefinedMetadata=ha.userDefinedMetadata),ha.modelInitializer!=null&&(ba.modelInitializer=ha.modelInitializer),ha.initializerSignature!=null&&(ba.initializerSignature=ha.initializerSignature),ba}async function getModelArtifactsForJSON$1(ha,aa){let xa,ba;return ha.weightsManifest!=null&&([xa,ba]=await aa(ha.weightsManifest)),getModelArtifactsForJSONSync$1(ha,xa,ba)}function getModelArtifactsInfoForJSON$1(ha){if(ha.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:ha.modelTopology==null?0:stringByteLength$1(JSON.stringify(ha.modelTopology)),weightSpecsBytes:ha.weightSpecs==null?0:stringByteLength$1(JSON.stringify(ha.weightSpecs)),weightDataBytes:ha.weightData==null?0:new CompositeArrayBuffer$1(ha.weightData).byteLength}}function getWeightSpecs$1(ha){const aa=[];for(const xa of ha)aa.push(...xa.weights);return aa}function computeFloat16MantisaTable(){const ha=xa=>{let ba=xa<<13,Sa=0;for(;!(ba&8388608);)Sa-=8388608,ba<<=1;return ba&=-8388609,Sa+=947912704,ba|Sa},aa=new Uint32Array(2048);aa[0]=0;for(let xa=1;xa<1024;xa++)aa[xa]=ha(xa);for(let xa=1024;xa<2048;xa++)aa[xa]=939524096+(xa-1024<<13);return aa}function computeFloat16ExponentTable(){const ha=new Uint32Array(64);ha[0]=0,ha[31]=1199570944,ha[32]=2147483648,ha[63]=3347054592;for(let aa=1;aa<31;aa++)ha[aa]=aa<<23;for(let aa=33;aa<63;aa++)ha[aa]=2147483648+(aa-32<<23);return ha}function computeFloat16OffsetTable(){const ha=new Uint32Array(64);for(let aa=0;aa<64;aa++)ha[aa]=1024;return ha[0]=ha[32]=0,ha}function getFloat16Decoder(){const ha=computeFloat16MantisaTable(),aa=computeFloat16ExponentTable(),xa=computeFloat16OffsetTable();return ba=>{const Sa=new ArrayBuffer(4*ba.length),Ta=new Uint32Array(Sa);for(let wa=0;wa<ba.length;wa++){const Ea=ba[wa],ka=ha[xa[Ea>>10]+(Ea&1023)]+aa[Ea>>10];Ta[wa]=ka}return new Float32Array(Sa)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let IORouterRegistry$1=class Kl{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return Kl.instance==null&&(Kl.instance=new Kl),Kl.instance}static registerSaveRouter(aa){Kl.getInstance().saveRouters.push(aa)}static registerLoadRouter(aa){Kl.getInstance().loadRouters.push(aa)}static getSaveHandlers(aa){return Kl.getHandlers(aa,"save")}static getLoadHandlers(aa,xa){return Kl.getHandlers(aa,"load",xa)}static getHandlers(aa,xa,ba){const Sa=[];return(xa==="load"?Kl.getInstance().loadRouters:Kl.getInstance().saveRouters).forEach(wa=>{const Ea=wa(aa,ba);Ea!==null&&Sa.push(Ea)}),Sa}};const registerSaveRouter=ha=>IORouterRegistry$1.registerSaveRouter(ha),registerLoadRouter=ha=>IORouterRegistry$1.registerLoadRouter(ha),getSaveHandlers=ha=>IORouterRegistry$1.getSaveHandlers(ha),getLoadHandlers=(ha,aa)=>IORouterRegistry$1.getLoadHandlers(ha,aa);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DATABASE_NAME$1="tensorflowjs",DATABASE_VERSION$1=1,MODEL_STORE_NAME$1="models_store",INFO_STORE_NAME$1="model_info_store";function getIndexedDBFactory$1(){if(!env$1().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const ha=typeof window>"u"?self:window,aa=ha.indexedDB||ha.mozIndexedDB||ha.webkitIndexedDB||ha.msIndexedDB||ha.shimIndexedDB;if(aa==null)throw new Error("The current browser does not appear to support IndexedDB.");return aa}function setUpDatabase$1(ha){const aa=ha.result;aa.createObjectStore(MODEL_STORE_NAME$1,{keyPath:"modelPath"}),aa.createObjectStore(INFO_STORE_NAME$1,{keyPath:"modelPath"})}let BrowserIndexedDB$1=class{constructor(aa){if(this.indexedDB=getIndexedDBFactory$1(),aa==null||!aa)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=aa}async save(aa){if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,aa)}async load(){return this.databaseAction(this.modelPath)}databaseAction(aa,xa){return new Promise((ba,Sa)=>{const Ta=this.indexedDB.open(DATABASE_NAME$1,DATABASE_VERSION$1);Ta.onupgradeneeded=()=>setUpDatabase$1(Ta),Ta.onsuccess=()=>{const wa=Ta.result;if(xa==null){const Ea=wa.transaction(MODEL_STORE_NAME$1,"readonly"),Aa=Ea.objectStore(MODEL_STORE_NAME$1).get(this.modelPath);Aa.onsuccess=()=>{if(Aa.result==null)return wa.close(),Sa(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));ba(Aa.result.modelArtifacts)},Aa.onerror=Fa=>(wa.close(),Sa(Aa.error)),Ea.oncomplete=()=>wa.close()}else{xa.weightData=CompositeArrayBuffer$1.join(xa.weightData);const Ea=getModelArtifactsInfoForJSON$1(xa),ka=wa.transaction(INFO_STORE_NAME$1,"readwrite");let Aa=ka.objectStore(INFO_STORE_NAME$1),Fa;try{Fa=Aa.put({modelPath:this.modelPath,modelArtifactsInfo:Ea})}catch(el){return Sa(el)}let La;Fa.onsuccess=()=>{La=wa.transaction(MODEL_STORE_NAME$1,"readwrite");const el=La.objectStore(MODEL_STORE_NAME$1);let tl;try{tl=el.put({modelPath:this.modelPath,modelArtifacts:xa,modelArtifactsInfo:Ea})}catch(nl){return Sa(nl)}tl.onsuccess=()=>ba({modelArtifactsInfo:Ea}),tl.onerror=nl=>{Aa=ka.objectStore(INFO_STORE_NAME$1);const rl=Aa.delete(this.modelPath);rl.onsuccess=()=>(wa.close(),Sa(tl.error)),rl.onerror=sl=>(wa.close(),Sa(tl.error))}},Fa.onerror=el=>(wa.close(),Sa(Fa.error)),ka.oncomplete=()=>{La==null?wa.close():La.oncomplete=()=>wa.close()}}},Ta.onerror=wa=>Sa(Ta.error)})}};BrowserIndexedDB$1.URL_SCHEME="indexeddb://";const indexedDBRouter$1=ha=>env$1().getBool("IS_BROWSER")&&!Array.isArray(ha)&&ha.startsWith(BrowserIndexedDB$1.URL_SCHEME)?browserIndexedDB$1(ha.slice(BrowserIndexedDB$1.URL_SCHEME.length)):null;IORouterRegistry$1.registerSaveRouter(indexedDBRouter$1),IORouterRegistry$1.registerLoadRouter(indexedDBRouter$1);function browserIndexedDB$1(ha){return new BrowserIndexedDB$1(ha)}function maybeStripScheme$3(ha){return ha.startsWith(BrowserIndexedDB$1.URL_SCHEME)?ha.slice(BrowserIndexedDB$1.URL_SCHEME.length):ha}let BrowserIndexedDBManager$1=class{constructor(){this.indexedDB=getIndexedDBFactory$1()}async listModels(){return new Promise((aa,xa)=>{const ba=this.indexedDB.open(DATABASE_NAME$1,DATABASE_VERSION$1);ba.onupgradeneeded=()=>setUpDatabase$1(ba),ba.onsuccess=()=>{const Sa=ba.result,Ta=Sa.transaction(INFO_STORE_NAME$1,"readonly"),Ea=Ta.objectStore(INFO_STORE_NAME$1).getAll();Ea.onsuccess=()=>{const ka={};for(const Aa of Ea.result)ka[Aa.modelPath]=Aa.modelArtifactsInfo;aa(ka)},Ea.onerror=ka=>(Sa.close(),xa(Ea.error)),Ta.oncomplete=()=>Sa.close()},ba.onerror=Sa=>xa(ba.error)})}async removeModel(aa){return aa=maybeStripScheme$3(aa),new Promise((xa,ba)=>{const Sa=this.indexedDB.open(DATABASE_NAME$1,DATABASE_VERSION$1);Sa.onupgradeneeded=()=>setUpDatabase$1(Sa),Sa.onsuccess=()=>{const Ta=Sa.result,wa=Ta.transaction(INFO_STORE_NAME$1,"readwrite"),Ea=wa.objectStore(INFO_STORE_NAME$1),ka=Ea.get(aa);let Aa;ka.onsuccess=()=>{if(ka.result==null)return Ta.close(),ba(new Error(`Cannot find model with path '${aa}' in IndexedDB.`));{const Fa=Ea.delete(aa),La=()=>{Aa=Ta.transaction(MODEL_STORE_NAME$1,"readwrite");const tl=Aa.objectStore(MODEL_STORE_NAME$1).delete(aa);tl.onsuccess=()=>xa(ka.result.modelArtifactsInfo),tl.onerror=nl=>ba(ka.error)};Fa.onsuccess=La,Fa.onerror=el=>(La(),Ta.close(),ba(ka.error))}},ka.onerror=Fa=>(Ta.close(),ba(ka.error)),wa.oncomplete=()=>{Aa==null?Ta.close():Aa.oncomplete=()=>Ta.close()}},Sa.onerror=Ta=>ba(Sa.error)})}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PATH_SEPARATOR$1="/",PATH_PREFIX$1="tensorflowjs_models",INFO_SUFFIX$1="info",MODEL_TOPOLOGY_SUFFIX$1="model_topology",WEIGHT_SPECS_SUFFIX$1="weight_specs",WEIGHT_DATA_SUFFIX$1="weight_data",MODEL_METADATA_SUFFIX$1="model_metadata";function getModelKeys$1(ha){return{info:[PATH_PREFIX$1,ha,INFO_SUFFIX$1].join(PATH_SEPARATOR$1),topology:[PATH_PREFIX$1,ha,MODEL_TOPOLOGY_SUFFIX$1].join(PATH_SEPARATOR$1),weightSpecs:[PATH_PREFIX$1,ha,WEIGHT_SPECS_SUFFIX$1].join(PATH_SEPARATOR$1),weightData:[PATH_PREFIX$1,ha,WEIGHT_DATA_SUFFIX$1].join(PATH_SEPARATOR$1),modelMetadata:[PATH_PREFIX$1,ha,MODEL_METADATA_SUFFIX$1].join(PATH_SEPARATOR$1)}}function removeItems$1(ha){for(const aa of Object.values(ha))window.localStorage.removeItem(aa)}function getModelPathFromKey$1(ha){const aa=ha.split(PATH_SEPARATOR$1);if(aa.length<3)throw new Error(`Invalid key format: ${ha}`);return aa.slice(1,aa.length-1).join(PATH_SEPARATOR$1)}function maybeStripScheme$2(ha){return ha.startsWith(BrowserLocalStorage$1.URL_SCHEME)?ha.slice(BrowserLocalStorage$1.URL_SCHEME.length):ha}let BrowserLocalStorage$1=class{constructor(aa){if(!env$1().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,aa==null||!aa)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=aa,this.keys=getModelKeys$1(this.modelPath)}async save(aa){if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const xa=JSON.stringify(aa.modelTopology),ba=JSON.stringify(aa.weightSpecs),Sa=getModelArtifactsInfoForJSON$1(aa),Ta=CompositeArrayBuffer$1.join(aa.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(Sa)),this.LS.setItem(this.keys.topology,xa),this.LS.setItem(this.keys.weightSpecs,ba),this.LS.setItem(this.keys.weightData,arrayBufferToBase64String$1(Ta));const wa={format:aa.format,generatedBy:aa.generatedBy,convertedBy:aa.convertedBy,signature:aa.signature!=null?aa.signature:void 0,userDefinedMetadata:aa.userDefinedMetadata!=null?aa.userDefinedMetadata:void 0,modelInitializer:aa.modelInitializer!=null?aa.modelInitializer:void 0,initializerSignature:aa.initializerSignature!=null?aa.initializerSignature:void 0,trainingConfig:aa.trainingConfig!=null?aa.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(wa)),{modelArtifactsInfo:Sa}}catch{throw removeItems$1(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${Sa.modelTopologyBytes}, weightSpecsBytes=${Sa.weightSpecsBytes}, weightDataBytes=${Sa.weightDataBytes}.`)}}}async load(){const aa=JSON.parse(this.LS.getItem(this.keys.info));if(aa==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(aa.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const xa={},ba=JSON.parse(this.LS.getItem(this.keys.topology));if(ba==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);xa.modelTopology=ba;const Sa=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(Sa==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);xa.weightSpecs=Sa;const Ta=this.LS.getItem(this.keys.modelMetadata);if(Ta!=null){const Ea=JSON.parse(Ta);xa.format=Ea.format,xa.generatedBy=Ea.generatedBy,xa.convertedBy=Ea.convertedBy,Ea.signature!=null&&(xa.signature=Ea.signature),Ea.userDefinedMetadata!=null&&(xa.userDefinedMetadata=Ea.userDefinedMetadata),Ea.modelInitializer!=null&&(xa.modelInitializer=Ea.modelInitializer),Ea.initializerSignature!=null&&(xa.initializerSignature=Ea.initializerSignature),Ea.trainingConfig!=null&&(xa.trainingConfig=Ea.trainingConfig)}const wa=this.LS.getItem(this.keys.weightData);if(wa==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return xa.weightData=base64StringToArrayBuffer$1(wa),xa}};BrowserLocalStorage$1.URL_SCHEME="localstorage://";const localStorageRouter$1=ha=>env$1().getBool("IS_BROWSER")&&!Array.isArray(ha)&&ha.startsWith(BrowserLocalStorage$1.URL_SCHEME)?browserLocalStorage$1(ha.slice(BrowserLocalStorage$1.URL_SCHEME.length)):null;IORouterRegistry$1.registerSaveRouter(localStorageRouter$1),IORouterRegistry$1.registerLoadRouter(localStorageRouter$1);function browserLocalStorage$1(ha){return new BrowserLocalStorage$1(ha)}let BrowserLocalStorageManager$1=class{constructor(){assert$2(env$1().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),assert$2(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const aa={},xa=PATH_PREFIX$1+PATH_SEPARATOR$1,ba=PATH_SEPARATOR$1+INFO_SUFFIX$1;for(let Sa=0;Sa<this.LS.length;++Sa){const Ta=this.LS.key(Sa);if(Ta.startsWith(xa)&&Ta.endsWith(ba)){const wa=getModelPathFromKey$1(Ta);aa[wa]=JSON.parse(this.LS.getItem(Ta))}}return aa}async removeModel(aa){aa=maybeStripScheme$2(aa);const xa=getModelKeys$1(aa);if(this.LS.getItem(xa.info)==null)throw new Error(`Cannot find model at path '${aa}'`);const ba=JSON.parse(this.LS.getItem(xa.info));return removeItems$1(xa),ba}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const URL_SCHEME_SUFFIX$1="://";let ModelStoreManagerRegistry$1=class Ql{constructor(){this.managers={}}static getInstance(){return Ql.instance==null&&(Ql.instance=new Ql),Ql.instance}static registerManager(aa,xa){assert$2(aa!=null,()=>"scheme must not be undefined or null."),aa.endsWith(URL_SCHEME_SUFFIX$1)&&(aa=aa.slice(0,aa.indexOf(URL_SCHEME_SUFFIX$1))),assert$2(aa.length>0,()=>"scheme must not be an empty string.");const ba=Ql.getInstance();assert$2(ba.managers[aa]==null,()=>`A model store manager is already registered for scheme '${aa}'.`),ba.managers[aa]=xa}static getManager(aa){const xa=Ql.getInstance().managers[aa];if(xa==null)throw new Error(`Cannot find model manager for scheme '${aa}'`);return xa}static getSchemes(){return Object.keys(Ql.getInstance().managers)}};function parseURL(ha){if(ha.indexOf(URL_SCHEME_SUFFIX$1)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ModelStoreManagerRegistry$1.getSchemes().join(",")}`);return{scheme:ha.split(URL_SCHEME_SUFFIX$1)[0],path:ha.split(URL_SCHEME_SUFFIX$1)[1]}}async function cloneModelInternal(ha,aa,xa=!1){assert$2(ha!==aa,()=>`Old path and new path are the same: '${ha}'`);const ba=IORouterRegistry$1.getLoadHandlers(ha);assert$2(ba.length>0,()=>`Copying failed because no load handler is found for source URL ${ha}.`),assert$2(ba.length<2,()=>`Copying failed because more than one (${ba.length}) load handlers for source URL ${ha}.`);const Sa=ba[0],Ta=IORouterRegistry$1.getSaveHandlers(aa);assert$2(Ta.length>0,()=>`Copying failed because no save handler is found for destination URL ${aa}.`),assert$2(Ta.length<2,()=>`Copying failed because more than one (${ba.length}) save handlers for destination URL ${aa}.`);const wa=Ta[0],Ea=parseURL(ha).scheme,ka=parseURL(ha).path,Aa=Ea===parseURL(ha).scheme,Fa=await Sa.load();xa&&Aa&&await ModelStoreManagerRegistry$1.getManager(Ea).removeModel(ka);const La=await wa.save(Fa);return xa&&!Aa&&await ModelStoreManagerRegistry$1.getManager(Ea).removeModel(ka),La.modelArtifactsInfo}async function listModels(){const ha=ModelStoreManagerRegistry$1.getSchemes(),aa={};for(const xa of ha){const ba=await ModelStoreManagerRegistry$1.getManager(xa).listModels();for(const Sa in ba){const Ta=xa+URL_SCHEME_SUFFIX$1+Sa;aa[Ta]=ba[Sa]}}return aa}async function removeModel(ha){const aa=parseURL(ha);return ModelStoreManagerRegistry$1.getManager(aa.scheme).removeModel(aa.path)}async function copyModel(ha,aa){return cloneModelInternal(ha,aa,!1)}async function moveModel(ha,aa){return cloneModelInternal(ha,aa,!0)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let PlatformBrowser$1=class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(aa,xa){return fetch(aa,xa)}now(){return performance.now()}encode(aa,xa){if(xa!=="utf-8"&&xa!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${xa}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(aa)}decode(aa,xa){return new TextDecoder(xa).decode(aa)}setTimeoutCustom(aa,xa){if(typeof window>"u"||!env$1().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(aa,xa);return}this.functionRefs.push(aa),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},xa),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",ba=>{if(ba.source===window&&ba.data.name===this.messageName){ba.stopPropagation();const Sa=this.functionRefs[ba.data.index];Sa(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(aa){return isTypedArrayBrowser$1(aa)}};if(env$1().get("IS_BROWSER")){env$1().setPlatform("browser",new PlatformBrowser$1);try{ModelStoreManagerRegistry$1.registerManager(BrowserLocalStorage$1.URL_SCHEME,new BrowserLocalStorageManager$1)}catch{}try{ModelStoreManagerRegistry$1.registerManager(BrowserIndexedDB$1.URL_SCHEME,new BrowserIndexedDBManager$1)}catch{}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const getNodeFetch$1={importFetch:()=>require("node-fetch")};let systemFetch$1,PlatformNode$1=class{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(aa,xa){return env$1().global.fetch!=null?env$1().global.fetch(aa,xa):(systemFetch$1==null&&(systemFetch$1=getNodeFetch$1.importFetch()),systemFetch$1(aa,xa))}now(){const aa=process.hrtime();return aa[0]*1e3+aa[1]/1e6}encode(aa,xa){if(xa!=="utf-8"&&xa!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${xa}`);return this.textEncoder.encode(aa)}decode(aa,xa){return aa.length===0?"":new this.util.TextDecoder(xa).decode(aa)}isTypedArray(aa){return this.util.types.isFloat32Array(aa)||this.util.types.isInt32Array(aa)||this.util.types.isUint8Array(aa)||this.util.types.isUint8ClampedArray(aa)}};env$1().get("IS_NODE")&&!env$1().get("IS_BROWSER")&&env$1().setPlatform("node",new PlatformNode$1);/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function buffer$1(ha,aa="float32",xa){return aa=aa||"float32",assertNonNegativeIntegerDimensions$1(ha),new TensorBuffer$1(ha,aa,xa)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast_$1(ha,aa){const xa=convertToTensor$1(ha,"x","cast");if(!isValidDtype$1(aa))throw new Error(`Failed to cast to unknown dtype ${aa}`);if(aa==="string"&&xa.dtype!=="string"||aa!=="string"&&xa.dtype==="string")throw new Error("Only strings can be casted to strings");const ba={x:xa},Sa={dtype:aa};return ENGINE$1.runKernel(Cast$1,ba,Sa)}const cast$5=op$1({cast_:cast_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clone_$1(ha){const xa={x:convertToTensor$1(ha,"x","clone","string_or_numeric")};return ENGINE$1.runKernel(Identity$2,xa)}const clone$1=op$1({clone_:clone_$1});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function print$1(ha,aa=!1){console.log(ha.toString(aa))}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getOrMakeEngine$1();const opHandler$2={buffer:buffer$1,cast:cast$5,clone:clone$1,print:print$1};setOpHandler$1(opHandler$2);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function add_$1(ha,aa){let xa=convertToTensor$1(ha,"a","add"),ba=convertToTensor$1(aa,"b","add");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Add$2,Sa)}const add$3=op$1({add_:add_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floorDiv_$1(ha,aa){let xa=convertToTensor$1(ha,"a","floorDiv"),ba=convertToTensor$1(aa,"b","floorDiv");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(FloorDiv$1,Sa)}const floorDiv$4=op$1({floorDiv_:floorDiv_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function div_$1(ha,aa){let xa=convertToTensor$1(ha,"a","div"),ba=convertToTensor$1(aa,"b","div");if([xa,ba]=makeTypesMatch$1(xa,ba),xa.dtype==="int32"&&ba.dtype==="int32")return floorDiv$4(xa,ba);const Sa={a:xa,b:ba},Ta={};return ENGINE$1.runKernel(RealDiv$1,Sa,Ta)}const div$2=op$1({div_:div_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mul_$1(ha,aa){let xa=convertToTensor$1(ha,"a","mul"),ba=convertToTensor$1(aa,"b","mul");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Multiply$2,Sa)}const mul$1=op$1({mul_:mul_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function abs_$1(ha){const aa=convertToTensor$1(ha,"x","abs");if(aa.dtype==="complex64"){const xa={x:aa};return ENGINE$1.runKernel(ComplexAbs$1,xa)}else{const xa={x:aa};return ENGINE$1.runKernel(Abs$1,xa)}}const abs$4=op$1({abs_:abs_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function acos_(ha){const xa={x:convertToTensor$1(ha,"x","acos")};return ENGINE$1.runKernel(Acos$1,xa)}const acos$3=op$1({acos_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function acosh_(ha){const xa={x:convertToTensor$1(ha,"x","acosh")};return ENGINE$1.runKernel(Acosh$1,xa)}const acosh$3=op$1({acosh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN_(ha){assert$2(Array.isArray(ha),()=>"The argument passed to tf.addN() must be a list of tensors"),assert$2(ha.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${ha.length}`);const aa=ha.map((Sa,Ta)=>convertToTensor$1(Sa,`tensors${Ta}`,"addN")),xa=aa[0];aa.forEach(Sa=>{if(Sa.dtype!==xa.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),aa.forEach(Sa=>{if(!arraysEqual$1(Sa.shape,xa.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const ba=aa;return ENGINE$1.runKernel(AddN$1,ba)}const addN$3=op$1({addN_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all_(ha,aa=null,xa=!1){const Sa={x:convertToTensor$1(ha,"x","all","bool")},Ta={axis:aa,keepDims:xa};return ENGINE$1.runKernel(All$1,Sa,Ta)}const all$3=op$1({all_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any_(ha,aa=null,xa=!1){const Sa={x:convertToTensor$1(ha,"x","any","bool")},Ta={axis:aa,keepDims:xa};return ENGINE$1.runKernel(Any$1,Sa,Ta)}const any$3=op$1({any_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax_(ha,aa=0){const ba={x:convertToTensor$1(ha,"x","argMax")},Sa={axis:aa};return ENGINE$1.runKernel(ArgMax$1,ba,Sa)}const argMax$3=op$1({argMax_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin_(ha,aa=0){const ba={x:convertToTensor$1(ha,"x","argMin")},Sa={axis:aa};return ENGINE$1.runKernel(ArgMin$1,ba,Sa)}const argMin$3=op$1({argMin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function asin_(ha){const xa={x:convertToTensor$1(ha,"x","asin")};return ENGINE$1.runKernel(Asin$1,xa)}const asin$3=op$1({asin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function asinh_(ha){const xa={x:convertToTensor$1(ha,"x","asinh")};return ENGINE$1.runKernel(Asinh$1,xa)}const asinh$3=op$1({asinh_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atan_(ha){const xa={x:convertToTensor$1(ha,"x","atan")};return ENGINE$1.runKernel(Atan$1,xa)}const atan$3=op$1({atan_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atan2_(ha,aa){let xa=convertToTensor$1(ha,"a","atan2"),ba=convertToTensor$1(aa,"b","atan2");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Atan2$1,Sa)}const atan2$3=op$1({atan2_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function atanh_(ha){const xa={x:convertToTensor$1(ha,"x","atanh")};return ENGINE$1.runKernel(Atanh$1,xa)}const atanh$3=op$1({atanh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function computeDilation2DInfo$1(ha,aa,xa,ba,Sa="NHWC",Ta){const wa=ha[3],Ea=[...aa,wa],ka=convertConv2DDataFormat$1(Sa);return computeConv2DInfo$1(ha,Ea,xa,Ta,ba,null,null,ka)}function computePool2DInfo$1(ha,aa,xa,ba,Sa,Ta,wa="channelsLast"){const[Ea,ka]=parseTupleParam$1(aa);let Aa;if(wa==="channelsLast")Aa=[Ea,ka,ha[3],ha[3]];else if(wa==="channelsFirst")Aa=[Ea,ka,ha[1],ha[1]];else throw new Error(`Unknown dataFormat ${wa}`);return computeConv2DInfo$1(ha,Aa,xa,ba,Sa,Ta,!1,wa)}function computePool3DInfo$1(ha,aa,xa,ba,Sa,Ta,wa="NDHWC"){const[Ea,ka,Aa]=parse3TupleParam$1(aa);let Fa,La;if(wa==="NDHWC")La="channelsLast",Fa=[Ea,ka,Aa,ha[4],ha[4]];else if(wa==="NCDHW")La="channelsFirst",Fa=[Ea,ka,Aa,ha[1],ha[1]];else throw new Error(`Unknown dataFormat ${wa}`);return computeConv3DInfo$1(ha,Fa,xa,ba,Sa,!1,La,Ta)}function computeConv2DInfo$1(ha,aa,xa,ba,Sa,Ta,wa=!1,Ea="channelsLast"){let[ka,Aa,Fa,La]=[-1,-1,-1,-1];if(Ea==="channelsLast")[ka,Aa,Fa,La]=ha;else if(Ea==="channelsFirst")[ka,La,Aa,Fa]=ha;else throw new Error(`Unknown dataFormat ${Ea}`);const[el,tl,,nl]=aa,[rl,sl]=parseTupleParam$1(xa),[ol,al]=parseTupleParam$1(ba),ll=getEffectiveFilterSize$1(el,ol),il=getEffectiveFilterSize$1(tl,al),{padInfo:cl,outHeight:ul,outWidth:dl}=getPadAndOutInfo$1(Sa,Aa,Fa,rl,sl,ll,il,Ta,Ea),hl=wa?nl*La:nl;let pl;return Ea==="channelsFirst"?pl=[ka,hl,ul,dl]:Ea==="channelsLast"&&(pl=[ka,ul,dl,hl]),{batchSize:ka,dataFormat:Ea,inHeight:Aa,inWidth:Fa,inChannels:La,outHeight:ul,outWidth:dl,outChannels:hl,padInfo:cl,strideHeight:rl,strideWidth:sl,filterHeight:el,filterWidth:tl,effectiveFilterHeight:ll,effectiveFilterWidth:il,dilationHeight:ol,dilationWidth:al,inShape:ha,outShape:pl,filterShape:aa}}function computeConv3DInfo$1(ha,aa,xa,ba,Sa,Ta=!1,wa="channelsLast",Ea){let[ka,Aa,Fa,La,el]=[-1,-1,-1,-1,-1];if(wa==="channelsLast")[ka,Aa,Fa,La,el]=ha;else if(wa==="channelsFirst")[ka,el,Aa,Fa,La]=ha;else throw new Error(`Unknown dataFormat ${wa}`);const[tl,nl,rl,,sl]=aa,[ol,al,ll]=parse3TupleParam$1(xa),[il,cl,ul]=parse3TupleParam$1(ba),dl=getEffectiveFilterSize$1(tl,il),hl=getEffectiveFilterSize$1(nl,cl),pl=getEffectiveFilterSize$1(rl,ul),{padInfo:fl,outDepth:ml,outHeight:gl,outWidth:$l}=get3DPadAndOutInfo$1(Sa,Aa,Fa,La,ol,al,ll,dl,hl,pl,Ea),xl=Ta?sl*el:sl;let yl;return wa==="channelsFirst"?yl=[ka,xl,ml,gl,$l]:wa==="channelsLast"&&(yl=[ka,ml,gl,$l,xl]),{batchSize:ka,dataFormat:wa,inDepth:Aa,inHeight:Fa,inWidth:La,inChannels:el,outDepth:ml,outHeight:gl,outWidth:$l,outChannels:xl,padInfo:fl,strideDepth:ol,strideHeight:al,strideWidth:ll,filterDepth:tl,filterHeight:nl,filterWidth:rl,effectiveFilterDepth:dl,effectiveFilterHeight:hl,effectiveFilterWidth:pl,dilationDepth:il,dilationHeight:cl,dilationWidth:ul,inShape:ha,outShape:yl,filterShape:aa}}function computeOutputShape2D$1(ha,aa,xa,ba,Sa){ba==null&&(ba=computeDefaultPad$1(ha,aa,xa));const Ta=ha[0],wa=ha[1],Ea=round$5((Ta-aa+2*ba)/xa+1,Sa),ka=round$5((wa-aa+2*ba)/xa+1,Sa);return[Ea,ka]}function computeOutputShape4D$1(ha,aa,xa,ba,Sa,Ta){Sa==null&&(Sa=computeDefaultPad$1(ha,aa[0],ba[0]));const wa=[0,0,0,xa];for(let Ea=0;Ea<3;Ea++)ha[Ea]+2*Sa>=aa[Ea]&&(wa[Ea]=round$5((ha[Ea]-aa[Ea]+2*Sa)/ba[Ea]+1,Ta));return wa}function computeDefaultPad$1(ha,aa,xa,ba=1){const Sa=getEffectiveFilterSize$1(aa,ba);return Math.floor((ha[0]*(xa-1)-xa+Sa)/2)}function parseTupleParam$1(ha){return typeof ha=="number"?[ha,ha,ha]:ha.length===2?[ha[0],ha[1],1]:ha}function parse3TupleParam$1(ha){return typeof ha=="number"?[ha,ha,ha]:ha}function getEffectiveFilterSize$1(ha,aa){return aa<=1?ha:ha+(ha-1)*(aa-1)}function getPadAndOutInfo$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){let Aa,Fa,La;if(typeof ha=="number"){Aa={top:ha,bottom:ha,left:ha,right:ha,type:ha===0?"VALID":"NUMBER"};const tl=computeOutputShape2D$1([aa,xa],Ta,ba,ha,Ea);Fa=tl[0],La=tl[1]}else if(ha==="same"){Fa=Math.ceil(aa/ba),La=Math.ceil(xa/Sa);const el=Math.max(0,(Fa-1)*ba+Ta-aa),tl=Math.max(0,(La-1)*Sa+wa-xa),nl=Math.floor(el/2),rl=el-nl,sl=Math.floor(tl/2),ol=tl-sl;Aa={top:nl,bottom:rl,left:sl,right:ol,type:"SAME"}}else if(ha==="valid")Aa={top:0,bottom:0,left:0,right:0,type:"VALID"},Fa=Math.ceil((aa-Ta+1)/ba),La=Math.ceil((xa-wa+1)/Sa);else if(typeof ha=="object"){const el=ka==="channelsLast"?ha[1][0]:ha[2][0],tl=ka==="channelsLast"?ha[1][1]:ha[2][1],nl=ka==="channelsLast"?ha[2][0]:ha[3][0],rl=ka==="channelsLast"?ha[2][1]:ha[3][1];Aa={top:el,bottom:tl,left:nl,right:rl,type:el===0&&tl===0&&nl===0&&rl===0?"VALID":"EXPLICIT"},Fa=round$5((aa-Ta+el+tl)/ba+1,Ea),La=round$5((xa-wa+nl+rl)/Sa+1,Ea)}else throw Error(`Unknown padding parameter: ${ha}`);return{padInfo:Aa,outHeight:Fa,outWidth:La}}function get3DPadAndOutInfo$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){let La,el,tl,nl;if(ha==="valid"&&(ha=0),typeof ha=="number"){La={top:ha,bottom:ha,left:ha,right:ha,front:ha,back:ha,type:ha===0?"VALID":"NUMBER"};const sl=computeOutputShape4D$1([aa,xa,ba,1],[Ea,ka,Aa],1,[Sa,Ta,wa],ha,Fa);el=sl[0],tl=sl[1],nl=sl[2]}else if(ha==="same"){el=Math.ceil(aa/Sa),tl=Math.ceil(xa/Ta),nl=Math.ceil(ba/wa);const rl=(el-1)*Sa+Ea-aa,sl=(tl-1)*Ta+ka-xa,ol=(nl-1)*wa+Aa-ba,al=Math.floor(rl/2),ll=rl-al,il=Math.floor(sl/2),cl=sl-il,ul=Math.floor(ol/2),dl=ol-ul;La={top:il,bottom:cl,left:ul,right:dl,front:al,back:ll,type:"SAME"}}else throw Error(`Unknown padding parameter: ${ha}`);return{padInfo:La,outDepth:el,outHeight:tl,outWidth:nl}}function round$5(ha,aa){if(!aa)return Math.trunc(ha);switch(aa){case"round":return Math.round(ha);case"ceil":return Math.ceil(ha);case"floor":return Math.floor(ha);default:throw new Error(`Unknown roundingMode ${aa}`)}}function tupleValuesAreOne$1(ha){const[aa,xa,ba]=parseTupleParam$1(ha);return aa===1&&xa===1&&ba===1}function eitherStridesOrDilationsAreOne$1(ha,aa){return tupleValuesAreOne$1(ha)||tupleValuesAreOne$1(aa)}function stridesOrDilationsArePositive$1(ha){return parseTupleParam$1(ha).every(aa=>aa>0)}function convertConv2DDataFormat$1(ha){if(ha==="NHWC")return"channelsLast";if(ha==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${ha}`)}function checkPadOnDimRoundingMode$1(ha,aa,xa){if(xa!=null){if(typeof aa=="string")throw Error(`Error in ${ha}: pad must be an integer when using dimRoundingMode ${xa} but got pad ${aa}.`);if(typeof aa=="number")assert$2(isInt$1(aa),()=>`Error in ${ha}: pad must be an integer when using dimRoundingMode ${xa} but got pad ${aa}.`);else if(typeof aa=="object")aa.forEach(ba=>{ba.forEach(Sa=>{assert$2(isInt$1(Sa),()=>`Error in ${ha}: pad must be an integer when using dimRoundingMode ${xa} but got pad ${Sa}.`)})});else throw Error(`Error in ${ha}: Unknown padding parameter: ${aa}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape_$1(ha,aa){const ba={x:convertToTensor$1(ha,"x","reshape","string_or_numeric")},Sa={shape:aa};return ENGINE$1.runKernel(Reshape$2,ba,Sa)}const reshape$4=op$1({reshape_:reshape_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool_(ha,aa,xa,ba,Sa){const Ta=convertToTensor$1(ha,"x","avgPool","float32"),wa=1;assert$2(eitherStridesOrDilationsAreOne$1(xa,wa),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${xa} and dilations '${wa}'`);let Ea=Ta,ka=!1;Ta.rank===3&&(ka=!0,Ea=reshape$4(Ta,[1,Ta.shape[0],Ta.shape[1],Ta.shape[2]])),assert$2(Ea.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${Ea.rank}.`),checkPadOnDimRoundingMode$1("avgPool",ba,Sa);const Aa={x:Ea},Fa={filterSize:aa,strides:xa,pad:ba,dimRoundingMode:Sa};let La=ENGINE$1.runKernel(AvgPool$1,Aa,Fa);return La=cast$5(La,Ta.dtype),ka?reshape$4(La,[La.shape[1],La.shape[2],La.shape[3]]):La}const avgPool$3=op$1({avgPool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3d_(ha,aa,xa,ba,Sa,Ta="NDHWC"){const wa=convertToTensor$1(ha,"x","avgPool3d","float32");let Ea=wa,ka=!1;wa.rank===4&&(ka=!0,Ea=reshape$4(wa,[1,wa.shape[0],wa.shape[1],wa.shape[2],wa.shape[3]])),assert$2(Ea.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${Ea.rank}.`),assert$2(Ta==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${Ta}`),assert$2(typeof xa=="number"&&xa>0||Array.isArray(xa)&&xa[0]>0&&xa[1]>0&&xa[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${xa}'`),checkPadOnDimRoundingMode$1("avgPool3d",ba,Sa);const Aa={x:Ea},Fa={filterSize:aa,strides:xa,pad:ba,dimRoundingMode:Sa,dataFormat:Ta};let La=ENGINE$1.runKernel(AvgPool3D$1,Aa,Fa);return La=cast$5(La,Ea.dtype),ka?reshape$4(La,[La.shape[1],La.shape[2],La.shape[3],La.shape[4]]):La}const avgPool3d=op$1({avgPool3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat_(ha,aa=0){assert$2(ha.length>=1,()=>"Pass at least one tensor to concat");const xa=convertToTensorArray(ha,"tensors","concat","string_or_numeric");if(xa[0].dtype==="complex64"&&xa.forEach(Ta=>{if(Ta.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${Ta.dtype}. `)}),xa.length===1)return clone$1(xa[0]);const ba=xa,Sa={axis:aa};return ENGINE$1.runKernel(Concat$1,ba,Sa)}const concat$3=op$1({concat_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function matMul_(ha,aa,xa=!1,ba=!1){let Sa=convertToTensor$1(ha,"a","matMul"),Ta=convertToTensor$1(aa,"b","matMul");[Sa,Ta]=makeTypesMatch$1(Sa,Ta);const wa={a:Sa,b:Ta},Ea={transposeA:xa,transposeB:ba};return ENGINE$1.runKernel(BatchMatMul$1,wa,Ea)}const matMul$1=op$1({matMul_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sigmoid_$1(ha){const xa={x:convertToTensor$1(ha,"x","sigmoid","float32")};return ENGINE$1.runKernel(Sigmoid$2,xa)}const sigmoid$4=op$1({sigmoid_:sigmoid_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","slice","string_or_numeric");if(ba.rank===0)throw new Error("Slicing scalar is not possible");const Sa={x:ba},Ta={begin:aa,size:xa};return ENGINE$1.runKernel(Slice$1,Sa,Ta)}const slice$3=op$1({slice_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tanh_(ha){const xa={x:convertToTensor$1(ha,"x","tanh","float32")};return ENGINE$1.runKernel(Tanh$2,xa)}const tanh$3=op$1({tanh_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function basicLSTMCell_(ha,aa,xa,ba,Sa,Ta){const wa=convertToTensor$1(ha,"forgetBias","basicLSTMCell"),Ea=convertToTensor$1(aa,"lstmKernel","basicLSTMCell"),ka=convertToTensor$1(xa,"lstmBias","basicLSTMCell"),Aa=convertToTensor$1(ba,"data","basicLSTMCell"),Fa=convertToTensor$1(Sa,"c","basicLSTMCell"),La=convertToTensor$1(Ta,"h","basicLSTMCell"),el=concat$3([Aa,La],1),tl=matMul$1(el,Ea),nl=add$3(tl,ka),rl=nl.shape[0],sl=nl.shape[1]/4,ol=[rl,sl],al=slice$3(nl,[0,0],ol),ll=slice$3(nl,[0,sl],ol),il=slice$3(nl,[0,sl*2],ol),cl=slice$3(nl,[0,sl*3],ol),ul=add$3(mul$1(sigmoid$4(al),tanh$3(ll)),mul$1(Fa,sigmoid$4(add$3(wa,il)))),dl=mul$1(tanh$3(ul),sigmoid$4(cl));return[ul,dl]}const basicLSTMCell=op$1({basicLSTMCell_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchToSpaceND_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","batchToSpaceND"),Sa=aa.reduce((Ea,ka)=>Ea*ka);assert$2(ba.rank>=1+aa.length,()=>`input rank is ${ba.rank} but should be > than blockShape.length ${aa.length}`),assert$2(xa.length===aa.length,()=>`crops.length is ${xa.length} but should be equal to blockShape.length  ${aa.length}`),assert$2(ba.shape[0]%Sa===0,()=>`input tensor batch is ${ba.shape[0]} but is not divisible by the product of the elements of blockShape ${aa.join(" * ")} === ${Sa}`);const Ta={x:ba},wa={blockShape:aa,crops:xa};return ENGINE$1.runKernel(BatchToSpaceND$1,Ta,wa)}const batchToSpaceND$3=op$1({batchToSpaceND_});function xAs4D(ha){let aa;return ha.rank===0||ha.rank===1?aa=reshape$4(ha,[1,1,1,ha.size]):ha.rank===2?aa=reshape$4(ha,[1,1,ha.shape[0],ha.shape[1]]):ha.rank===3?aa=reshape$4(ha,[1,ha.shape[0],ha.shape[1],ha.shape[2]]):aa=ha,aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchNorm_(ha,aa,xa,ba,Sa,Ta){Ta==null&&(Ta=.001);const wa=convertToTensor$1(ha,"x","batchNorm"),Ea=convertToTensor$1(aa,"mean","batchNorm"),ka=convertToTensor$1(xa,"variance","batchNorm");let Aa;Sa!=null&&(Aa=convertToTensor$1(Sa,"scale","batchNorm"));let Fa;ba!=null&&(Fa=convertToTensor$1(ba,"offset","batchNorm")),assert$2(Ea.rank===ka.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$2(Fa==null||Ea.rank===Fa.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$2(Aa==null||Ea.rank===Aa.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const el={x:xAs4D(wa),scale:Aa,offset:Fa,mean:Ea,variance:ka},tl={varianceEpsilon:Ta},nl=ENGINE$1.runKernel(FusedBatchNorm$1,el,tl);return reshape$4(nl,wa.shape)}const batchNorm$3=op$1({batchNorm_});function batchNorm2d_(ha,aa,xa,ba,Sa,Ta){const wa=convertToTensor$1(ha,"x","batchNorm"),Ea=convertToTensor$1(aa,"mean","batchNorm"),ka=convertToTensor$1(xa,"variance","batchNorm");let Aa;Sa!=null&&(Aa=convertToTensor$1(Sa,"scale","batchNorm"));let Fa;return ba!=null&&(Fa=convertToTensor$1(ba,"offset","batchNorm")),assert$2(wa.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${wa.rank}.`),assert$2(Ea.rank===2||Ea.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${Ea.rank}.`),assert$2(ka.rank===2||ka.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${ka.rank}.`),Aa!=null&&assert$2(Aa.rank===2||Aa.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${Aa.rank}.`),Fa!=null&&assert$2(Fa.rank===2||Fa.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${Fa.rank}.`),batchNorm$3(wa,Ea,ka,Fa,Aa,Ta)}const batchNorm2d=op$1({batchNorm2d_});function batchNorm3d_(ha,aa,xa,ba,Sa,Ta){const wa=convertToTensor$1(ha,"x","batchNorm"),Ea=convertToTensor$1(aa,"mean","batchNorm"),ka=convertToTensor$1(xa,"variance","batchNorm");let Aa;Sa!=null&&(Aa=convertToTensor$1(Sa,"scale","batchNorm"));let Fa;return ba!=null&&(Fa=convertToTensor$1(ba,"offset","batchNorm")),assert$2(wa.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${wa.rank}.`),assert$2(Ea.rank===3||Ea.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${Ea.rank}.`),assert$2(ka.rank===3||ka.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${ka.rank}.`),Aa!=null&&assert$2(Aa.rank===3||Aa.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${Aa.rank}.`),Fa!=null&&assert$2(Fa.rank===3||Fa.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${Fa.rank}.`),batchNorm$3(wa,Ea,ka,Fa,Aa,Ta)}const batchNorm3d=op$1({batchNorm3d_});function batchNorm4d_(ha,aa,xa,ba,Sa,Ta){const wa=convertToTensor$1(ha,"x","batchNorm"),Ea=convertToTensor$1(aa,"mean","batchNorm"),ka=convertToTensor$1(xa,"variance","batchNorm");let Aa;Sa!=null&&(Aa=convertToTensor$1(Sa,"scale","batchNorm"));let Fa;return ba!=null&&(Fa=convertToTensor$1(ba,"offset","batchNorm")),assert$2(wa.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${wa.rank}.`),assert$2(Ea.rank===4||Ea.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${Ea.rank}.`),assert$2(ka.rank===4||ka.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${ka.rank}.`),Aa!=null&&assert$2(Aa.rank===4||Aa.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${Aa.rank}.`),Fa!=null&&assert$2(Fa.rank===4||Fa.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${Fa.rank}.`),batchNorm$3(wa,Ea,ka,Fa,Aa,Ta)}const batchNorm4d=op$1({batchNorm4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","bincount"),Sa=convertToTensor$1(aa,"weights","bincount");assert$2(ba.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${ba.dtype}`),assert$2(xa>=0,()=>`size must be non-negative, but got ${xa}.`),assert$2(Sa.size===ba.size||Sa.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${ba.shape}, weights shape: ${Sa.shape}.`);const Ta={x:ba,weights:Sa},wa={size:xa};return ENGINE$1.runKernel(Bincount$1,Ta,wa)}const bincount$3=op$1({bincount_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bitwiseAnd_(ha,aa){const xa=convertToTensor$1(ha,"x","bitwiseAnd"),ba=convertToTensor$1(aa,"y","bitwiseAnd");if(!arraysEqual$1(xa.shape,ba.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${xa.shape}, y: ${ba.shape}`);if(xa.dtype!=="int32"||ba.dtype!=="int32")throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${xa.dtype} and type of y: ${ba.dtype}`);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(BitwiseAnd$1,Sa)}const bitwiseAnd$3=op$1({bitwiseAnd_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs_(ha,aa){const xa=convertToTensor$1(ha,"s0","broadcastArgs","int32"),ba=convertToTensor$1(aa,"s1","broadcastArgs","int32");if(xa.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${xa.rank}`);if(ba.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${ba.rank}`);const Sa={s0:xa,s1:ba};return ENGINE$1.runKernel(BroadcastArgs$1,Sa)}const broadcastArgs$3=op$1({broadcastArgs_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastTo_$1(ha,aa){let xa=convertToTensor$1(ha,"broadcastTo","x");const ba=xa.shape;if(assertNonNegativeIntegerDimensions$1(aa),aa.length<xa.rank)throw new Error(`broadcastTo(): shape.length=${aa.length} < input.rank=${xa.rank}.`);if(aa.length>xa.rank){const Aa=xa.shape.slice();for(;Aa.length<aa.length;)Aa.unshift(1);xa=reshape$4(xa,Aa)}const Sa=xa.shape,Ta=Array.from(aa);for(let Aa=aa.length-1;Aa>=0;Aa--)if(Sa[Aa]===aa[Aa])Ta[Aa]=1;else if(xa.shape[Aa]!==1)throw new Error(`broadcastTo(): [${ba}] cannot be broadcast to [${aa}].`);if(Ta.map((Aa,Fa)=>Aa>1?Fa:-1).filter(Aa=>Aa>=0).length===0)return clone$1(xa);const Ea={x:xa},ka={reps:Ta};return ENGINE$1.runKernel(Tile$1,Ea,ka)}const broadcastTo$1=op$1({broadcastTo_:broadcastTo_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ceil_(ha){const xa={x:convertToTensor$1(ha,"x","ceil","float32")};return ENGINE$1.runKernel(Ceil$1,xa)}const ceil$3=op$1({ceil_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$4(ha,aa,xa){assertNonNegativeIntegerDimensions$1(ha),xa=xa||inferDtype$1(aa);const ba={shape:ha,value:aa,dtype:xa};return ENGINE$1.runKernel(Fill$1,{},ba)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","clipByValue");if(assert$2(aa<=xa,()=>`Error in clip: min (${aa}) must be less than or equal to max (${xa}).`),aa===xa)return fill$4(ba.shape,aa,ba.dtype);const Sa={x:ba},Ta={clipValueMin:aa,clipValueMax:xa};return ENGINE$1.runKernel(ClipByValue$1,Sa,Ta)}const clipByValue$3=op$1({clipByValue_});function concat1d_(ha){return concat$3(ha,0)}const concat1d=op$1({concat1d_});function concat2d_(ha,aa){return concat$3(ha,aa)}const concat2d=op$1({concat2d_});function concat3d_(ha,aa){return concat$3(ha,aa)}const concat3d=op$1({concat3d_});function concat4d_(ha,aa){return concat$3(ha,aa)}const concat4d=op$1({concat4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d_(ha,aa,xa,ba,Sa="NHWC",Ta=[1,1],wa){const Ea=convertToTensor$1(ha,"x","conv2d","float32"),ka=convertToTensor$1(aa,"filter","conv2d","float32");let Aa=Ea,Fa=!1;Ea.rank===3&&(Fa=!0,Aa=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1],Ea.shape[2]])),assert$2(Aa.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${Aa.rank}.`),assert$2(ka.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${ka.rank}.`),checkPadOnDimRoundingMode$1("conv2d",ba,wa);const La=Sa==="NHWC"?Aa.shape[3]:Aa.shape[1];assert$2(La===ka.shape[2],()=>`Error in conv2d: depth of input (${La}) must match input depth for filter ${ka.shape[2]}.`),assert$2(eitherStridesOrDilationsAreOne$1(xa,Ta),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${xa} and dilations '${Ta}'`),assert$2(stridesOrDilationsArePositive$1(Ta),()=>"Error in conv2D: Dilated rates should be larger than 0."),assert$2(stridesOrDilationsArePositive$1(xa),()=>"Error in conv2D: Strides should be larger than 0.");const el={x:Aa,filter:ka},tl={strides:xa,pad:ba,dataFormat:Sa,dilations:Ta,dimRoundingMode:wa},nl=ENGINE$1.runKernel(Conv2D$2,el,tl);return Fa?reshape$4(nl,[nl.shape[1],nl.shape[2],nl.shape[3]]):nl}const conv2d$3=op$1({conv2d_});function conv1d_(ha,aa,xa,ba,Sa="NWC",Ta=1,wa){const Ea=convertToTensor$1(ha,"x","conv1d"),ka=convertToTensor$1(aa,"filter","conv1d");let Aa=Ea,Fa=!1;Ea.rank===2&&(Fa=!0,Aa=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1]])),assert$2(Aa.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${Aa.rank}.`),assert$2(ka.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${ka.rank}.`),checkPadOnDimRoundingMode$1("conv1d",ba,wa),assert$2(Aa.shape[2]===ka.shape[1],()=>`Error in conv1d: depth of input (${Aa.shape[2]}) must match input depth for filter ${ka.shape[1]}.`),assert$2(eitherStridesOrDilationsAreOne$1(xa,Ta),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${xa} and dilation '${Ta}'`),assert$2(stridesOrDilationsArePositive$1(Ta),()=>"Error in conv1D: Dilated rates should be larger than 0."),assert$2(stridesOrDilationsArePositive$1(xa),()=>"Error in conv1D: Stride should be larger than 0."),assert$2(Sa==="NWC",()=>`Error in conv1d: got dataFormat of ${Sa} but only NWC is currently supported.`);const La=reshape$4(ka,[1,ka.shape[0],ka.shape[1],ka.shape[2]]),el=reshape$4(Aa,[Aa.shape[0],1,Aa.shape[1],Aa.shape[2]]),sl=conv2d$3(el,La,[1,xa],ba,"NHWC",[1,Ta],wa);return Fa?reshape$4(sl,[sl.shape[2],sl.shape[3]]):reshape$4(sl,[sl.shape[0],sl.shape[2],sl.shape[3]])}const conv1d=op$1({conv1d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput_(ha,aa,xa,ba,Sa,Ta="NHWC",wa){assert$2(ha.length===aa.rank,()=>`Length of inShape (${ha.length}) and rank of dy (${aa.rank}) must match`);let Ea=ha,ka=aa,Aa=!1;aa.rank===3&&(Aa=!0,ka=reshape$4(aa,[1,aa.shape[0],aa.shape[1],aa.shape[2]]),Ea=[1,ha[0],ha[1],ha[2]]),assert$2(Ea.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${Ea.length}.`),assert$2(ka.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${ka.rank}`),assert$2(xa.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${xa.rank}`);const Fa=Ta==="NHWC"?Ea[3]:Ea[1],La=Ta==="NHWC"?ka.shape[3]:ka.shape[1];assert$2(Fa===xa.shape[2],()=>`Error in conv2dDerInput: depth of input (${Fa}) must match input depth for filter ${xa.shape[2]}.`),assert$2(La===xa.shape[3],()=>`Error in conv2dDerInput: depth of output (${La}) must match output depth for filter ${xa.shape[3]}.`),checkPadOnDimRoundingMode$1("conv2dDerInput",Sa,wa);const el={dy:ka,filter:xa},tl={strides:ba,pad:Sa,dataFormat:Ta,dimRoundingMode:wa,inputShape:Ea},nl=ENGINE$1.runKernel(Conv2DBackpropInput$1,el,tl);return Aa?reshape$4(nl,[nl.shape[1],nl.shape[2],nl.shape[3]]):nl}const conv2DBackpropInput$3=op$1({conv2DBackpropInput_});function conv2dTranspose_(ha,aa,xa,ba,Sa,Ta){const wa=convertToTensor$1(ha,"x","conv2dTranspose"),Ea=convertToTensor$1(aa,"filter","conv2dTranspose");return conv2DBackpropInput$3(xa,wa,Ea,ba,Sa,"NHWC",Ta)}const conv2dTranspose=op$1({conv2dTranspose_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3d_(ha,aa,xa,ba,Sa="NDHWC",Ta=[1,1,1]){const wa=convertToTensor$1(ha,"x","conv3d"),Ea=convertToTensor$1(aa,"filter","conv3d");let ka=wa,Aa=!1;wa.rank===4&&(Aa=!0,ka=reshape$4(wa,[1,wa.shape[0],wa.shape[1],wa.shape[2],wa.shape[3]])),assert$2(ka.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${ka.rank}.`),assert$2(Ea.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${Ea.rank}.`),assert$2(ka.shape[4]===Ea.shape[3],()=>`Error in conv3d: depth of input (${ka.shape[4]}) must match input depth for filter ${Ea.shape[3]}.`),assert$2(eitherStridesOrDilationsAreOne$1(xa,Ta),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${xa} and dilations '${Ta}'`),assert$2(Sa==="NDHWC",()=>`Error in conv3d: got dataFormat of ${Sa} but only NDHWC is currently supported.`),assert$2(stridesOrDilationsArePositive$1(Ta),()=>"Error in conv3D: Dilated rates should be larger than 0."),assert$2(stridesOrDilationsArePositive$1(xa),()=>"Error in conv3D: Strides should be larger than 0.");const Fa={x:ka,filter:Ea},La={strides:xa,pad:ba,dataFormat:Sa,dilations:Ta},el=ENGINE$1.runKernel(Conv3D$2,Fa,La);return Aa?reshape$4(el,[el.shape[1],el.shape[2],el.shape[3],el.shape[4]]):el}const conv3d=op$1({conv3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput_(ha,aa,xa,ba,Sa){assert$2(ha.length===aa.rank,()=>`Length of inShape (${ha.length}) and rank of dy (${aa.rank}) must match`);let Ta=ha,wa=aa,Ea=!1;aa.rank===4&&(Ea=!0,wa=reshape$4(aa,[1,aa.shape[0],aa.shape[1],aa.shape[2],aa.shape[3]]),Ta=[1,ha[0],ha[1],ha[2],ha[3]]);const ka=Ta[4],Aa=wa.shape[4];assert$2(Ta.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${Ta.length}.`),assert$2(wa.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${wa.rank}`),assert$2(xa.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${xa.rank}`),assert$2(ka===xa.shape[3],()=>`Error in conv3dDerInput: depth of input (${ka}) must match input depth for filter ${xa.shape[3]}.`),assert$2(Aa===xa.shape[4],()=>`Error in conv3dDerInput: depth of output (${Aa}) must match output depth for filter ${xa.shape[4]}.`);const Fa={dy:wa,filter:xa},La={pad:Sa,strides:ba,inputShape:Ta},el=ENGINE$1.runKernel(Conv3DBackpropInputV2$1,Fa,La);return Ea?reshape$4(el,[el.shape[1],el.shape[2],el.shape[3],el.shape[4]]):el}const conv3DBackpropInput$2=op$1({conv3DBackpropInput_});function conv3dTranspose_(ha,aa,xa,ba,Sa){const Ta=convertToTensor$1(ha,"x","conv3dTranspose"),wa=convertToTensor$1(aa,"filter","conv3dTranspose");return conv3DBackpropInput$2(xa,Ta,wa,ba,Sa)}const conv3dTranspose=op$1({conv3dTranspose_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cos_(ha){const xa={x:convertToTensor$1(ha,"x","cos","float32")};return ENGINE$1.runKernel(Cos$1,xa)}const cos$3=op$1({cos_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cosh_(ha){const xa={x:convertToTensor$1(ha,"x","cosh","float32")};return ENGINE$1.runKernel(Cosh$1,xa)}const cosh$3=op$1({cosh_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod_(ha,aa=0,xa=!1,ba=!1){const Ta={x:convertToTensor$1(ha,"x","cumprod")},wa={axis:aa,exclusive:xa,reverse:ba};return ENGINE$1.runKernel(Cumprod$1,Ta,wa)}const cumprod$3=op$1({cumprod_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum_(ha,aa=0,xa=!1,ba=!1){const Ta={x:convertToTensor$1(ha,"x","cumsum")},wa={axis:aa,exclusive:xa,reverse:ba};return ENGINE$1.runKernel(Cumsum$1,Ta,wa)}const cumsum$3=op$1({cumsum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount_(ha,aa,xa,ba=!1){const Sa=convertToTensor$1(ha,"x","denseBincount"),Ta=convertToTensor$1(aa,"weights","denseBincount");assert$2(Sa.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${Sa.dtype}`),assert$2(Sa.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${Sa.rank}.`),assert$2(xa>=0,()=>`size must be non-negative, but got ${xa}.`),assert$2(Ta.size===Sa.size||Ta.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${Sa.shape}, weights shape: ${Ta.shape}.`);const wa={x:Sa,weights:Ta},Ea={size:xa,binaryOutput:ba};return ENGINE$1.runKernel(DenseBincount$1,wa,Ea)}const denseBincount$3=op$1({denseBincount_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace_(ha,aa,xa="NHWC"){const ba=convertToTensor$1(ha,"x","depthToSpace","float32"),Sa=xa==="NHWC"?ba.shape[1]:ba.shape[2],Ta=xa==="NHWC"?ba.shape[2]:ba.shape[3],wa=xa==="NHWC"?ba.shape[3]:ba.shape[1];assert$2(aa>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${aa}`),assert$2(Sa*aa>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${Sa} and ${aa}  for depthToSpace with input shape
    ${ba.shape}`),assert$2(Ta*aa>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${Ta} and ${aa} for depthToSpace with input shape
        ${ba.shape}`),assert$2(wa%(aa*aa)===0,()=>`Dimension size must be evenly divisible by ${aa*aa} but is ${wa} for depthToSpace with input shape ${ba.shape}`);const Ea={x:ba},ka={blockSize:aa,dataFormat:xa};return ENGINE$1.runKernel(DepthToSpace$1,Ea,ka)}const depthToSpace$3=op$1({depthToSpace_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2d_(ha,aa,xa,ba,Sa="NHWC",Ta=[1,1],wa){const Ea=convertToTensor$1(ha,"x","depthwiseConv2d","float32"),ka=convertToTensor$1(aa,"filter","depthwiseConv2d","float32");let Aa=Ea,Fa=!1;Ea.rank===3&&(Fa=!0,Aa=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1],Ea.shape[2]])),assert$2(Aa.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${Aa.rank}.`),assert$2(ka.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${ka.rank}.`);const La=Sa==="NHWC"?Aa.shape[3]:Aa.shape[1];assert$2(La===ka.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${La}) must match the inChannels dimension in filter ${ka.shape[2]}.`),checkPadOnDimRoundingMode$1("depthwiseConv2d",ba,wa);const el={x:Aa,filter:ka},tl={strides:xa,pad:ba,dataFormat:Sa,dilations:Ta,dimRoundingMode:wa},nl=ENGINE$1.runKernel(DepthwiseConv2dNative$1,el,tl);return Fa?reshape$4(nl,[nl.shape[1],nl.shape[2],nl.shape[3]]):nl}const depthwiseConv2d$2=op$1({depthwiseConv2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag_(ha){const xa={x:convertToTensor$1(ha,"x","diag")};return ENGINE$1.runKernel(Diag$1,xa)}const diag$3=op$1({diag_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2d_(ha,aa,xa,ba,Sa=[1,1],Ta="NHWC"){const wa=convertToTensor$1(ha,"x","dilation2d"),Ea=convertToTensor$1(aa,"filter","dilation2d");assert$2(wa.rank===3||wa.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${wa.rank}.`),assert$2(Ea.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${Ea.rank}.`),assert$2(Ta==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${Ta}`);let ka=wa,Aa=!1;wa.rank===3&&(ka=reshape$4(wa,[1,wa.shape[0],wa.shape[1],wa.shape[2]]),Aa=!0),assert$2(ka.shape[3]===Ea.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${ka.shape[3]} vs ${Ea.shape[2]}`);const Fa={x:ka,filter:Ea},La={strides:xa,pad:ba,dilations:Sa},el=ENGINE$1.runKernel(Dilation2D$1,Fa,La);return Aa?reshape$4(el,[el.shape[1],el.shape[2],el.shape[3]]):el}const dilation2d=op$1({dilation2d_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getBroadcastDims$3(ha,aa){const xa=ha.length,ba=[];for(let Sa=0;Sa<xa;Sa++){const Ta=xa-1-Sa,wa=ha[Ta]||1;(aa[aa.length-1-Sa]||1)>1&&wa===1&&ba.unshift(Ta)}return ba}function getReductionAxes$1(ha,aa){const xa=[];for(let ba=0;ba<aa.length;ba++){const Sa=ha[ha.length-ba-1],Ta=aa.length-ba-1,wa=aa[Ta];(Sa==null||Sa===1&&wa>1)&&xa.unshift(Ta)}return xa}function assertAndGetBroadcastShape$1(ha,aa){const xa=Math.max(ha.length,aa.length),ba=new Array(xa);for(let Sa=0;Sa<xa;Sa++){let Ta=ha[ha.length-Sa-1];Ta==null&&(Ta=1);let wa=aa[aa.length-Sa-1];if(wa==null&&(wa=1),Ta===1)ba[xa-Sa-1]=wa;else if(wa===1)ba[xa-Sa-1]=Ta;else if(Ta!==wa){const Ea=`Operands could not be broadcast together with shapes ${ha} and ${aa}.`;throw Error(Ea)}else ba[xa-Sa-1]=Ta}return ba}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function equal_(ha,aa){let xa=convertToTensor$1(ha,"a","equal","string_or_numeric"),ba=convertToTensor$1(aa,"b","equal","string_or_numeric");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Equal$1,Sa)}const equal$3=op$1({equal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function where_(ha,aa,xa){const ba=convertToTensor$1(aa,"a","where"),Sa=convertToTensor$1(xa,"b","where"),Ta=convertToTensor$1(ha,"condition","where","bool"),wa=assertAndGetBroadcastShape$1(assertAndGetBroadcastShape$1(Ta.shape,ba.shape),Sa.shape),Ea=broadcastTo$1(Ta,wa),ka=broadcastTo$1(ba,wa),Aa=broadcastTo$1(Sa,wa),Fa={condition:Ea,t:ka,e:Aa};return ENGINE$1.runKernel(Select$1,Fa)}const where=op$1({where_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike_$1(ha){const xa={x:convertToTensor$1(ha,"x","zerosLike")};return ENGINE$1.runKernel(ZerosLike$1,xa)}const zerosLike$4=op$1({zerosLike_:zerosLike_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function divNoNan_(ha,aa){let xa=convertToTensor$1(ha,"a","div"),ba=convertToTensor$1(aa,"b","div");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa=div$2(xa,ba),Ta=zerosLike$4(Sa),wa=equal$3(ba,Ta);return where(wa,Ta,Sa)}const divNoNan=op$1({divNoNan_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dot_(ha,aa){const xa=convertToTensor$1(ha,"t1","dot"),ba=convertToTensor$1(aa,"t2","dot");assert$2((xa.rank===1||xa.rank===2)&&(ba.rank===1||ba.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${xa.rank} and ${ba.rank}.`);const Sa=xa.rank===1?xa.size:xa.shape[1],Ta=ba.rank===1?ba.size:ba.shape[0];if(assert$2(Sa===Ta,()=>`Error in dot: inner dimensions of inputs must match, but got ${Sa} and ${Ta}.`),xa.rank===1&&ba.rank===1){const wa=reshape$4(xa,[1,-1]),Ea=reshape$4(ba,[-1,1]),ka=matMul$1(wa,Ea);return reshape$4(ka,[])}else if(xa.rank===1&&ba.rank===2){const wa=reshape$4(xa,[1,-1]),Ea=reshape$4(ba,[ba.shape[0],ba.shape[1]]),ka=matMul$1(wa,Ea);return reshape$4(ka,[ka.size])}else if(xa.rank===2&&ba.rank===1){const wa=reshape$4(ba,[-1,1]),Ea=matMul$1(xa,wa);return reshape$4(Ea,[Ea.size])}else{const wa=reshape$4(ba,[ba.shape[0],ba.shape[1]]);return matMul$1(xa,wa)}}const dot$1=op$1({dot_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum_(ha,...aa){const xa=aa.map((Sa,Ta)=>convertToTensor$1(Sa,`tensors${Ta}`,"einsum")),ba={equation:ha};return ENGINE$1.runKernel(Einsum$1,xa,ba)}const einsum$3=op$1({einsum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function elu_$1(ha){const xa={x:convertToTensor$1(ha,"x","elu","float32")};return ENGINE$1.runKernel(Elu$2,xa)}const elu$5=op$1({elu_:elu_$1});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ensureShape_(ha,aa){const xa=convertToTensor$1(ha,"x","ensureShape","string_or_numeric");if(!arraysEqualWithNull(xa.shape,aa))throw new Error(`EnsureShape: Shape of tensor ${xa.shape} is not compatible with expected shape ${aa}`);return ha}const ensureShape=op$1({ensureShape_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function erf_(ha){let aa=convertToTensor$1(ha,"x","erf");assert$2(aa.dtype==="int32"||aa.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),aa.dtype==="int32"&&(aa=cast$5(aa,"float32"));const xa={x:aa};return ENGINE$1.runKernel(Erf$1,xa)}const erf$3=op$1({erf_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function axesAreInnerMostDims$1(ha,aa){for(let xa=0;xa<ha.length;++xa)if(ha[ha.length-xa-1]!==aa-1-xa)return!1;return!0}function combineLocations$1(ha,aa,xa){const ba=ha.length+aa.length,Sa=[];let Ta=0,wa=0;for(let Ea=0;Ea<ba;Ea++)xa.indexOf(Ea)===-1?Sa.push(ha[Ta++]):Sa.push(aa[wa++]);return Sa}function computeOutAndReduceShapes$1(ha,aa){const xa=[],ba=ha.length;for(let Ta=0;Ta<ba;Ta++)aa.indexOf(Ta)===-1&&xa.push(ha[Ta]);const Sa=aa.map(Ta=>ha[Ta]);return[xa,Sa]}function expandShapeToKeepDim$1(ha,aa){const xa=aa.map(ba=>1);return combineLocations$1(ha,xa,aa)}function assertAxesAreInnerMostDims$1(ha,aa,xa){assert$2(axesAreInnerMostDims$1(aa,xa),()=>`${ha} supports only inner-most axes for now. Got axes ${aa} and rank-${xa} input.`)}function getAxesPermutation$1(ha,aa){if(axesAreInnerMostDims$1(ha,aa))return null;const xa=[];for(let ba=0;ba<aa;++ba)ha.indexOf(ba)===-1&&xa.push(ba);return ha.forEach(ba=>xa.push(ba)),xa}function getUndoAxesPermutation$1(ha){return ha.map((aa,xa)=>[xa,aa]).sort((aa,xa)=>aa[1]-xa[1]).map(aa=>aa[0])}function getInnerMostAxes$1(ha,aa){const xa=[];for(let ba=aa-ha;ba<aa;++ba)xa.push(ba);return xa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max_(ha,aa=null,xa=!1){const Sa={x:convertToTensor$1(ha,"x","max")},Ta={reductionIndices:aa,keepDims:xa};return ENGINE$1.runKernel(Max$1,Sa,Ta)}const max$4=op$1({max_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min_(ha,aa=null,xa=!1){const Sa={x:convertToTensor$1(ha,"x","min")},Ta={axis:aa,keepDims:xa};return ENGINE$1.runKernel(Min$1,Sa,Ta)}const min$4=op$1({min_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pow_$1(ha,aa){let xa=convertToTensor$1(ha,"base","pow"),ba=convertToTensor$1(aa,"exp","pow");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Pow$1,Sa)}const pow$4=op$1({pow_:pow_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scalar$1(ha,aa){if((isTypedArray$1(ha)&&aa!=="string"||Array.isArray(ha))&&aa!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(aa==="string"&&isTypedArray$1(ha)&&!(ha instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return makeTensor$1(ha,[],[],aa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sqrt_$1(ha){const xa={x:convertToTensor$1(ha,"x","sqrt","float32")};return ENGINE$1.runKernel(Sqrt$1,xa)}const sqrt$4=op$1({sqrt_:sqrt_$1});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function square_$1(ha){const aa=convertToTensor$1(ha,"x","square"),xa={};return ENGINE$1.runKernel("Square",{x:aa},xa)}const square$4=op$1({square_:square_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum_$1(ha,aa=null,xa=!1){let ba=convertToTensor$1(ha,"x","sum");ba.dtype==="bool"&&(ba=cast$5(ba,"int32"));const Sa={x:ba},Ta={axis:aa,keepDims:xa};return ENGINE$1.runKernel(Sum$1,Sa,Ta)}const sum$5=op$1({sum_:sum_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function norm_(ha,aa="euclidean",xa=null,ba=!1){ha=convertToTensor$1(ha,"x","norm");const Sa=normImpl(ha,aa,xa);let Ta=Sa.shape;if(ba){const wa=parseAxisParam$1(xa,ha.shape);Ta=expandShapeToKeepDim$1(Sa.shape,wa)}return reshape$4(Sa,Ta)}function normImpl(ha,aa,xa=null){if(ha.rank===0)return abs$4(ha);if(ha.rank!==1&&xa===null)return normImpl(reshape$4(ha,[-1]),aa,xa);if(ha.rank===1||typeof xa=="number"||Array.isArray(xa)&&xa.length===1){if(aa===1)return sum$5(abs$4(ha),xa);if(aa===1/0)return max$4(abs$4(ha),xa);if(aa===-1/0)return min$4(abs$4(ha),xa);if(aa==="euclidean"||aa===2)return sqrt$4(sum$5(pow$4(abs$4(ha),scalar$1(2,"int32")),xa));throw new Error(`Error in norm: invalid ord value: ${aa}`)}if(Array.isArray(xa)&&xa.length===2){if(aa===1)return max$4(sum$5(abs$4(ha),xa[0]),xa[1]-1);if(aa===1/0)return max$4(sum$5(abs$4(ha),xa[1]),xa[0]);if(aa===-1/0)return min$4(sum$5(abs$4(ha),xa[1]),xa[0]);if(aa==="fro"||aa==="euclidean")return sqrt$4(sum$5(square$4(ha),xa));throw new Error(`Error in norm: invalid ord value: ${aa}`)}throw new Error(`Error in norm: invalid axis: ${xa}`)}const norm=op$1({norm_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function euclideanNorm_(ha,aa=null,xa=!1){return norm(ha,"euclidean",aa,xa)}const euclideanNorm=op$1({euclideanNorm_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function exp_(ha){const xa={x:convertToTensor$1(ha,"x","exp")};return ENGINE$1.runKernel(Exp$1,xa)}const exp$3=op$1({exp_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims_(ha,aa=0){const xa=convertToTensor$1(ha,"x","expandDims","string_or_numeric");assert$2(aa<=xa.rank,()=>"Axis must be <= rank of the tensor");const ba={input:xa},Sa={dim:aa};return ENGINE$1.runKernel(ExpandDims$1,ba,Sa)}const expandDims$4=op$1({expandDims_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expm1_(ha){const xa={x:convertToTensor$1(ha,"x","expm1")};return ENGINE$1.runKernel(Expm1$1,xa)}const expm1$3=op$1({expm1_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile_(ha,aa){const xa=convertToTensor$1(ha,"x","tile","string_or_numeric");assert$2(xa.rank===aa.length,()=>`Error in transpose: rank of input ${xa.rank} must match length of reps ${aa}.`);const ba={x:xa},Sa={reps:aa};return ENGINE$1.runKernel(Tile$1,ba,Sa)}const tile$4=op$1({tile_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function eye_(ha,aa,xa,ba="float32"){aa==null&&(aa=ha);const Sa=buffer$1([ha,aa],ba),Ta=ha<=aa?ha:aa;for(let Ea=0;Ea<Ta;++Ea)Sa.set(1,Ea,Ea);const wa=reshape$4(Sa.toTensor(),[ha,aa]);if(xa==null)return wa;if(xa.length===1)return tile$4(expandDims$4(wa,0),[xa[0],1,1]);if(xa.length===2)return tile$4(expandDims$4(expandDims$4(wa,0),0),[xa[0],xa[1],1,1]);if(xa.length===3)return tile$4(expandDims$4(expandDims$4(expandDims$4(wa,0),0),0),[xa[0],xa[1],xa[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${xa.length}D.`)}const eye=op$1({eye_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floor_(ha){const xa={x:convertToTensor$1(ha,"x","floor","float32")};return ENGINE$1.runKernel(Floor$1,xa)}const floor$3=op$1({floor_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gather_(ha,aa,xa=0,ba=0){const Sa=convertToTensor$1(ha,"x","gather"),Ta=convertToTensor$1(aa,"indices","gather","int32"),wa={x:Sa,indices:Ta},Ea={axis:xa,batchDims:ba};return ENGINE$1.runKernel(GatherV2$1,wa,Ea)}const gather$1=op$1({gather_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function greater_(ha,aa){let xa=convertToTensor$1(ha,"a","greater","string_or_numeric"),ba=convertToTensor$1(aa,"b","greater","string_or_numeric");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Greater$1,Sa)}const greater$3=op$1({greater_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function greaterEqual_(ha,aa){let xa=convertToTensor$1(ha,"a","greaterEqual","string_or_numeric"),ba=convertToTensor$1(aa,"b","greaterEqual","string_or_numeric");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(GreaterEqual$1,Sa)}const greaterEqual$3=op$1({greaterEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag_(ha){const xa={input:convertToTensor$1(ha,"input","imag")};return ENGINE$1.runKernel(Imag$1,xa)}const imag$3=op$1({imag_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isFinite_(ha){const xa={x:convertToTensor$1(ha,"x","isFinite")};return ENGINE$1.runKernel(IsFinite$1,xa)}const isFinite$4=op$1({isFinite_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isInf_(ha){const xa={x:convertToTensor$1(ha,"x","isInf")};return ENGINE$1.runKernel(IsInf$1,xa)}const isInf$3=op$1({isInf_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isNaN_(ha){const xa={x:convertToTensor$1(ha,"x","isNaN")};return ENGINE$1.runKernel(IsNan$1,xa)}const isNaN$4=op$1({isNaN_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu_$1(ha,aa=.2){const ba={x:convertToTensor$1(ha,"x","leakyRelu")},Sa={alpha:aa};return ENGINE$1.runKernel(LeakyRelu$1,ba,Sa)}const leakyRelu$4=op$1({leakyRelu_:leakyRelu_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function less_(ha,aa){let xa=convertToTensor$1(ha,"a","less","string_or_numeric"),ba=convertToTensor$1(aa,"b","less","string_or_numeric");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Less$1,Sa)}const less$3=op$1({less_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lessEqual_(ha,aa){let xa=convertToTensor$1(ha,"a","lessEqual","string_or_numeric"),ba=convertToTensor$1(aa,"b","lessEqual","string_or_numeric");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(LessEqual$1,Sa)}const lessEqual$3=op$1({lessEqual_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linspace(ha,aa,xa){if(xa<=0)throw new Error("The number of values should be positive.");const ba={start:ha,stop:aa,num:xa};return ENGINE$1.runKernel(LinSpace$1,{},ba)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function localResponseNormalization_(ha,aa=5,xa=1,ba=1,Sa=.5){const Ta=convertToTensor$1(ha,"x","localResponseNormalization");assert$2(Ta.rank===4||Ta.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${Ta.rank}.`),assert$2(isInt$1(aa),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${aa}.`);let wa=Ta,Ea=!1;Ta.rank===3&&(Ea=!0,wa=reshape$4(Ta,[1,Ta.shape[0],Ta.shape[1],Ta.shape[2]]));const ka={x:wa},Aa={depthRadius:aa,bias:xa,alpha:ba,beta:Sa},Fa=ENGINE$1.runKernel(LRN$1,ka,Aa);return Ea?reshape$4(Fa,[Fa.shape[1],Fa.shape[2],Fa.shape[3]]):Fa}const localResponseNormalization=op$1({localResponseNormalization_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function log_(ha){const xa={x:convertToTensor$1(ha,"x","log","float32")};return ENGINE$1.runKernel(Log$1,xa)}const log$4=op$1({log_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function log1p_(ha){const xa={x:convertToTensor$1(ha,"x","log1p")};return ENGINE$1.runKernel(Log1p$1,xa)}const log1p$3=op$1({log1p_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variableGrads$1(ha,aa){assert$2(isFunction$1(ha),()=>"The f passed in variableGrads(f) must be a function"),assert$2(aa==null||Array.isArray(aa)&&aa.every(Aa=>Aa instanceof Variable$1),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const xa=aa!=null;if(!xa){aa=[];for(const Aa in ENGINE$1.registeredVariables)aa.push(ENGINE$1.registeredVariables[Aa])}const ba=xa?aa.filter(Aa=>!Aa.trainable):null,Sa=aa.length;aa=aa.filter(Aa=>Aa.trainable),assert$2(aa.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${Sa} variables is trainable.`);const Ta=!0,{value:wa,grads:Ea}=ENGINE$1.gradients(ha,aa,null,Ta);assert$2(Ea.some(Aa=>Aa!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),assert$2(wa.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${wa.rank} tensor`);const ka={};return aa.forEach((Aa,Fa)=>{Ea[Fa]!=null&&(ka[Aa.name]=Ea[Fa])}),ba!=null&&ba.forEach(Aa=>ka[Aa.name]=null),{value:wa,grads:ka}}function customGrad(ha){return ENGINE$1.customGrad(ha)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function neg_(ha){const xa={x:convertToTensor$1(ha,"x","neg")};return ENGINE$1.runKernel(Neg$1,xa)}const neg$3=op$1({neg_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softplus_(ha){const xa={x:convertToTensor$1(ha,"x","softplus")};return ENGINE$1.runKernel(Softplus$2,xa)}const softplus$3=op$1({softplus_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSigmoid_(ha){const aa=convertToTensor$1(ha,"x","logSigmoid");return customGrad(ba=>({value:neg$3(softplus$3(neg$3(ba))),gradFunc:wa=>mul$1(wa,sigmoid$4(neg$3(ba)))}))(aa)}const logSigmoid=op$1({logSigmoid_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sub_$1(ha,aa){let xa=convertToTensor$1(ha,"a","sub"),ba=convertToTensor$1(aa,"b","sub");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Sub$1,Sa)}const sub$4=op$1({sub_:sub_$1});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSoftmax_(ha,aa=-1){const xa=convertToTensor$1(ha,"logits","logSoftmax");if(aa===-1&&(aa=xa.rank-1),aa!==xa.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${xa.rank} and axis was ${aa}`);return customGrad((Sa,Ta)=>{const Ea=max$4(Sa,aa,!0),ka=sub$4(Sa,Ea),Aa=sub$4(cast$5(ka,"float32"),log$4(sum$5(exp$3(ka),aa,!0)));return Ta([Aa]),{value:Aa,gradFunc:(La,el)=>{const[tl]=el,nl=!0,rl=exp$3(tl);return sub$4(La,mul$1(sum$5(La,aa,nl),rl))}}})(xa)}const logSoftmax=op$1({logSoftmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logSumExp_(ha,aa=null,xa=!1){const ba=convertToTensor$1(ha,"x","logSumExp"),Sa=parseAxisParam$1(aa,ba.shape),Ta=max$4(ba,Sa,!0),wa=sub$4(ba,Ta),Ea=exp$3(wa),ka=sum$5(Ea,Sa),Aa=log$4(ka),Fa=add$3(reshape$4(Ta,Aa.shape),Aa);if(xa){const La=expandShapeToKeepDim$1(Fa.shape,Sa);return reshape$4(Fa,La)}return Fa}const logSumExp=op$1({logSumExp_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalAnd_(ha,aa){const xa=convertToTensor$1(ha,"a","logicalAnd","bool"),ba=convertToTensor$1(aa,"b","logicalAnd","bool");assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(LogicalAnd$1,Sa)}const logicalAnd$3=op$1({logicalAnd_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalNot_(ha){const xa={x:convertToTensor$1(ha,"x","logicalNot","bool")};return ENGINE$1.runKernel(LogicalNot$1,xa)}const logicalNot$3=op$1({logicalNot_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalOr_(ha,aa){const xa=convertToTensor$1(ha,"a","logicalOr","bool"),ba=convertToTensor$1(aa,"b","logicalOr","bool");assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(LogicalOr$1,Sa)}const logicalOr$3=op$1({logicalOr_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logicalXor_(ha,aa){const xa=convertToTensor$1(ha,"a","logicalXor","bool"),ba=convertToTensor$1(aa,"b","logicalXor","bool");return assertAndGetBroadcastShape$1(xa.shape,ba.shape),logicalAnd$3(logicalOr$3(ha,aa),logicalNot$3(logicalAnd$3(ha,aa)))}const logicalXor=op$1({logicalXor_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX$2=2147483648;function searchSorted_(ha,aa,xa="left"){const ba=convertToTensor$1(ha,"sortedSequence","searchSorted"),Sa=convertToTensor$1(aa,"values","searchSorted"),Ta=ba.shape[ba.shape.length-1],wa=Sa.shape[Sa.shape.length-1],Ea=reshape$4(ba,[-1,Ta]),ka=reshape$4(Sa,[-1,wa]);if(Ea.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(Ea.shape[0]!==ka.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(sizeFromShape$1(ka.shape)>=INT32_MAX$2)throw new Error(`values tensor size must less than ${INT32_MAX$2}`);if(Ea.shape[1]>=INT32_MAX$2)throw new Error(`trailing dim_size must less than ${INT32_MAX$2} for int32 output type, was ${Ea.shape[1]}`);const Aa={sortedSequence:Ea,values:ka},Fa={side:xa};return ENGINE$1.runKernel(SearchSorted$1,Aa,Fa)}const searchSorted$3=op$1({searchSorted_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lowerBound$1(ha,aa){return searchSorted$3(ha,aa,"left")}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool_(ha,aa,xa,ba,Sa){const Ta=convertToTensor$1(ha,"x","maxPool"),wa=1;let Ea=Ta,ka=!1;Ta.rank===3&&(ka=!0,Ea=reshape$4(Ta,[1,Ta.shape[0],Ta.shape[1],Ta.shape[2]])),assert$2(Ea.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${Ea.rank}.`),assert$2(eitherStridesOrDilationsAreOne$1(xa,wa),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${xa} and dilations '${wa}'`),checkPadOnDimRoundingMode$1("maxPool",ba,Sa);const Aa={x:Ea},Fa={filterSize:aa,strides:xa,pad:ba,dimRoundingMode:Sa},La=ENGINE$1.runKernel(MaxPool$1,Aa,Fa);return ka?reshape$4(La,[La.shape[1],La.shape[2],La.shape[3]]):La}const maxPool$3=op$1({maxPool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d_(ha,aa=[1,1,1],xa,ba,Sa,Ta="NDHWC"){const wa=convertToTensor$1(ha,"x","maxPool3d");let Ea=wa,ka=!1;wa.rank===4&&(ka=!0,Ea=reshape$4(wa,[1,wa.shape[0],wa.shape[1],wa.shape[2],wa.shape[3]])),assert$2(Ea.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${Ea.rank}.`),assert$2(Ta==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${Ta}`),checkPadOnDimRoundingMode$1("maxPool3d",ba,Sa);const Aa={x:Ea},Fa={filterSize:aa,strides:xa,pad:ba,dimRoundingMode:Sa,dataFormat:Ta},La=ENGINE$1.runKernel(MaxPool3D$1,Aa,Fa);return ka?reshape$4(La,[La.shape[1],La.shape[2],La.shape[3],La.shape[4]]):La}const maxPool3d$2=op$1({maxPool3d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmax_(ha,aa,xa,ba,Sa=!1){const wa={x:convertToTensor$1(ha,"x","maxPoolWithArgmax")},Ea={filterSize:aa,strides:xa,pad:ba,includeBatchInIndex:Sa},ka=ENGINE$1.runKernel(MaxPoolWithArgmax$1,wa,Ea);return{result:ka[0],indexes:ka[1]}}const maxPoolWithArgmax=op$1({maxPoolWithArgmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maximum_$1(ha,aa){let xa=convertToTensor$1(ha,"a","maximum"),ba=convertToTensor$1(aa,"b","maximum");[xa,ba]=makeTypesMatch$1(xa,ba),xa.dtype==="bool"&&(xa=cast$5(xa,"int32"),ba=cast$5(ba,"int32")),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Maximum$2,Sa)}const maximum$4=op$1({maximum_:maximum_$1});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean_(ha,aa=null,xa=!1){const Sa={x:convertToTensor$1(ha,"x","mean")},Ta={axis:aa,keepDims:xa};return ENGINE$1.runKernel(Mean$1,Sa,Ta)}const mean$1=op$1({mean_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros$2(ha,aa="float32"){if(assertNonNegativeIntegerDimensions$1(ha),aa==="complex64"){const ba=zeros$2(ha,"float32"),Sa=zeros$2(ha,"float32");return complex$4(ba,Sa)}const xa=makeZerosTypedArray$1(sizeFromShape$1(ha),aa);return ENGINE$1.makeTensor(xa,ha,aa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ones$1(ha,aa="float32"){if(assertNonNegativeIntegerDimensions$1(ha),aa==="complex64"){const ba=ones$1(ha,"float32"),Sa=zeros$2(ha,"float32");return complex$4(ba,Sa)}const xa=makeOnesTypedArray$1(sizeFromShape$1(ha),aa);return ENGINE$1.makeTensor(xa,ha,aa)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meshgrid(ha,aa,{indexing:xa="xy"}={}){if(xa!=="xy"&&xa!=="ij")throw new TypeError(`${xa} is not a valid third argument to meshgrid`);if(ha===void 0)return[];let ba=convertToTensor$1(ha,"x","meshgrid",ha instanceof Tensor$1?ha.dtype:"float32");if(aa===void 0)return[ba];let Sa=convertToTensor$1(aa,"y","meshgrid",aa instanceof Tensor$1?aa.dtype:"float32");const Ta=sizeFromShape$1(ba.shape),wa=sizeFromShape$1(Sa.shape);return xa==="xy"?(ba=reshape$4(ba,[1,-1]),Sa=reshape$4(Sa,[-1,1]),[matMul$1(ones$1([wa,1],ba.dtype),ba),matMul$1(Sa,ones$1([1,Ta],Sa.dtype))]):(ba=reshape$4(ba,[-1,1]),Sa=reshape$4(Sa,[1,-1]),[matMul$1(ba,ones$1([1,wa],ba.dtype)),matMul$1(ones$1([Ta,1],Sa.dtype),Sa)])}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function minimum_(ha,aa){let xa=convertToTensor$1(ha,"a","minimum"),ba=convertToTensor$1(aa,"b","minimum");[xa,ba]=makeTypesMatch$1(xa,ba),xa.dtype==="bool"&&(xa=cast$5(xa,"int32"),ba=cast$5(ba,"int32")),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Minimum$2,Sa)}const minimum$3=op$1({minimum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mirrorPad_(ha,aa,xa){assert$2(xa==="reflect"||xa==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${xa}.`);const ba=convertToTensor$1(ha,"x","mirrorPad");if(ba.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");assert$2(aa.length===ba.rank,()=>`Padding doesn't match input. Must be ${ba.rank}. Got ${aa.length}.`);const Sa=xa==="reflect"?1:0;for(let Ea=0;Ea<ba.rank;Ea++)assert$2(aa[Ea].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),assert$2(aa[Ea][0]>=0&&aa[Ea][0]<=ba.shape[Ea]-Sa&&aa[Ea][1]>=0&&aa[Ea][1]<=ba.shape[Ea]-Sa,()=>`Padding in dimension ${Ea} cannot be greater than or equal to ${ba.shape[Ea]-Sa} or less than 0 for input of shape ${ba.shape}`);const Ta={paddings:aa,mode:xa},wa={x:ba};return ENGINE$1.runKernel(MirrorPad$1,wa,Ta)}const mirrorPad$1=op$1({mirrorPad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mod_(ha,aa){let xa=convertToTensor$1(ha,"a","mod"),ba=convertToTensor$1(aa,"b","mod");[xa,ba]=makeTypesMatch$1(xa,ba);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(Mod$1,Sa)}const mod$3=op$1({mod_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function moments_(ha,aa=null,xa=!1){ha=convertToTensor$1(ha,"x","moments");const ba=parseAxisParam$1(aa,ha.shape),Sa=mean$1(ha,ba,xa);let Ta=Sa.shape;xa||(Ta=expandShapeToKeepDim$1(Sa.shape,ba));const wa=square$4(sub$4(cast$5(ha,"float32"),reshape$4(Sa,Ta))),Ea=mean$1(wa,ba,xa);return{mean:Sa,variance:Ea}}const moments=op$1({moments_});function multiRNNCell_(ha,aa,xa,ba){const Sa=convertToTensor$1(aa,"data","multiRNNCell"),Ta=convertToTensorArray(xa,"c","multiRNNCell"),wa=convertToTensorArray(ba,"h","multiRNNCell");let Ea=Sa;const ka=[];for(let La=0;La<ha.length;La++){const el=ha[La](Ea,Ta[La],wa[La]);ka.push(el[0]),ka.push(el[1]),Ea=el[1]}const Aa=[],Fa=[];for(let La=0;La<ka.length;La+=2)Aa.push(ka[La]),Fa.push(ka[La+1]);return[Aa,Fa]}const multiRNNCell=op$1({multiRNNCell_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial_(ha,aa,xa,ba=!1){const Sa=convertToTensor$1(ha,"logits","multinomial"),Ta=Sa.size,wa=Sa.rank;if(Ta<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${Ta}.`);if(wa>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${wa}`);xa=xa||Math.random();const ka={logits:wa===1?reshape$4(Sa,[1,-1]):Sa},Aa={numSamples:aa,seed:xa,normalized:ba},Fa=ENGINE$1.runKernel(Multinomial$1,ka,Aa);return wa===1?reshape$4(Fa,[Fa.size]):Fa}const multinomial$3=op$1({multinomial_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function notEqual_(ha,aa){let xa=convertToTensor$1(ha,"a","notEqual","string_or_numeric"),ba=convertToTensor$1(aa,"b","notEqual","string_or_numeric");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE$1.runKernel(NotEqual$1,Sa)}const notEqual$3=op$1({notEqual_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot_(ha,aa,xa=1,ba=0,Sa="int32"){if(aa<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${aa}`);const wa={indices:convertToTensor$1(ha,"indices","oneHot","int32")},Ea={dtype:Sa,depth:aa,onValue:xa,offValue:ba};return ENGINE$1.runKernel(OneHot$1,wa,Ea)}const oneHot$3=op$1({oneHot_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike_(ha){const xa={x:convertToTensor$1(ha,"x","onesLike")};return ENGINE$1.runKernel(OnesLike$1,xa)}const onesLike$3=op$1({onesLike_});function outerProduct_(ha,aa){const xa=convertToTensor$1(ha,"v1","outerProduct"),ba=convertToTensor$1(aa,"v2","outerProduct");assert$2(xa.rank===1&&ba.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${xa.rank} and ${ba.rank}.`);const Sa=reshape$4(xa,[-1,1]),Ta=reshape$4(ba,[1,-1]);return matMul$1(Sa,Ta)}const outerProduct=op$1({outerProduct_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pad_(ha,aa,xa=0){const ba=convertToTensor$1(ha,"x","pad");if(ba.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const Sa={paddings:aa,constantValue:xa},Ta={x:ba};return ENGINE$1.runKernel(PadV2$1,Ta,Sa)}const pad=op$1({pad_});function pad1d_(ha,aa,xa=0){return assert$2(aa.length===2,()=>"Invalid number of paddings. Must be length of 2."),pad(ha,[aa],xa)}const pad1d=op$1({pad1d_});function pad2d_(ha,aa,xa=0){return assert$2(aa.length===2&&aa[0].length===2&&aa[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),pad(ha,aa,xa)}const pad2d=op$1({pad2d_});function pad3d_(ha,aa,xa=0){return assert$2(aa.length===3&&aa[0].length===2&&aa[1].length===2&&aa[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),pad(ha,aa,xa)}const pad3d=op$1({pad3d_});function pad4d_(ha,aa,xa=0){return assert$2(aa.length===4&&aa[0].length===2&&aa[1].length===2&&aa[2].length===2&&aa[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),pad(ha,aa,xa)}const pad4d=op$1({pad4d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function spaceToBatchND_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","spaceToBatchND");assert$2(ba.rank>=1+aa.length,()=>`input rank ${ba.rank} should be > than [blockShape] ${aa.length}`),assert$2(xa.length===aa.length,()=>`paddings.shape[0] ${xa.length} must be equal to [blockShape] ${aa.length}`),assert$2(ba.shape.reduce((wa,Ea,ka)=>ka>0&&ka<=aa.length?wa&&(Ea+xa[ka-1][0]+xa[ka-1][1])%aa[ka-1]===0:wa,!0),()=>`input spatial dimensions ${ba.shape.slice(1)} with paddings ${xa.toString()} must be divisible by blockShapes ${aa.toString()}`);const Sa={x:ba},Ta={blockShape:aa,paddings:xa};return ENGINE$1.runKernel(SpaceToBatchND$1,Sa,Ta)}const spaceToBatchND$3=op$1({spaceToBatchND_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pool_(ha,aa,xa,ba,Sa,Ta,wa){Sa==null&&(Sa=[1,1]),Ta==null&&(Ta=1),ba===0&&(ba="valid");const Ea=convertToTensor$1(ha,"x","maxPool");let ka=Ea,Aa=!1;Ea.rank===3&&(Aa=!0,ka=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1],Ea.shape[2]])),assert$2(eitherStridesOrDilationsAreOne$1(Ta,Sa),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${Ta} and dilations '${Sa}'`);const Fa=computePool2DInfo$1(ka.shape,aa,Ta,Sa,ba),La=[Fa.dilationHeight,Fa.dilationWidth];let el;ba==="same"?el=withSpaceToBatchBasePaddings([Fa.filterHeight,Fa.filterWidth],La):el=[[0,0],[0,0]];const tl=La[0]===1&&La[1]===1,[nl,rl]=requiredSpaceToBatchPaddings([Fa.inHeight,Fa.inWidth],La,el),sl=tl?ba:"valid",ol=tl?ka:spaceToBatchND$3(ka,La,nl),ll=(xa==="avg"?()=>avgPool$3(ol,aa,Ta,sl,wa):()=>maxPool$3(ol,aa,Ta,sl,wa))(),il=tl?ll:batchToSpaceND$3(ll,La,rl);return Aa?reshape$4(il,[il.shape[1],il.shape[2],il.shape[3]]):il}function requiredSpaceToBatchPaddings(ha,aa,xa){const ba=xa.map(Fa=>Fa[0]),Sa=xa.map(Fa=>Fa[1]),Ta=ha.concat(ba,Sa),wa=aa.map((Fa,La)=>(Fa-Ta[La]%Fa)%Fa),Ea=Sa.map((Fa,La)=>Fa+wa[La]),ka=aa.map((Fa,La)=>[ba[La],Ea[La]]),Aa=aa.map((Fa,La)=>[0,wa[La]]);return[ka,Aa]}function withSpaceToBatchBasePaddings(ha,aa){const ba=ha.map((wa,Ea)=>wa+(wa-1)*(aa[Ea]-1)).map(wa=>wa-1),Sa=ba.map(wa=>Math.floor(wa/2)),Ta=ba.map((wa,Ea)=>wa-Sa[Ea]);return ba.map((wa,Ea)=>[Sa[Ea],Ta[Ea]])}const pool$1=op$1({pool_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prelu_$1(ha,aa){const xa=convertToTensor$1(ha,"x","prelu"),ba=convertToTensor$1(aa,"alpha","prelu"),Sa={x:xa,alpha:ba};return ENGINE$1.runKernel(Prelu$1,Sa)}const prelu$4=op$1({prelu_:prelu_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod_(ha,aa=null,xa=!1){let ba=convertToTensor$1(ha,"x","prod");ba.dtype==="bool"&&(ba=cast$5(ba,"int32"));const Sa={x:ba},Ta={axis:aa,keepDims:xa};return ENGINE$1.runKernel(Prod$1,Sa,Ta)}const prod$3=op$1({prod_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather_(ha,aa,xa,ba){const Sa=ha.map((Fa,La)=>convertToTensor$1(Fa,`tensors${La}`,"raggedGather","int32")),Ta=convertToTensor$1(aa,"paramsDenseValues","raggedGather"),wa=convertToTensor$1(xa,"indices","raggedGather","int32"),Ea={paramsNestedSplits:Sa,paramsDenseValues:Ta,indices:wa},ka={outputRaggedRank:ba},Aa=ENGINE$1.runKernel(RaggedGather$1,Ea,ka);return{outputNestedSplits:Aa.slice(0,Aa.length-1),outputDenseValues:Aa[Aa.length-1]}}const raggedGather$3=op$1({raggedGather_});/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange_(ha,aa,xa){const ba=convertToTensor$1(ha,"starts","raggedRange"),Sa=convertToTensor$1(aa,"limits","raggedRange",ba.dtype),Ta=convertToTensor$1(xa,"deltas","raggedRange",ba.dtype),wa={starts:ba,limits:Sa,deltas:Ta},Ea=ENGINE$1.runKernel(RaggedRange$1,wa);return{rtNestedSplits:Ea[0],rtDenseValues:Ea[1]}}const raggedRange$3=op$1({raggedRange_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor_(ha,aa,xa,ba,Sa){const Ta=convertToTensor$1(ha,"shape","raggedTensorToTensor","int32"),wa=convertToTensor$1(aa,"values","raggedTensorToTensor"),Ea=convertToTensor$1(xa,"defaultValue","raggedTensorToTensor",wa.dtype),ka=ba.map((La,el)=>convertToTensor$1(La,`tensors${el}`,"raggedTensorToTensor","int32")),Aa={shape:Ta,values:wa,defaultValue:Ea,rowPartitionTensors:ka},Fa={rowPartitionTypes:Sa};return ENGINE$1.runKernel(RaggedTensorToTensor$1,Aa,Fa)}const raggedTensorToTensor$3=op$1({raggedTensorToTensor_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rand_(ha,aa,xa){assertNonNegativeIntegerDimensions$1(ha);const ba=sizeFromShape$1(ha);let Sa=null;if(xa==null||xa==="float32")Sa=new Float32Array(ba);else if(xa==="int32")Sa=new Int32Array(ba);else if(xa==="bool")Sa=new Uint8Array(ba);else throw new Error(`Unknown data type ${xa}`);for(let Ta=0;Ta<ba;Ta++)Sa[Ta]=aa();return ENGINE$1.makeTensor(Sa,ha,xa)}const rand=op$1({rand_});var alea$1={exports:{}};alea$1.exports,function(ha){(function(aa,xa,ba){function Sa(ka){var Aa=this,Fa=Ea();Aa.next=function(){var La=2091639*Aa.s0+Aa.c*23283064365386963e-26;return Aa.s0=Aa.s1,Aa.s1=Aa.s2,Aa.s2=La-(Aa.c=La|0)},Aa.c=1,Aa.s0=Fa(" "),Aa.s1=Fa(" "),Aa.s2=Fa(" "),Aa.s0-=Fa(ka),Aa.s0<0&&(Aa.s0+=1),Aa.s1-=Fa(ka),Aa.s1<0&&(Aa.s1+=1),Aa.s2-=Fa(ka),Aa.s2<0&&(Aa.s2+=1),Fa=null}function Ta(ka,Aa){return Aa.c=ka.c,Aa.s0=ka.s0,Aa.s1=ka.s1,Aa.s2=ka.s2,Aa}function wa(ka,Aa){var Fa=new Sa(ka),La=Aa&&Aa.state,el=Fa.next;return el.int32=function(){return Fa.next()*4294967296|0},el.double=function(){return el()+(el()*2097152|0)*11102230246251565e-32},el.quick=el,La&&(typeof La=="object"&&Ta(La,Fa),el.state=function(){return Ta(Fa,{})}),el}function Ea(){var ka=4022871197,Aa=function(Fa){Fa=String(Fa);for(var La=0;La<Fa.length;La++){ka+=Fa.charCodeAt(La);var el=.02519603282416938*ka;ka=el>>>0,el-=ka,el*=ka,ka=el>>>0,el-=ka,ka+=el*4294967296}return(ka>>>0)*23283064365386963e-26};return Aa}xa&&xa.exports?xa.exports=wa:this.alea=wa})(commonjsGlobal,ha)}(alea$1);var aleaExports=alea$1.exports,xor128$1={exports:{}};xor128$1.exports,function(ha){(function(aa,xa,ba){function Sa(Ea){var ka=this,Aa="";ka.x=0,ka.y=0,ka.z=0,ka.w=0,ka.next=function(){var La=ka.x^ka.x<<11;return ka.x=ka.y,ka.y=ka.z,ka.z=ka.w,ka.w^=ka.w>>>19^La^La>>>8},Ea===(Ea|0)?ka.x=Ea:Aa+=Ea;for(var Fa=0;Fa<Aa.length+64;Fa++)ka.x^=Aa.charCodeAt(Fa)|0,ka.next()}function Ta(Ea,ka){return ka.x=Ea.x,ka.y=Ea.y,ka.z=Ea.z,ka.w=Ea.w,ka}function wa(Ea,ka){var Aa=new Sa(Ea),Fa=ka&&ka.state,La=function(){return(Aa.next()>>>0)/4294967296};return La.double=function(){do var el=Aa.next()>>>11,tl=(Aa.next()>>>0)/4294967296,nl=(el+tl)/(1<<21);while(nl===0);return nl},La.int32=Aa.next,La.quick=La,Fa&&(typeof Fa=="object"&&Ta(Fa,Aa),La.state=function(){return Ta(Aa,{})}),La}xa&&xa.exports?xa.exports=wa:this.xor128=wa})(commonjsGlobal,ha)}(xor128$1);var xor128Exports=xor128$1.exports,xorwow$1={exports:{}};xorwow$1.exports,function(ha){(function(aa,xa,ba){function Sa(Ea){var ka=this,Aa="";ka.next=function(){var La=ka.x^ka.x>>>2;return ka.x=ka.y,ka.y=ka.z,ka.z=ka.w,ka.w=ka.v,(ka.d=ka.d+362437|0)+(ka.v=ka.v^ka.v<<4^(La^La<<1))|0},ka.x=0,ka.y=0,ka.z=0,ka.w=0,ka.v=0,Ea===(Ea|0)?ka.x=Ea:Aa+=Ea;for(var Fa=0;Fa<Aa.length+64;Fa++)ka.x^=Aa.charCodeAt(Fa)|0,Fa==Aa.length&&(ka.d=ka.x<<10^ka.x>>>4),ka.next()}function Ta(Ea,ka){return ka.x=Ea.x,ka.y=Ea.y,ka.z=Ea.z,ka.w=Ea.w,ka.v=Ea.v,ka.d=Ea.d,ka}function wa(Ea,ka){var Aa=new Sa(Ea),Fa=ka&&ka.state,La=function(){return(Aa.next()>>>0)/4294967296};return La.double=function(){do var el=Aa.next()>>>11,tl=(Aa.next()>>>0)/4294967296,nl=(el+tl)/(1<<21);while(nl===0);return nl},La.int32=Aa.next,La.quick=La,Fa&&(typeof Fa=="object"&&Ta(Fa,Aa),La.state=function(){return Ta(Aa,{})}),La}xa&&xa.exports?xa.exports=wa:this.xorwow=wa})(commonjsGlobal,ha)}(xorwow$1);var xorwowExports=xorwow$1.exports,xorshift7$1={exports:{}};xorshift7$1.exports,function(ha){(function(aa,xa,ba){function Sa(Ea){var ka=this;ka.next=function(){var Fa=ka.x,La=ka.i,el,tl;return el=Fa[La],el^=el>>>7,tl=el^el<<24,el=Fa[La+1&7],tl^=el^el>>>10,el=Fa[La+3&7],tl^=el^el>>>3,el=Fa[La+4&7],tl^=el^el<<7,el=Fa[La+7&7],el=el^el<<13,tl^=el^el<<9,Fa[La]=tl,ka.i=La+1&7,tl};function Aa(Fa,La){var el,tl=[];if(La===(La|0))tl[0]=La;else for(La=""+La,el=0;el<La.length;++el)tl[el&7]=tl[el&7]<<15^La.charCodeAt(el)+tl[el+1&7]<<13;for(;tl.length<8;)tl.push(0);for(el=0;el<8&&tl[el]===0;++el);for(el==8?tl[7]=-1:tl[el],Fa.x=tl,Fa.i=0,el=256;el>0;--el)Fa.next()}Aa(ka,Ea)}function Ta(Ea,ka){return ka.x=Ea.x.slice(),ka.i=Ea.i,ka}function wa(Ea,ka){Ea==null&&(Ea=+new Date);var Aa=new Sa(Ea),Fa=ka&&ka.state,La=function(){return(Aa.next()>>>0)/4294967296};return La.double=function(){do var el=Aa.next()>>>11,tl=(Aa.next()>>>0)/4294967296,nl=(el+tl)/(1<<21);while(nl===0);return nl},La.int32=Aa.next,La.quick=La,Fa&&(Fa.x&&Ta(Fa,Aa),La.state=function(){return Ta(Aa,{})}),La}xa&&xa.exports?xa.exports=wa:this.xorshift7=wa})(commonjsGlobal,ha)}(xorshift7$1);var xorshift7Exports=xorshift7$1.exports,xor4096$1={exports:{}};xor4096$1.exports,function(ha){(function(aa,xa,ba){function Sa(Ea){var ka=this;ka.next=function(){var Fa=ka.w,La=ka.X,el=ka.i,tl,nl;return ka.w=Fa=Fa+1640531527|0,nl=La[el+34&127],tl=La[el=el+1&127],nl^=nl<<13,tl^=tl<<17,nl^=nl>>>15,tl^=tl>>>12,nl=La[el]=nl^tl,ka.i=el,nl+(Fa^Fa>>>16)|0};function Aa(Fa,La){var el,tl,nl,rl,sl,ol=[],al=128;for(La===(La|0)?(tl=La,La=null):(La=La+"\0",tl=0,al=Math.max(al,La.length)),nl=0,rl=-32;rl<al;++rl)La&&(tl^=La.charCodeAt((rl+32)%La.length)),rl===0&&(sl=tl),tl^=tl<<10,tl^=tl>>>15,tl^=tl<<4,tl^=tl>>>13,rl>=0&&(sl=sl+1640531527|0,el=ol[rl&127]^=tl+sl,nl=el==0?nl+1:0);for(nl>=128&&(ol[(La&&La.length||0)&127]=-1),nl=127,rl=4*128;rl>0;--rl)tl=ol[nl+34&127],el=ol[nl=nl+1&127],tl^=tl<<13,el^=el<<17,tl^=tl>>>15,el^=el>>>12,ol[nl]=tl^el;Fa.w=sl,Fa.X=ol,Fa.i=nl}Aa(ka,Ea)}function Ta(Ea,ka){return ka.i=Ea.i,ka.w=Ea.w,ka.X=Ea.X.slice(),ka}function wa(Ea,ka){Ea==null&&(Ea=+new Date);var Aa=new Sa(Ea),Fa=ka&&ka.state,La=function(){return(Aa.next()>>>0)/4294967296};return La.double=function(){do var el=Aa.next()>>>11,tl=(Aa.next()>>>0)/4294967296,nl=(el+tl)/(1<<21);while(nl===0);return nl},La.int32=Aa.next,La.quick=La,Fa&&(Fa.X&&Ta(Fa,Aa),La.state=function(){return Ta(Aa,{})}),La}xa&&xa.exports?xa.exports=wa:this.xor4096=wa})(commonjsGlobal,ha)}(xor4096$1);var xor4096Exports=xor4096$1.exports,tychei$1={exports:{}};tychei$1.exports,function(ha){(function(aa,xa,ba){function Sa(Ea){var ka=this,Aa="";ka.next=function(){var La=ka.b,el=ka.c,tl=ka.d,nl=ka.a;return La=La<<25^La>>>7^el,el=el-tl|0,tl=tl<<24^tl>>>8^nl,nl=nl-La|0,ka.b=La=La<<20^La>>>12^el,ka.c=el=el-tl|0,ka.d=tl<<16^el>>>16^nl,ka.a=nl-La|0},ka.a=0,ka.b=0,ka.c=-1640531527,ka.d=1367130551,Ea===Math.floor(Ea)?(ka.a=Ea/4294967296|0,ka.b=Ea|0):Aa+=Ea;for(var Fa=0;Fa<Aa.length+20;Fa++)ka.b^=Aa.charCodeAt(Fa)|0,ka.next()}function Ta(Ea,ka){return ka.a=Ea.a,ka.b=Ea.b,ka.c=Ea.c,ka.d=Ea.d,ka}function wa(Ea,ka){var Aa=new Sa(Ea),Fa=ka&&ka.state,La=function(){return(Aa.next()>>>0)/4294967296};return La.double=function(){do var el=Aa.next()>>>11,tl=(Aa.next()>>>0)/4294967296,nl=(el+tl)/(1<<21);while(nl===0);return nl},La.int32=Aa.next,La.quick=La,Fa&&(typeof Fa=="object"&&Ta(Fa,Aa),La.state=function(){return Ta(Aa,{})}),La}xa&&xa.exports?xa.exports=wa:this.tychei=wa})(commonjsGlobal,ha)}(tychei$1);var tycheiExports=tychei$1.exports,seedrandom$1={exports:{}},__viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze({__proto__:null,default:__viteBrowserExternal}),require$$0=getAugmentedNamespace(__viteBrowserExternal$1);(function(ha){(function(aa,xa,ba){var Sa=256,Ta=6,wa=52,Ea="random",ka=ba.pow(Sa,Ta),Aa=ba.pow(2,wa),Fa=Aa*2,La=Sa-1,el;function tl(il,cl,ul){var dl=[];cl=cl==!0?{entropy:!0}:cl||{};var hl=ol(sl(cl.entropy?[il,ll(xa)]:il??al(),3),dl),pl=new nl(dl),fl=function(){for(var ml=pl.g(Ta),gl=ka,$l=0;ml<Aa;)ml=(ml+$l)*Sa,gl*=Sa,$l=pl.g(1);for(;ml>=Fa;)ml/=2,gl/=2,$l>>>=1;return(ml+$l)/gl};return fl.int32=function(){return pl.g(4)|0},fl.quick=function(){return pl.g(4)/4294967296},fl.double=fl,ol(ll(pl.S),xa),(cl.pass||ul||function(ml,gl,$l,xl){return xl&&(xl.S&&rl(xl,pl),ml.state=function(){return rl(pl,{})}),$l?(ba[Ea]=ml,gl):ml})(fl,hl,"global"in cl?cl.global:this==ba,cl.state)}function nl(il){var cl,ul=il.length,dl=this,hl=0,pl=dl.i=dl.j=0,fl=dl.S=[];for(ul||(il=[ul++]);hl<Sa;)fl[hl]=hl++;for(hl=0;hl<Sa;hl++)fl[hl]=fl[pl=La&pl+il[hl%ul]+(cl=fl[hl])],fl[pl]=cl;(dl.g=function(ml){for(var gl,$l=0,xl=dl.i,yl=dl.j,bl=dl.S;ml--;)gl=bl[xl=La&xl+1],$l=$l*Sa+bl[La&(bl[xl]=bl[yl=La&yl+gl])+(bl[yl]=gl)];return dl.i=xl,dl.j=yl,$l})(Sa)}function rl(il,cl){return cl.i=il.i,cl.j=il.j,cl.S=il.S.slice(),cl}function sl(il,cl){var ul=[],dl=typeof il,hl;if(cl&&dl=="object")for(hl in il)try{ul.push(sl(il[hl],cl-1))}catch{}return ul.length?ul:dl=="string"?il:il+"\0"}function ol(il,cl){for(var ul=il+"",dl,hl=0;hl<ul.length;)cl[La&hl]=La&(dl^=cl[La&hl]*19)+ul.charCodeAt(hl++);return ll(cl)}function al(){try{var il;return el&&(il=el.randomBytes)?il=il(Sa):(il=new Uint8Array(Sa),(aa.crypto||aa.msCrypto).getRandomValues(il)),ll(il)}catch{var cl=aa.navigator,ul=cl&&cl.plugins;return[+new Date,aa,ul,aa.screen,ll(xa)]}}function ll(il){return String.fromCharCode.apply(0,il)}if(ol(ba.random(),xa),ha.exports){ha.exports=tl;try{el=require$$0}catch{}}else ba["seed"+Ea]=tl})(typeof self<"u"?self:commonjsGlobal,[],Math)})(seedrandom$1);var seedrandomExports=seedrandom$1.exports,alea=aleaExports,xor128=xor128Exports,xorwow=xorwowExports,xorshift7=xorshift7Exports,xor4096=xor4096Exports,tychei=tycheiExports,sr$1=seedrandomExports;sr$1.alea=alea,sr$1.xor128=xor128,sr$1.xorwow=xorwow,sr$1.xorshift7=xorshift7,sr$1.xor4096=xor4096,sr$1.tychei=tychei;var seedrandom=sr$1;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MPRandGauss{constructor(aa,xa,ba,Sa,Ta){this.mean=aa,this.stdDev=xa,this.dtype=ba,this.nextVal=NaN,this.truncated=Sa,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);const wa=Ta||Math.random();this.random=seedrandom.alea(wa.toString())}nextValue(){if(!isNaN(this.nextVal)){const Sa=this.nextVal;return this.nextVal=NaN,Sa}let aa,xa,ba=!1;for(;!ba;){let Sa,Ta,wa;do Sa=2*this.random()-1,Ta=2*this.random()-1,wa=Sa*Sa+Ta*Ta;while(wa>=1||wa===0);const Ea=Math.sqrt(-2*Math.log(wa)/wa);aa=this.mean+this.stdDev*Sa*Ea,xa=this.mean+this.stdDev*Ta*Ea,(!this.truncated||this.isValidTruncated(aa))&&(ba=!0)}return(!this.truncated||this.isValidTruncated(xa))&&(this.nextVal=this.convertValue(xa)),this.convertValue(aa)}convertValue(aa){return this.dtype==null||this.dtype==="float32"?aa:Math.round(aa)}isValidTruncated(aa){return aa<=this.upper&&aa>=this.lower}}class RandGamma{constructor(aa,xa,ba,Sa){this.alpha=aa,this.beta=1/xa,this.dtype=ba;const Ta=Sa||Math.random();this.randu=seedrandom.alea(Ta.toString()),this.randn=new MPRandGauss(0,1,ba,!1,this.randu()),aa<1?this.d=aa+2/3:this.d=aa-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let aa,xa,ba,Sa,Ta,wa;for(;;){do Sa=this.randn.nextValue(),wa=1+this.c*Sa;while(wa<=0);if(wa*=wa*wa,aa=Sa*Sa,xa=1-.331*aa*aa,ba=.5*aa+this.d*(1-wa+Math.log(wa)),Ta=this.randu(),Ta<xa||Math.log(Ta)<ba)break}return wa=1/this.beta*this.d*wa,this.alpha<1&&(wa*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(wa)}convertValue(aa){return this.dtype==="float32"?aa:Math.round(aa)}}class UniformRandom{constructor(aa=0,xa=1,ba,Sa){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=aa,this.range=xa-aa,this.dtype=ba,Sa==null&&(Sa=Math.random()),typeof Sa=="number"&&(Sa=Sa.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${aa} - ${xa} <= 1 and dtype is not float`);this.random=seedrandom.alea(Sa)}convertValue(aa){return this.canReturnFloat()?aa:Math.round(aa)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomGamma_(ha,aa,xa=1,ba="float32",Sa){if(assertNonNegativeIntegerDimensions$1(ha),xa==null&&(xa=1),ba==null&&(ba="float32"),ba!=="float32"&&ba!=="int32")throw new Error(`Unsupported data type ${ba}`);const Ta=new RandGamma(aa,xa,ba,Sa),wa=buffer$1(ha,ba);for(let Ea=0;Ea<wa.values.length;Ea++)wa.values[Ea]=Ta.nextValue();return wa.toTensor()}const randomGamma=op$1({randomGamma_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomNormal_(ha,aa=0,xa=1,ba,Sa){if(assertNonNegativeIntegerDimensions$1(ha),ba!=null&&ba==="bool")throw new Error(`Unsupported data type ${ba}`);const Ta=new MPRandGauss(aa,xa,ba,!1,Sa),wa=buffer$1(ha,ba);for(let Ea=0;Ea<wa.values.length;Ea++)wa.values[Ea]=Ta.nextValue();return wa.toTensor()}const randomNormal$1=op$1({randomNormal_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomStandardNormal_(ha,aa,xa){if(aa!=null&&aa==="bool")throw new Error(`Unsupported data type ${aa}`);return randomNormal$1(ha,0,1,aa,xa)}const randomStandardNormal=op$1({randomStandardNormal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomUniform_(ha,aa=0,xa=1,ba="float32",Sa){assertNonNegativeIntegerDimensions$1(ha);const Ta=buffer$1(ha,ba),wa=new UniformRandom(aa,xa,null,Sa);for(let Ea=0;Ea<Ta.values.length;Ea++)Ta.values[Ea]=wa.nextValue();return Ta.toTensor()}const randomUniform=op$1({randomUniform_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function randomUniformInt_(ha,aa,xa,ba){return randomUniform(ha,aa,xa,"int32",ba)}const randomUniformInt=op$1({randomUniformInt_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function range$4(ha,aa,xa=1,ba="float32"){if(xa===0)throw new Error("Cannot have a step of zero");const Sa={start:ha,stop:aa,step:xa,dtype:ba};return ENGINE$1.runKernel(Range$1,{},Sa)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real_(ha){const xa={input:convertToTensor$1(ha,"input","real")};return ENGINE$1.runKernel(Real$1,xa)}const real$3=op$1({real_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reciprocal_(ha){const xa={x:convertToTensor$1(ha,"x","reciprocal")};return ENGINE$1.runKernel(Reciprocal$1,xa)}const reciprocal$3=op$1({reciprocal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu_$1(ha){const xa={x:convertToTensor$1(ha,"x","relu")};return ENGINE$1.runKernel(Relu$2,xa)}const relu$4=op$1({relu_:relu_$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu6_$1(ha){const xa={x:convertToTensor$1(ha,"x","relu6")};return ENGINE$1.runKernel(Relu6$2,xa)}const relu6$4=op$1({relu6_:relu6_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse_(ha,aa){const ba={x:convertToTensor$1(ha,"x","reverse")},Sa={dims:aa};return ENGINE$1.runKernel(Reverse$1,ba,Sa)}const reverse$3=op$1({reverse_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse1d_(ha){const aa=convertToTensor$1(ha,"x","reverse");return assert$2(aa.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${aa.rank}.`),reverse$3(aa,0)}const reverse1d=op$1({reverse1d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse2d_(ha,aa){const xa=convertToTensor$1(ha,"x","reverse");return assert$2(xa.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${xa.rank}.`),reverse$3(xa,aa)}const reverse2d=op$1({reverse2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse3d_(ha,aa){const xa=convertToTensor$1(ha,"x","reverse");return assert$2(xa.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${xa.rank}.`),reverse$3(xa,aa)}const reverse3d=op$1({reverse3d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse4d_(ha,aa){const xa=convertToTensor$1(ha,"x","reverse");return assert$2(xa.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${xa.rank}.`),reverse$3(xa,aa)}const reverse4d=op$1({reverse4d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function round_(ha){const xa={x:convertToTensor$1(ha,"x","round")};return ENGINE$1.runKernel(Round$1,xa)}const round$4=op$1({round_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rsqrt_(ha){const xa={x:convertToTensor$1(ha,"x","rsqrt","float32")};return ENGINE$1.runKernel(Rsqrt$1,xa)}const rsqrt$3=op$1({rsqrt_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function selu_(ha){const xa={x:convertToTensor$1(ha,"x","selu")};return ENGINE$1.runKernel(Selu$2,xa)}const selu$3=op$1({selu_});function separableConv2d_(ha,aa,xa,ba,Sa,Ta=[1,1],wa="NHWC"){const Ea=convertToTensor$1(ha,"x","separableConv2d"),ka=convertToTensor$1(aa,"depthwiseFilter","separableConv2d"),Aa=convertToTensor$1(xa,"pointwiseFilter","separableConv2d");let Fa=Ea,La=!1;if(Ea.rank===3&&(La=!0,Fa=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1],Ea.shape[2]])),wa==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");assert$2(Fa.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${Fa.rank}.`),assert$2(ka.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${ka.rank}.`),assert$2(Aa.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${ka.rank}.`),assert$2(Aa.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${Aa.shape[0]}.`),assert$2(Aa.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${Aa.shape[1]}.`);const el=ka.shape[2],tl=ka.shape[3];assert$2(Aa.shape[2]===el*tl,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${el*tl}, but got ${Aa.shape[2]}.`);const nl=depthwiseConv2d$2(Fa,ka,ba,Sa,wa,Ta),sl=conv2d$3(nl,Aa,1,"valid",wa);return La?reshape$4(sl,[sl.shape[1],sl.shape[2],sl.shape[3]]):sl}const separableConv2d=op$1({separableConv2d_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function setdiff1dAsync_(ha,aa){const xa=convertToTensor$1(ha,"x","setdiff1d"),ba=convertToTensor$1(aa,"y","setdiff1d");assert$2(xa.dtype===ba.dtype,()=>`x and y should have the same dtype, but got x (${xa.dtype}) and y (${ba.dtype}).`),assert$2(xa.rank===1,()=>`x should be 1D tensor, but got x (${xa.shape}).`),assert$2(ba.rank===1,()=>`y should be 1D tensor, but got y (${ba.shape}).`);const Sa=await xa.data(),Ta=await ba.data(),wa=new Set(Ta);let Ea=0;for(let Fa=0;Fa<Sa.length;Fa++)wa.has(Sa[Fa])||Ea++;const ka=new TensorBuffer$1([Ea],xa.dtype),Aa=new TensorBuffer$1([Ea],"int32");for(let Fa=0,La=0;Fa<Sa.length;Fa++)wa.has(Sa[Fa])||(ka.values[La]=Sa[Fa],Aa.values[La]=Fa,La++);return[ka.toTensor(),Aa.toTensor()]}const setdiff1dAsync=setdiff1dAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sign_(ha){const xa={x:convertToTensor$1(ha,"x","sign")};return ENGINE$1.runKernel(Sign$1,xa)}const sign$3=op$1({sign_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sin_(ha){const xa={x:convertToTensor$1(ha,"x","sin","float32")};return ENGINE$1.runKernel(Sin$1,xa)}const sin$3=op$1({sin_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sinh_(ha){const xa={x:convertToTensor$1(ha,"x","sinh")};return ENGINE$1.runKernel(Sinh$1,xa)}const sinh$3=op$1({sinh_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice1d_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","slice1d");return assert$2(ba.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${ba.rank} tensor`),slice$3(ba,[aa],[xa])}const slice1d=op$1({slice1d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice2d_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","slice2d");return assert$2(ba.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${ba.rank} tensor`),slice$3(ba,aa,xa)}const slice2d=op$1({slice2d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice3d_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","slice3d");return assert$2(ba.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${ba.rank} tensor`),slice$3(ba,aa,xa)}const slice3d=op$1({slice3d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function slice4d_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","slice4d");return assert$2(ba.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${ba.rank} tensor`),slice$3(ba,aa,xa)}const slice4d=op$1({slice4d_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax_(ha,aa=-1){const xa=convertToTensor$1(ha,"logits","softmax","float32");if(aa===-1&&(aa=xa.rank-1),aa!==xa.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${xa.rank} and dim was ${aa}`);const ba={logits:xa},Sa={dim:aa};return ENGINE$1.runKernel(Softmax$3,ba,Sa)}const softmax$3=op$1({softmax_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft_(ha){assert$2(ha.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${ha.dtype}.`);const aa={input:ha};return ENGINE$1.runKernel(FFT$1,aa)}const fft$3=op$1({fft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft_(ha){assert$2(ha.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${ha.dtype}.`);const aa={input:ha};return ENGINE$1.runKernel(IFFT$1,aa)}const ifft$3=op$1({ifft_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function irfft_(ha){const aa=ha.shape[ha.shape.length-1],xa=ha.size/aa;let ba;if(aa<=2){const Sa=reshape$4(ha,[xa,aa]);ba=ifft$3(Sa)}else{const Sa=[xa,2*(aa-1)],Ta=reshape$4(real$3(ha),[xa,aa]),wa=reshape$4(imag$3(ha),[xa,aa]),Ea=reverse$3(slice$3(Ta,[0,1],[xa,aa-2]),1),ka=mul$1(reverse$3(slice$3(wa,[0,1],[xa,aa-2]),1),scalar$1(-1)),Aa=concat$3([Ta,Ea],1),Fa=concat$3([wa,ka],1),La=reshape$4(complex$4(Aa,Fa),[Sa[0],Sa[1]]);ba=ifft$3(La)}if(ba=real$3(ba),ha.rank===3&&ha.shape[0]!==0){const Sa=ba,Ta=ha.shape[0];ba=reshape$4(ba,[Ta,ba.shape[0]/Ta,ba.shape[1]]),Sa.dispose()}return ba}const irfft=op$1({irfft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split_(ha,aa,xa=0){const Sa={x:convertToTensor$1(ha,"x","split")},Ta={numOrSizeSplits:aa,axis:xa};return ENGINE$1.runKernel(SplitV$1,Sa,Ta)}const split$3=op$1({split_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rfft_(ha,aa){assert$2(ha.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${ha.dtype}`);let xa=ha.shape[ha.shape.length-1];const ba=ha.size/xa;let Sa;if(aa!=null&&aa<xa){const nl=ha.shape.map(sl=>0),rl=ha.shape.map(sl=>sl);rl[ha.shape.length-1]=aa,Sa=slice$3(ha,nl,rl),xa=aa}else if(aa!=null&&aa>xa){const nl=ha.shape.map(rl=>rl);nl[ha.shape.length-1]=aa-xa,Sa=concat$3([ha,zeros$2(nl)],ha.shape.length-1),xa=aa}else Sa=ha;const Ta=zerosLike$4(Sa),wa=reshape$4(complex$4(Sa,Ta),[ba,xa]),Ea=fft$3(wa),ka=Math.floor(xa/2)+1,Aa=real$3(Ea),Fa=imag$3(Ea),La=split$3(Aa,[ka,xa-ka],Aa.shape.length-1),el=split$3(Fa,[ka,xa-ka],Fa.shape.length-1),tl=Sa.shape.slice();return tl[Sa.shape.length-1]=ka,reshape$4(complex$4(La[0],el[0]),tl)}const rfft=op$1({rfft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function squaredDifference_(ha,aa){let xa=convertToTensor$1(ha,"a","squaredDifference"),ba=convertToTensor$1(aa,"b","squaredDifference");[xa,ba]=makeTypesMatch$1(xa,ba),assertAndGetBroadcastShape$1(xa.shape,ba.shape);const Sa={a:xa,b:ba},Ta={};return ENGINE$1.runKernel(SquaredDifference$1,Sa,Ta)}const squaredDifference$3=op$1({squaredDifference_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function squeeze_(ha,aa){const xa=convertToTensor$1(ha,"x","squeeze","string_or_numeric");return reshape$4(xa,squeezeShape$1(xa.shape,aa).newShape)}const squeeze=op$1({squeeze_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stack_(ha,aa=0){const xa=convertToTensorArray(ha,"tensors","stack","string_or_numeric");assert$2(xa.length>=1,()=>"Pass at least one tensor to tf.stack"),xa.length>0&&assert$2(aa<=xa[0].rank,()=>"Axis must be <= rank of the tensor");const ba=xa,Sa={axis:aa};return ENGINE$1.runKernel(Pack$1,ba,Sa)}const stack=op$1({stack_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step_$1(ha,aa=0){const ba={x:convertToTensor$1(ha,"x","step")},Sa={alpha:aa};return ENGINE$1.runKernel(Step$1,ba,Sa)}const step$4=op$1({step_:step_$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice_(ha,aa,xa,ba,Sa=0,Ta=0,wa=0,Ea=0,ka=0){const Fa={x:convertToTensor$1(ha,"x","stridedSlice","string_or_numeric")},La={begin:aa,end:xa,strides:ba,beginMask:Sa,endMask:Ta,ellipsisMask:wa,newAxisMask:Ea,shrinkAxisMask:ka};return ENGINE$1.runKernel(StridedSlice$1,Fa,La)}const stridedSlice$3=op$1({stridedSlice_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tan_(ha){const xa={x:convertToTensor$1(ha,"x","tan","float32")};return ENGINE$1.runKernel(Tan$1,xa)}const tan$3=op$1({tan_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor1d(ha,aa){assertNonNull(ha);const xa=inferShape$1(ha,aa);if(xa.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return makeTensor$1(ha,null,xa,aa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor2d(ha,aa,xa){if(assertNonNull(ha),aa!=null&&aa.length!==2)throw new Error("tensor2d() requires shape to have two numbers");const ba=inferShape$1(ha,xa);if(ba.length!==2&&ba.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(ba.length===1&&aa==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return makeTensor$1(ha,aa,ba,xa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor3d(ha,aa,xa){if(assertNonNull(ha),aa!=null&&aa.length!==3)throw new Error("tensor3d() requires shape to have three numbers");const ba=inferShape$1(ha,xa);if(ba.length!==3&&ba.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(ba.length===1&&aa==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return makeTensor$1(ha,aa,ba,xa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor4d(ha,aa,xa){if(assertNonNull(ha),aa!=null&&aa.length!==4)throw new Error("tensor4d() requires shape to have four numbers");const ba=inferShape$1(ha,xa);if(ba.length!==4&&ba.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(ba.length===1&&aa==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return makeTensor$1(ha,aa,ba,xa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor5d(ha,aa,xa){if(assertNonNull(ha),aa!=null&&aa.length!==5)throw new Error("tensor5d() requires shape to have five numbers");const ba=inferShape$1(ha,xa);if(ba.length!==5&&ba.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(ba.length===1&&aa==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return makeTensor$1(ha,aa,ba,xa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensor6d(ha,aa,xa){if(assertNonNull(ha),aa!=null&&aa.length!==6)throw new Error("tensor6d() requires shape to have six numbers");const ba=inferShape$1(ha,xa);if(ba.length!==6&&ba.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(ba.length===1&&aa==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return aa=aa||ba,makeTensor$1(ha,aa,ba,xa)}function validateUpdateShape$1(ha,aa,xa){const ba=aa.rank>1?aa.shape[aa.rank-1]:1,Sa=aa.rank>1?aa.rank-1:1,Ta=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${xa.shape}, indices.shape: ${aa.shape}, shape: ${ha}, sliceDim: ${ba}, and batchDim: ${Sa}.`;if(xa.rank<Sa)throw new Error(Ta+` update.rank < ${Sa}. `);if(ha.length<ba+(xa.rank-Sa))throw new Error(Ta+` Output shape length < ${ba+(xa.rank-Sa)}`);if(xa.rank!==Sa+ha.length-ba)throw new Error(Ta+` update.rank != ${Sa+ha.length-ba}`);for(let wa=0;wa<Sa;++wa)if(xa.shape[wa]!==aa.shape[wa])throw new Error(Ta+` updates.shape[${wa}] (${xa.shape[wa]}) != indices.shape[${wa}] (${aa.shape[wa]}).`);for(let wa=0;wa<xa.rank-Sa;++wa)if(xa.shape[wa+Sa]!==ha[wa+ba])throw new Error(Ta+` updates.shape[${wa+Sa}] (${xa.shape[wa+Sa]}) != shape[${wa+Sa}] (${ha[wa+Sa]})`)}function validateInput$2(ha,aa,xa){if(aa.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${aa.rank}.`);if(ha.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${ha.rank}.`);if(aa.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${aa.dtype}`);if(xa.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${xa}`);if(xa.length===0){if(aa.size===0)throw new Error(`Indices specified for empty output. indices shape: ${aa.shape}`);if(ha.size===0)throw new Error(`Updates specified for empty output. updates shape: ${ha.shape}`)}validateUpdateShape$1(xa,aa,ha)}function calculateShapes$1(ha,aa,xa){const ba=aa.shape.length,Sa=ba>1?aa.shape[ba-1]:1,Ta=xa.length;let wa=1;for(let La=Sa;La<Ta;++La)wa*=xa[La];const Ea=Sa<1?1:Sa,ka=sizeFromShape$1(aa.shape)/Ea,Aa=[...computeStrides$1(xa.slice(0,Sa)),1],Fa=sizeFromShape$1(xa);return{sliceRank:Sa,numUpdates:ka,sliceSize:wa,strides:Aa,outputSize:Fa}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate_(ha,aa,xa){const ba=convertToTensor$1(ha,"tensor","tensorScatterupdate"),Sa=convertToTensor$1(aa,"indices","tensorScatterupdate","int32"),Ta=convertToTensor$1(xa,"updates","tensorScatterupdate");if(validateInput$2(Ta,Sa,ba.shape),ba.dtype!==Ta.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${ba.dtype} and ${Ta.dtype}.`);const wa={tensor:ba,indices:Sa,updates:Ta},Ea={};return ENGINE$1.runKernel(TensorScatterUpdate$1,wa,Ea)}const tensorScatterUpdate$3=op$1({tensorScatterUpdate_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function topk_(ha,aa=1,xa=!0){const ba=convertToTensor$1(ha,"x","topk");if(ba.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");const Sa=ba.shape[ba.shape.length-1];if(aa<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${aa}`);if(aa>Sa)throw new Error(`'k' passed to topk() must be <= the last dimension (${Sa}) but got ${aa}`);const Ta={x:ba},wa={k:aa,sorted:xa},[Ea,ka]=ENGINE$1.runKernel(TopK$1,Ta,wa);return{values:Ea,indices:ka}}const topk=op$1({topk_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function truncatedNormal_(ha,aa=0,xa=1,ba,Sa){if(assertNonNegativeIntegerDimensions$1(ha),ba!=null&&ba==="bool")throw new Error("Unsupported data type $ { dtype }");const Ta=new MPRandGauss(aa,xa,ba,!0,Sa),wa=buffer$1(ha,ba);for(let Ea=0;Ea<wa.values.length;Ea++)wa.values[Ea]=Ta.nextValue();return wa.toTensor()}const truncatedNormal=op$1({truncatedNormal_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique_(ha,aa=0){const xa=convertToTensor$1(ha,"x","unique","string_or_numeric");assert$2(xa.rank>0,()=>"The input tensor must be at least 1D");const ba={x:xa},Sa={axis:aa},[Ta,wa]=ENGINE$1.runKernel(Unique$1,ba,Sa);return{values:Ta,indices:wa}}const unique$4=op$1({unique_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","unsortedSegmentSum"),Sa=convertToTensor$1(aa,"segmentIds","unsortedSegmentSum","int32");assert$2(isInt$1(xa),()=>"numSegments must be of dtype int");const Ta={x:ba,segmentIds:Sa},wa={numSegments:xa};return ENGINE$1.runKernel(UnsortedSegmentSum$1,Ta,wa)}const unsortedSegmentSum$3=op$1({unsortedSegmentSum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unstack_(ha,aa=0){const xa=convertToTensor$1(ha,"x","unstack","string_or_numeric");assert$2(aa>=-xa.shape.length&&aa<xa.shape.length,()=>`Axis = ${aa} is not in [-${xa.shape.length}, ${xa.shape.length})`);const ba={value:xa},Sa={axis:aa};return ENGINE$1.runKernel(Unpack$1,ba,Sa)}const unstack=op$1({unstack_});/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function upperBound$1(ha,aa){return searchSorted$3(ha,aa,"right")}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variable(ha,aa=!0,xa,ba){return ENGINE$1.makeVariable(ha,aa,xa,ba)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function whereImpl$4(ha,aa){const xa=[];for(let Ta=0;Ta<aa.length;Ta++)aa[Ta]&&xa.push(Ta);const ba=buffer$1(ha,"int32"),Sa=buffer$1([xa.length,ha.length],"int32");for(let Ta=0;Ta<xa.length;Ta++){const wa=ba.indexToLoc(xa[Ta]),Ea=Ta*ha.length;Sa.values.set(wa,Ea)}return Sa.toTensor()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function whereAsync_(ha){const aa=convertToTensor$1(ha,"condition","whereAsync","bool"),xa=await aa.data(),ba=whereImpl$4(aa.shape,xa);return ha!==aa&&aa.dispose(),ba}const whereAsync=whereAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function booleanMaskAsync_(ha,aa,xa){const ba=convertToTensor$1(ha,"tensor","boolMask"),Sa=convertToTensor$1(aa,"mask","boolMask","bool"),Ta=xa??0,wa=Sa.rank,Ea=ba.shape;assert$2(wa>0,()=>"mask cannot be scalar"),assertShapesMatch$1(Ea.slice(Ta,Ta+wa),Sa.shape,"mask's shape must match the first K dimensions of tensor's shape,");let ka=1;for(let rl=Ta;rl<Ta+wa;rl++)ka*=Ea[rl];const Aa=Ea.slice(0,Ta).concat([ka],Ea.slice(Ta+wa)),Fa=reshape$4(ba,Aa),La=reshape$4(Sa,[-1]),el=await whereAsync(La),tl=squeeze(el,[1]),nl=gather$1(Fa,tl,Ta);return ha!==ba&&ba.dispose(),aa!==Sa&&Sa.dispose(),tl.dispose(),Fa.dispose(),La.dispose(),el.dispose(),nl}const booleanMaskAsync=booleanMaskAsync_;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose_(ha,aa,xa){const ba=convertToTensor$1(ha,"x","transpose");if(aa==null&&(aa=ba.shape.map((wa,Ea)=>Ea).reverse()),assert$2(ba.rank===aa.length,()=>`Error in transpose: rank of input ${ba.rank} must match length of perm ${aa}.`),aa.forEach(wa=>{assert$2(wa>=0&&wa<ba.rank,()=>`All entries in 'perm' must be between 0 and ${ba.rank-1} but got ${aa}`)}),ba.rank<=1)return ba.clone();const Sa={x:ba},Ta={perm:aa};return ba.dtype==="complex64"?tidy$1(()=>{let wa=real$3(ba),Ea=imag$3(ba);return wa=ENGINE$1.runKernel(Transpose$1,{x:wa},Ta),Ea=ENGINE$1.runKernel(Transpose$1,{x:Ea},Ta),xa&&(Ea=neg$3(Ea)),complex$4(wa,Ea)}):ENGINE$1.runKernel(Transpose$1,Sa,Ta)}const transpose$3=op$1({transpose_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function movingAverage_(ha,aa,xa,ba,Sa=!0){const Ta=convertToTensor$1(ha,"v","movingAverage"),wa=convertToTensor$1(aa,"x","movingAverage"),Ea=convertToTensor$1(xa,"decay","movingAverage");assertTypesMatch(Ta,wa),assert$2(arraysEqual$1(Ta.shape,wa.shape),()=>"Shape mismatch in v and x");const ka=scalar$1(1),Aa=sub$4(ka,Ea);let Fa=mul$1(sub$4(wa,Ta),Aa);if(Sa){assert$2(ba!=null,()=>"When using zeroDebias: true, step is required.");const La=convertToTensor$1(ba,"step","movingAverage");Fa=div$2(Fa,sub$4(ka,pow$4(Ea,La)))}return add$3(Ta,Fa)}const movingAverage=op$1({movingAverage_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterND_(ha,aa,xa){assertNonNegativeIntegerDimensions$1(xa);const ba=convertToTensor$1(ha,"indices","scatterND","int32"),Sa=convertToTensor$1(aa,"updates","scatterND");validateInput$2(Sa,ba,xa);const Ta={indices:ba,updates:Sa},wa={shape:xa};return ENGINE$1.runKernel(ScatterNd$1,Ta,wa)}const scatterND=op$1({scatterND_});function validateInput$1(ha,aa,xa,ba){if(ha.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${ha.dtype}.`);if(ha.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${ha.shape}.`);const Sa=ha.rank>0?ha.shape[0]:1,Ta=ha.rank>1?ha.shape[1]:1;if(xa.length!==Ta)throw new Error(`outputShape has incorrect number of elements:, ${xa.length}, should be: ${Ta}.`);const wa=aa.size;if(!(aa.rank===0||aa.rank===1&&wa===Sa))throw new Error(`sparseValues has incorrect shape ${aa.shape}, should be [] or [${Sa}]`);if(aa.dtype!==ba.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense_(ha,aa,xa,ba=0){assertNonNegativeIntegerDimensions$1(xa);const Sa=convertToTensor$1(ha,"sparseIndices","sparseToDense","int32"),Ta=convertToTensor$1(aa,"sparseValues","sparseToDense","string_or_numeric"),wa=convertToTensor$1(ba,"defaultValue","sparseToDense",Ta.dtype);validateInput$1(Sa,Ta,xa,wa);const Ea={sparseIndices:Sa,sparseValues:Ta,defaultValue:wa},ka={outputShape:xa};return ENGINE$1.runKernel(SparseToDense$1,Ea,ka)}const sparseToDense$3=op$1({sparseToDense_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherND_(ha,aa){const xa=convertToTensor$1(aa,"indices","gatherND","int32"),Sa={params:convertToTensor$1(ha,"x","gatherND","string_or_numeric"),indices:xa};return ENGINE$1.runKernel(GatherNd$1,Sa)}const gatherND=op$1({gatherND_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getNoiseShape(ha,aa){if(aa==null)return ha.shape.slice();if(arraysEqual$1(ha.shape,aa))return aa;if(ha.shape.length===aa.length){const xa=[];for(let ba=0;ba<ha.shape.length;ba++)aa[ba]==null&&ha.shape[ba]!=null?xa.push(ha.shape[ba]):xa.push(aa[ba]);return xa}return aa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dropout_(ha,aa,xa,ba){const Sa=convertToTensor$1(ha,"x","dropout");if(assert$2(Sa.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${Sa.dtype} tensor instead.`),assert$2(aa>=0&&aa<1,()=>`rate must be a float in the range [0, 1), but got ${aa}.`),aa===0)return ha instanceof Tensor$1?Sa.clone():Sa;const Ta=getNoiseShape(Sa,xa),wa=1-aa,Ea=div$2(floor$3(add$3(randomUniform(Ta,0,1,"float32",ba),wa)),wa);return mul$1(Sa,Ea)}const dropout$1=op$1({dropout_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function enclosingPowerOfTwo(ha){return Math.floor(Math.pow(2,Math.ceil(Math.log(ha)/Math.log(2))))}function cosineWindow(ha,aa,xa){const ba=1-ha%2,Sa=new Float32Array(ha);for(let Ta=0;Ta<ha;++Ta){const wa=2*Math.PI*Ta/(ha+ba-1);Sa[Ta]=aa-xa*Math.cos(wa)}return tensor1d(Sa,"float32")}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function inTopKAsync_(ha,aa,xa=1){const ba=convertToTensor$1(ha,"predictions","inTopK"),Sa=convertToTensor$1(aa,"targets","inTopK");assert$2(ba.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${ba.rank}`),assert$2(ba.rank-1===Sa.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${ba.rank} and targets rank ${Sa.rank}`),assertShapesMatch$1(ba.shape.slice(0,ba.shape.length-1),Sa.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const Ta=ba.shape[ba.shape.length-1];assert$2(xa>0&&xa<=Ta,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${Ta}), but got ${xa}`);const wa=await ba.data(),Ea=await Sa.data(),[ka,Aa]=[wa.length/Ta,Ta],Fa=getTypedArrayFromDType$1("bool",ka);for(let La=0;La<ka;La++){const el=La*Aa,tl=wa.subarray(el,el+Aa),nl=[];for(let rl=0;rl<tl.length;rl++)nl.push({value:tl[rl],index:rl});nl.sort((rl,sl)=>sl.value-rl.value),Fa[La]=0;for(let rl=0;rl<xa;rl++)if(nl[rl].index===Ea[La]){Fa[La]=1;break}}return ha!==ba&&ba.dispose(),aa!==Sa&&Sa.dispose(),tensor(Fa,Sa.shape,"bool")}const inTopKAsync=inTopKAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter_(ha,aa,xa,ba,Sa,Ta="NHWC",wa){let Ea=ha;ha.rank===3&&(Ea=reshape$4(ha,[1,ha.shape[0],ha.shape[1],ha.shape[2]]));let ka=aa;ka.rank===3&&(ka=reshape$4(aa,[1,aa.shape[0],aa.shape[1],aa.shape[2]])),assert$2(Ea.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${Ea.shape}.`),assert$2(ka.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${ka.shape}.`),assert$2(xa.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${xa}.`);const Aa=Ta==="NHWC"?Ea.shape[3]:Ea.shape[1],Fa=Ta==="NHWC"?ka.shape[3]:ka.shape[1];assert$2(Aa===xa[2],()=>`Error in conv2dDerFilter: depth of input ${Aa}) must match input depth in filter (${xa[2]}.`),assert$2(Fa===xa[3],()=>`Error in conv2dDerFilter: depth of dy (${Fa}) must match output depth for filter (${xa[3]}).`),checkPadOnDimRoundingMode$1("conv2dDerFilter",Sa,wa);const La={x:Ea,dy:ka},el={strides:ba,pad:Sa,dataFormat:Ta,dimRoundingMode:wa,filterShape:xa};return ENGINE$1.runKernel(Conv2DBackpropFilter$1,La,el)}const conv2DBackpropFilter$3=op$1({conv2DBackpropFilter_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFusedDyActivation$1(ha,aa,xa){if(xa==null||xa==="linear")return ha;if(xa==="relu")return mul$1(ha,step$4(aa));throw new Error(`Cannot compute gradient for fused activation ${xa}.`)}function getFusedBiasGradient$1(ha,aa){let xa=aa;const ba=getReductionAxes$1(ha.shape,aa.shape);return ba.length>0&&(xa=sum$5(xa,ba)),reshape$4(xa,ha.shape)}function applyActivation$2(ha,aa,xa,ba){if(aa==="linear")return ha;if(aa==="relu")return relu$4(ha);if(aa==="elu")return elu$5(ha);if(aa==="relu6")return relu6$4(ha);if(aa==="prelu")return prelu$4(ha,xa);if(aa==="leakyrelu")return leakyRelu$4(ha,ba);if(aa==="sigmoid")return sigmoid$4(ha);throw new Error(`Unknown fused activation ${aa}.`)}const shouldFuse$1=(ha,aa)=>!(ha>0)||aa==="linear";/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d_({x:ha,filter:aa,strides:xa,pad:ba,dataFormat:Sa="NHWC",dilations:Ta=[1,1],dimRoundingMode:wa,bias:Ea,activation:ka="linear",preluActivationWeights:Aa,leakyreluAlpha:Fa}){if(ka=ka||"linear",shouldFuse$1(ENGINE$1.state.gradientDepth,ka)===!1){assert$2(Sa==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${Sa} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let ul=conv2d$3(ha,aa,xa,ba,Sa,Ta,wa);return Ea!=null&&(ul=add$3(ul,Ea)),applyActivation$2(ul,ka,Aa,Fa)}const La=convertToTensor$1(ha,"x","conv2d","float32"),el=convertToTensor$1(aa,"filter","conv2d","float32");let tl=La,nl=!1;La.rank===3&&(nl=!0,tl=reshape$4(La,[1,La.shape[0],La.shape[1],La.shape[2]])),assert$2(tl.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${tl.rank}.`),assert$2(el.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${el.rank}.`),checkPadOnDimRoundingMode$1("fused conv2d",ba,wa);const rl=Sa==="NHWC"?tl.shape[3]:tl.shape[1];assert$2(el.shape[2]===rl,()=>`Error in conv2d: depth of input (${rl}) must match input depth for filter ${el.shape[2]}.`),assert$2(eitherStridesOrDilationsAreOne$1(xa,Ta),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${xa} and dilations '${Ta}'`);const sl=computeConv2DInfo$1(tl.shape,el.shape,xa,Ta,ba,wa);let ol;Ea!=null&&(ol=convertToTensor$1(Ea,"bias","fused conv2d"),[ol]=makeTypesMatch$1(ol,La),Sa==="NHWC"?assertAndGetBroadcastShape$1(sl.outShape,ol.shape):(assert$2(ol.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${ol.shape.length}.`),assert$2(ol.shape.length===0||ol.shape[0]===sl.outChannels||ol.shape[0]===1,()=>`Error in fused conv2d: bias shape (${ol.shape}) is not compatible with the number of output channels (${sl.outChannels})`)));let al;if(Aa!=null){const ul=Aa.shape;if(assert$2(ul.length<=1||ul.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${ul.length}.`),ul.length===1)assert$2(ul[0]===1||ul[0]===sl.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${ul}) is not compatible with the number of output channels (${sl.outChannels}).`);else if(ul.length===3)try{assertAndGetBroadcastShape$1(ul,sl.outShape)}catch{const hl=`Error in fused conv2d: PReLU activation weights (${ul}) is not compatible with the output shape of the conv2d (${sl.outShape}).`;throw Error(hl)}al=convertToTensor$1(Aa,"prelu weights","fused conv2d")}const ll=(ul,dl)=>{assert$2(Sa==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${Sa} but only NHWC is currently supported.`);const[hl,pl,fl,ml]=dl,gl=getFusedDyActivation$1(ul,fl,ka);assert$2(tupleValuesAreOne$1(Ta),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${Ta}'`);const $l=conv2DBackpropInput$3(pl.shape,gl,hl,xa,ba),xl=conv2DBackpropFilter$3(pl,gl,hl.shape,xa,ba),yl=[$l,xl];if(ml!=null){const bl=getFusedBiasGradient$1(ml,gl);yl.push(bl)}return yl},il={x:tl,filter:el,bias:ol,preluActivationWeights:al},cl={strides:xa,pad:ba,dataFormat:Sa,dilations:Ta,dimRoundingMode:wa,activation:ka,leakyreluAlpha:Fa};return Ea==null?customGrad((dl,hl,pl)=>{let fl=ENGINE$1.runKernel(FusedConv2D$1,il,cl);return pl([hl,dl,fl]),nl&&(fl=reshape$4(fl,[fl.shape[1],fl.shape[2],fl.shape[3]])),{value:fl,gradFunc:ll}})(tl,el):customGrad((dl,hl,pl,fl)=>{let ml=ENGINE$1.runKernel(FusedConv2D$1,il,cl);return fl([hl,dl,ml,pl]),nl&&(ml=reshape$4(ml,[ml.shape[1],ml.shape[2],ml.shape[3]])),{value:ml,gradFunc:ll}})(tl,el,ol)}const conv2d$2=op$1({fusedConv2d_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter_(ha,aa,xa,ba,Sa,Ta=[1,1],wa){let Ea=ha;ha.rank===3&&(Ea=reshape$4(ha,[1,ha.shape[0],ha.shape[1],ha.shape[2]]));let ka=aa;ka.rank===3&&(ka=reshape$4(aa,[1,aa.shape[0],aa.shape[1],aa.shape[2]]));const Aa={x:Ea,dy:ka},Fa={strides:ba,pad:Sa,dimRoundingMode:wa,dilations:Ta,filterShape:xa};return ENGINE$1.runKernel(DepthwiseConv2dNativeBackpropFilter$1,Aa,Fa)}const depthwiseConv2dNativeBackpropFilter$3=op$1({depthwiseConv2dNativeBackpropFilter_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput_(ha,aa,xa,ba,Sa,Ta=[1,1],wa){let Ea=aa,ka=!1;aa.rank===3&&(ka=!0,Ea=reshape$4(aa,[1,aa.shape[0],aa.shape[1],aa.shape[2]]));const Aa={dy:Ea,filter:xa},Fa={strides:ba,pad:Sa,dimRoundingMode:wa,dilations:Ta,inputShape:ha},La=ENGINE$1.runKernel(DepthwiseConv2dNativeBackpropInput$1,Aa,Fa);return ka?reshape$4(La,[La.shape[1],La.shape[2],La.shape[3]]):La}const depthwiseConv2dNativeBackpropInput$3=op$1({depthwiseConv2dNativeBackpropInput_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2d_({x:ha,filter:aa,strides:xa,pad:ba,dataFormat:Sa="NHWC",dilations:Ta=[1,1],dimRoundingMode:wa,bias:Ea,activation:ka="linear",preluActivationWeights:Aa,leakyreluAlpha:Fa}){if(shouldFuse$1(ENGINE$1.state.gradientDepth,ka)===!1){let cl=depthwiseConv2d$2(ha,aa,xa,ba,Sa,Ta,wa);return Ea!=null&&(cl=add$3(cl,Ea)),applyActivation$2(cl,ka,Aa,Fa)}const La=convertToTensor$1(ha,"x","depthwiseConv2d","float32"),el=convertToTensor$1(aa,"filter","depthwiseConv2d","float32");let tl=La,nl=!1;La.rank===3&&(nl=!0,tl=reshape$4(La,[1,La.shape[0],La.shape[1],La.shape[2]])),assert$2(tl.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${tl.rank}.`),assert$2(el.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${el.rank}.`),assert$2(tl.shape[3]===el.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${tl.shape[3]}) must match the inChannels dimension in filter ${el.shape[2]}.`),Ta==null&&(Ta=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(xa,Ta),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${xa} and dilations '${Ta}'`),checkPadOnDimRoundingMode$1("fused depthwiseConv2d",ba,wa);const rl=computeConv2DInfo$1(tl.shape,el.shape,xa,Ta,ba,wa,!0);let sl;Ea!=null&&(sl=convertToTensor$1(Ea,"bias","fused conv2d"),[sl]=makeTypesMatch$1(sl,La),assertAndGetBroadcastShape$1(rl.outShape,sl.shape));let ol;Aa!=null&&(ol=convertToTensor$1(Aa,"prelu weights","fused depthwiseConv2d"));const al=(cl,ul)=>{assert$2(tupleValuesAreOne$1(Ta),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${Ta}'`);const[dl,hl,pl,fl]=ul,ml=getFusedDyActivation$1(cl,pl,ka),gl=depthwiseConv2dNativeBackpropInput$3(hl.shape,ml,dl,xa,ba,Ta,wa),$l=depthwiseConv2dNativeBackpropFilter$3(hl,ml,dl.shape,xa,ba,Ta,wa);if(fl!=null){const xl=getFusedBiasGradient$1(sl,ml);return[gl,$l,xl]}return[gl,$l]},ll={x:tl,filter:el,bias:sl,preluActivationWeights:ol},il={strides:xa,pad:ba,dataFormat:Sa,dilations:Ta,dimRoundingMode:wa,activation:ka,leakyreluAlpha:Fa};return Ea==null?customGrad((ul,dl,hl)=>{let pl=ENGINE$1.runKernel(FusedDepthwiseConv2D$1,ll,il);return hl([dl,ul,pl]),nl&&(pl=reshape$4(pl,[pl.shape[1],pl.shape[2],pl.shape[3]])),{value:pl,gradFunc:al}})(tl,el):customGrad((ul,dl,hl,pl)=>{let fl=ENGINE$1.runKernel(FusedDepthwiseConv2D$1,ll,il);return pl([dl,ul,fl,hl]),nl&&(fl=reshape$4(fl,[fl.shape[1],fl.shape[2],fl.shape[3]])),{value:fl,gradFunc:al}})(tl,el,sl)}const depthwiseConv2d$1=op$1({fusedDepthwiseConv2d_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedMatMul_({a:ha,b:aa,transposeA:xa=!1,transposeB:ba=!1,bias:Sa,activation:Ta="linear",preluActivationWeights:wa,leakyreluAlpha:Ea=.2}){if(shouldFuse$1(ENGINE$1.state.gradientDepth,Ta)===!1){let ml=matMul$1(ha,aa,xa,ba);return Sa!=null&&(ml=add$3(ml,Sa)),applyActivation$2(ml,Ta,wa,Ea)}let ka=convertToTensor$1(ha,"a","fused matMul"),Aa=convertToTensor$1(aa,"b","fused matMul");[ka,Aa]=makeTypesMatch$1(ka,Aa);const Fa=xa?ka.shape[ka.rank-2]:ka.shape[ka.rank-1],La=ba?Aa.shape[Aa.rank-1]:Aa.shape[Aa.rank-2],el=xa?ka.shape[ka.rank-1]:ka.shape[ka.rank-2],tl=ba?Aa.shape[Aa.rank-2]:Aa.shape[Aa.rank-1],nl=ka.shape.slice(0,-2),rl=Aa.shape.slice(0,-2),sl=sizeFromShape$1(nl),ol=sizeFromShape$1(rl);assert$2(Fa===La,()=>`Error in fused matMul: inner shapes (${Fa}) and (${La}) of Tensors with shapes ${ka.shape} and ${Aa.shape} and transposeA=${xa} and transposeB=${ba} must match.`);const ll=assertAndGetBroadcastShape$1(ka.shape.slice(0,-2),Aa.shape.slice(0,-2)).concat([el,tl]),il=xa?reshape$4(ka,[sl,Fa,el]):reshape$4(ka,[sl,el,Fa]),cl=ba?reshape$4(Aa,[ol,tl,La]):reshape$4(Aa,[ol,La,tl]);let ul;Sa!=null&&(ul=convertToTensor$1(Sa,"bias","fused matMul"),[ul]=makeTypesMatch$1(ul,ka),assertAndGetBroadcastShape$1(ll,ul.shape));let dl;wa!=null&&(dl=convertToTensor$1(wa,"prelu weights","fused matMul"));const hl=(ml,gl)=>{const[$l,xl,yl,bl]=gl,Sl=getFusedDyActivation$1(reshape$4(ml,yl.shape),yl,Ta);let Cl,Tl;if(!xa&&!ba?(Cl=matMul$1(Sl,xl,!1,!0),Tl=matMul$1($l,Sl,!0,!1)):!xa&&ba?(Cl=matMul$1(Sl,xl,!1,!1),Tl=matMul$1(Sl,$l,!0,!1)):xa&&!ba?(Cl=matMul$1(xl,Sl,!1,!0),Tl=matMul$1($l,Sl,!1,!1)):(Cl=matMul$1(xl,Sl,!0,!0),Tl=matMul$1(Sl,$l,!0,!0)),Sa!=null){const Il=getFusedBiasGradient$1(bl,Sl);return[Cl,Tl,Il]}else return[Cl,Tl]},pl={a:il,b:cl,bias:ul,preluActivationWeights:dl},fl={transposeA:xa,transposeB:ba,activation:Ta,leakyreluAlpha:Ea};return Sa==null?customGrad((gl,$l,xl)=>{const yl=ENGINE$1.runKernel(_FusedMatMul$1,pl,fl);return xl([gl,$l,yl]),{value:reshape$4(yl,ll),gradFunc:hl}})(il,cl):customGrad((gl,$l,xl,yl)=>{const bl=ENGINE$1.runKernel(_FusedMatMul$1,pl,fl);return yl([gl,$l,bl,xl]),{value:reshape$4(bl,ll),gradFunc:hl}})(il,cl,ul)}const matMul=op$1({fusedMatMul_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var fused_ops=Object.freeze({__proto__:null,conv2d:conv2d$2,depthwiseConv2d:depthwiseConv2d$1,matMul});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function hammingWindow_(ha){return cosineWindow(ha,.54,.46)}const hammingWindow=op$1({hammingWindow_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function hannWindow_(ha){return cosineWindow(ha,.5,.5)}const hannWindow=op$1({hannWindow_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function frame_(ha,aa,xa,ba=!1,Sa=0){let Ta=0;const wa=[];for(;Ta+aa<=ha.size;)wa.push(slice$3(ha,Ta,aa)),Ta+=xa;if(ba)for(;Ta<ha.size;){const Ea=Ta+aa-ha.size,ka=concat$3([slice$3(ha,Ta,aa-Ea),fill$4([Ea],Sa)]);wa.push(ka),Ta+=xa}return wa.length===0?tensor2d([],[0,aa]):reshape$4(concat$3(wa),[wa.length,aa])}const frame=op$1({frame_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stft_(ha,aa,xa,ba,Sa=hannWindow){ba==null&&(ba=enclosingPowerOfTwo(aa));const Ta=frame(ha,aa,xa),wa=mul$1(Ta,Sa(aa));return rfft(wa,ba)}const stft=op$1({stft_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cropAndResize_(ha,aa,xa,ba,Sa="bilinear",Ta=0){const wa=convertToTensor$1(ha,"image","cropAndResize"),Ea=convertToTensor$1(aa,"boxes","cropAndResize","float32"),ka=convertToTensor$1(xa,"boxInd","cropAndResize","int32"),Aa=Ea.shape[0];assert$2(wa.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${wa.rank}.`),assert$2(Ea.rank===2&&Ea.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${Aa},4] but had shape ${Ea.shape}.`),assert$2(ka.rank===1&&ka.shape[0]===Aa,()=>`Error in cropAndResize: boxInd must be have size [${Aa}] but had shape ${Ea.shape}.`),assert$2(ba.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${ba.length}.`),assert$2(ba[0]>=1&&ba[1]>=1,()=>`cropSize must be atleast [1,1], but was ${ba}`),assert$2(Sa==="bilinear"||Sa==="nearest",()=>`method must be bilinear or nearest, but was ${Sa}`);const Fa={image:wa,boxes:Ea,boxInd:ka},La={method:Sa,extrapolationValue:Ta,cropSize:ba};return ENGINE$1.runKernel(CropAndResize$1,Fa,La)}const cropAndResize$4=op$1({cropAndResize_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function flipLeftRight_(ha){const aa=convertToTensor$1(ha,"image","flipLeftRight","float32");assert$2(aa.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${aa.rank}.`);const xa={image:aa};return ENGINE$1.runKernel(FlipLeftRight$1,xa,{})}const flipLeftRight=op$1({flipLeftRight_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function grayscaleToRGB_(ha){const aa=convertToTensor$1(ha,"image","grayscaleToRGB"),xa=aa.rank-1,ba=aa.shape[xa];assert$2(aa.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${aa.rank}.`),assert$2(ba===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${ba}.`);const Sa=new Array(aa.rank);return Sa.fill(1,0,xa),Sa[xa]=3,tile$4(aa,Sa)}const grayscaleToRGB=op$1({grayscaleToRGB_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rgbToGrayscale_(ha){const aa=convertToTensor$1(ha,"image","RGBToGrayscale"),xa=aa.rank-1,ba=aa.shape[xa];assert$2(aa.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${aa.rank}.`),assert$2(ba===3,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${ba}.`);const Sa=aa.dtype,Ta=cast$5(aa,"float32"),wa=tensor1d([.2989,.587,.114]);let Ea;switch(aa.rank){case 2:Ea=einsum$3("ij,j->i",Ta,wa);break;case 3:Ea=einsum$3("ijk,k->ij",Ta,wa);break;case 4:Ea=einsum$3("ijkl,l->ijk",Ta,wa);break;case 5:Ea=einsum$3("ijklm,m->ijkl",Ta,wa);break;case 6:Ea=einsum$3("ijklmn,n->ijklm",Ta,wa);break;default:throw new Error("Not a valid tensor rank.")}return Ea=expandDims$4(Ea,-1),cast$5(Ea,Sa)}const rgbToGrayscale=op$1({rgbToGrayscale_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rotateWithOffset_(ha,aa,xa=0,ba=.5){const Sa=convertToTensor$1(ha,"image","rotateWithOffset","float32");assert$2(Sa.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${Sa.rank}.`);const Ta={image:Sa},wa={radians:aa,fillValue:xa,center:ba};return ENGINE$1.runKernel(RotateWithOffset$1,Ta,wa)}const rotateWithOffset=op$1({rotateWithOffset_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppSanityCheck(ha,aa,xa,ba,Sa,Ta){ba==null&&(ba=.5),Sa==null&&(Sa=Number.NEGATIVE_INFINITY),Ta==null&&(Ta=0);const wa=ha.shape[0];return xa=Math.min(xa,wa),assert$2(0<=ba&&ba<=1,()=>`iouThreshold must be in [0, 1], but was '${ba}'`),assert$2(ha.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${ha.rank}'`),assert$2(ha.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${ha.shape[1]}`),assert$2(aa.rank===1,()=>"scores must be a 1D tensor"),assert$2(aa.shape[0]===wa,()=>`scores has incompatible shape with boxes. Expected ${wa}, but was ${aa.shape[0]}`),assert$2(0<=Ta&&Ta<=1,()=>`softNmsSigma must be in [0, 1], but was '${Ta}'`),{maxOutputSize:xa,iouThreshold:ba,scoreThreshold:Sa,softNmsSigma:Ta}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppression_(ha,aa,xa,ba=.5,Sa=Number.NEGATIVE_INFINITY){const Ta=convertToTensor$1(ha,"boxes","nonMaxSuppression","float32"),wa=convertToTensor$1(aa,"scores","nonMaxSuppression","float32"),Ea=nonMaxSuppSanityCheck(Ta,wa,xa,ba,Sa);xa=Ea.maxOutputSize,ba=Ea.iouThreshold,Sa=Ea.scoreThreshold;const ka={maxOutputSize:xa,iouThreshold:ba,scoreThreshold:Sa};return ENGINE$1.runKernel(NonMaxSuppressionV3$1,{boxes:Ta,scores:wa},ka)}const nonMaxSuppression=op$1({nonMaxSuppression_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryInsert$1(ha,aa,xa){const ba=binarySearch$1(ha,aa,xa),Sa=ba<0?-(ba+1):ba;ha.splice(Sa,0,aa)}function binarySearch$1(ha,aa,xa){return binarySearch_$1(ha,aa,xa||defaultComparator$1)}function defaultComparator$1(ha,aa){return ha>aa?1:ha<aa?-1:0}function binarySearch_$1(ha,aa,xa){let ba=0,Sa=ha.length,Ta=0,wa=!1;for(;ba<Sa;){Ta=ba+(Sa-ba>>>1);const Ea=xa(aa,ha[Ta]);Ea>0?ba=Ta+1:(Sa=Ta,wa=!Ea)}return wa?ba:-ba-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV3Impl$4(ha,aa,xa,ba,Sa){return nonMaxSuppressionImpl_$1(ha,aa,xa,ba,Sa,0)}function nonMaxSuppressionV4Impl$4(ha,aa,xa,ba,Sa,Ta){return nonMaxSuppressionImpl_$1(ha,aa,xa,ba,Sa,0,!1,Ta,!0)}function nonMaxSuppressionV5Impl$4(ha,aa,xa,ba,Sa,Ta){return nonMaxSuppressionImpl_$1(ha,aa,xa,ba,Sa,Ta,!0)}function nonMaxSuppressionImpl_$1(ha,aa,xa,ba,Sa,Ta,wa=!1,Ea=!1,ka=!1){const Aa=[];for(let sl=0;sl<aa.length;sl++)aa[sl]>Sa&&Aa.push({score:aa[sl],boxIndex:sl,suppressBeginIndex:0});Aa.sort(ascendingComparator$1);const Fa=Ta>0?-.5/Ta:0,La=[],el=[];for(;La.length<xa&&Aa.length>0;){const sl=Aa.pop(),{score:ol,boxIndex:al,suppressBeginIndex:ll}=sl;if(ol<Sa)break;let il=!1;for(let cl=La.length-1;cl>=ll;--cl){const ul=intersectionOverUnion$1(ha,al,La[cl]);if(ul>=ba){il=!0;break}if(sl.score=sl.score*suppressWeight$1(ba,Fa,ul),sl.score<=Sa)break}sl.suppressBeginIndex=La.length,il||(sl.score===ol?(La.push(al),el.push(sl.score)):sl.score>Sa&&binaryInsert$1(Aa,sl,ascendingComparator$1))}const tl=La.length,nl=xa-tl;Ea&&nl>0&&(La.push(...new Array(nl).fill(0)),el.push(...new Array(nl).fill(0)));const rl={selectedIndices:La};return wa&&(rl.selectedScores=el),ka&&(rl.validOutputs=tl),rl}function intersectionOverUnion$1(ha,aa,xa){const ba=ha.subarray(aa*4,aa*4+4),Sa=ha.subarray(xa*4,xa*4+4),Ta=Math.min(ba[0],ba[2]),wa=Math.min(ba[1],ba[3]),Ea=Math.max(ba[0],ba[2]),ka=Math.max(ba[1],ba[3]),Aa=Math.min(Sa[0],Sa[2]),Fa=Math.min(Sa[1],Sa[3]),La=Math.max(Sa[0],Sa[2]),el=Math.max(Sa[1],Sa[3]),tl=(Ea-Ta)*(ka-wa),nl=(La-Aa)*(el-Fa);if(tl<=0||nl<=0)return 0;const rl=Math.max(Ta,Aa),sl=Math.max(wa,Fa),ol=Math.min(Ea,La),al=Math.min(ka,el),ll=Math.max(ol-rl,0)*Math.max(al-sl,0);return ll/(tl+nl-ll)}function suppressWeight$1(ha,aa,xa){const ba=Math.exp(aa*xa*xa);return xa<=ha?ba:0}function ascendingComparator$1(ha,aa){return ha.score-aa.score||ha.score===aa.score&&aa.boxIndex-ha.boxIndex}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionAsync_(ha,aa,xa,ba=.5,Sa=Number.NEGATIVE_INFINITY){const Ta=convertToTensor$1(ha,"boxes","nonMaxSuppressionAsync"),wa=convertToTensor$1(aa,"scores","nonMaxSuppressionAsync"),Ea=nonMaxSuppSanityCheck(Ta,wa,xa,ba,Sa);xa=Ea.maxOutputSize,ba=Ea.iouThreshold,Sa=Ea.scoreThreshold;const ka=await Promise.all([Ta.data(),wa.data()]),Aa=ka[0],Fa=ka[1],{selectedIndices:La}=nonMaxSuppressionV3Impl$4(Aa,Fa,xa,ba,Sa);return Ta!==ha&&Ta.dispose(),wa!==aa&&wa.dispose(),tensor1d(La,"int32")}const nonMaxSuppressionAsync=nonMaxSuppressionAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionWithScore_(ha,aa,xa,ba=.5,Sa=Number.NEGATIVE_INFINITY,Ta=0){const wa=convertToTensor$1(ha,"boxes","nonMaxSuppression"),Ea=convertToTensor$1(aa,"scores","nonMaxSuppression"),ka=nonMaxSuppSanityCheck(wa,Ea,xa,ba,Sa,Ta);xa=ka.maxOutputSize,ba=ka.iouThreshold,Sa=ka.scoreThreshold,Ta=ka.softNmsSigma;const Aa={boxes:wa,scores:Ea},Fa={maxOutputSize:xa,iouThreshold:ba,scoreThreshold:Sa,softNmsSigma:Ta},La=ENGINE$1.runKernel(NonMaxSuppressionV5$1,Aa,Fa);return{selectedIndices:La[0],selectedScores:La[1]}}const nonMaxSuppressionWithScore=op$1({nonMaxSuppressionWithScore_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionWithScoreAsync_(ha,aa,xa,ba=.5,Sa=Number.NEGATIVE_INFINITY,Ta=0){const wa=convertToTensor$1(ha,"boxes","nonMaxSuppressionAsync"),Ea=convertToTensor$1(aa,"scores","nonMaxSuppressionAsync"),ka=nonMaxSuppSanityCheck(wa,Ea,xa,ba,Sa,Ta);xa=ka.maxOutputSize,ba=ka.iouThreshold,Sa=ka.scoreThreshold,Ta=ka.softNmsSigma;const Aa=await Promise.all([wa.data(),Ea.data()]),Fa=Aa[0],La=Aa[1],{selectedIndices:el,selectedScores:tl}=nonMaxSuppressionV5Impl$4(Fa,La,xa,ba,Sa,Ta);return wa!==ha&&wa.dispose(),Ea!==aa&&Ea.dispose(),{selectedIndices:tensor1d(el,"int32"),selectedScores:tensor1d(tl)}}const nonMaxSuppressionWithScoreAsync=nonMaxSuppressionWithScoreAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionPadded_(ha,aa,xa,ba=.5,Sa=Number.NEGATIVE_INFINITY,Ta=!1){const wa=convertToTensor$1(ha,"boxes","nonMaxSuppression"),Ea=convertToTensor$1(aa,"scores","nonMaxSuppression"),ka=nonMaxSuppSanityCheck(wa,Ea,xa,ba,Sa,null),Aa=ka.maxOutputSize,Fa=ka.iouThreshold,La=ka.scoreThreshold,el={boxes:wa,scores:Ea},tl={maxOutputSize:Aa,iouThreshold:Fa,scoreThreshold:La,padToMaxOutputSize:Ta},nl=ENGINE$1.runKernel(NonMaxSuppressionV4$1,el,tl);return{selectedIndices:nl[0],validOutputs:nl[1]}}const nonMaxSuppressionPadded=op$1({nonMaxSuppressionPadded_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function nonMaxSuppressionPaddedAsync_(ha,aa,xa,ba=.5,Sa=Number.NEGATIVE_INFINITY,Ta=!1){const wa=convertToTensor$1(ha,"boxes","nonMaxSuppressionAsync"),Ea=convertToTensor$1(aa,"scores","nonMaxSuppressionAsync"),ka=nonMaxSuppSanityCheck(wa,Ea,xa,ba,Sa,null),Aa=ka.maxOutputSize,Fa=ka.iouThreshold,La=ka.scoreThreshold,[el,tl]=await Promise.all([wa.data(),Ea.data()]),{selectedIndices:nl,validOutputs:rl}=nonMaxSuppressionV4Impl$4(el,tl,Aa,Fa,La,Ta);return wa!==ha&&wa.dispose(),Ea!==aa&&Ea.dispose(),{selectedIndices:tensor1d(nl,"int32"),validOutputs:scalar$1(rl,"int32")}}const nonMaxSuppressionPaddedAsync=nonMaxSuppressionPaddedAsync_;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear_(ha,aa,xa=!1,ba=!1){const Sa=convertToTensor$1(ha,"images","resizeBilinear");assert$2(Sa.rank===3||Sa.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${Sa.rank}.`),assert$2(aa.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${aa}.`),assert$2(ba===!1||xa===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let Ta=Sa,wa=!1;Sa.rank===3&&(wa=!0,Ta=reshape$4(Sa,[1,Sa.shape[0],Sa.shape[1],Sa.shape[2]]));const Ea={images:Ta},ka={alignCorners:xa,halfPixelCenters:ba,size:aa},Aa=ENGINE$1.runKernel(ResizeBilinear$1,Ea,ka);return wa?reshape$4(Aa,[Aa.shape[1],Aa.shape[2],Aa.shape[3]]):Aa}const resizeBilinear$4=op$1({resizeBilinear_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor_(ha,aa,xa=!1,ba=!1){const Sa=convertToTensor$1(ha,"images","resizeNearestNeighbor");assert$2(Sa.rank===3||Sa.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${Sa.rank}.`),assert$2(aa.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${aa}.`),assert$2(Sa.dtype==="float32"||Sa.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),assert$2(ba===!1||xa===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let Ta=Sa,wa=!1;Sa.rank===3&&(wa=!0,Ta=reshape$4(Sa,[1,Sa.shape[0],Sa.shape[1],Sa.shape[2]]));const Ea={images:Ta},ka={alignCorners:xa,halfPixelCenters:ba,size:aa},Aa=ENGINE$1.runKernel(ResizeNearestNeighbor$1,Ea,ka);return wa?reshape$4(Aa,[Aa.shape[1],Aa.shape[2],Aa.shape[3]]):Aa}const resizeNearestNeighbor$3=op$1({resizeNearestNeighbor_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function threshold_(ha,aa="binary",xa=!1,ba=.5){const Sa=convertToTensor$1(ha,"image","threshold"),Ta=.2989,wa=.587,Ea=.114,ka=Sa.shape[0]*Sa.shape[1];let Aa=mul$1(tensor1d([ba]),255),Fa,La,el,tl;if(assert$2(Sa.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${Sa.rank}.`),assert$2(Sa.shape[2]===3||Sa.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${Sa.shape[2]}.`),assert$2(Sa.dtype==="int32"||Sa.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${Sa.dtype}.`),assert$2(aa==="otsu"||aa==="binary",()=>`Method must be binary or otsu, but was ${aa}`),Sa.shape[2]===3){[Fa,La,el]=split$3(Sa,[1,1,1],-1);const sl=mul$1(Fa,Ta),ol=mul$1(La,wa),al=mul$1(el,Ea);tl=add$3(add$3(sl,ol),al)}else tl=ha;if(aa==="otsu"){const sl=bincount$3(cast$5(round$4(tl),"int32"),tensor([]),256);Aa=otsu(sl,ka)}const nl=xa?lessEqual$3(tl,Aa):greater$3(tl,Aa);return cast$5(mul$1(nl,255),"int32")}function otsu(ha,aa){let xa=tensor1d([-1]),ba=tensor1d([0]),Sa=tensor1d([0]),Ta,wa,Ea,ka,Aa,Fa;for(let La=0;La<ha.size-1;La++){Ta=slice$3(ha,0,La+1),wa=slice$3(ha,La+1),Aa=div$2(sum$5(Ta),aa),Fa=div$2(sum$5(wa),aa);const el=sum$5(mul$1(Ta,range$4(0,Ta.size)));Ea=div$2(el,sum$5(Ta));const tl=fill$4(wa.shape,Ta.size),nl=add$3(range$4(0,wa.size),tl),rl=mul$1(wa,nl);ka=div$2(sum$5(rl),sum$5(wa));const sl=sub$4(Ea,ka),ol=sub$4(Ea,ka),al=mul$1(Aa,Fa);Sa=mul$1(mul$1(al,sl),ol);const ll=greater$3(Sa,ba);ba=where(ll,Sa,ba),xa=where(ll,tensor1d([La]),xa)}return xa}const threshold$1=op$1({threshold_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform_(ha,aa,xa="nearest",ba="constant",Sa=0,Ta){const wa=convertToTensor$1(ha,"image","transform","float32"),Ea=convertToTensor$1(aa,"transforms","transform","float32");assert$2(wa.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${wa.rank}.`),assert$2(Ea.rank===2&&(Ea.shape[0]===wa.shape[0]||Ea.shape[0]===1)&&Ea.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),assert$2(Ta==null||Ta.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${Ta}.`);const ka={image:wa,transforms:Ea},Aa={interpolation:xa,fillMode:ba,fillValue:Sa,outputShape:Ta};return ENGINE$1.runKernel(Transform$1,ka,Aa)}const transform$3=op$1({transform_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bandPart_(ha,aa,xa){const ba=convertToTensor$1(ha,"a","bandPart");assert$2(ba.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${ba.rank}.`);const Sa=ba.shape,[Ta,wa]=ba.shape.slice(-2);let Ea,ka;typeof aa=="number"?(assert$2(aa%1===0,()=>`bandPart(): numLower must be an integer, got ${aa}.`),assert$2(aa<=Ta,()=>`bandPart(): numLower (${aa}) must not be greater than the number of rows (${Ta}).`),Ea=convertToTensor$1(aa<0?Ta:aa,"numLower","bandPart")):(assert$2(aa.dtype==="int32",()=>"bandPart(): numLower's dtype must be an int32."),Ea=where(less$3(aa,0),Ta,minimum$3(aa,Ta))),typeof xa=="number"?(assert$2(xa%1===0,()=>`bandPart(): numUpper must be an integer, got ${xa}.`),assert$2(xa<=wa,()=>`bandPart(): numUpper (${xa}) must not be greater than the number of columns (${wa}).`),ka=convertToTensor$1(xa<0?wa:xa,"numUpper","bandPart")):(assert$2(xa.dtype==="int32",()=>"bandPart(): numUpper's dtype must be an int32."),ka=where(less$3(xa,0),wa,minimum$3(xa,wa)));const Aa=reshape$4(range$4(0,Ta,1,"int32"),[-1,1]),Fa=range$4(0,wa,1,"int32"),La=sub$4(Aa,Fa),el=logicalAnd$3(lessEqual$3(La,Ea),greaterEqual$3(La,neg$3(ka))),tl=zeros$2([Ta,wa],ba.dtype);return reshape$4(stack(unstack(reshape$4(ba,[-1,Ta,wa])).map(nl=>where(el,nl,tl))),Sa)}const bandPart=op$1({bandPart_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gramSchmidt_(ha){let aa;if(Array.isArray(ha)){aa=!1,assert$2(ha!=null&&ha.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const Sa=ha[0].shape[0];for(let Ta=1;Ta<ha.length;++Ta)assert$2(ha[Ta].shape[0]===Sa,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${ha[Ta].shape[0]} vs. ${Sa})`)}else aa=!0,ha=split$3(ha,ha.shape[0],0).map(Sa=>squeeze(Sa,[0]));assert$2(ha.length<=ha[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${ha.length}) exceeds number of dimensions (${ha[0].shape[0]}).`);const xa=[],ba=ha;for(let Sa=0;Sa<ha.length;++Sa)xa.push(ENGINE$1.tidy(()=>{let Ta=ba[Sa];if(Sa>0)for(let wa=0;wa<Sa;++wa){const Ea=mul$1(sum$5(mul$1(xa[wa],Ta)),xa[wa]);Ta=sub$4(Ta,Ea)}return div$2(Ta,norm(Ta,"euclidean"))}));return aa?stack(xa,0):xa}const gramSchmidt=op$1({gramSchmidt_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function qr_(ha,aa=!1){if(assert$2(ha.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${ha.rank}`),ha.rank===2)return qr2d(ha,aa);{const xa=ha.shape.slice(0,ha.shape.length-2).reduce((ka,Aa)=>ka*Aa),ba=unstack(reshape$4(ha,[xa,ha.shape[ha.shape.length-2],ha.shape[ha.shape.length-1]]),0),Sa=[],Ta=[];ba.forEach(ka=>{const[Aa,Fa]=qr2d(ka,aa);Sa.push(Aa),Ta.push(Fa)});const wa=reshape$4(stack(Sa,0),ha.shape),Ea=reshape$4(stack(Ta,0),ha.shape);return[wa,Ea]}}function qr2d(ha,aa=!1){return ENGINE$1.tidy(()=>{assert$2(ha.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${ha.shape.length}D Tensor.`);const xa=ha.shape[0],ba=ha.shape[1];let Sa=eye(xa),Ta=clone$1(ha);const wa=tensor2d([[1]],[1,1]);let Ea=clone$1(wa);const ka=xa>=ba?ba:xa;for(let Aa=0;Aa<ka;++Aa){const Fa=Ta,La=Ea,el=Sa;[Ea,Ta,Sa]=ENGINE$1.tidy(()=>{const tl=slice$3(Ta,[Aa,Aa],[xa-Aa,1]),nl=norm(tl),rl=slice$3(Ta,[Aa,Aa],[1,1]),sl=where(greater$3(rl,0),tensor2d([[-1]]),tensor2d([[1]])),ol=sub$4(rl,mul$1(sl,nl)),al=div$2(tl,ol);al.shape[0]===1?Ea=clone$1(wa):Ea=concat$3([wa,slice$3(al,[1,0],[al.shape[0]-1,al.shape[1]])],0);const ll=neg$3(div$2(matMul$1(sl,ol),nl)),il=slice$3(Ta,[Aa,0],[xa-Aa,ba]),cl=mul$1(ll,Ea),ul=transpose$3(Ea);if(Aa===0)Ta=sub$4(il,matMul$1(cl,matMul$1(ul,il)));else{const pl=sub$4(il,matMul$1(cl,matMul$1(ul,il)));Ta=concat$3([slice$3(Ta,[0,0],[Aa,ba]),pl],0)}const dl=transpose$3(cl),hl=slice$3(Sa,[0,Aa],[xa,Sa.shape[1]-Aa]);if(Aa===0)Sa=sub$4(hl,matMul$1(matMul$1(hl,Ea),dl));else{const pl=sub$4(hl,matMul$1(matMul$1(hl,Ea),dl));Sa=concat$3([slice$3(Sa,[0,0],[xa,Aa]),pl],1)}return[Ea,Ta,Sa]}),dispose$1([Fa,La,el])}return!aa&&xa>ba&&(Sa=slice$3(Sa,[0,0],[xa,ba]),Ta=slice$3(Ta,[0,0],[ba,ba])),[Sa,Ta]})}const qr$1=op$1({qr_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Reduction;(function(ha){ha[ha.NONE=0]="NONE",ha[ha.MEAN=1]="MEAN",ha[ha.SUM=2]="SUM",ha[ha.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(Reduction||(Reduction={}));function computeWeightedLoss_(ha,aa,xa=Reduction.SUM_BY_NONZERO_WEIGHTS){const ba=convertToTensor$1(ha,"losses","computeWeightedLoss");let Sa=null;aa!=null&&(Sa=convertToTensor$1(aa,"weights","computeWeightedLoss"));const Ta=Sa==null?ba:mul$1(ba,Sa);if(xa===Reduction.NONE)return Ta;if(xa===Reduction.SUM)return sum$5(Ta);if(xa===Reduction.MEAN){if(Sa==null)return mean$1(Ta);{const wa=ba.size/Sa.size,Ea=div$2(sum$5(Ta),sum$5(Sa));return wa>1?div$2(Ea,scalar$1(wa)):Ea}}if(xa===Reduction.SUM_BY_NONZERO_WEIGHTS){if(Sa==null)return div$2(sum$5(Ta),scalar$1(ba.size));{const wa=mul$1(Sa,ones$1(ba.shape)),Ea=cast$5(sum$5(notEqual$3(wa,scalar$1(0))),"float32");return div$2(sum$5(Ta),Ea)}}throw Error(`Unknown reduction: ${xa}`)}const computeWeightedLoss$1=op$1({computeWeightedLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function absoluteDifference_(ha,aa,xa,ba=Reduction.SUM_BY_NONZERO_WEIGHTS){const Sa=convertToTensor$1(ha,"labels","absoluteDifference"),Ta=convertToTensor$1(aa,"predictions","absoluteDifference");let wa=null;xa!=null&&(wa=convertToTensor$1(xa,"weights","absoluteDifference")),assertShapesMatch$1(Sa.shape,Ta.shape,"Error in absoluteDifference: ");const Ea=abs$4(sub$4(Sa,Ta));return computeWeightedLoss$1(Ea,wa,ba)}const absoluteDifference=op$1({absoluteDifference_});function cosineDistance_(ha,aa,xa,ba,Sa=Reduction.SUM_BY_NONZERO_WEIGHTS){const Ta=convertToTensor$1(ha,"labels","cosineDistance"),wa=convertToTensor$1(aa,"predictions","cosineDistance");let Ea=null;ba!=null&&(Ea=convertToTensor$1(ba,"weights","cosineDistance")),assertShapesMatch$1(Ta.shape,wa.shape,"Error in cosineDistance: ");const ka=scalar$1(1),Aa=sub$4(ka,sum$5(mul$1(Ta,wa),xa,!0));return computeWeightedLoss$1(Aa,Ea,Sa)}const cosineDistance=op$1({cosineDistance_});function hingeLoss_(ha,aa,xa,ba=Reduction.SUM_BY_NONZERO_WEIGHTS){let Sa=convertToTensor$1(ha,"labels","hingeLoss");const Ta=convertToTensor$1(aa,"predictions","hingeLoss");let wa=null;xa!=null&&(wa=convertToTensor$1(xa,"weights","hingeLoss")),assertShapesMatch$1(Sa.shape,Ta.shape,"Error in hingeLoss: ");const Ea=scalar$1(1);Sa=sub$4(mul$1(scalar$1(2),Sa),Ea);const ka=relu$4(sub$4(Ea,mul$1(Sa,Ta)));return computeWeightedLoss$1(ka,wa,ba)}const hingeLoss=op$1({hingeLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function huberLoss_(ha,aa,xa,ba=1,Sa=Reduction.SUM_BY_NONZERO_WEIGHTS){const Ta=convertToTensor$1(ha,"labels","huberLoss"),wa=convertToTensor$1(aa,"predictions","huberLoss");let Ea=null;xa!=null&&(Ea=convertToTensor$1(xa,"weights","huberLoss")),assertShapesMatch$1(Ta.shape,wa.shape,"Error in huberLoss: ");const ka=scalar$1(ba),Aa=abs$4(sub$4(wa,Ta)),Fa=minimum$3(Aa,ka),La=sub$4(Aa,Fa),el=add$3(mul$1(scalar$1(.5),square$4(Fa)),mul$1(ka,La));return computeWeightedLoss$1(el,Ea,Sa)}const huberLoss=op$1({huberLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function logLoss_(ha,aa,xa,ba=1e-7,Sa=Reduction.SUM_BY_NONZERO_WEIGHTS){const Ta=convertToTensor$1(ha,"labels","logLoss"),wa=convertToTensor$1(aa,"predictions","logLoss");let Ea=null;xa!=null&&(Ea=convertToTensor$1(xa,"weights","logLoss")),assertShapesMatch$1(Ta.shape,wa.shape,"Error in logLoss: ");const ka=scalar$1(1),Aa=scalar$1(ba),Fa=neg$3(mul$1(Ta,log$4(add$3(wa,Aa)))),La=mul$1(sub$4(ka,Ta),log$4(add$3(sub$4(ka,wa),Aa))),el=sub$4(Fa,La);return computeWeightedLoss$1(el,Ea,Sa)}const logLoss=op$1({logLoss_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meanSquaredError_(ha,aa,xa,ba=Reduction.SUM_BY_NONZERO_WEIGHTS){const Sa=convertToTensor$1(ha,"labels","meanSquaredError"),Ta=convertToTensor$1(aa,"predictions","meanSquaredError");let wa=null;xa!=null&&(wa=convertToTensor$1(xa,"weights","meanSquaredError")),assertShapesMatch$1(Sa.shape,Ta.shape,"Error in meanSquaredError: ");const Ea=squaredDifference$3(Sa,Ta);return computeWeightedLoss$1(Ea,wa,ba)}const meanSquaredError$1=op$1({meanSquaredError_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sigmoidCrossEntropyWithLogits_(ha,aa){const xa=convertToTensor$1(ha,"labels","sigmoidCrossEntropyWithLogits"),ba=convertToTensor$1(aa,"logits","sigmoidCrossEntropyWithLogits");assertShapesMatch$1(xa.shape,ba.shape,"Error in sigmoidCrossEntropyWithLogits: ");const Sa=relu$4(ba),Ta=mul$1(ba,xa),wa=log1p$3(exp$3(neg$3(abs$4(ba))));return add$3(sub$4(Sa,Ta),wa)}function sigmoidCrossEntropy_(ha,aa,xa,ba=0,Sa=Reduction.SUM_BY_NONZERO_WEIGHTS){let Ta=convertToTensor$1(ha,"multiClassLabels","sigmoidCrossEntropy");const wa=convertToTensor$1(aa,"logits","sigmoidCrossEntropy");let Ea=null;if(xa!=null&&(Ea=convertToTensor$1(xa,"weights","sigmoidCrossEntropy")),assertShapesMatch$1(Ta.shape,wa.shape,"Error in sigmoidCrossEntropy: "),ba>0){const Aa=scalar$1(ba),Fa=scalar$1(1),La=scalar$1(.5);Ta=add$3(mul$1(Ta,sub$4(Fa,Aa)),mul$1(La,Aa))}const ka=sigmoidCrossEntropyWithLogits_(Ta,wa);return computeWeightedLoss$1(ka,Ea,Sa)}const sigmoidCrossEntropy=op$1({sigmoidCrossEntropy_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmaxCrossEntropyWithLogits_(ha,aa,xa=-1){if(xa===-1&&(xa=aa.rank-1),xa!==aa.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${aa.rank} and dim was ${xa}`);return customGrad((Sa,Ta,wa)=>{const ka=logSumExp(Ta,[xa],!0),Aa=sub$4(cast$5(Ta,"float32"),ka);wa([Sa,Aa]);const Fa=neg$3(mul$1(Aa,Sa));return{value:sum$5(Fa,[xa]),gradFunc:(tl,nl)=>{const[rl,sl]=nl,ol=expandShapeToKeepDim$1(tl.shape,[xa]);return[mul$1(reshape$4(tl,ol),sub$4(cast$5(rl,"float32"),exp$3(sl))),mul$1(reshape$4(tl,ol),sub$4(exp$3(sl),cast$5(rl,"float32")))]}}})(ha,aa)}function softmaxCrossEntropy_(ha,aa,xa,ba=0,Sa=Reduction.SUM_BY_NONZERO_WEIGHTS){let Ta=convertToTensor$1(ha,"onehotLabels","softmaxCrossEntropy");const wa=convertToTensor$1(aa,"logits","softmaxCrossEntropy");let Ea=null;if(xa!=null&&(Ea=convertToTensor$1(xa,"weights","softmaxCrossEntropy")),assertShapesMatch$1(Ta.shape,wa.shape,"Error in softmaxCrossEntropy: "),ba>0){const Aa=scalar$1(ba),Fa=scalar$1(1),La=scalar$1(Ta.shape[1]);Ta=add$3(mul$1(Ta,sub$4(Fa,Aa)),div$2(Aa,La))}const ka=softmaxCrossEntropyWithLogits_(Ta,wa);return computeWeightedLoss$1(ka,Ea,Sa)}const softmaxCrossEntropy=op$1({softmaxCrossEntropy_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows_(ha,aa,xa,ba){const Sa=convertToTensor$1(ha,"indices","sparseFillEmptyRows","int32"),Ta=convertToTensor$1(aa,"values","sparseFillEmptyRows"),wa=convertToTensor$1(xa,"denseShape","sparseFillEmptyRows","int32"),Ea=convertToTensor$1(ba,"defaultValue","sparseFillEmptyRows",Ta.dtype);if(Sa.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${Sa.shape}`);if(Ta.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${Ta.shape}`);if(wa.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${wa.shape}`);if(Ea.rank!==0)throw new Error(`Default value should be a scalar but received shape ${Ea.shape}`);const ka={indices:Sa,values:Ta,denseShape:wa,defaultValue:Ea},Aa=ENGINE$1.runKernel(SparseFillEmptyRows$1,ka);return{outputIndices:Aa[0],outputValues:Aa[1],emptyRowIndicator:Aa[2],reverseIndexMap:Aa[3]}}const sparseFillEmptyRows$3=op$1({sparseFillEmptyRows_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape_(ha,aa,xa){const ba=convertToTensor$1(ha,"inputIndices","sparseReshape","int32"),Sa=convertToTensor$1(aa,"inputShape","sparseReshape","int32"),Ta=convertToTensor$1(xa,"newShape","sparseReshape","int32");if(ba.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${ba.shape}`);if(Sa.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${Sa.shape}`);if(Ta.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${Ta.shape}`);const wa={inputIndices:ba,inputShape:Sa,newShape:Ta},Ea=ENGINE$1.runKernel(SparseReshape$1,wa);return{outputIndices:Ea[0],outputShape:Ea[1]}}const sparseReshape$3=op$1({sparseReshape_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean_(ha,aa,xa){const ba=convertToTensor$1(ha,"data","sparseSegmentMean"),Sa=convertToTensor$1(aa,"indices","sparseSegmentMean","int32"),Ta=convertToTensor$1(xa,"segmentIds","sparseSegmentMean","int32");if(ba.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${Sa.shape}`);if(Ta.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${Ta.shape}`);const wa={data:ba,indices:Sa,segmentIds:Ta};return ENGINE$1.runKernel(SparseSegmentMean$1,wa)}const sparseSegmentMean$3=op$1({sparseSegmentMean_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum_(ha,aa,xa){const ba=convertToTensor$1(ha,"data","sparseSegmentSum"),Sa=convertToTensor$1(aa,"indices","sparseSegmentSum","int32"),Ta=convertToTensor$1(xa,"segmentIds","sparseSegmentSum","int32");if(ba.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${Sa.shape}`);if(Ta.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${Ta.shape}`);const wa={data:ba,indices:Sa,segmentIds:Ta};return ENGINE$1.runKernel(SparseSegmentSum$1,wa)}const sparseSegmentSum$3=op$1({sparseSegmentSum_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams_(ha,aa,xa,ba,Sa,Ta,wa,Ea){const ka=convertToTensor$1(ha,"data","stringNGrams","string");if(ka.dtype!=="string")throw new Error("Data must be of datatype string");if(ka.shape.length!==1)throw new Error(`Data must be a vector, saw: ${ka.shape}`);const Aa=convertToTensor$1(aa,"dataSplits","stringNGrams");if(Aa.dtype!=="int32")throw new Error("Data splits must be of datatype int32");const Fa={separator:xa,nGramWidths:ba,leftPad:Sa,rightPad:Ta,padWidth:wa,preserveShortSequences:Ea},La={data:ka,dataSplits:Aa},el=ENGINE$1.runKernel(StringNGrams$1,La,Fa);return{nGrams:el[0],nGramsSplits:el[1]}}const stringNGrams$3=op$1({stringNGrams_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit_(ha,aa,xa=!0){const ba=convertToTensor$1(ha,"input","stringSplit","string"),Sa=convertToTensor$1(aa,"delimiter","stringSplit","string");if(ba.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${ba.shape}`);if(Sa.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${Sa.shape}`);const Ta={skipEmpty:xa},wa={input:ba,delimiter:Sa},Ea=ENGINE$1.runKernel(StringSplit$1,wa,Ta);return{indices:Ea[0],values:Ea[1],shape:Ea[2]}}const stringSplit$3=op$1({stringSplit_});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast_(ha,aa){const xa=convertToTensor$1(ha,"input","stringToHashBucketFast","string"),ba={numBuckets:aa};if(aa<=0)throw new Error("Number of buckets must be at least 1");const Sa={input:xa};return ENGINE$1.runKernel(StringToHashBucketFast$1,Sa,ba)}const stringToHashBucketFast$3=op$1({stringToHashBucketFast_});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function staticRegexReplace_(ha,aa,xa,ba=!0){const Sa=convertToTensor$1(ha,"input","staticRegexReplace","string"),Ta={pattern:aa,rewrite:xa,replaceGlobal:ba};return ENGINE$1.runKernel(StaticRegexReplace$1,{x:Sa},Ta)}const staticRegexReplace$3=op$1({staticRegexReplace_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spectral$1={fft:fft$3,ifft:ifft$3,rfft,irfft},signal={hammingWindow,hannWindow,frame,stft},image$1={flipLeftRight,grayscaleToRGB,resizeNearestNeighbor:resizeNearestNeighbor$3,resizeBilinear:resizeBilinear$4,rgbToGrayscale,rotateWithOffset,cropAndResize:cropAndResize$4,nonMaxSuppression,nonMaxSuppressionAsync,nonMaxSuppressionWithScore,nonMaxSuppressionWithScoreAsync,nonMaxSuppressionPadded,nonMaxSuppressionPaddedAsync,threshold:threshold$1,transform:transform$3},linalg={bandPart,gramSchmidt,qr:qr$1},losses={absoluteDifference,computeWeightedLoss:computeWeightedLoss$1,cosineDistance,hingeLoss,huberLoss,logLoss,meanSquaredError:meanSquaredError$1,sigmoidCrossEntropy,softmaxCrossEntropy},sparse$1={sparseFillEmptyRows:sparseFillEmptyRows$3,sparseReshape:sparseReshape$3,sparseSegmentMean:sparseSegmentMean$3,sparseSegmentSum:sparseSegmentSum$3},string$1={stringNGrams:stringNGrams$3,stringSplit:stringSplit$3,stringToHashBucketFast:stringToHashBucketFast$3,staticRegexReplace:staticRegexReplace$3};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GLOBAL_CUSTOM_OBJECT$1=new Map,GLOBAL_CUSTOM_NAMES$1=new Map;let Serializable$1=class{getClassName(){return this.constructor.className}static fromConfig(aa,xa){return new aa(xa)}},SerializationMap$1=class tc{constructor(){this.classNameMap={}}static getMap(){return tc.instance==null&&(tc.instance=new tc),tc.instance}static register(aa){tc.getMap().classNameMap[aa.className]=[aa,aa.fromConfig]}};function registerClass$1(ha,aa,xa){assert$2(ha.className!=null,()=>"Class being registered does not have the static className property defined."),assert$2(typeof ha.className=="string",()=>"className is required to be a string, but got type "+typeof ha.className),assert$2(ha.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof aa>"u"&&(aa="Custom"),typeof xa>"u"&&(xa=ha.className);const ba=xa,Sa=aa+">"+ba;return SerializationMap$1.register(ha),GLOBAL_CUSTOM_OBJECT$1.set(Sa,ha),GLOBAL_CUSTOM_NAMES$1.set(ha,Sa),ha}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Optimizer$1=class extends Serializable$1{minimize(aa,xa=!1,ba){const{value:Sa,grads:Ta}=this.computeGradients(aa,ba);if(ba!=null){const wa=ba.map(Ea=>({name:Ea.name,tensor:Ta[Ea.name]}));this.applyGradients(wa)}else this.applyGradients(Ta);return dispose$1(Ta),xa?Sa:(Sa.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(aa,xa){return variableGrads$1(aa,xa)}dispose(){this.iterations_!=null&&dispose$1(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:scalar$1(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(aa){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(aa){return this.iterations_=(await aa[0].tensor.data())[0],aa.slice(1)}};Object.defineProperty(Optimizer$1,Symbol.hasInstance,{value:ha=>ha.minimize!=null&&ha.computeGradients!=null&&ha.applyGradients!=null});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdadeltaOptimizer$1=class extends Optimizer$1{static get className(){return"Adadelta"}constructor(aa,xa,ba=null){super(),this.learningRate=aa,this.rho=xa,this.epsilon=ba,this.accumulatedGrads=[],this.accumulatedUpdates=[],ba==null&&(this.epsilon=ENGINE$1.backend.epsilon())}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE$1.registeredVariables[ba],wa=!1;this.accumulatedGrads[Sa]==null&&(this.accumulatedGrads[Sa]={originalName:`${ba}/accum_grad`,variable:tidy$1(()=>zerosLike$4(Ta).variable(wa))}),this.accumulatedUpdates[Sa]==null&&(this.accumulatedUpdates[Sa]={originalName:`${ba}/accum_var`,variable:tidy$1(()=>zerosLike$4(Ta).variable(wa))});const Ea=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(Ea==null)return;const ka=this.accumulatedGrads[Sa].variable,Aa=this.accumulatedUpdates[Sa].variable;tidy$1(()=>{const Fa=add$3(mul$1(ka,this.rho),mul$1(square$4(Ea),1-this.rho)),La=mul$1(div$2(sqrt$4(add$3(Aa,this.epsilon)),sqrt$4(add$3(ka,this.epsilon))),Ea),el=add$3(mul$1(Aa,this.rho),mul$1(square$4(La),1-this.rho));ka.assign(Fa),Aa.assign(el);const tl=add$3(mul$1(La,-this.learningRate),Ta);Ta.assign(tl)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(dispose$1(this.accumulatedGrads.map(aa=>aa.variable)),dispose$1(this.accumulatedUpdates.map(aa=>aa.variable)))}async getWeights(){const aa=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(aa.map(xa=>({name:xa.originalName,tensor:xa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=aa.length/2,ba=!1;this.accumulatedGrads=aa.slice(0,xa).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.accumulatedUpdates=aa.slice(xa,xa*2).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.rho,xa.epsilon)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdagradOptimizer$1=class extends Optimizer$1{static get className(){return"Adagrad"}constructor(aa,xa=.1){super(),this.learningRate=aa,this.initialAccumulatorValue=xa,this.accumulatedGrads=[]}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE$1.registeredVariables[ba];this.accumulatedGrads[Sa]==null&&(this.accumulatedGrads[Sa]={originalName:`${ba}/accumulator`,variable:tidy$1(()=>fill$4(Ta.shape,this.initialAccumulatorValue).variable(!1))});const wa=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(wa==null)return;const Ea=this.accumulatedGrads[Sa].variable;tidy$1(()=>{const ka=add$3(Ea,square$4(wa));Ea.assign(ka);const Aa=add$3(mul$1(div$2(wa,sqrt$4(add$3(ka,ENGINE$1.backend.epsilon()))),-this.learningRate),Ta);Ta.assign(Aa)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&dispose$1(this.accumulatedGrads.map(aa=>aa.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(aa=>({name:aa.originalName,tensor:aa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=!1;this.accumulatedGrads=aa.map(ba=>({originalName:ba.name,variable:ba.tensor.variable(xa)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.initialAccumulatorValue)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdamOptimizer$1=class extends Optimizer$1{static get className(){return"Adam"}constructor(aa,xa,ba,Sa=null){super(),this.learningRate=aa,this.beta1=xa,this.beta2=ba,this.epsilon=Sa,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],tidy$1(()=>{this.accBeta1=scalar$1(xa).variable(),this.accBeta2=scalar$1(ba).variable()}),Sa==null&&(this.epsilon=ENGINE$1.backend.epsilon())}applyGradients(aa){const xa=Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa);tidy$1(()=>{const ba=sub$4(1,this.accBeta1),Sa=sub$4(1,this.accBeta2);xa.forEach((Ta,wa)=>{const Ea=ENGINE$1.registeredVariables[Ta],ka=!1;this.accumulatedFirstMoment[wa]==null&&(this.accumulatedFirstMoment[wa]={originalName:`${Ta}/m`,variable:tidy$1(()=>zerosLike$4(Ea).variable(ka))}),this.accumulatedSecondMoment[wa]==null&&(this.accumulatedSecondMoment[wa]={originalName:`${Ta}/v`,variable:tidy$1(()=>zerosLike$4(Ea).variable(ka))});const Aa=Array.isArray(aa)?aa[wa].tensor:aa[Ta];if(Aa==null)return;const Fa=this.accumulatedFirstMoment[wa].variable,La=this.accumulatedSecondMoment[wa].variable,el=add$3(mul$1(Fa,this.beta1),mul$1(Aa,1-this.beta1)),tl=add$3(mul$1(La,this.beta2),mul$1(square$4(Aa),1-this.beta2)),nl=div$2(el,ba),rl=div$2(tl,Sa);Fa.assign(el),La.assign(tl);const sl=add$3(mul$1(div$2(nl,add$3(sqrt$4(rl),this.epsilon)),-this.learningRate),Ea);Ea.assign(sl)}),this.accBeta1.assign(mul$1(this.accBeta1,this.beta1)),this.accBeta2.assign(mul$1(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&dispose$1(this.accumulatedFirstMoment.map(aa=>aa.variable)),this.accumulatedSecondMoment!=null&&dispose$1(this.accumulatedSecondMoment.map(aa=>aa.variable))}async getWeights(){const aa=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(aa.map(xa=>({name:xa.originalName,tensor:xa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa),tidy$1(()=>{this.accBeta1.assign(pow$4(this.beta1,this.iterations_+1)),this.accBeta2.assign(pow$4(this.beta2,this.iterations_+1))});const xa=aa.length/2,ba=!1;this.accumulatedFirstMoment=aa.slice(0,xa).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.accumulatedSecondMoment=aa.slice(xa,xa*2).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.beta1,xa.beta2,xa.epsilon)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AdamaxOptimizer$1=class extends Optimizer$1{static get className(){return"Adamax"}constructor(aa,xa,ba,Sa=null,Ta=0){super(),this.learningRate=aa,this.beta1=xa,this.beta2=ba,this.epsilon=Sa,this.decay=Ta,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],tidy$1(()=>{this.iteration=scalar$1(0).variable(),this.accBeta1=scalar$1(xa).variable()}),Sa==null&&(this.epsilon=ENGINE$1.backend.epsilon())}applyGradients(aa){const xa=Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa);tidy$1(()=>{const ba=sub$4(1,this.accBeta1),Sa=div$2(-this.learningRate,add$3(mul$1(this.iteration,this.decay),1));xa.forEach((Ta,wa)=>{const Ea=ENGINE$1.registeredVariables[Ta],ka=!1;this.accumulatedFirstMoment[wa]==null&&(this.accumulatedFirstMoment[wa]={originalName:`${Ta}/m`,variable:zerosLike$4(Ea).variable(ka)}),this.accumulatedWeightedInfNorm[wa]==null&&(this.accumulatedWeightedInfNorm[wa]={originalName:`${Ta}/v`,variable:zerosLike$4(Ea).variable(ka)});const Aa=Array.isArray(aa)?aa[wa].tensor:aa[Ta];if(Aa==null)return;const Fa=this.accumulatedFirstMoment[wa].variable,La=this.accumulatedWeightedInfNorm[wa].variable,el=add$3(mul$1(Fa,this.beta1),mul$1(Aa,1-this.beta1)),tl=mul$1(La,this.beta2),nl=abs$4(Aa),rl=maximum$4(tl,nl);Fa.assign(el),La.assign(rl);const sl=add$3(mul$1(div$2(Sa,ba),div$2(el,add$3(rl,this.epsilon))),Ea);Ea.assign(sl)}),this.iteration.assign(add$3(this.iteration,1)),this.accBeta1.assign(mul$1(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&dispose$1(this.accumulatedFirstMoment.map(aa=>aa.variable)),this.accumulatedWeightedInfNorm!=null&&dispose$1(this.accumulatedWeightedInfNorm.map(aa=>aa.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(aa){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.beta1,xa.beta2,xa.epsilon,xa.decay)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SGDOptimizer$1=class extends Optimizer$1{static get className(){return"SGD"}constructor(aa){super(),this.learningRate=aa,this.setLearningRate(aa)}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(Ta==null)return;const wa=ENGINE$1.registeredVariables[ba];tidy$1(()=>{const Ea=add$3(mul$1(this.c,Ta),wa);wa.assign(Ea)})}),this.incrementIterations()}setLearningRate(aa){this.learningRate=aa,this.c!=null&&this.c.dispose(),this.c=keep$1(scalar$1(-aa))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(aa){if(aa=await this.extractIterations(aa),aa.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(aa,xa){return new aa(xa.learningRate)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MomentumOptimizer$1=class extends SGDOptimizer$1{static get className(){return"Momentum"}constructor(aa,xa,ba=!1){super(aa),this.learningRate=aa,this.momentum=xa,this.useNesterov=ba,this.accumulations=[],this.m=scalar$1(this.momentum)}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE$1.registeredVariables[ba];this.accumulations[Sa]==null&&(this.accumulations[Sa]={originalName:`${ba}/momentum`,variable:tidy$1(()=>zerosLike$4(Ta).variable(!1))});const wa=this.accumulations[Sa].variable,Ea=Array.isArray(aa)?aa[Sa].tensor:aa[ba];Ea!=null&&tidy$1(()=>{let ka;const Aa=add$3(mul$1(this.m,wa),Ea);this.useNesterov?ka=add$3(mul$1(this.c,add$3(Ea,mul$1(Aa,this.m))),Ta):ka=add$3(mul$1(this.c,Aa),Ta),wa.assign(Aa),Ta.assign(ka)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&dispose$1(this.accumulations.map(aa=>aa.variable))}setMomentum(aa){this.momentum=aa}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(aa=>({name:aa.originalName,tensor:aa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=!1;this.accumulations=aa.map(ba=>({originalName:ba.name,variable:ba.tensor.variable(xa)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.momentum,xa.useNesterov)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let RMSPropOptimizer$1=class extends Optimizer$1{static get className(){return"RMSProp"}constructor(aa,xa=.9,ba=0,Sa=null,Ta=!1){if(super(),this.learningRate=aa,this.decay=xa,this.momentum=ba,this.epsilon=Sa,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=Ta,Sa==null&&(this.epsilon=ENGINE$1.backend.epsilon()),aa==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE$1.registeredVariables[ba],wa=!1;this.accumulatedMeanSquares[Sa]==null&&(this.accumulatedMeanSquares[Sa]={originalName:`${ba}/rms`,variable:tidy$1(()=>zerosLike$4(Ta).variable(wa))}),this.accumulatedMoments[Sa]==null&&(this.accumulatedMoments[Sa]={originalName:`${ba}/momentum`,variable:tidy$1(()=>zerosLike$4(Ta).variable(wa))}),this.accumulatedMeanGrads[Sa]==null&&this.centered&&(this.accumulatedMeanGrads[Sa]={originalName:`${ba}/mg`,variable:tidy$1(()=>zerosLike$4(Ta).variable(wa))});const Ea=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(Ea==null)return;const ka=this.accumulatedMeanSquares[Sa].variable,Aa=this.accumulatedMoments[Sa].variable;tidy$1(()=>{const Fa=add$3(mul$1(ka,this.decay),mul$1(square$4(Ea),1-this.decay));if(this.centered){const La=this.accumulatedMeanGrads[Sa].variable,el=add$3(mul$1(La,this.decay),mul$1(Ea,1-this.decay)),tl=div$2(mul$1(Ea,this.learningRate),sqrt$4(sub$4(Fa,add$3(square$4(el),this.epsilon)))),nl=add$3(mul$1(Aa,this.momentum),tl);ka.assign(Fa),La.assign(el),Aa.assign(nl);const rl=sub$4(Ta,nl);Ta.assign(rl)}else{const La=add$3(mul$1(ka,this.decay),mul$1(square$4(Ea),1-this.decay)),el=add$3(mul$1(Aa,this.momentum),div$2(mul$1(Ea,this.learningRate),sqrt$4(add$3(La,this.epsilon))));ka.assign(La),Aa.assign(el);const tl=sub$4(Ta,el);Ta.assign(tl)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&dispose$1(this.accumulatedMeanSquares.map(aa=>aa.variable)),this.accumulatedMeanGrads!=null&&this.centered&&dispose$1(this.accumulatedMeanGrads.map(aa=>aa.variable)),this.accumulatedMoments!=null&&dispose$1(this.accumulatedMoments.map(aa=>aa.variable))}async getWeights(){const aa=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&aa.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(aa.map(xa=>({name:xa.originalName,tensor:xa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=this.centered?aa.length/3:aa.length/2,ba=!1;this.accumulatedMeanSquares=aa.slice(0,xa).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.accumulatedMoments=aa.slice(xa,xa*2).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.centered&&(this.accumulatedMeanGrads=aa.slice(xa*2,xa*3).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.decay,xa.momentum,xa.epsilon,xa.centered)}};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OPTIMIZERS$1=[AdadeltaOptimizer$1,AdagradOptimizer$1,AdamOptimizer$1,AdamaxOptimizer$1,MomentumOptimizer$1,RMSPropOptimizer$1,SGDOptimizer$1];function registerOptimizers$1(){for(const ha of OPTIMIZERS$1)registerClass$1(ha)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DEFAULT_FILE_NAME_PREFIX$1="model",DEFAULT_JSON_EXTENSION_NAME$1=".json",DEFAULT_WEIGHT_DATA_EXTENSION_NAME$1=".weights.bin";function defer$1(ha){return new Promise(aa=>setTimeout(aa)).then(ha)}let BrowserDownloads$1=class ic{constructor(aa){if(!env$1().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");aa.startsWith(ic.URL_SCHEME)&&(aa=aa.slice(ic.URL_SCHEME.length)),(aa==null||aa.length===0)&&(aa=DEFAULT_FILE_NAME_PREFIX$1),this.modelJsonFileName=aa+DEFAULT_JSON_EXTENSION_NAME$1,this.weightDataFileName=aa+DEFAULT_WEIGHT_DATA_EXTENSION_NAME$1}async save(aa){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const xa=CompositeArrayBuffer$1.join(aa.weightData),ba=window.URL.createObjectURL(new Blob([xa],{type:"application/octet-stream"}));if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const Sa=[{paths:["./"+this.weightDataFileName],weights:aa.weightSpecs}],Ta=getModelJSONForModelArtifacts$1(aa,Sa),wa=window.URL.createObjectURL(new Blob([JSON.stringify(Ta)],{type:"application/json"})),Ea=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(Ea.download=this.modelJsonFileName,Ea.href=wa,await defer$1(()=>Ea.dispatchEvent(new MouseEvent("click"))),aa.weightData!=null){const ka=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;ka.download=this.weightDataFileName,ka.href=ba,await defer$1(()=>ka.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:getModelArtifactsInfoForJSON$1(aa)}}}};BrowserDownloads$1.URL_SCHEME="downloads://";class BrowserFiles{constructor(aa){if(aa==null||aa.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${aa}`);this.jsonFile=aa[0],this.weightsFiles=aa.slice(1)}async load(){return new Promise((aa,xa)=>{const ba=new FileReader;ba.onload=Sa=>{const Ta=JSON.parse(Sa.target.result),wa=Ta.modelTopology;if(wa==null){xa(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(Ta.weightsManifest==null){xa(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){aa({modelTopology:wa});return}const ka=getModelArtifactsForJSON$1(Ta,Aa=>this.loadWeights(Aa));aa(ka)},ba.onerror=Sa=>xa(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),ba.readAsText(this.jsonFile)})}loadWeights(aa){const xa=[],ba=[];for(const wa of aa)xa.push(...wa.weights),ba.push(...wa.paths);const Sa=this.checkManifestAndWeightFiles(aa),Ta=ba.map(wa=>this.loadWeightsFile(wa,Sa[wa]));return Promise.all(Ta).then(wa=>[xa,wa])}loadWeightsFile(aa,xa){return new Promise((ba,Sa)=>{const Ta=new FileReader;Ta.onload=wa=>{const Ea=wa.target.result;ba(Ea)},Ta.onerror=wa=>Sa(`Failed to weights data from file of path '${aa}'.`),Ta.readAsArrayBuffer(xa)})}checkManifestAndWeightFiles(aa){const xa=[],ba=this.weightsFiles.map(Ta=>basename(Ta.name)),Sa={};for(const Ta of aa)Ta.paths.forEach(wa=>{const Ea=basename(wa);if(xa.indexOf(Ea)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${Ea}'`);if(xa.push(Ea),ba.indexOf(Ea)===-1)throw new Error(`Weight file with basename '${Ea}' is not provided.`);Sa[wa]=this.weightsFiles[ba.indexOf(Ea)]});if(xa.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${xa.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return Sa}}const browserDownloadsRouter$1=ha=>env$1().getBool("IS_BROWSER")&&!Array.isArray(ha)&&ha.startsWith(BrowserDownloads$1.URL_SCHEME)?browserDownloads$1(ha.slice(BrowserDownloads$1.URL_SCHEME.length)):null;IORouterRegistry$1.registerSaveRouter(browserDownloadsRouter$1);function browserDownloads$1(ha="model"){return new BrowserDownloads$1(ha)}function browserFiles(ha){return new BrowserFiles(ha)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function monitorPromisesProgress$1(ha,aa,xa,ba){wa(ha),xa=xa??0,ba=ba??1,Ea(xa,ba);let Sa=0;const Ta=ka=>(ka.then(Aa=>{const Fa=xa+ ++Sa/ha.length*(ba-xa);return aa(Fa),Aa}),ka);function wa(ka){assert$2(ka!=null&&Array.isArray(ka)&&ka.length>0,()=>"promises must be a none empty array")}function Ea(ka,Aa){assert$2(ka>=0&&ka<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${ka}`),assert$2(Aa>=0&&Aa<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${Aa}`),assert$2(Aa>=ka,()=>`startFraction must be no more than endFraction, but got startFraction ${ka} and endFraction ${Aa}`)}return Promise.all(ha.map(Ta))}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function loadWeightsAsArrayBuffer$2(ha,aa){aa==null&&(aa={});const xa=aa.fetchFunc==null?env$1().platform.fetch:aa.fetchFunc,ba=ha.map(La=>xa(La,aa.requestInit,{isBinary:!0})),Ea=(aa.onProgress==null?await Promise.all(ba):await monitorPromisesProgress$1(ba,aa.onProgress,0,.5)).map(La=>La.arrayBuffer());return aa.onProgress==null?await Promise.all(Ea):await monitorPromisesProgress$1(Ea,aa.onProgress,.5,1)}function streamWeights$1(ha,aa){var xa;const ba=aa.fetchFunc==null?env$1().platform.fetch:aa.fetchFunc;let Sa=0,Ta;return(xa=aa.onProgress)===null||xa===void 0||xa.call(aa,0),new ReadableStream({pull:async wa=>{for(var Ea;Sa<ha.length;){Ta||(Ta=(await ba(ha[Sa],aa.requestInit,{isBinary:!0})).body.getReader());const{done:ka,value:Aa}=await Ta.read();if(ka){Sa++,Ta=void 0,(Ea=aa.onProgress)===null||Ea===void 0||Ea.call(aa,Sa/ha.length);continue}wa.enqueue(Aa);return}wa.close()}})}async function loadWeights(ha,aa="",xa,ba){return weightsLoaderFactory(wa=>loadWeightsAsArrayBuffer$2(wa,{requestInit:ba}))(ha,aa,xa)}function weightsLoaderFactory(ha){return async(aa,xa="",ba)=>{const Sa=aa.map(()=>!1),Ta={},wa=ba!=null?ba.map(()=>!1):[],Ea=[];if(aa.forEach((tl,nl)=>{let rl=0;tl.weights.forEach(sl=>{const ol="quantization"in sl?sl.quantization.dtype:sl.dtype,al=DTYPE_VALUE_SIZE_MAP[ol]*sizeFromShape$1(sl.shape),ll=()=>{Sa[nl]=!0,Ta[nl]==null&&(Ta[nl]=[]),Ta[nl].push({manifestEntry:sl,groupOffset:rl,sizeBytes:al})};ba!=null?ba.forEach((il,cl)=>{il===sl.name&&(ll(),wa[cl]=!0)}):ll(),Ea.push(sl.name),rl+=al})}),!wa.every(tl=>tl)){const tl=ba.filter((nl,rl)=>!wa[rl]);throw new Error(`Could not find weights in manifest with names: ${tl.join(", ")}.
Manifest JSON has weights with names: ${Ea.join(", ")}.`)}const ka=Sa.reduce((tl,nl,rl)=>(nl&&tl.push(rl),tl),[]),Aa=[];ka.forEach(tl=>{aa[tl].paths.forEach(nl=>{const rl=xa+(xa.endsWith("/")?"":"/")+nl;Aa.push(rl)})});const Fa=await ha(Aa),La={};let el=0;return ka.forEach(tl=>{const nl=aa[tl].paths.length,rl=new CompositeArrayBuffer$1(Fa.slice(el,el+nl));Ta[tl].forEach(ol=>{const al=rl.slice(ol.groupOffset,ol.groupOffset+ol.sizeBytes),ll=decodeWeights(al,[ol.manifestEntry]);for(const il in ll)La[il]=ll[il]}),el+=nl}),La}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OCTET_STREAM_MIME_TYPE$1="application/octet-stream",JSON_TYPE$1="application/json";let HTTPRequest$1=class{constructor(aa,xa){if(this.DEFAULT_METHOD="POST",xa==null&&(xa={}),this.weightPathPrefix=xa.weightPathPrefix,this.weightUrlConverter=xa.weightUrlConverter,xa.fetchFunc!=null?(assert$2(typeof xa.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=xa.fetchFunc):this.fetch=env$1().platform.fetch,assert$2(aa!=null&&aa.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(aa)&&assert$2(aa.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${aa.length}).`),this.path=aa,xa.requestInit!=null&&xa.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=xa.requestInit||{},this.loadOptions=xa}async save(aa){if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const xa=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);xa.body=new FormData;const ba=[{paths:["./model.weights.bin"],weights:aa.weightSpecs}],Sa=getModelJSONForModelArtifacts$1(aa,ba);if(xa.body.append("model.json",new Blob([JSON.stringify(Sa)],{type:JSON_TYPE$1}),"model.json"),aa.weightData!=null){const wa=CompositeArrayBuffer$1.join(aa.weightData);xa.body.append("model.weights.bin",new Blob([wa],{type:OCTET_STREAM_MIME_TYPE$1}),"model.weights.bin")}const Ta=await this.fetch(this.path,xa);if(Ta.ok)return{modelArtifactsInfo:getModelArtifactsInfoForJSON$1(aa),responses:[Ta]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${Ta.status}.`)}async loadModelJSON(){const aa=await this.fetch(this.path,this.requestInit);if(!aa.ok)throw new Error(`Request to ${this.path} failed with status code ${aa.status}. Please verify this URL points to the model JSON of the model to load.`);let xa;try{xa=await aa.json()}catch{let wa=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?wa+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":wa+=" Please make sure the server is serving valid JSON for this request.",new Error(wa)}const ba=xa.modelTopology,Sa=xa.weightsManifest;if(ba==null&&Sa==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return xa}async load(){if(this.loadOptions.streamWeights)return this.loadStream();const aa=await this.loadModelJSON();return getModelArtifactsForJSON$1(aa,xa=>this.loadWeights(xa))}async loadStream(){const aa=await this.loadModelJSON(),xa=await this.getWeightUrls(aa.weightsManifest),ba=getWeightSpecs$1(aa.weightsManifest),Sa=()=>streamWeights$1(xa,this.loadOptions);return Object.assign(Object.assign({},aa),{weightSpecs:ba,getWeightStream:Sa})}async getWeightUrls(aa){const xa=Array.isArray(this.path)?this.path[1]:this.path,[ba,Sa]=parseUrl$1(xa),Ta=this.weightPathPrefix||ba,wa=[],Ea=[];for(const ka of aa)for(const Aa of ka.paths)this.weightUrlConverter!=null?Ea.push(this.weightUrlConverter(Aa)):wa.push(Ta+Aa+Sa);return this.weightUrlConverter&&wa.push(...await Promise.all(Ea)),wa}async loadWeights(aa){const xa=await this.getWeightUrls(aa),ba=getWeightSpecs$1(aa),Sa=await loadWeightsAsArrayBuffer$2(xa,this.loadOptions);return[ba,Sa]}};HTTPRequest$1.URL_SCHEME_REGEX=/^https?:\/\//;function parseUrl$1(ha){const aa=ha.lastIndexOf("/"),xa=ha.lastIndexOf("?"),ba=ha.substring(0,aa),Sa=xa>aa?ha.substring(xa):"";return[ba+"/",Sa]}function isHTTPScheme$1(ha){return ha.match(HTTPRequest$1.URL_SCHEME_REGEX)!=null}const httpRouter$1=(ha,aa)=>{if(typeof fetch>"u"&&(aa==null||aa.fetchFunc==null))return null;{let xa=!0;if(Array.isArray(ha)?xa=ha.every(ba=>isHTTPScheme$1(ba)):xa=isHTTPScheme$1(ha),xa)return http$1(ha,aa)}return null};IORouterRegistry$1.registerSaveRouter(httpRouter$1),IORouterRegistry$1.registerLoadRouter(httpRouter$1);function http$1(ha,aa){return new HTTPRequest$1(ha,aa)}function browserHTTPRequest(ha,aa){return http$1(ha,aa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PassthroughLoader{constructor(aa){this.modelArtifacts=aa}load(){return this.modelArtifacts}}class PassthroughSaver{constructor(aa){this.saveHandler=aa}save(aa){return this.saveHandler(aa)}}class PassthroughAsync{constructor(aa){aa.load&&(this.load=()=>Promise.resolve(aa.load())),aa.save&&(this.save=xa=>Promise.resolve(aa.save(xa)))}}function fromMemory(ha,aa,xa,ba){const Sa=arguments;return new PassthroughAsync(fromMemorySync(...Sa))}function fromMemorySync(ha,aa,xa,ba){return arguments.length===1?ha.modelTopology!=null||ha.weightSpecs!=null?new PassthroughLoader(ha):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new PassthroughLoader({modelTopology:ha})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new PassthroughLoader({modelTopology:ha,weightSpecs:aa,weightData:xa,trainingConfig:ba}))}function withSaveHandler(ha){return new PassthroughSaver(ha)}function withSaveHandlerSync(ha){return new PassthroughSaver(ha)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var io$1=Object.freeze({__proto__:null,CompositeArrayBuffer:CompositeArrayBuffer$1,browserFiles,browserHTTPRequest,concatenateArrayBuffers:concatenateArrayBuffers$1,copyModel,decodeWeights,decodeWeightsStream,encodeWeights,fromMemory,fromMemorySync,getLoadHandlers,getModelArtifactsForJSON:getModelArtifactsForJSON$1,getModelArtifactsForJSONSync:getModelArtifactsForJSONSync$1,getModelArtifactsInfoForJSON:getModelArtifactsInfoForJSON$1,getSaveHandlers,getWeightSpecs:getWeightSpecs$1,http:http$1,isHTTPScheme:isHTTPScheme$1,listModels,loadWeights,moveModel,registerLoadRouter,registerSaveRouter,removeModel,weightsLoaderFactory,withSaveHandler,withSaveHandlerSync});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let fromPixels2DContext$2;function fromPixels_(ha,aa=3){if(aa>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(ha==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let xa=!1,ba=!1,Sa=!1,Ta=!1,wa=!1,Ea=!1;if(ha.data instanceof Uint8Array)xa=!0;else if(typeof ImageData<"u"&&ha instanceof ImageData)ba=!0;else if(typeof HTMLVideoElement<"u"&&ha instanceof HTMLVideoElement)Sa=!0;else if(typeof HTMLImageElement<"u"&&ha instanceof HTMLImageElement)Ta=!0;else if(ha.getContext!=null)wa=!0;else if(typeof ImageBitmap<"u"&&ha instanceof ImageBitmap)Ea=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${ha.constructor.name}`);if(getKernel$1(FromPixels$1,ENGINE$1.backendName)!=null){const nl={pixels:ha},rl={numChannels:aa};return ENGINE$1.runKernel(FromPixels$1,nl,rl)}const[Aa,Fa]=Sa?[ha.videoWidth,ha.videoHeight]:[ha.width,ha.height];let La;if(wa)La=ha.getContext("2d").getImageData(0,0,Aa,Fa).data;else if(ba||xa)La=ha.data;else if(Ta||Sa||Ea){if(fromPixels2DContext$2==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")fromPixels2DContext$2=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else fromPixels2DContext$2=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});fromPixels2DContext$2.canvas.width=Aa,fromPixels2DContext$2.canvas.height=Fa,fromPixels2DContext$2.drawImage(ha,0,0,Aa,Fa),La=fromPixels2DContext$2.getImageData(0,0,Aa,Fa).data}let el;if(aa===4)el=new Int32Array(La);else{const nl=Aa*Fa;el=new Int32Array(nl*aa);for(let rl=0;rl<nl;rl++)for(let sl=0;sl<aa;++sl)el[rl*aa+sl]=La[rl*4+sl]}return tensor3d(el,[Fa,Aa,aa],"int32")}const fromPixels$2=op$1({fromPixels_});function prepareAndValidate$1(ha,aa){const xa=ha.shape.length,ba=aa.shape.length;if(xa<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${xa}.`);if(ba<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${ba}.`);if(aa.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${aa.dtype}.`);if(aa.shape[ba-1]>xa)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${aa.shape[ba-1]} vs. ${xa}`);if(sizeFromShape$1(ha.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${ha.shape}.`);const Sa=aa.shape,Ta=Sa[Sa.length-1];let wa=1;for(let La=0;La<Sa.length-1;++La)wa*=Sa[La];const Ea=ha.shape,ka=Sa.slice();ka.pop();let Aa=1;for(let La=Ta;La<xa;++La)Aa*=Ea[La],ka.push(Ea[La]);const Fa=[...computeStrides$1(ha.shape).map(La=>La/Aa),1].slice(0,Ta);return[ka,wa,Aa,Fa]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEW_AXIS$1=-2,SHRINK_AXIS$1=-1;function assertParamsValid$1(ha,aa,xa){const ba=ha.shape.length;assert$2(ba===aa.length,()=>`Error in slice${ba}D: Length of begin ${aa} must match the rank of the array (${ba}).`),assert$2(ba===xa.length,()=>`Error in slice${ba}D: Length of size ${xa} must match the rank of the array (${ba}).`);for(let Sa=0;Sa<ba;++Sa)assert$2(aa[Sa]+xa[Sa]<=ha.shape[Sa],()=>`Error in slice${ba}D: begin[${Sa}] + size[${Sa}] (${aa[Sa]+xa[Sa]}) would overflow input.shape[${Sa}] (${ha.shape[Sa]})`)}function maskToAxes$1(ha){const aa=[];let xa=0;for(;ha>0;)ha&1&&aa.push(xa),ha/=2,xa++;return aa}function computeOutShape$5(ha,aa,xa){const ba=[];for(let Sa=0;Sa<ha.length;Sa++)ba[Sa]=Math.ceil((aa[Sa]-ha[Sa])/xa[Sa]);return ba}function stridesWithElidedDims$1(ha,aa,xa,ba){const Sa=[...ha];for(let Ta=Sa.length;Ta<ba.length;Ta++)Sa.push(1);for(let Ta=0;Ta<xa;Ta++)Ta===0?Sa[aa]=1:(Sa.splice(aa,0,1),Sa.pop());return Sa}function unnormalizeAxis$1(ha,aa,xa){return xa<=ha?xa:xa-(aa-1)}function getElidedAxes$1(ha,aa){const xa=[];for(let ba=0;ba<ha;ba++)xa.push(aa+ba);return xa}function getNormalizedAxes$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){const Aa=ha.length;let Fa=new Array(Aa),La=new Array(Aa),el=new Array(Aa);if(aa.length&&xa>0){const tl=aa[0],nl=xa+1;Fa=startIndicesWithElidedDims$1(wa,tl,nl,ba,ha),La=stopIndicesWithElidedDims$1(Ea,tl,nl,Sa,ha),el=stridesWithElidedDims$1(Ta,tl,nl,ha)}else for(let tl=0;tl<Aa;tl++)Fa[tl]=startForAxis$1(wa,ba,Ta,ha,tl,ka),La[tl]=stopForAxis$1(Ea,Sa,Ta,ha,tl,ka),el[tl]=stridesForAxis$1(Ta,tl,ka);return{begin:Fa,end:La,strides:el}}function startIndicesWithElidedDims$1(ha,aa,xa,ba,Sa){const Ta=[...Sa],wa=getElidedAxes$1(xa,aa);for(let Ea=0;Ea<Ta.length;Ea++)if(wa.indexOf(Ea)>-1)Ta[Ea]=0;else{const ka=unnormalizeAxis$1(aa,xa,Ea);let Aa=ba[ka];ha&1<<ka&&(Aa=0),Ta[Ea]=Aa}return Ta}function stopIndicesWithElidedDims$1(ha,aa,xa,ba,Sa){const Ta=[...Sa],wa=getElidedAxes$1(xa,aa);for(let Ea=0;Ea<Ta.length;Ea++)if(wa.indexOf(Ea)>-1)Ta[Ea]=Number.MAX_SAFE_INTEGER;else{const ka=unnormalizeAxis$1(aa,xa,Ea);let Aa=ba[ka];ha&1<<ka&&(Aa=Number.MAX_SAFE_INTEGER),Ta[Ea]=Aa}for(let Ea=0;Ea<Ta.length;Ea++){const ka=Sa[Ea];Ta[Ea]<0&&(Ta[Ea]+=ka),Ta[Ea]=clamp$1(0,Ta[Ea],Sa[Ea])}return Ta}function stridesForAxis$1(ha,aa,xa){let ba=ha[aa];return(xa&1<<aa||ba==null)&&(ba=1),ba}function startForAxis$1(ha,aa,xa,ba,Sa,Ta){let wa=aa[Sa];const Ea=xa[Sa]||1;(ha&1<<Sa||Ta&1<<Sa||wa==null)&&(Ea>0?wa=Number.MIN_SAFE_INTEGER:wa=Number.MAX_SAFE_INTEGER);const ka=ba[Sa];return wa<0&&(wa+=ka),wa=clamp$1(0,wa,ka-1),wa}function stopForAxis$1(ha,aa,xa,ba,Sa,Ta){let wa=aa[Sa];const Ea=xa[Sa]||1;(ha&1<<Sa||Ta&1<<Sa||wa==null)&&(Ea>0?wa=Number.MAX_SAFE_INTEGER:wa=Number.MIN_SAFE_INTEGER);const ka=ba[Sa];return wa<0&&(wa+=ka),Ea>0?wa=clamp$1(0,wa,ka):wa=clamp$1(-1,wa,ka-1),wa}function isSliceContinous$1(ha,aa,xa){let ba=xa.length;for(let Sa=0;Sa<xa.length;Sa++)if(xa[Sa]>1){ba=Sa;break}for(let Sa=ba+1;Sa<xa.length;Sa++)if(aa[Sa]>0||xa[Sa]!==ha[Sa])return!1;return!0}function computeFlatOffset$1(ha,aa){let xa=ha.length>0?ha[ha.length-1]:1;for(let ba=0;ba<ha.length-1;ba++)xa+=ha[ba]*aa[ba];return xa}function parseSliceParams$1(ha,aa,xa){let ba;const Sa=ha.shape.length;typeof aa=="number"?ba=[aa,...new Array(Sa-1).fill(0)]:aa.length<Sa?ba=aa.concat(new Array(Sa-aa.length).fill(0)):ba=aa.slice(),ba.forEach(wa=>{assert$2(wa!==-1,()=>"slice() does not support negative begin indexing.")});let Ta;return xa==null?Ta=new Array(Sa).fill(-1):typeof xa=="number"?Ta=[xa,...new Array(Sa-1).fill(-1)]:xa.length<Sa?Ta=xa.concat(new Array(Sa-xa.length).fill(-1)):Ta=xa,Ta=Ta.map((wa,Ea)=>wa>=0?wa:(assert$2(wa===-1,()=>`Negative size values should be exactly -1 but got ${wa} for the slice() size at index ${Ea}.`),ha.shape[Ea]-ba[Ea])),[ba,Ta]}function sliceInfo$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){let Aa;if(ba==null?(Aa=new Array(aa.length),Aa.fill(1)):Aa=ba,wa!=null&&wa&wa-1)throw new Error("Multiple ellipses in slice is not allowed.");let Fa=!1;const La={dims:Aa.length,numAddAxisAfterEllipsis:0,begin:aa.slice(),end:xa.slice(),strides:Aa.slice(),beginMask:Sa,endMask:Ta,ellipsisMask:wa,newAxisMask:Ea,shrinkAxisMask:ka};for(let ll=0;ll<La.dims;ll++)Fa&&1<<ll&Ea&&La.numAddAxisAfterEllipsis++,1<<ll&wa&&(Fa=!0);Fa||(La.ellipsisMask|=1<<La.dims,La.dims++);const el={dims:ha.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};buildDenseSpec$1(La,el);let tl=!0,nl=!0,rl=!0;const sl=[],ol=[];for(let ll=0;ll<ha.length;++ll){if(el.strides[ll]===0)throw Error(`strides[${ll}] must be non-zero`);const il=!!(el.shrinkAxisMask&1<<ll),cl=ha[ll];if(cl===-1){sl.push(il?1:-1);continue}const ul=[el.beginMask&1<<ll,el.endMask&1<<ll],dl=[el.strides[ll]>0?0:-1,el.strides[ll]>0?cl:cl-1];if(il&&el.strides[ll]<=0)throw Error("only stride 1 allowed on non-range indexing.");rl=rl&&el.strides[ll]===1;const hl=!!(el.beginMask&1<<ll&&el.endMask&1<<ll);if(el.beginValid&&el.endValid){if(il){const gl=el.begin[ll]<0?cl+el.begin[ll]:el.begin[ll];if(el.begin[ll]=gl,el.end[ll]=el.begin[ll]+1,gl<0||gl>=cl)throw Error(`slice index ${el.begin[ll]} of dimension ${ll} out of bounds.`)}else el.begin[ll]=canonical$1(el.begin[ll],0,el.strides[ll],cl,ul,dl),el.end[ll]=canonical$1(el.end[ll],1,el.strides[ll],cl,ul,dl);const ml=el.strides[ll]===1&&el.begin[ll]===0&&el.end[ll]===cl;tl=tl&&ml,nl=nl&&(ll===0&&el.strides[ll]===1||ml)}else tl=tl&&el.strides[ll]===1&&hl,nl=nl&&(ll===0&&el.strides[ll]===1||hl);let pl,fl=!1;if(el.beginValid&&el.endValid?(pl=el.end[ll]-el.begin[ll],fl=!0):il?(pl=1,fl=!0):hl&&cl>=0&&(el.strides[ll]<0?pl=-cl:pl=cl,fl=!0),fl){let ml;pl===0||pl<0!=el.strides[ll]<0?ml=0:ml=Math.trunc(pl/el.strides[ll])+(pl%el.strides[ll]!==0?1:0),sl.push(ml)}else sl.push(-1)}for(let ll=0;ll<el.finalShapeGatherIndices.length;++ll){const il=el.finalShapeGatherIndices[ll];il>=0?ol.push(sl[il]):il===NEW_AXIS$1&&ol.push(1)}return{finalShapeSparse:ol.filter((ll,il)=>el.finalShapeGatherIndices[il]!==NEW_AXIS$1),finalShape:ol,isIdentity:tl,sliceDim0:nl,isSimpleSlice:rl,begin:el.begin,end:el.end,strides:el.strides}}function buildDenseSpec$1(ha,aa){aa.beginMask=0,aa.endMask=0,aa.shrinkAxisMask=0;let xa=0;aa.beginValid=ha.begin!=null,aa.endValid=ha.end!=null,aa.begin=new Array(aa.dims),aa.end=new Array(aa.dims),aa.strides=new Array(aa.dims),aa.finalShapeGatherIndices=[],aa.finalShapeGatherIndicesSparse=[],aa.inputShapeGatherIndicesSparse=new Array(aa.dims);for(let ba=0;ba<ha.dims;ba++)if(1<<ba&ha.ellipsisMask){const Sa=Math.min(aa.dims-(ha.dims-ba)+1+ha.numAddAxisAfterEllipsis,aa.dims);for(;xa<Sa;xa++)aa.begin[xa]=0,aa.end[xa]=0,aa.strides[xa]=1,aa.beginMask|=1<<xa,aa.endMask|=1<<xa,aa.finalShapeGatherIndices.push(xa),aa.finalShapeGatherIndicesSparse.push(-1),aa.inputShapeGatherIndicesSparse[xa]=ba}else if(1<<ba&ha.newAxisMask)aa.finalShapeGatherIndices.push(NEW_AXIS$1),aa.finalShapeGatherIndicesSparse.push(-1);else{if(xa===aa.begin.length)throw Error(`Index out of range using input dim ${xa}; input has only ${aa.dims} dims, ${aa.begin.length}.`);ha.begin!=null&&(aa.begin[xa]=ha.begin[ba]),ha.end!=null&&(aa.end[xa]=ha.end[ba]),aa.strides[xa]=ha.strides[ba],ha.beginMask&1<<ba&&(aa.beginMask|=1<<xa),ha.endMask&1<<ba&&(aa.endMask|=1<<xa),ha.shrinkAxisMask&1<<ba?(aa.finalShapeGatherIndices.push(SHRINK_AXIS$1),aa.finalShapeGatherIndicesSparse.push(-1),aa.shrinkAxisMask|=1<<xa):(aa.finalShapeGatherIndices.push(xa),aa.finalShapeGatherIndicesSparse.push(ba)),aa.inputShapeGatherIndicesSparse[xa]=ba,xa++}}function canonical$1(ha,aa,xa,ba,Sa,Ta){if(Sa[aa])return xa>0?Ta[aa]:Ta[aa+1&1];{const wa=ha<0?ba+ha:ha;return wa<Ta[0]?Ta[0]:wa>Ta[1]?Ta[1]:wa}}var slice_util$1=Object.freeze({__proto__:null,assertParamsValid:assertParamsValid$1,computeFlatOffset:computeFlatOffset$1,computeOutShape:computeOutShape$5,getNormalizedAxes:getNormalizedAxes$1,isSliceContinous:isSliceContinous$1,maskToAxes:maskToAxes$1,parseSliceParams:parseSliceParams$1,sliceInfo:sliceInfo$1,startForAxis:startForAxis$1,startIndicesWithElidedDims:startIndicesWithElidedDims$1,stopForAxis:stopForAxis$1,stopIndicesWithElidedDims:stopIndicesWithElidedDims$1,stridesForAxis:stridesForAxis$1,stridesWithElidedDims:stridesWithElidedDims$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OptimizerConstructors{static sgd(aa){return new SGDOptimizer$1(aa)}static momentum(aa,xa,ba=!1){return new MomentumOptimizer$1(aa,xa,ba)}static rmsprop(aa,xa=.9,ba=0,Sa=null,Ta=!1){return new RMSPropOptimizer$1(aa,xa,ba,Sa,Ta)}static adam(aa=.001,xa=.9,ba=.999,Sa=null){return new AdamOptimizer$1(aa,xa,ba,Sa)}static adadelta(aa=.001,xa=.95,ba=null){return new AdadeltaOptimizer$1(aa,xa,ba)}static adamax(aa=.002,xa=.9,ba=.999,Sa=null,Ta=0){return new AdamaxOptimizer$1(aa,xa,ba,Sa,Ta)}static adagrad(aa,xa=.1){return new AdagradOptimizer$1(aa,xa)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const train=OptimizerConstructors;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const delayCallback$1=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:ha=>ha();function nextFrame$1(){return new Promise(ha=>delayCallback$1(()=>ha()))}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertParamsConsistent$1(ha,aa){const xa=ha[0].length;ha.forEach((Sa,Ta)=>{assert$2(Sa.length===xa,()=>`Error in concat${xa}D: rank of tensors[${Ta}] must be the same as the rank of the rest (${xa})`)}),assert$2(aa>=0&&aa<xa,()=>`Error in concat${xa}D: axis must be between 0 and ${xa-1}.`);const ba=ha[0];ha.forEach((Sa,Ta)=>{for(let wa=0;wa<xa;wa++)assert$2(wa===aa||Sa[wa]===ba[wa],()=>`Error in concat${xa}D: Shape of tensors[${Ta}] (${Sa}) does not match the shape of the rest (${ba}) along the non-concatenated axis ${Ta}.`)})}function computeOutShape$4(ha,aa){const xa=ha[0].slice();for(let ba=1;ba<ha.length;ba++)xa[aa]+=ha[ba][aa];return xa}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$3;(function(ha){ha[ha.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",ha[ha.VALUE_ROWIDS=1]="VALUE_ROWIDS",ha[ha.ROW_LENGTHS=2]="ROW_LENGTHS",ha[ha.ROW_SPLITS=3]="ROW_SPLITS",ha[ha.ROW_LIMITS=4]="ROW_LIMITS",ha[ha.ROW_STARTS=5]="ROW_STARTS"})(RowPartitionType$3||(RowPartitionType$3={}));function combineRaggedTensorToTensorShapes$1(ha,aa,xa){let ba=new Array;if(xa==null&&aa==null)return ba;if(aa==null)for(;ba.length<ha+xa.length;)ba.push(-1);else ba=aa.slice();if(xa==null)return ba;if(ha+xa.length!==ba.length)throw new Error(`rt input.shape and shape=${aa} are incompatible: rt input.rank = ${ha+xa.length}, but shape.rank = ${ba.length}`);for(let Sa=1;Sa<xa.length;++Sa){const Ta=xa[Sa],wa=ba[ba.length-xa.length+Sa],Ea=ba[wa];if(Ta>=0)if(Ea>=0){if(Ea!==Ta)throw new Error(`rt input.shape and shape=${aa} are incompatible: rt input.shape[${Sa+ha}] = ${Ta} but shape[${Sa+ha}] = ${Ea}`)}else ba[wa]=Ta}return ba}function getRowPartitionTypesHelper$1(ha){const aa={FIRST_DIM_SIZE:RowPartitionType$3.FIRST_DIM_SIZE,VALUE_ROWIDS:RowPartitionType$3.VALUE_ROWIDS,ROW_LENGTHS:RowPartitionType$3.ROW_LENGTHS,ROW_SPLITS:RowPartitionType$3.ROW_SPLITS,ROW_LIMITS:RowPartitionType$3.ROW_LIMITS,ROW_STARTS:RowPartitionType$3.ROW_STARTS},xa=[];for(const ba of ha)if(ba in aa)xa.push(aa[ba]);else break;return xa}function getRaggedRank$1(ha){return ha.length===0?0:ha[0]===RowPartitionType$3.FIRST_DIM_SIZE?ha.length-1:ha.length}function validateDefaultValueShape$1(ha,aa){if(ha==null||aa==null)return;const xa=ha.length,ba=aa.length;if(xa>=ba)throw new Error(`defaultValue.shape=${ha} and ragged tensor flatValues.shape=${aa}, are incompatible: defaultValue.rank = ${xa} must be less than ragged tensor input flatValues.rank = ${ba})`);for(let Sa=0;Sa<Math.min(xa,ba-1);++Sa){const Ta=ha[Sa],wa=aa[Sa+1];if(Ta>=0&&wa>=0&&Ta!==1&&Ta!==wa)throw new Error(`defaultValue.shape=${ha}, and ragged tensor input flatValues.shape=${aa} are incompatible: defaultValue.shape[${Sa-ha.length}] = ${Ta} but ragged tensor input.flatValues.shape[${Sa-ha.length}] = ${wa}`)}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PARALLELIZE_THRESHOLD$1=30;function computeOptimalWindowSize$1(ha){return ha<=PARALLELIZE_THRESHOLD$1?ha:nearestDivisor$1(ha,Math.floor(Math.sqrt(ha)))}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getImageCenter$1(ha,aa,xa){const ba=xa*(typeof ha=="number"?ha:ha[0]),Sa=aa*(typeof ha=="number"?ha:ha[1]);return[ba,Sa]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReshaped$1(ha,aa,xa,ba=!0){let Sa=[];if(ba)Sa=Sa.concat(aa.slice(0)),Sa.push(ha[0]/xa),Sa=Sa.concat(ha.slice(1));else{Sa=Sa.concat(ha[0]);const Ta=aa.length;for(let wa=0;wa<Ta;++wa)Sa=Sa.concat([ha[wa+1]/aa[wa],aa[wa]]);Sa=Sa.concat(ha.slice(Ta+1))}return Sa}function getPermuted$1(ha,aa,xa=!0){const ba=[];if(xa){ba.push(aa);for(let Sa=aa+1;Sa<ha;++Sa)Sa<=2*aa?(ba.push(Sa),ba.push(Sa-(aa+1))):ba.push(Sa)}else{const Sa=[],Ta=[];for(let wa=1;wa<ha;++wa)wa>=aa*2+1||wa%2===1?Ta.push(wa):Sa.push(wa);ba.push(...Sa),ba.push(0),ba.push(...Ta)}return ba}function getReshapedPermuted$1(ha,aa,xa,ba=!0){const Sa=[];ba?Sa.push(ha[0]/xa):Sa.push(ha[0]*xa);for(let Ta=1;Ta<ha.length;++Ta)Ta<=aa.length?ba?Sa.push(aa[Ta-1]*ha[Ta]):Sa.push(ha[Ta]/aa[Ta-1]):Sa.push(ha[Ta]);return Sa}function getSliceBeginCoords$1(ha,aa){const xa=[0];for(let ba=0;ba<aa;++ba)xa.push(ha[ba][0]);return xa}function getSliceSize$1(ha,aa,xa){const ba=ha.slice(0,1);for(let Sa=0;Sa<xa;++Sa)ba.push(ha[Sa+1]-aa[Sa][0]-aa[Sa][1]);return ba}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU_SCALEALPHA$1=1.7580993408473768,SELU_SCALE$1=1.0507009873554805;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF_P$1=.3275911,ERF_A1$1=.254829592,ERF_A2$1=-.284496736,ERF_A3$1=1.421413741,ERF_A4$1=-1.453152027,ERF_A5$1=1.061405429;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mergeRealAndImagArrays$1(ha,aa){if(ha.length!==aa.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${ha.length}, imag: ${aa.length}.`);const xa=new Float32Array(ha.length*2);for(let ba=0;ba<xa.length;ba+=2)xa[ba]=ha[ba/2],xa[ba+1]=aa[ba/2];return xa}function splitRealAndImagArrays$1(ha){const aa=new Float32Array(ha.length/2),xa=new Float32Array(ha.length/2);for(let ba=0;ba<ha.length;ba+=2)aa[ba/2]=ha[ba],xa[ba/2]=ha[ba+1];return{real:aa,imag:xa}}function complexWithEvenIndex$1(ha){const aa=Math.ceil(ha.length/4),xa=new Float32Array(aa),ba=new Float32Array(aa);for(let Sa=0;Sa<ha.length;Sa+=4)xa[Math.floor(Sa/4)]=ha[Sa],ba[Math.floor(Sa/4)]=ha[Sa+1];return{real:xa,imag:ba}}function complexWithOddIndex$1(ha){const aa=Math.floor(ha.length/4),xa=new Float32Array(aa),ba=new Float32Array(aa);for(let Sa=2;Sa<ha.length;Sa+=4)xa[Math.floor(Sa/4)]=ha[Sa],ba[Math.floor(Sa/4)]=ha[Sa+1];return{real:xa,imag:ba}}function getComplexWithIndex$1(ha,aa){const xa=ha[aa*2],ba=ha[aa*2+1];return{real:xa,imag:ba}}function assignToTypedArray$1(ha,aa,xa,ba){ha[ba*2]=aa,ha[ba*2+1]=xa}function exponents$1(ha,aa){const xa=new Float32Array(ha/2),ba=new Float32Array(ha/2);for(let Sa=0;Sa<Math.ceil(ha/2);Sa++){const Ta=(aa?2:-2)*Math.PI*(Sa/ha);xa[Sa]=Math.cos(Ta),ba[Sa]=Math.sin(Ta)}return{real:xa,imag:ba}}function exponent$1(ha,aa,xa){const ba=(xa?2:-2)*Math.PI*(ha/aa),Sa=Math.cos(ba),Ta=Math.sin(ba);return{real:Sa,imag:Ta}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ARROW$1="->",ARROW_REGEX$1=/->/g,COMMA$1=",",ELLIPSIS$1="...";function decodeEinsumEquation$1(ha,aa){ha=ha.replace(/\s/g,"");const xa=(ha.length-ha.replace(ARROW_REGEX$1,"").length)/ARROW$1.length;if(xa<1)throw new Error("Equations without an arrow are not supported.");if(xa>1)throw new Error(`Equation must contain exactly one arrow ("${ARROW$1}").`);const[ba,Sa]=ha.split(ARROW$1);assert$2(ba.indexOf(ELLIPSIS$1)===-1,()=>`The ellipsis notation ("${ELLIPSIS$1}") is not supported yet.`);const Ta=ba.split(COMMA$1),wa=Ta.length;if(aa!==wa)throw new Error(`Expected ${wa} input tensors, received ${aa}`);if(wa>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const Ea=[];for(let el=0;el<Sa.length;++el){const tl=Sa[el];if(!Ta.some(nl=>nl.indexOf(tl)!==-1))throw new Error(`Output subscripts contain the label ${tl} not present in the input subscripts.`);Ea.indexOf(tl)===-1&&Ea.push(tl)}for(let el=0;el<ba.length;++el){const tl=ba[el];Ea.indexOf(tl)===-1&&tl!==COMMA$1&&Ea.push(tl)}const ka=new Array(Ta.length);for(let el=0;el<wa;++el){if(new Set(Ta[el].split("")).size!==Ta[el].length)throw new Error(`Found duplicate axes in input component ${Ta[el]}. Support for duplicate axes in input is not implemented yet.`);ka[el]=[];for(let tl=0;tl<Ta[el].length;++tl)ka[el].push(Ea.indexOf(Ta[el][tl]))}const Aa=Ea.length,Fa=Sa.length,La=[];for(let el=Fa;el<Aa;++el)La.push(el);return{allDims:Ea,summedDims:La,idDims:ka}}function getEinsumPermutation$1(ha,aa){let xa=new Array(ha);xa.fill(-1);for(let Sa=0;Sa<aa.length;++Sa)xa[aa[Sa]]=Sa;const ba=[];for(let Sa=0;Sa<ha;++Sa)xa[Sa]===-1&&ba.push(Sa);return xa=xa.filter(Sa=>Sa!==-1),{permutationIndices:xa,expandDims:ba}}function checkEinsumDimSizes$1(ha,aa,xa){const ba=new Array(ha);for(let Sa=0;Sa<xa.length;++Sa){const Ta=xa[Sa].shape;for(let wa=0;wa<aa[Sa].length;++wa)ba[aa[Sa][wa]]===void 0?ba[aa[Sa][wa]]=Ta[wa]:assert$2(ba[aa[Sa][wa]]===Ta[wa],()=>`Expected dimension ${ba[aa[Sa][wa]]} at axis ${wa} of input shaped ${JSON.stringify(Ta)}, but got dimension ${Ta[wa]}`)}}function getEinsumComputePath$1(ha,aa){const xa=ha,ba=[];let Sa=0;ha.length===0&&xa.push(-1),Sa=ha.length+1;for(let wa=0;wa<Sa;++wa)ba.push([]);const Ta=[];for(let wa=0;wa<xa.length;++wa){const Ea=xa[wa],ka=findTermsWithDim$1(aa,Ea);for(const Aa of ka)Ta.indexOf(Aa)===-1&&(ba[wa].push(Aa),Ta.push(Aa))}return{path:xa,steps:ba}}function isIdentityPermutation$1(ha){return ha.every((aa,xa)=>aa===xa)}function findTermsWithDim$1(ha,aa){const xa=[];for(let ba=0;ba<ha.length;++ba)(ha[ba].length===0||ha[ba].indexOf(aa)!==-1||aa===-1)&&xa.push(ba);return xa}function prepareSplitSize$1(ha,aa,xa=0){let ba=[];if(typeof aa=="number")assert$2(ha.shape[xa]%aa===0,()=>"Number of splits must evenly divide the axis."),ba=new Array(aa).fill(ha.shape[xa]/aa);else{const Sa=aa.reduce((wa,Ea)=>(Ea===-1&&(wa+=1),wa),0);assert$2(Sa<=1,()=>"There should be only one negative value in split array.");const Ta=aa.indexOf(-1);if(Ta!==-1){const wa=aa.reduce((Ea,ka)=>ka>0?Ea+ka:Ea);aa[Ta]=ha.shape[xa]-wa}assert$2(ha.shape[xa]===aa.reduce((wa,Ea)=>wa+Ea),()=>"The sum of sizes must match the size of the axis dimension."),ba=aa}return ba}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseFillEmptyRowsIndicesDenseShapeMismatch$1(ha){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${ha}`}function getSparseFillEmptyRowsNegativeIndexErrorMessage$1(ha,aa){return`indices(${ha}, 0) is invalid: ${aa} < 0`}function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage$1(ha,aa,xa){return`indices(${ha}, 0) is invalid: ${aa} >= ${xa}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage$1(ha,aa){return`only one output dimension may be -1, not both ${ha} and ${aa}`}function getSparseReshapeNegativeOutputDimErrorMessage$1(ha,aa){return`size ${ha} must be non-negative, not ${aa}`}function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage$1(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function getSparseReshapeInputOutputMultipleErrorMessage$1(ha,aa){const xa=sizeFromShape$1(ha),ba=sizeFromShape$1(aa);return`Input to reshape is a SparseTensor with ${xa}
  dense values, but the requested shape requires a multiple of ${ba}. inputShape=${ha} outputShape= ${aa}`}function getSparseReshapeInputOutputMismatchErrorMessage$1(ha,aa){const xa=sizeFromShape$1(ha),ba=sizeFromShape$1(aa);return`Input to reshape is a tensor with ${xa} dense values, but the requested shape has ${ba}. inputShape=${ha} outputShape=${aa}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1(){return"segment ids must be >= 0"}function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage$1(){return"segment ids are not increasing"}function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage$1(ha,aa){return`Segment id ${ha} out of range [0, ${aa}), possibly because segmentIds input is not sorted.`}function getSparseSegmentReductionIndicesOutOfRangeErrorMessage$1(ha,aa,xa){return`Bad: indices[${ha}] == ${aa} out of range [0, ${xa})`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function segOpComputeOptimalWindowSize$1(ha,aa){let xa=!1,ba;for(ha<=PARALLELIZE_THRESHOLD$1?(ba=ha,xa=!0):ba=nearestDivisor$1(ha,Math.floor(Math.sqrt(ha)));!xa;)ba>aa||ba===ha?xa=!0:ba=nearestDivisor$1(ha,ba+1);return ba}function computeOutShape$3(ha,aa,xa){const ba=[],Sa=ha.length;for(let Ta=0;Ta<Sa;Ta++)Ta!==aa?ba.push(ha[Ta]):ba.push(xa);return ba}function collectGatherOpShapeInfo$1(ha,aa,xa,ba){const Sa=aa.shape.length,Ta=ha.shape.length;if(ba!==0&&(ba<-Sa||ba>Sa))throw new Error(`Expect batchDims in the range of [-${Sa}, ${Sa}], but got ${ba}`);if(ba<0&&(ba+=Sa),ba>Ta)throw new Error(`batchDims (${ba}) must be less than rank(x) (
    ${Ta}).`);if(xa<ba)throw new Error(`batchDims (${ba}) must be less than or equal to axis (${xa}).`);for(let La=0;La<ba;++La)if(ha.shape[La]!==aa.shape[La])throw new Error(`x.shape[${La}]: ${ha.shape[La]} should be equal to indices.shape[${La}]: ${aa.shape[La]}.`);const wa=ha.shape[xa],Ea=[];let ka=1,Aa=1,Fa=1;for(let La=0;La<ba;++La)Ea.push(ha.shape[La]),ka*=ha.shape[La];for(let La=ba;La<xa;La++)Ea.push(ha.shape[La]),Aa*=ha.shape[La];for(let La=ba;La<Sa;La++)Ea.push(aa.shape[La]);for(let La=xa+1;La<Ta;La++)Ea.push(ha.shape[La]),Fa*=ha.shape[La];return{batchSize:ka,sliceSize:Fa,outerSize:Aa,dimSize:wa,outputShape:Ea}}var segment_util$1=Object.freeze({__proto__:null,collectGatherOpShapeInfo:collectGatherOpShapeInfo$1,computeOutShape:computeOutShape$3,segOpComputeOptimalWindowSize:segOpComputeOptimalWindowSize$1});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fromUint8ToStringArray$1(ha){try{return ha.map(aa=>decodeString$1(aa))}catch(aa){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${aa}`)}}function fromStringArrayToUint8$1(ha){return ha.map(aa=>encodeString$1(aa))}var backend_util$1=Object.freeze({__proto__:null,ERF_A1:ERF_A1$1,ERF_A2:ERF_A2$1,ERF_A3:ERF_A3$1,ERF_A4:ERF_A4$1,ERF_A5:ERF_A5$1,ERF_P:ERF_P$1,PARALLELIZE_THRESHOLD:PARALLELIZE_THRESHOLD$1,get RowPartitionType(){return RowPartitionType$3},SELU_SCALE:SELU_SCALE$1,SELU_SCALEALPHA:SELU_SCALEALPHA$1,applyActivation:applyActivation$2,assertAndGetBroadcastShape:assertAndGetBroadcastShape$1,assertAxesAreInnerMostDims:assertAxesAreInnerMostDims$1,assertParamsConsistent:assertParamsConsistent$1,assignToTypedArray:assignToTypedArray$1,axesAreInnerMostDims:axesAreInnerMostDims$1,calculateShapes:calculateShapes$1,checkEinsumDimSizes:checkEinsumDimSizes$1,checkPadOnDimRoundingMode:checkPadOnDimRoundingMode$1,combineLocations:combineLocations$1,combineRaggedTensorToTensorShapes:combineRaggedTensorToTensorShapes$1,complexWithEvenIndex:complexWithEvenIndex$1,complexWithOddIndex:complexWithOddIndex$1,computeConv2DInfo:computeConv2DInfo$1,computeConv3DInfo:computeConv3DInfo$1,computeDefaultPad:computeDefaultPad$1,computeDilation2DInfo:computeDilation2DInfo$1,computeOptimalWindowSize:computeOptimalWindowSize$1,computeOutAndReduceShapes:computeOutAndReduceShapes$1,computeOutShape:computeOutShape$4,computePool2DInfo:computePool2DInfo$1,computePool3DInfo:computePool3DInfo$1,convertConv2DDataFormat:convertConv2DDataFormat$1,decodeEinsumEquation:decodeEinsumEquation$1,eitherStridesOrDilationsAreOne:eitherStridesOrDilationsAreOne$1,expandShapeToKeepDim:expandShapeToKeepDim$1,exponent:exponent$1,exponents:exponents$1,fromStringArrayToUint8:fromStringArrayToUint8$1,fromUint8ToStringArray:fromUint8ToStringArray$1,getAxesPermutation:getAxesPermutation$1,getBroadcastDims:getBroadcastDims$3,getComplexWithIndex:getComplexWithIndex$1,getEinsumComputePath:getEinsumComputePath$1,getEinsumPermutation:getEinsumPermutation$1,getFusedBiasGradient:getFusedBiasGradient$1,getFusedDyActivation:getFusedDyActivation$1,getImageCenter:getImageCenter$1,getInnerMostAxes:getInnerMostAxes$1,getPermuted:getPermuted$1,getRaggedRank:getRaggedRank$1,getReductionAxes:getReductionAxes$1,getReshaped:getReshaped$1,getReshapedPermuted:getReshapedPermuted$1,getRowPartitionTypesHelper:getRowPartitionTypesHelper$1,getSliceBeginCoords:getSliceBeginCoords$1,getSliceSize:getSliceSize$1,getSparseFillEmptyRowsIndicesDenseShapeMismatch:getSparseFillEmptyRowsIndicesDenseShapeMismatch$1,getSparseFillEmptyRowsNegativeIndexErrorMessage:getSparseFillEmptyRowsNegativeIndexErrorMessage$1,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:getSparseFillEmptyRowsOutOfRangeIndexErrorMessage$1,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:getSparseReshapeEmptyTensorZeroOutputDimErrorMessage$1,getSparseReshapeInputOutputMismatchErrorMessage:getSparseReshapeInputOutputMismatchErrorMessage$1,getSparseReshapeInputOutputMultipleErrorMessage:getSparseReshapeInputOutputMultipleErrorMessage$1,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:getSparseReshapeMultipleNegativeOneOutputDimErrorMessage$1,getSparseReshapeNegativeOutputDimErrorMessage:getSparseReshapeNegativeOutputDimErrorMessage$1,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:getSparseSegmentReductionIndicesOutOfRangeErrorMessage$1,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage$1,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage$1,getUndoAxesPermutation:getUndoAxesPermutation$1,isIdentityPermutation:isIdentityPermutation$1,log:log$5,mergeRealAndImagArrays:mergeRealAndImagArrays$1,prepareAndValidate:prepareAndValidate$1,prepareSplitSize:prepareSplitSize$1,segment_util:segment_util$1,shouldFuse:shouldFuse$1,slice_util:slice_util$1,splitRealAndImagArrays:splitRealAndImagArrays$1,stridesOrDilationsArePositive:stridesOrDilationsArePositive$1,tupleValuesAreOne:tupleValuesAreOne$1,upcastType:upcastType$1,validateDefaultValueShape:validateDefaultValueShape$1,validateInput:validateInput$2,validateUpdateShape:validateUpdateShape$1,warn:warn$1});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerOptimizers$1();/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const absGradConfig={kernelName:Abs$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,step$4(cast$5(xa,"float32"),-1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosGradConfig={kernelName:Acos$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>{const ba=square$4(cast$5(xa,"float32")),Sa=sqrt$4(sub$4(scalar$1(1),ba));return neg$3(div$2(ha,Sa))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acoshGradConfig={kernelName:Acosh$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>{const ba=sqrt$4(sub$4(square$4(cast$5(xa,"float32")),1));return div$2(ha,ba)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addGradConfig={kernelName:Add$2,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{let Ea=ha;const ka=getReductionAxes$1(xa.shape,Sa);return ka.length>0&&(Ea=sum$5(Ea,ka)),reshape$4(Ea,xa.shape)},b:()=>{let Ea=ha;const ka=getReductionAxes$1(ba.shape,Sa);return ka.length>0&&(Ea=sum$5(Ea,ka)),reshape$4(Ea,ba.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addNGradConfig={kernelName:AddN$1,saveAllInputs:!0,gradFunc:(ha,aa)=>{const xa={};return aa.forEach((ba,Sa)=>{xa[Sa]=()=>ha.clone()}),xa}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const argMaxGradConfig={kernelName:ArgMax$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>zerosLike$4(xa)}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const argMinGradConfig={kernelName:ArgMin$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>zerosLike$4(xa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinGradConfig={kernelName:Asin$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,sqrt$4(sub$4(scalar$1(1),square$4(cast$5(xa,"float32")))))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinhGradConfig={kernelName:Asinh$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>{const ba=sqrt$4(add$3(scalar$1(1),square$4(cast$5(xa,"float32"))));return div$2(ha,ba)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2GradConfig={kernelName:Atan2$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{const Ea=add$3(square$4(xa),square$4(ba));let ka=mul$1(ha,div$2(ba,Ea));const Aa=getReductionAxes$1(xa.shape,Sa);return Aa.length>0&&(ka=sum$5(ka,Aa)),reshape$4(ka,xa.shape)},b:()=>{const Ea=add$3(square$4(xa),square$4(ba));let ka=neg$3(mul$1(ha,div$2(xa,Ea)));const Aa=getReductionAxes$1(ba.shape,Sa);return Aa.length>0&&(ka=sum$5(ka,Aa)),reshape$4(ka,ba.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanGradConfig={kernelName:Atan$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,add$3(square$4(cast$5(xa,"float32")),1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanhGradConfig={kernelName:Atanh$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,sub$4(scalar$1(1),square$4(cast$5(xa,"float32"))))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3dGrad_(ha,aa,xa,ba,Sa,Ta){const wa=convertToTensor$1(ha,"dy","avgPool3dGrad"),Ea=convertToTensor$1(aa,"input","avgPool3dGrad");let ka=wa,Aa=Ea,Fa=!1;Ea.rank===4&&(Fa=!0,ka=reshape$4(wa,[1,wa.shape[0],wa.shape[1],wa.shape[2],wa.shape[3]]),Aa=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1],Ea.shape[2],Ea.shape[3]])),assert$2(ka.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${ka.rank}.`),assert$2(Aa.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${Aa.rank}.`),checkPadOnDimRoundingMode$1("avgPool3dGrad",Sa,Ta);const La={dy:ka,input:Aa},el={filterSize:xa,strides:ba,pad:Sa,dimRoundingMode:Ta},tl=ENGINE$1.runKernel(AvgPool3DGrad$1,La,el);return Fa?reshape$4(tl,[tl.shape[1],tl.shape[2],tl.shape[3],tl.shape[4]]):tl}const avgPool3dGrad=op$1({avgPool3dGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const avgPool3DGradConfig$3={kernelName:AvgPool3D$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{filterSize:Sa,strides:Ta,pad:wa,dimRoundingMode:Ea}=xa;return{x:()=>avgPool3dGrad(ha,ba,Sa,Ta,wa,Ea)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad_(ha,aa,xa,ba,Sa){const Ta=convertToTensor$1(ha,"dy","avgPoolGrad"),wa=convertToTensor$1(aa,"input","avgPoolGrad");assert$2(wa.rank===Ta.rank,()=>`Rank of input (${wa.rank}) does not match rank of dy (${Ta.rank})`);let Ea=wa,ka=Ta,Aa=!1;wa.rank===3&&(Aa=!0,Ea=reshape$4(wa,[1,wa.shape[0],wa.shape[1],wa.shape[2]]),ka=reshape$4(Ta,[1,Ta.shape[0],Ta.shape[1],Ta.shape[2]])),assert$2(ka.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${ka.rank}.`),assert$2(Ea.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${Ea.rank}.`);const Fa={dy:ka,input:Ea},La={filterSize:xa,strides:ba,pad:Sa},el=ENGINE$1.runKernel(AvgPoolGrad$1,Fa,La);return Aa?reshape$4(el,[el.shape[1],el.shape[2],el.shape[3]]):el}const avgPoolGrad$3=op$1({avgPoolGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const avgPoolGradConfig$3={kernelName:AvgPool$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{filterSize:Sa,strides:Ta,pad:wa}=xa;return{x:()=>avgPoolGrad$3(ha,ba,Sa,Ta,wa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchMatMulGradConfig={kernelName:BatchMatMul$1,inputsToSave:["a","b"],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{transposeA:Ta,transposeB:wa}=xa;return!Ta&&!wa?{a:()=>matMul$1(ha,Sa,!1,!0),b:()=>matMul$1(ba,ha,!0,!1)}:!Ta&&wa?{a:()=>matMul$1(ha,Sa,!1,!1),b:()=>matMul$1(ha,ba,!0,!1)}:Ta&&!wa?{a:()=>matMul$1(Sa,ha,!1,!0),b:()=>matMul$1(ba,ha,!1,!1)}:{a:()=>matMul$1(Sa,ha,!0,!0),b:()=>matMul$1(ha,ba,!0,!0)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceNDGradConfig={kernelName:BatchToSpaceND$1,gradFunc:(ha,aa,xa)=>{const{blockShape:ba,crops:Sa}=xa;return{x:()=>spaceToBatchND$3(ha,ba,Sa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const broadcastToGradConfig={kernelName:BroadcastTo,gradFunc:(ha,aa,xa)=>{const ba=xa,Sa=ba.inputShape,Ta=ba.shape,wa=Array.from(Ta);for(let ka=Sa.length-1;ka>=0;ka--)if(Sa[ka]===Ta[ka])wa[ka]=1;else if(Sa[ka]!==1)throw new Error(`broadcastTo(): [${Sa}] cannot be broadcast to [${Ta}].`);const Ea=[];for(let ka=0;ka<wa.length;ka++)wa[ka]>1&&Ea.push(ka);return{x:()=>sum$5(ha,Ea,!0)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const castGradConfig={kernelName:Cast$1,gradFunc:ha=>({x:()=>ha.clone()})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilGradConfig={kernelName:Ceil$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const clipByValueGradConfig={kernelName:ClipByValue$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{clipValueMin:Sa,clipValueMax:Ta}=xa;return{x:()=>where(logicalAnd$3(greaterEqual$3(ba,Sa),lessEqual$3(ba,Ta)),ha,zerosLike$4(ha))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const complexAbsGradConfig={kernelName:ComplexAbs$1,inputsToSave:["x"],gradFunc:absGradConfig.gradFunc};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const concatGradConfig={kernelName:Concat$1,saveAllInputs:!0,gradFunc:(ha,aa,xa)=>{const ba=aa.map(ka=>ka.shape),{axis:Sa}=xa,Ta=parseAxisParam$1(Sa,aa[0].shape)[0],wa=ba.map(ka=>ka[Ta]);return split$3(ha,wa,Ta).map(ka=>()=>ka)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv2DGradConfig={kernelName:Conv2D$2,inputsToSave:["x","filter"],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{dilations:Ta,strides:wa,pad:Ea,dataFormat:ka}=xa;return assert$2(tupleValuesAreOne$1(Ta),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${Ta}'`),{x:()=>conv2DBackpropInput$3(ba.shape,ha,Sa,wa,Ea,ka),filter:()=>conv2DBackpropFilter$3(ba,ha,Sa.shape,wa,Ea,ka)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv2DBackpropInputGradConfig={kernelName:Conv2DBackpropInput$1,inputsToSave:["dy","filter"],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{strides:Ta,pad:wa,dataFormat:Ea,dimRoundingMode:ka}=xa;return{dy:()=>conv2d$3(ha,Sa,Ta,wa,Ea,1,ka),filter:()=>conv2DBackpropFilter$3(ha,ba,Sa.shape,Ta,wa,Ea,ka)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilter_(ha,aa,xa,ba,Sa){let Ta=ha;ha.rank===4&&(Ta=reshape$4(ha,[1,ha.shape[0],ha.shape[1],ha.shape[2],ha.shape[3]]));let wa=aa;wa.rank===4&&(wa=reshape$4(aa,[1,aa.shape[0],aa.shape[1],aa.shape[2],aa.shape[3]])),assert$2(Ta.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${Ta.shape}.`),assert$2(wa.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${wa.shape}.`),assert$2(xa.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${xa}.`),assert$2(Ta.shape[4]===xa[3],()=>`Error in conv3dDerFilter: depth of input ${Ta.shape[4]}) must match input depth in filter (${xa[3]}.`),assert$2(wa.shape[4]===xa[4],()=>`Error in conv3dDerFilter: depth of dy (${wa.shape[4]}) must match output depth for filter (${xa[4]}).`);const Ea={x:Ta,dy:wa},ka={strides:ba,pad:Sa,filterShape:xa};return ENGINE$1.runKernel(Conv3DBackpropFilterV2$1,Ea,ka)}const conv3DBackpropFilter=op$1({conv3DBackpropFilter_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const conv3DGradConfig={kernelName:Conv3D$2,inputsToSave:["x","filter"],gradFunc:(ha,aa,xa)=>{const{dilations:ba,strides:Sa,pad:Ta}=xa;assert$2(tupleValuesAreOne$1(ba),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${ba}'`);const[wa,Ea]=aa;return{x:()=>conv3DBackpropInput$2(wa.shape,ha,Ea,Sa,Ta),filter:()=>conv3DBackpropFilter(wa,ha,Ea.shape,Sa,Ta)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosGradConfig={kernelName:Cos$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(neg$3(sin$3(cast$5(xa,"float32"))),ha)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const coshGradConfig={kernelName:Cosh$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(sinh$3(cast$5(xa,"float32")),ha)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cumsumGradConfig={kernelName:Cumsum$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{axis:Sa,exclusive:Ta,reverse:wa}=xa;return{x:()=>{const Ea=getAxesPermutation$1([Sa],ba.rank);let ka=cumsum$3(ha,Sa,Ta,!wa);return Ea!=null&&(ka=transpose$3(ka,Ea)),ka}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const depthwiseConv2dNativeGradConfig={kernelName:DepthwiseConv2dNative$1,inputsToSave:["x","filter"],gradFunc:(ha,aa,xa)=>{const{dilations:ba,strides:Sa,pad:Ta,dimRoundingMode:wa}=xa,Ea=ba??[1,1];assert$2(tupleValuesAreOne$1(Ea),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${Ea}'`);const[ka,Aa]=aa;return assert$2(ka.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${ka.rank}.`),assert$2(Aa.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${Aa.rank}.`),assert$2(ka.shape[3]===Aa.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${ka.shape[3]}) must match the inChannels dimension in filter ${Aa.shape[2]}.`),assert$2(eitherStridesOrDilationsAreOne$1(Sa,Ea),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${Sa} and dilations '${Ea}'.`),checkPadOnDimRoundingMode$1("depthwiseConv2d",Ta,wa),{x:()=>depthwiseConv2dNativeBackpropInput$3(ka.shape,ha,Aa,Sa,Ta,Ea,wa),filter:()=>depthwiseConv2dNativeBackpropFilter$3(ka,ha,Aa.shape,Sa,Ta,Ea,wa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2dGradConfig={kernelName:Dilation2D$1,inputsToSave:["x","filter"],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,Ta={x:ba,filter:Sa,dy:ha},wa={x:ba,filter:Sa,dy:ha};return{x:()=>ENGINE$1.runKernel(Dilation2DBackpropInput,Ta,xa),filter:()=>ENGINE$1.runKernel(Dilation2DBackpropFilter,wa,xa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const eluGradConfig$3={kernelName:Elu$2,outputsToSave:[!0],gradFunc:(ha,aa)=>{const[xa]=aa,ba={dy:ha,y:xa};return{x:()=>ENGINE$1.runKernel(EluGrad$1,ba)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const erfGradConfig={kernelName:Erf$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa,ba=mul$1(exp$3(neg$3(square$4(xa))),2/Math.sqrt(Math.PI));return{x:()=>mul$1(ha,ba)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expGradConfig={kernelName:Exp$1,outputsToSave:[!0],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,xa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expandDimsGradConfig={kernelName:ExpandDims$1,inputsToSave:["input"],gradFunc:(ha,aa)=>{const[xa]=aa;return{input:()=>reshape$4(ha,xa.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1GradConfig={kernelName:Expm1$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,exp$3(xa))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorGradConfig={kernelName:Floor$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivGradConfig={kernelName:FloorDiv$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{const Ea=div$2(ha,cast$5(ba,"float32")),ka=getReductionAxes$1(xa.shape,Sa);return ka.length>0?reshape$4(sum$5(Ea,ka),xa.shape):Ea},b:()=>{let Ea=mul$1(ha,cast$5(xa,"float32"));const ka=getReductionAxes$1(ba.shape,Sa);ka.length>0&&(Ea=reshape$4(sum$5(Ea,ka),ba.shape));const Aa=square$4(ba);return neg$3(div$2(Ea,cast$5(Aa,"float32")))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fusedBatchNormGradConfig={kernelName:FusedBatchNorm$1,inputsToSave:["x","mean","variance","scale"],gradFunc:(ha,aa,xa)=>{const{varianceEpsilon:ba}=xa,[Sa,Ta,wa,Ea]=aa,ka=Ea??scalar$1(1),Aa=getReductionAxes$1(Ta.shape,Sa.shape),Fa=[];if(Ta.rank===1){for(let il=0;il<Sa.shape.length-1;++il)Fa.push(Sa.shape[il]);Fa.push(1)}const La=sub$4(Sa,Ta),el=mul$1(ha,ka),tl=rsqrt$3(add$3(wa,scalar$1(ba))),nl=mul$1(mul$1(mul$1(tl,tl),tl),scalar$1(-.5));return{x:()=>Ta.rank===1?reshape$4(mul$1(mul$1(ha,tile$4(reshape$4(tl,[1,1,1,Ta.shape[0]]),Fa)),ka),Sa.shape):reshape$4(mul$1(mul$1(ha,tl),ka),Sa.shape),mean:()=>{let il=mul$1(mul$1(tl,scalar$1(-1)),el);return Ta.rank===1&&(il=sum$5(il,Aa)),reshape$4(il,Ta.shape)},variance:()=>{let il=mul$1(mul$1(nl,La),el);return Ta.rank===1&&(il=sum$5(il,Aa)),reshape$4(il,Ta.shape)},scale:()=>{const il=mul$1(La,tl);let cl=mul$1(ha,il);return Ta.rank===1&&(cl=sum$5(cl,Aa)),reshape$4(cl,Ta.shape)},offset:()=>{let il=ha;return Ta.rank===1&&(il=sum$5(il,Aa)),reshape$4(il,Ta.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gatherGradConfig={kernelName:GatherV2$1,inputsToSave:["x","indices"],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{axis:Ta,batchDims:wa}=xa,Ea=parseAxisParam$1(Ta,ba.shape)[0],ka=(Aa,Fa,La)=>()=>{const el=Aa.shape,tl=Fa.size,nl=el.slice(0,Ea),rl=nl.length,sl=el.slice(Ta,el.length).slice(1),ol=sl.length,al=arrayRange(0,rl),ll=arrayRange(rl+1,rl+1+ol),il=arrayConcat([nl,[tl],sl]),cl=reshape$4(La,il),ul=reshape$4(Fa,[tl]),dl=arrayConcat([[rl],al,ll]),hl=transpose$3(cl,dl);let pl=unsortedSegmentSum$3(hl,ul,Aa.shape[Ea]);const fl=getUndoAxesPermutation$1(dl);return pl=transpose$3(pl,fl),pl};if(wa===1){const Aa=ba.shape[0],Fa=ba.split(Aa,0);return{x:()=>stack(Fa.map((tl,nl)=>ka(tl,Sa.slice(nl,1),ha.slice(nl,1))())).reshape(ba.shape),indices:()=>Sa}}else return{x:ka(ba,Sa,ha),indices:()=>Sa}}};function arrayRange(ha,aa){const xa=[];for(let ba=ha;ba<aa;++ba)xa.push(ba);return xa}function arrayConcat(ha){const aa=[];for(let xa=0;xa<ha.length;++xa)for(let ba=0;ba<ha[xa].length;++ba)aa.push(ha[xa][ba]);return aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualGradConfig={kernelName:GreaterEqual$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa;return{a:()=>zerosLike$4(xa),b:()=>zerosLike$4(ba)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const identityGradConfig={kernelName:Identity$2,gradFunc:ha=>({x:()=>cast$5(ha,"float32")})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFiniteGradConfig={kernelName:IsFinite$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInfGradConfig={kernelName:IsInf$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNanGradConfig={kernelName:IsNan$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const leakyReluGradConfig={kernelName:LeakyRelu$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{alpha:Sa}=xa,Ta=greater$3(ba,0);return{x:()=>where(Ta,ha,mul$1(ha,Sa))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1pGradConfig={kernelName:Log1p$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,add$3(xa,1))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logGradConfig={kernelName:Log$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,cast$5(xa,"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logSoftmaxGradConfig={kernelName:LogSoftmax$1,inputsToSave:[],outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{axis:Sa}=xa;return{logits:()=>{const wa=exp$3(ba);return sub$4(ha,mul$1(sum$5(ha,Sa,!0),wa))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function localResponseNormalizationBackprop_(ha,aa,xa,ba=5,Sa=1,Ta=1,wa=.5){const Ea={x:ha,y:aa,dy:xa},ka={depthRadius:ba,bias:Sa,alpha:Ta,beta:wa};return ENGINE$1.runKernel(LRNGrad$1,Ea,ka)}const localResponseNormalizationBackprop=op$1({localResponseNormalizationBackprop_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGradConfig={kernelName:LRN$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{depthRadius:Ta,bias:wa,alpha:Ea,beta:ka}=xa;return{x:()=>localResponseNormalizationBackprop(ba,Sa,ha,Ta,wa,Ea,ka)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gradForMinAndMax(ha,aa,xa,ba){return aa.rank<xa.rank&&(aa=reshape$4(aa,expandShapeToKeepDim$1(aa.shape,ba))),ha.rank<xa.rank&&(ha=reshape$4(ha,expandShapeToKeepDim$1(ha.shape,ba))),{x:()=>mul$1(ha,cast$5(equal$3(xa,aa),ha.dtype))}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxGradConfig={kernelName:Max$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const ba=xa,{reductionIndices:Sa}=ba,Ta=aa[0],wa=aa[1],Ea=parseAxisParam$1(Sa,Ta.shape),ka=gradForMinAndMax(ha,wa,Ta,Ea);return{x:()=>ka.x()}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumGradConfig={kernelName:Maximum$2,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa;return{a:()=>mul$1(ha,cast$5(greaterEqual$3(xa,ba),"float32")),b:()=>mul$1(ha,cast$5(less$3(xa,ba),"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3dGrad_(ha,aa,xa,ba,Sa,Ta,wa){const Ea=convertToTensor$1(ha,"dy","maxPool3dGrad"),ka=convertToTensor$1(aa,"input","maxPool3dGrad"),Aa=convertToTensor$1(xa,"output","maxPool3dGrad");let Fa=Ea,La=ka,el=Aa,tl=!1;ka.rank===4&&(tl=!0,Fa=reshape$4(Ea,[1,Ea.shape[0],Ea.shape[1],Ea.shape[2],Ea.shape[3]]),La=reshape$4(ka,[1,ka.shape[0],ka.shape[1],ka.shape[2],ka.shape[3]]),el=reshape$4(Aa,[1,Aa.shape[0],Aa.shape[1],Aa.shape[2],Aa.shape[3]])),assert$2(Fa.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${Fa.rank}.`),assert$2(La.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${La.rank}.`),assert$2(el.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${el.rank}.`),checkPadOnDimRoundingMode$1("maxPool3dGrad",Ta,wa);const nl={dy:Fa,input:La,output:el},rl={filterSize:ba,strides:Sa,pad:Ta,dimRoundingMode:wa},sl=ENGINE$1.runKernel(MaxPool3DGrad$1,nl,rl);return tl?reshape$4(sl,[sl.shape[1],sl.shape[2],sl.shape[3],sl.shape[4]]):sl}const maxPool3dGrad=op$1({maxPool3dGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPool3DGradConfig$3={kernelName:MaxPool3D$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=xa;return{x:()=>maxPool3dGrad(ha,ba,Sa,Ta,wa,Ea,ka)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad_(ha,aa,xa,ba,Sa,Ta,wa){const Ea=convertToTensor$1(ha,"dy","maxPoolGrad"),ka=convertToTensor$1(aa,"input","maxPoolGrad"),Aa=convertToTensor$1(xa,"output","maxPoolGrad");assert$2(ka.rank===Ea.rank,()=>`Rank of input (${ka.rank}) does not match rank of dy (${Ea.rank})`),assert$2(Ea.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${Ea.rank}.`),assert$2(ka.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${ka.rank}.`),checkPadOnDimRoundingMode$1("maxPoolGrad",Ta,wa);const Fa={dy:Ea,input:ka,output:Aa},La={filterSize:ba,strides:Sa,pad:Ta,dimRoundingMode:wa};return ENGINE$1.runKernel(MaxPoolGrad$1,Fa,La)}const maxPoolGrad$3=op$1({maxPoolGrad_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolGradConfig$3={kernelName:MaxPool$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const[ba,Sa]=aa,{filterSize:Ta,strides:wa,pad:Ea}=xa;return{x:()=>maxPoolGrad$3(ha,ba,Sa,Ta,wa,Ea)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanGradConfig={kernelName:Mean$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{axis:Sa}=xa,Ta=parseAxisParam$1(Sa,ba.shape),Ea=computeOutAndReduceShapes$1(ba.shape,Ta)[1],ka=sizeFromShape$1(Ea);return{x:()=>{const Fa=ba.shape.slice();Ta.forEach(tl=>{Fa[tl]=1});const La=reshape$4(ha,Fa);return div$2(mul$1(La,ones$1(ba.shape,"float32")),ka)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minGradConfig={kernelName:Min$1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const ba=xa,{axis:Sa}=ba,[Ta,wa]=aa,Ea=parseAxisParam$1(Sa,Ta.shape),ka=gradForMinAndMax(ha,wa,Ta,Ea);return{x:()=>ka.x()}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumGradConfig={kernelName:Minimum$2,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa;return{a:()=>mul$1(ha,cast$5(lessEqual$3(xa,ba),"float32")),b:()=>mul$1(ha,cast$5(greater$3(xa,ba),"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadGradConfig={kernelName:MirrorPad$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const ba=aa[0],{paddings:Sa}=xa,Ta=Sa.map(wa=>wa[0]);return{x:()=>slice$3(ha,Ta,ba.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const modGradConfig={kernelName:Mod$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{const Ea=getReductionAxes$1(xa.shape,Sa);return Ea.length>0?reshape$4(sum$5(ha,Ea),xa.shape):ha},b:()=>{const Ea=mul$1(ha,neg$3(floor$3(div$2(xa,ba)))),ka=getReductionAxes$1(ba.shape,Sa);return ka.length>0?reshape$4(sum$5(Ea,ka),ba.shape):Ea}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyGradConfig={kernelName:Multiply$2,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{const Ea=mul$1(ha,cast$5(ba,"float32")),ka=getReductionAxes$1(xa.shape,Sa);return ka.length>0?reshape$4(sum$5(Ea,ka),xa.shape):Ea},b:()=>{const Ea=mul$1(ha,cast$5(xa,"float32")),ka=getReductionAxes$1(ba.shape,Sa);return ka.length>0?reshape$4(sum$5(Ea,ka),ba.shape):Ea}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const negGradConfig={kernelName:Neg$1,gradFunc:ha=>({x:()=>neg$3(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHotGradConfig={kernelName:OneHot$1,inputsToSave:["indices"],gradFunc:(ha,aa)=>{const xa=aa[0];return{indices:()=>zeros$2(xa.shape,"float32")}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const onesLikeGradConfig={kernelName:OnesLike$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const packGradConfig={kernelName:Pack$1,saveAllInputs:!0,gradFunc:(ha,aa,xa)=>{const{axis:ba}=xa;return unstack(ha,ba).map(Ta=>()=>Ta)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2GradConfig={kernelName:PadV2$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const ba=aa[0],{paddings:Sa}=xa,Ta=Sa.map(wa=>wa[0]);return{x:()=>slice$3(ha,Ta,ba.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powGradConfig={kernelName:Pow$1,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(ha,aa)=>{const[xa,ba,Sa]=aa,Ta=xa,wa=ba,Ea=assertAndGetBroadcastShape$1(Ta.shape,wa.shape);return{a:()=>{const Fa=cast$5(wa,"float32");let La=mul$1(ha,mul$1(Fa,pow$4(Ta,sub$4(Fa,scalar$1(1)))));const el=getReductionAxes$1(Ta.shape,Ea);return el.length>0&&(La=sum$5(La,el)),reshape$4(La,Ta.shape)},b:()=>{const Fa=greater$3(Ta,0),La=where(Fa,log$4(Ta),zerosLike$4(Ta));let el=mul$1(ha,mul$1(Sa,La));const tl=getReductionAxes$1(wa.shape,Ea);return tl.length>0&&(el=sum$5(el,tl)),reshape$4(el,wa.shape)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const preluGradConfig={kernelName:Prelu$1,inputsToSave:["x","alpha"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=greater$3(xa,0);return{x:()=>where(Sa,ha,mul$1(ha,ba)),alpha:()=>{let Ta=where(Sa,zerosLike$4(ha),mul$1(ha,xa));const wa=getReductionAxes$1(ba.shape,ha.shape);return wa.length>0&&(Ta=sum$5(Ta,wa)),reshape$4(Ta,ba.shape)}}}};/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodGradFn_(ha,aa,xa){const ba=ha.shape.slice();ba[xa]=1;const Sa=reshape$4(aa,ba),Ta=cumprod$3(ha,xa,!0,!1),wa=cumprod$3(ha,xa,!0,!0),Ea=mul$1(Ta,wa);return mul$1(Sa,Ea)}function prodsGradFn_(ha,aa,xa){const ba=ha.shape.length,Sa=ba-xa.length,Ta=getAxesPermutation$1(xa,ba);let wa=ha;Ta!=null&&(wa=transpose$3(ha,Ta));const Ea=wa.shape.slice(),Aa=Ea.splice(ba-xa.length,xa.length).reduce((el,tl)=>el*tl,1);Ea.push(Aa);const Fa=wa.reshape(Ea);let La=prodGradFn_(Fa,aa,Sa);if(La=La.reshape(wa.shape),Ta!=null){const el=getUndoAxesPermutation$1(Ta);La=transpose$3(La,el)}return La}const prodGradConfig={kernelName:Prod$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{axis:Sa}=xa;let Ta=[];return Sa==null?Ta=ba.shape.map((wa,Ea)=>Ea):typeof Sa=="number"?Ta=[Sa]:Ta=Sa,{x:()=>prodsGradFn_(ba,ha,Ta)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const divGradConfig={kernelName:RealDiv$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{const Ea=div$2(ha,cast$5(ba,"float32")),ka=getReductionAxes$1(xa.shape,Sa);return ka.length>0?reshape$4(sum$5(Ea,ka),xa.shape):Ea},b:()=>{let Ea=mul$1(ha,cast$5(xa,"float32"));const ka=getReductionAxes$1(ba.shape,Sa);ka.length>0&&(Ea=reshape$4(sum$5(Ea,ka),ba.shape));const Aa=square$4(ba);return neg$3(div$2(Ea,cast$5(Aa,"float32")))}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocalGradConfig={kernelName:Reciprocal$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,neg$3(square$4(xa)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6GradConfig={kernelName:Relu6$2,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa,ba=mul$1(lessEqual$3(xa,6),step$4(xa));return{x:()=>mul$1(ha,cast$5(ba,"float32"))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reluGradConfig={kernelName:Relu$2,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,cast$5(step$4(xa),"float32"))}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reshapeGradConfig={kernelName:Reshape$2,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>reshape$4(ha,xa.shape)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const resizeBilinearGradConfig$3={kernelName:ResizeBilinear$1,inputsToSave:["images"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,Sa={dy:ha,images:ba};return{images:()=>ENGINE$1.runKernel(ResizeBilinearGrad$1,Sa,xa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const resizeNearestNeighborGradConfig$3={kernelName:ResizeNearestNeighbor$1,inputsToSave:["images"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,Sa={dy:ha,images:ba};return{images:()=>ENGINE$1.runKernel(ResizeNearestNeighborGrad$1,Sa,xa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reverseGradConfig={kernelName:Reverse$1,gradFunc:(ha,aa,xa)=>{const{dims:ba}=xa,Sa=parseAxisParam$1(ba,ha.shape);return{x:()=>reverse$3(ha,Sa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const roundGradConfig={kernelName:Round$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtGradConfig={kernelName:Rsqrt$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>neg$3(div$2(ha,mul$1(pow$4(xa,1.5),2)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const selectGradConfig={kernelName:Select$1,inputsToSave:["condition"],gradFunc:(ha,aa)=>{const[xa]=aa;return{condition:()=>cast$5(zerosLike$4(xa),"float32"),t:()=>mul$1(ha,cast$5(xa,ha.dtype)),e:()=>mul$1(ha,cast$5(logicalNot$3(xa),ha.dtype))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const seluGradConfig={kernelName:Selu$2,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>{const ba=greater$3(xa,scalar$1(0)),Sa=scalar$1(SELU_SCALEALPHA$1),Ta=scalar$1(SELU_SCALE$1),wa=mul$1(ha,Ta),Ea=mul$1(mul$1(ha,Sa),exp$3(cast$5(xa,"float32")));return where(ba,wa,Ea)}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidGradConfig={kernelName:Sigmoid$2,outputsToSave:[!0],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,mul$1(xa,sub$4(scalar$1(1),xa)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const signGradConfig={kernelName:Sign$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinGradConfig={kernelName:Sin$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(cos$3(cast$5(xa,"float32")),ha)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinhGradConfig={kernelName:Sinh$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(cosh$3(cast$5(xa,"float32")),ha)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sliceGradConfig={kernelName:Slice$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{begin:Sa,size:Ta}=xa,wa=ba.shape,[Ea,ka]=parseSliceParams$1(ba,Sa,Ta),Aa=[];for(let Fa=0;Fa<ha.rank;Fa++)Aa.push([Ea[Fa],wa[Fa]-Ea[Fa]-ka[Fa]]);return{x:()=>pad(ha,Aa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softmaxGradConfig={kernelName:Softmax$3,outputsToSave:[!0],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{dim:Sa}=xa,Ta=!0,wa=mul$1(ha,ba);return{logits:()=>sub$4(wa,mul$1(sum$5(wa,[Sa],Ta),ba))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const softplusGradConfig={kernelName:Softplus$2,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,sigmoid$4(xa))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchNDGradConfig={kernelName:SpaceToBatchND$1,gradFunc:(ha,aa,xa)=>{const{blockShape:ba,paddings:Sa}=xa;return{x:()=>batchToSpaceND$3(ha,ba,Sa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const splitVGradConfig={kernelName:SplitV$1,gradFunc:(ha,aa,xa)=>{const{axis:ba}=xa;return{x:()=>concat$3(ha,ba)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtGradConfig={kernelName:Sqrt$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,mul$1(sqrt$4(cast$5(xa,"float32")),2))}}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareGradConfig={kernelName:Square$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(ha,mul$1(cast$5(xa,"float32"),2))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceGradConfig={kernelName:SquaredDifference$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=scalar$1(2);return{a:()=>mul$1(ha,mul$1(Sa,sub$4(xa,ba))),b:()=>mul$1(ha,mul$1(Sa,sub$4(ba,xa)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const stepGradConfig={kernelName:Step$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subGradConfig={kernelName:Sub$1,inputsToSave:["a","b"],gradFunc:(ha,aa)=>{const[xa,ba]=aa,Sa=assertAndGetBroadcastShape$1(xa.shape,ba.shape);return{a:()=>{let Ea=ha;const ka=getReductionAxes$1(xa.shape,Sa);return ka.length>0&&(Ea=sum$5(Ea,ka)),reshape$4(Ea,xa.shape)},b:()=>{let Ea=ha;const ka=getReductionAxes$1(ba.shape,Sa);return ka.length>0&&(Ea=sum$5(Ea,ka)),reshape$4(neg$3(Ea),ba.shape)}}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sumGradConfig={kernelName:Sum$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,Sa=ba.shape.slice(),{axis:Ta}=xa;parseAxisParam$1(Ta,ba.shape).forEach(Aa=>{Sa[Aa]=1});const Ea=reshape$4(ha,Sa),ka=mul$1(Ea,ones$1(ba.shape,"float32"));return{x:()=>ka}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanGradConfig={kernelName:Tan$1,inputsToSave:["x"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>div$2(ha,square$4(cos$3(xa)))}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanhGradConfig={kernelName:Tanh$2,outputsToSave:[!0],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>mul$1(sub$4(scalar$1(1),square$4(xa)),ha)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tileGradConfig={kernelName:Tile$1,inputsToSave:["x"],gradFunc:(ha,aa,xa)=>{const[ba]=aa,{reps:Sa}=xa;return{x:()=>{let wa=zerosLike$4(ba);if(ba.rank===1)for(let Ea=0;Ea<Sa[0];++Ea)wa=add$3(wa,slice$3(ha,[Ea*ba.shape[0]],[ba.shape[0]]));else if(ba.rank===2)for(let Ea=0;Ea<Sa[0];++Ea)for(let ka=0;ka<Sa[1];++ka)wa=add$3(wa,slice$3(ha,[Ea*ba.shape[0],ka*ba.shape[1]],[ba.shape[0],ba.shape[1]]));else if(ba.rank===3)for(let Ea=0;Ea<Sa[0];++Ea)for(let ka=0;ka<Sa[1];++ka)for(let Aa=0;Aa<Sa[2];++Aa)wa=add$3(wa,slice$3(ha,[Ea*ba.shape[0],ka*ba.shape[1],Aa*ba.shape[2]],[ba.shape[0],ba.shape[1],ba.shape[2]]));else if(ba.rank===4)for(let Ea=0;Ea<Sa[0];++Ea)for(let ka=0;ka<Sa[1];++ka)for(let Aa=0;Aa<Sa[2];++Aa)for(let Fa=0;Fa<Sa[3];++Fa)wa=add$3(wa,slice$3(ha,[Ea*ba.shape[0],ka*ba.shape[1],Aa*ba.shape[2],Fa*ba.shape[3]],[ba.shape[0],ba.shape[1],ba.shape[2],ba.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${ba.rank} tensors yet.`);return wa}}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const transposeGradConfig={kernelName:Transpose$1,gradFunc:(ha,aa,xa)=>{const ba=xa,{perm:Sa}=ba,Ta=getUndoAxesPermutation$1(Sa);return{x:()=>transpose$3(ha,Ta)}}};/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const unpackGradConfig={kernelName:Unpack$1,gradFunc:(ha,aa,xa)=>{const ba=xa,{axis:Sa}=ba;return{value:()=>stack(ha,Sa)}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const unsortedSegmentSumGradConfig={kernelName:UnsortedSegmentSum$1,inputsToSave:["segmentIds"],gradFunc:(ha,aa)=>{const[xa]=aa;return{x:()=>gatherDropNegatives(ha,xa)}}};function gatherDropNegatives(ha,aa){const xa=maximum$4(aa,zerosLike$4(aa)),ba=gather$1(ha,xa);let Sa=greaterEqual$3(aa,scalar$1(0,"int32"));const Ta=ba.rank-Sa.rank;for(let Ea=0;Ea<Ta;++Ea)Sa=expandDims$4(Sa,Ea+1);Sa=logicalAnd$3(Sa,ones$1(ba.shape,"bool"));const wa=zerosLike$4(ba);return where(Sa,ba,wa)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const zerosLikeGradConfig={kernelName:ZerosLike$1,gradFunc:ha=>({x:()=>zerosLike$4(ha)})};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gradConfigs=[absGradConfig,acosGradConfig,acoshGradConfig,addGradConfig,addNGradConfig,argMaxGradConfig,argMinGradConfig,asinGradConfig,asinhGradConfig,atan2GradConfig,atanGradConfig,atanhGradConfig,avgPool3DGradConfig$3,avgPoolGradConfig$3,batchMatMulGradConfig,batchToSpaceNDGradConfig,broadcastToGradConfig,castGradConfig,ceilGradConfig,clipByValueGradConfig,complexAbsGradConfig,concatGradConfig,conv2DBackpropInputGradConfig,conv2DGradConfig,conv3DGradConfig,cosGradConfig,coshGradConfig,cumsumGradConfig,depthwiseConv2dNativeGradConfig,dilation2dGradConfig,divGradConfig,eluGradConfig$3,erfGradConfig,expGradConfig,expandDimsGradConfig,expm1GradConfig,floorDivGradConfig,floorGradConfig,fusedBatchNormGradConfig,gatherGradConfig,greaterEqualGradConfig,identityGradConfig,isFiniteGradConfig,isInfGradConfig,isNanGradConfig,leakyReluGradConfig,log1pGradConfig,logGradConfig,logSoftmaxGradConfig,lrnGradConfig,maxGradConfig,maxGradConfig,maximumGradConfig,maxPool3DGradConfig$3,maxPoolGradConfig$3,meanGradConfig,minGradConfig,minimumGradConfig,mirrorPadGradConfig,modGradConfig,multiplyGradConfig,negGradConfig,oneHotGradConfig,onesLikeGradConfig,packGradConfig,padV2GradConfig,padV2GradConfig,powGradConfig,preluGradConfig,prodGradConfig,reciprocalGradConfig,relu6GradConfig,reluGradConfig,reshapeGradConfig,resizeBilinearGradConfig$3,resizeNearestNeighborGradConfig$3,reverseGradConfig,roundGradConfig,rsqrtGradConfig,selectGradConfig,seluGradConfig,sigmoidGradConfig,signGradConfig,sinGradConfig,sinhGradConfig,sliceGradConfig,softmaxGradConfig,softplusGradConfig,spaceToBatchNDGradConfig,spaceToBatchNDGradConfig,splitVGradConfig,splitVGradConfig,sqrtGradConfig,squaredDifferenceGradConfig,squareGradConfig,stepGradConfig,subGradConfig,sumGradConfig,tanGradConfig,tanhGradConfig,tileGradConfig,transposeGradConfig,unpackGradConfig,unsortedSegmentSumGradConfig,zerosLikeGradConfig];for(const ha of gradConfigs)registerGradient(ha);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.abs=function(){return this.throwIfDisposed(),abs$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.acos=function(){return this.throwIfDisposed(),acos$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.acosh=function(){return this.throwIfDisposed(),acosh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.add=function(ha){return this.throwIfDisposed(),add$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.all=function(ha,aa){return this.throwIfDisposed(),all$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.any=function(ha,aa){return this.throwIfDisposed(),any$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.argMax=function(ha){return this.throwIfDisposed(),argMax$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.argMin=function(ha){return this.throwIfDisposed(),argMin$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asScalar=function(){return this.throwIfDisposed(),assert$2(this.size===1,()=>"The array must have only 1 element."),reshape$4(this,[])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asType=function(ha){return this.throwIfDisposed(),cast$5(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as1D=function(){return this.throwIfDisposed(),reshape$4(this,[this.size])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as2D=function(ha,aa){return this.throwIfDisposed(),reshape$4(this,[ha,aa])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as3D=function(ha,aa,xa){return this.throwIfDisposed(),reshape$4(this,[ha,aa,xa])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as4D=function(ha,aa,xa,ba){return this.throwIfDisposed(),reshape$4(this,[ha,aa,xa,ba])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.as5D=function(ha,aa,xa,ba,Sa){return this.throwIfDisposed(),reshape$4(this,[ha,aa,xa,ba,Sa])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asin=function(){return this.throwIfDisposed(),asin$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.asinh=function(){return this.throwIfDisposed(),asinh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.atan=function(){return this.throwIfDisposed(),atan$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.atan2=function(ha){return this.throwIfDisposed(),atan2$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.atanh=function(){return this.throwIfDisposed(),atanh$3(this)},getGlobalTensorClass$1().prototype.avgPool=function(ha,aa,xa,ba){return this.throwIfDisposed(),avgPool$3(this,ha,aa,xa,ba)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.batchToSpaceND=function(ha,aa){return this.throwIfDisposed(),batchToSpaceND$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.batchNorm=function(ha,aa,xa,ba,Sa){return this.throwIfDisposed(),batchNorm$3(this,ha,aa,xa,ba,Sa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.broadcastTo=function(ha){return this.throwIfDisposed(),broadcastTo$1(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cast=function(ha){return this.throwIfDisposed(),cast$5(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.ceil=function(){return this.throwIfDisposed(),ceil$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.clipByValue=function(ha,aa){return this.throwIfDisposed(),clipByValue$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.concat=function(ha,aa){return this.throwIfDisposed(),ha instanceof Tensor$1&&(ha=[ha]),concat$3([this,...ha],aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.conv1d=function(ha,aa,xa,ba,Sa,Ta){return this.throwIfDisposed(),conv1d(this,ha,aa,xa,ba,Sa,Ta)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.conv2dTranspose=function(ha,aa,xa,ba,Sa){return this.throwIfDisposed(),conv2dTranspose(this,ha,aa,xa,ba,Sa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.conv2d=function(ha,aa,xa,ba,Sa,Ta){return this.throwIfDisposed(),conv2d$3(this,ha,aa,xa,ba,Sa,Ta)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cos=function(){return this.throwIfDisposed(),cos$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cosh=function(){return this.throwIfDisposed(),cosh$3(this)};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cumprod=function(ha,aa,xa){return this.throwIfDisposed(),cumprod$3(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.cumsum=function(ha,aa,xa){return this.throwIfDisposed(),cumsum$3(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.depthToSpace=function(ha,aa){return this.throwIfDisposed(),depthToSpace$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.depthwiseConv2d=function(ha,aa,xa,ba,Sa,Ta){return this.throwIfDisposed(),depthwiseConv2d$2(this,ha,aa,xa,ba,Sa,Ta)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.dilation2d=function(ha,aa,xa,ba,Sa){return this.throwIfDisposed(),dilation2d(this,ha,aa,xa,ba,Sa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.divNoNan=function(ha){return this.throwIfDisposed(),divNoNan(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.div=function(ha){return this.throwIfDisposed(),div$2(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.dot=function(ha){return this.throwIfDisposed(),dot$1(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.elu=function(){return this.throwIfDisposed(),elu$5(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.equal=function(ha){return this.throwIfDisposed(),equal$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.erf=function(){return this.throwIfDisposed(),erf$3(this)};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.euclideanNorm=function(ha,aa){return this.throwIfDisposed(),euclideanNorm(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.exp=function(){return this.throwIfDisposed(),exp$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.expandDims=function(ha){return this.throwIfDisposed(),expandDims$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.expm1=function(){return this.throwIfDisposed(),expm1$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.fft=function(){return this.throwIfDisposed(),fft$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.flatten=function(){return this.throwIfDisposed(),reshape$4(this,[this.size])};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.floor=function(){return this.throwIfDisposed(),floor$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.floorDiv=function(ha){return this.throwIfDisposed(),floorDiv$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.gather=function(ha,aa,xa){return this.throwIfDisposed(),gather$1(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.greaterEqual=function(ha){return this.throwIfDisposed(),greaterEqual$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.greater=function(ha){return this.throwIfDisposed(),greater$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.ifft=function(){return this.throwIfDisposed(),ifft$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.irfft=function(){return this.throwIfDisposed(),irfft(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.isFinite=function(){return this.throwIfDisposed(),isFinite$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.isInf=function(){return this.throwIfDisposed(),isInf$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.isNaN=function(){return this.throwIfDisposed(),isNaN$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.leakyRelu=function(ha){return this.throwIfDisposed(),leakyRelu$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.lessEqual=function(ha){return this.throwIfDisposed(),lessEqual$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.less=function(ha){return this.throwIfDisposed(),less$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.localResponseNormalization=function(ha,aa,xa,ba){return this.throwIfDisposed(),localResponseNormalization(this,ha,aa,xa,ba)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logSigmoid=function(){return this.throwIfDisposed(),logSigmoid(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logSoftmax=function(ha){return this.throwIfDisposed(),logSoftmax(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logSumExp=function(ha,aa){return this.throwIfDisposed(),logSumExp(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.log=function(){return this.throwIfDisposed(),log$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.log1p=function(){return this.throwIfDisposed(),log1p$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalAnd=function(ha){return this.throwIfDisposed(),logicalAnd$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalNot=function(){return this.throwIfDisposed(),logicalNot$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalOr=function(ha){return this.throwIfDisposed(),logicalOr$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.logicalXor=function(ha){return this.throwIfDisposed(),logicalXor(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.matMul=function(ha,aa,xa){return this.throwIfDisposed(),matMul$1(this,ha,aa,xa)},getGlobalTensorClass$1().prototype.maxPool=function(ha,aa,xa,ba){return this.throwIfDisposed(),maxPool$3(this,ha,aa,xa,ba)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.max=function(ha,aa){return this.throwIfDisposed(),max$4(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.maximum=function(ha){return this.throwIfDisposed(),maximum$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mean=function(ha,aa){return this.throwIfDisposed(),mean$1(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.min=function(ha,aa){return this.throwIfDisposed(),min$4(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.minimum=function(ha){return this.throwIfDisposed(),minimum$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mirrorPad=function(ha,aa){return this.throwIfDisposed(),mirrorPad$1(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mod=function(ha){return this.throwIfDisposed(),mod$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.mul=function(ha){return this.throwIfDisposed(),mul$1(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.neg=function(){return this.throwIfDisposed(),neg$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.norm=function(ha,aa,xa){return this.throwIfDisposed(),norm(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.notEqual=function(ha){return this.throwIfDisposed(),notEqual$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.oneHot=function(ha,aa=1,xa=0){return this.throwIfDisposed(),oneHot$3(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.onesLike=function(){return this.throwIfDisposed(),onesLike$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.pad=function(ha,aa){return this.throwIfDisposed(),pad(this,ha,aa)},getGlobalTensorClass$1().prototype.pool=function(ha,aa,xa,ba,Sa,Ta){return this.throwIfDisposed(),pool$1(this,ha,aa,xa,ba,Sa,Ta)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.pow=function(ha){return this.throwIfDisposed(),pow$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.prelu=function(ha){return this.throwIfDisposed(),prelu$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.prod=function(ha,aa){return this.throwIfDisposed(),prod$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reciprocal=function(){return this.throwIfDisposed(),reciprocal$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.relu=function(){return this.throwIfDisposed(),relu$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.relu6=function(){return this.throwIfDisposed(),relu6$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reshapeAs=function(ha){return this.throwIfDisposed(),reshape$4(this,ha.shape)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reshape=function(ha){return this.throwIfDisposed(),reshape$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.resizeBilinear=function(ha,aa,xa){return this.throwIfDisposed(),resizeBilinear$4(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.resizeNearestNeighbor=function(ha,aa,xa){return this.throwIfDisposed(),resizeNearestNeighbor$3(this,ha,aa,xa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.reverse=function(ha){return this.throwIfDisposed(),reverse$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.rfft=function(){return this.throwIfDisposed(),rfft(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.round=function(){return this.throwIfDisposed(),round$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.rsqrt=function(){return this.throwIfDisposed(),rsqrt$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.selu=function(){return this.throwIfDisposed(),selu$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.separableConv2d=function(ha,aa,xa,ba,Sa,Ta){return this.throwIfDisposed(),separableConv2d(this,ha,aa,xa,ba,Sa,Ta)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sigmoid=function(){return this.throwIfDisposed(),sigmoid$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sign=function(){return this.throwIfDisposed(),sign$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sin=function(){return this.throwIfDisposed(),sin$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sinh=function(){return this.throwIfDisposed(),sinh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.slice=function(ha,aa){return this.throwIfDisposed(),slice$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.softmax=function(ha){return this.throwIfDisposed(),softmax$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.softplus=function(){return this.throwIfDisposed(),softplus$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.spaceToBatchND=function(ha,aa){return this.throwIfDisposed(),spaceToBatchND$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.split=function(ha,aa){return this.throwIfDisposed(),split$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sqrt=function(){return this.throwIfDisposed(),sqrt$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.square=function(){return this.throwIfDisposed(),square$4(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.squaredDifference=function(ha){return this.throwIfDisposed(),squaredDifference$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.squeeze=function(ha){return this.throwIfDisposed(),squeeze(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.stack=function(ha,aa){this.throwIfDisposed();const xa=ha instanceof Tensor$1?[this,ha]:[this,...ha];return stack(xa,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.step=function(ha){return this.throwIfDisposed(),step$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.stridedSlice=function(ha,aa,xa,ba,Sa,Ta,wa,Ea){return this.throwIfDisposed(),stridedSlice$3(this,ha,aa,xa,ba,Sa,Ta,wa,Ea)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sub=function(ha){return this.throwIfDisposed(),sub$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.sum=function(ha,aa){return this.throwIfDisposed(),sum$5(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.tan=function(){return this.throwIfDisposed(),tan$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.tanh=function(){return this.throwIfDisposed(),tanh$3(this)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.tile=function(ha){return this.throwIfDisposed(),tile$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.toBool=function(){return this.throwIfDisposed(),cast$5(this,"bool")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.toFloat=function(){return this.throwIfDisposed(),cast$5(this,"float32")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.toInt=function(){return this.throwIfDisposed(),cast$5(this,"int32")};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.topk=function(ha,aa){return this.throwIfDisposed(),topk(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.transpose=function(ha){return this.throwIfDisposed(),transpose$3(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.unique=function(ha){return this.throwIfDisposed(),unique$4(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.unsortedSegmentSum=function(ha,aa){return this.throwIfDisposed(),unsortedSegmentSum$3(this,ha,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.unstack=function(ha){return this.throwIfDisposed(),unstack(this,ha)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.where=function(ha,aa){return this.throwIfDisposed(),where(ha,this,aa)};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getGlobalTensorClass$1().prototype.zerosLike=function(){return this.throwIfDisposed(),zerosLike$4(this)};/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class AttributeError extends Error{constructor(aa){super(aa),Object.setPrototypeOf(this,AttributeError.prototype)}}class RuntimeError extends Error{constructor(aa){super(aa),Object.setPrototypeOf(this,RuntimeError.prototype)}}class ValueError extends Error{constructor(aa){super(aa),Object.setPrototypeOf(this,ValueError.prototype)}}class NotImplementedError extends Error{constructor(aa){super(aa),Object.setPrototypeOf(this,NotImplementedError.prototype)}}class AssertionError extends Error{constructor(aa){super(aa),Object.setPrototypeOf(this,AssertionError.prototype)}}/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class LruCache{constructor(aa){this.maxEntries=aa||100,this.cache=new Map}get(aa){let xa;return this.cache.has(aa)&&(xa=this.cache.get(aa),this.cache.delete(aa),this.cache.set(aa,xa)),xa}put(aa,xa){if(this.cache.has(aa))this.cache.delete(aa);else if(this.cache.size>=this.maxEntries){const ba=this.cache.keys().next().value;this.cache.delete(ba)}this.cache.set(aa,xa)}getMaxEntries(){return this.maxEntries}setMaxEntries(aa){if(aa<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${aa}.`);if(this.maxEntries>aa)for(let xa=0;xa<this.maxEntries-aa;xa++){const ba=this.cache.keys().next().value;this.cache.delete(ba)}this.maxEntries=aa}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function pyListRepeat(ha,aa){if(Array.isArray(ha)){let xa=[];for(let ba=0;ba<aa;ba++)xa=xa.concat(ha);return xa}else{const xa=new Array(aa);return xa.fill(ha),xa}}function assert$1(ha,aa){if(!ha)throw new AssertionError(aa)}function count(ha,aa){let xa=0;for(const ba of ha)ba===aa&&xa++;return xa}function singletonOrArray(ha){return ha.length===1?ha[0]:ha}function toList(ha){return Array.isArray(ha)?ha:[ha]}function toSnakeCase(ha){const xa=ha.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return xa[0]!=="_"?xa:"private"+xa}function toCamelCase(ha){return ha.length<=1||ha.indexOf("_")===-1?ha:ha.replace(/[_]+(\w|$)/g,(aa,xa)=>xa.toUpperCase())}let _GLOBAL_CUSTOM_OBJECTS={};function serializeKerasObject(ha){if(ha==null)return null;const aa={};return aa.className=ha.getClassName(),aa.config=ha.getConfig(),aa}function convertNDArrayScalarsInConfig(ha){if(!(ha==null||typeof ha!="object"))if(Array.isArray(ha))ha.forEach(aa=>convertNDArrayScalarsInConfig(aa));else{const aa=Object.keys(ha);for(const xa of aa){const ba=ha[xa];ba!=null&&typeof ba=="object"&&(!Array.isArray(ba)&&ba.type==="ndarray"&&typeof ba.value=="number"?ha[xa]=ba.value:convertNDArrayScalarsInConfig(ba))}}}function deserializeKerasObject(ha,aa={},xa={},ba="object",Sa=!1){if(typeof ha=="string"){const Ta=ha;let wa;if(Ta in xa)wa=xa[Ta];else if(Ta in _GLOBAL_CUSTOM_OBJECTS)wa=_GLOBAL_CUSTOM_OBJECTS[Ta];else if(wa=aa[Ta],wa==null)throw new ValueError(`Unknown ${ba}: ${ha}. This may be due to one of the following reasons:
1. The ${ba} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${ba} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return wa}else{const Ta=ha;if(Ta.className==null||Ta.config==null)throw new ValueError(`${ba}: Improper config format: ${JSON.stringify(Ta)}.
'className' and 'config' must set.`);const wa=Ta.className;let Ea,ka;if(wa in xa?[Ea,ka]=xa[wa]:wa in _GLOBAL_CUSTOM_OBJECTS?[Ea,ka]=_GLOBAL_CUSTOM_OBJECTS.className:wa in aa&&([Ea,ka]=aa[wa]),Ea==null)throw new ValueError(`Unknown ${ba}: ${wa}. This may be due to one of the following reasons:
1. The ${ba} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${ba} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(ka!=null){const Aa={};for(const tl of Object.keys(_GLOBAL_CUSTOM_OBJECTS))Aa[tl]=_GLOBAL_CUSTOM_OBJECTS[tl];for(const tl of Object.keys(xa))Aa[tl]=xa[tl];const Fa=Ta.config;Fa.customObjects=Aa;const La=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(const tl of Object.keys(xa))_GLOBAL_CUSTOM_OBJECTS[tl]=xa[tl];convertNDArrayScalarsInConfig(Ta.config);const el=ka(Ea,Ta.config,xa,Sa);return _GLOBAL_CUSTOM_OBJECTS=Object.assign({},La),el}else{const Aa=Object.assign({},_GLOBAL_CUSTOM_OBJECTS);for(const La of Object.keys(xa))_GLOBAL_CUSTOM_OBJECTS[La]=xa[La];const Fa=new Ea(Ta.config);return _GLOBAL_CUSTOM_OBJECTS=Object.assign({},Aa),Fa}}}function numberCompare(ha,aa){return ha<aa?-1:ha>aa?1:0}function reverseNumberCompare(ha,aa){return-1*numberCompare(ha,aa)}function unique$3(ha){if(ha==null)return ha;const aa=[];for(const xa of ha)aa.indexOf(xa)===-1&&aa.push(xa);return aa}function isObjectEmpty(ha){if(ha==null)throw new ValueError(`Invalid value in obj: ${JSON.stringify(ha)}`);for(const aa in ha)if(ha.hasOwnProperty(aa))return!1;return!0}function checkStringTypeUnionValue(ha,aa,xa){if(xa!=null&&ha.indexOf(xa)<0)throw new ValueError(`${xa} is not a valid ${aa}.  Valid values are ${ha} or null/undefined.`)}function checkArrayTypeAndLength(ha,aa,xa=0,ba=1/0){return assert$1(xa>=0),assert$1(ba>=xa),Array.isArray(ha)&&ha.length>=xa&&ha.length<=ba&&ha.every(Sa=>typeof Sa===aa)}function assertPositiveInteger(ha,aa){Array.isArray(ha)?(assert$2(ha.length>0,()=>`${aa} is unexpectedly an empty array.`),ha.forEach((xa,ba)=>assertPositiveInteger(xa,`element ${ba+1} of ${aa}`))):assert$2(Number.isInteger(ha)&&ha>0,()=>`Expected ${aa} to be a positive integer, but got ${formatAsFriendlyString(ha)}.`)}function formatAsFriendlyString(ha){return ha===null?"null":Array.isArray(ha)?"["+ha.map(aa=>formatAsFriendlyString(aa)).join(",")+"]":typeof ha=="string"?`"${ha}"`:`${ha}`}function debounce(ha,aa,xa){let ba=xa!=null?xa():now$1(),Sa;return(...wa)=>{const Ea=xa!=null?xa():now$1();return Ea-ba<aa||(ba=Ea,Sa=ha(...wa)),Sa}}function mapActivationToFusedKernel(ha){return ha==="relu"?"relu":ha==="linear"?"linear":ha==="elu"?"elu":null}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let _nextUniqueTensorId=0;function getNextUniqueTensorId(){return _nextUniqueTensorId++}const _uidPrefixes={};function getUid(ha=""){return ha in _uidPrefixes||(_uidPrefixes[ha]=0),_uidPrefixes[ha]+=1,ha+_uidPrefixes[ha].toString()}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const VALID_DATA_FORMAT_VALUES=["channelsFirst","channelsLast"],VALID_INTERPOLATION_FORMAT_VALUES=["nearest","bilinear"],VALID_PADDING_MODE_VALUES=["valid","same","causal"],VALID_POOL_MODE_VALUES=["max","avg"],VALID_BIDIRECTIONAL_MERGE_MODES=["sum","mul","concat","ave"];/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const nameMap=new Map;function checkDataFormat(ha){checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES,"DataFormat",ha)}function checkInterpolationFormat(ha){checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES,"InterpolationFormat",ha)}function checkPaddingMode(ha){checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES,"PaddingMode",ha)}function checkPoolMode(ha){checkStringTypeUnionValue(VALID_POOL_MODE_VALUES,"PoolMode",ha)}const _nameScopeStack=[],_nameScopeDivider="/";function nameScope(ha,aa){_nameScopeStack.push(ha);try{const xa=aa();return _nameScopeStack.pop(),xa}catch(xa){throw _nameScopeStack.pop(),xa}}function currentNameScopePrefix(){return _nameScopeStack.length===0?"":_nameScopeStack.join(_nameScopeDivider)+_nameScopeDivider}function getScopedTensorName(ha){if(!isValidTensorName(ha))throw new Error("Not a valid tensor name: '"+ha+"'");return currentNameScopePrefix()+ha}function getUniqueTensorName(ha){if(!isValidTensorName(ha))throw new Error("Not a valid tensor name: '"+ha+"'");nameMap.has(ha)||nameMap.set(ha,0);const aa=nameMap.get(ha);if(nameMap.set(ha,nameMap.get(ha)+1),aa>0){const xa=`${ha}_${aa}`;return nameMap.set(xa,1),xa}else return ha}const tensorNameRegex=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function isValidTensorName(ha){return!!ha.match(tensorNameRegex)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isInteger(ha){return ha===parseInt(ha.toString(),10)}function arrayProd(ha,aa,xa){aa==null&&(aa=0),xa==null&&(xa=ha.length);let ba=1;for(let Sa=aa;Sa<xa;++Sa)ba*=ha[Sa];return ba}function min$3(ha){if(ha.length===0)return Number.NaN;let aa=Number.POSITIVE_INFINITY;for(let xa=0;xa<ha.length;xa++){const ba=ha[xa];ba<aa&&(aa=ba)}return aa}function max$3(ha){if(ha.length===0)return Number.NaN;let aa=Number.NEGATIVE_INFINITY;for(let xa=0;xa<ha.length;xa++){const ba=ha[xa];ba>aa&&(aa=ba)}return aa}function range$3(ha,aa){if(aa<ha)throw new ValueError(`end (${aa}) < begin (${ha}) is forbidden.`);const xa=[];for(let ba=ha;ba<aa;++ba)xa.push(ba);return xa}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let _epsilon;function epsilon$1(){return _epsilon==null&&(_epsilon=backend().epsilon()),_epsilon}function imageDataFormat(){return"channelsLast"}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function cast$4(ha,aa){return cast$5(ha,aa)}function expandDims$3(ha,aa=-1){const xa=ha.shape.slice();return aa<0&&(aa=xa.length+aa+1),xa.splice(aa,0,1),reshape$4(ha,xa)}function repeat(ha,aa){return tidy$1(()=>{if(ha.shape.length!==2)throw new ValueError(`repeat() expects a rank-2 tensor, but received a rank-${ha.shape.length} tensor.`);const xa=expandDims$3(ha,1);return tile$3(xa,[1,aa,1])})}function flatten$1(ha){const aa=[arrayProd(ha.shape)];return reshape$4(ha,aa)}function batchFlatten(ha){if(ha.rank<=1)throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${ha.rank}.`);const aa=[ha.shape[0],arrayProd(ha.shape,1)];return reshape$4(ha,aa)}function sliceAlongFirstAxis(ha,aa,xa){return tidy$1(()=>{switch(ha.rank){case 1:return slice1d(ha,aa,xa);case 2:return slice2d(ha,[aa,0],[xa,ha.shape[1]]);case 3:return slice3d(ha,[aa,0,0],[xa,ha.shape[1],ha.shape[2]]);case 4:return slice4d(ha,[aa,0,0,0],[xa,ha.shape[1],ha.shape[2],ha.shape[3]]);case 5:return slice$3(ha,[aa,0,0,0,0],[xa,ha.shape[1],ha.shape[2],ha.shape[3],ha.shape[4]]);case 6:return slice$3(ha,[aa,0,0,0,0,0],[xa,ha.shape[1],ha.shape[2],ha.shape[3],ha.shape[4],ha.shape[5]]);default:throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ${ha.rank}`)}})}function sliceAlongLastAxis(ha,aa,xa){return tidy$1(()=>{switch(ha.rank){case 1:return slice1d(ha,aa,xa);case 2:return slice2d(ha,[0,aa],[ha.shape[0],xa]);case 3:return slice3d(ha,[0,0,aa],[ha.shape[0],ha.shape[1],xa]);case 4:return slice4d(ha,[0,0,0,aa],[ha.shape[0],ha.shape[1],ha.shape[2],xa]);default:throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${ha.rank}`)}})}function sliceAlongAxis(ha,aa,xa,ba){return tidy$1(()=>{switch(ha.rank){case 1:return slice1d(ha,aa,xa);case 2:switch(ba){case 1:return sliceAlongFirstAxis(ha,aa,xa);case 2:return sliceAlongLastAxis(ha,aa,xa);default:throw new ValueError(`The axis is not within the rank of the tensor ${ba}`)}case 3:switch(ba){case 1:return sliceAlongFirstAxis(ha,aa,xa);case 2:return slice3d(ha,[0,aa,0],[ha.shape[0],xa,ha.shape[2]]);case 3:return sliceAlongLastAxis(ha,aa,xa);default:throw new ValueError(`The axis is not within the rank of the tensor ${ba}`)}case 4:switch(ba){case 1:return sliceAlongFirstAxis(ha,aa,xa);case 2:return slice4d(ha,[0,aa,0,0],[ha.shape[0],xa,ha.shape[2],ha.shape[3]]);case 3:return slice4d(ha,[0,0,aa,0],[ha.shape[0],ha.shape[1],xa,ha.shape[3]]);case 4:return sliceAlongLastAxis(ha,aa,xa);default:throw new ValueError(`The axis is not within the rank of the tensor ${ba}`)}default:throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${ha.rank}`)}})}function concatenate(ha,aa=-1){let xa;return aa<0&&(xa=ha[0].rank,xa!==0?aa=xa:aa=0),aa===ha[0].rank&&(aa=-1),concat$3(ha,aa)}function concatAlongFirstAxis(ha,aa){switch(ha.rank){case 1:return concat1d([ha,aa]);case 2:return concat2d([ha,aa],0);case 3:return concat3d([ha,aa],0);case 4:return concat4d([ha,aa],0);default:throw new ValueError(`concatAlongFirstAxis() received an unsupported tensor rank: ${ha.rank}`)}}function tile$3(ha,aa){if(Array.isArray(aa)||(aa=[aa]),ha.rank!==aa.length)throw new ValueError(`The length of input n (${aa.length}) does not match the number of dimensions in input x (${ha.rank})`);return tile$4(ha,aa)}function randomNormal(ha,aa=0,xa=1,ba,Sa){return randomNormal$1(ha,aa,xa,ba,Sa)}function dot(ha,aa,xa,ba){if(ha.rank<2||aa.rank<2)throw new NotImplementedError(`dot requires both inputs to be rank >= 2 but got x shape = ${ha.shape} and y shape = ${aa.shape}`);if(aa.rank>=3){const Sa=ha.shape.slice(-1)[0],Ta=aa.shape.slice(-2)[0];if(Sa!==Ta)throw new NotImplementedError(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${ha.shape} and  y shape = ${aa.shape}`)}if(ha.rank===2&&aa.rank===2)return matMul({a:ha,b:aa,transposeA:!1,transposeB:!1,bias:ba?reshapeBias(ha.rank,ba,imageDataFormat()):null,activation:xa});{const Sa=ha.shape.slice(),Ta=Sa.pop();ha=reshape$4(ha,[-1,Ta]);const wa=aa.shape.slice(),Ea=wa.pop(),ka=wa.pop(),Aa=[...wa,Ea],Fa=Array.from({length:aa.rank},(nl,rl)=>rl===0?aa.rank-2:rl<=aa.rank-2?rl-1:rl);aa=reshape$4(transpose$3(aa,Fa),[ka,-1]);const La=[...Sa,...Aa];return reshape$4(matMul({a:ha,b:aa,transposeA:!1,transposeB:!1,bias:ba?reshapeBias(ha.rank,ba,imageDataFormat()):null,activation:xa}),La)}}function gather(ha,aa,xa){return tidy$1(()=>(Array.isArray(aa)?aa=tensor1d(aa,"int32"):aa=cast$5(aa,"int32"),gather$1(ha,aa,xa)))}function square$3(ha){return mul$1(ha,ha)}function reshapeBias(ha,aa,xa){const ba=aa.shape;if(aa.rank!==1&&aa.rank!==ha)throw new ValueError(`Unexpected bias dimensions: ${aa.rank}; expected it to be 1 or ${ha}`);if(ha===5){if(xa==="channelsFirst")return ba.length===1?reshape$4(aa,[1,ba[0],1,1,1]):reshape$4(aa,[1,ba[3],ba[0],ba[1],ba[2]]);if(xa==="channelsLast")return ba.length===1?reshape$4(aa,[1,1,1,1,ba[0]]):reshape$4(aa,[1].concat(ba))}else if(ha===4){if(xa==="channelsFirst")return ba.length===1?reshape$4(aa,[1,ba[0],1,1]):reshape$4(aa,[1,ba[2],ba[0],ba[1]]);if(xa==="channelsLast")return ba.length===1?reshape$4(aa,[1,1,1,ba[0]]):reshape$4(aa,[1].concat(ba))}else if(ha===3){if(xa==="channelsFirst")return ba.length===1?reshape$4(aa,[1,ba[0],1]):reshape$4(aa,[1,ba[1],ba[0]]);if(xa==="channelsLast")return ba.length===1?reshape$4(aa,[1,1,ba[0]]):reshape$4(aa,[1].concat(ba))}else if(ha<3)return aa;throw new ValueError(`Unsupported input rank by biasAdd: ${aa.rank}`)}function biasAdd(ha,aa,xa){return tidy$1(()=>(xa==null&&(xa=imageDataFormat()),checkDataFormat(xa),add$3(ha,reshapeBias(ha.rank,aa,xa))))}function elu$4(ha,aa=1){if(aa!==1)throw new NotImplementedError(`Support for alpha values other than 1 (${aa}) is not implemented yet.`);return elu$5(ha)}function softsign(ha){return tidy$1(()=>div$2(ha,add$3(abs$4(ha),1)))}function dropout(ha,aa,xa,ba){return tidy$1(()=>dropout$1(ha,aa,xa,ba))}function hardSigmoid(ha){return tidy$1(()=>{const aa=add$3(.5,mul$1(.2,ha));return clipByValue$3(aa,0,1)})}function inTrainPhase(ha,aa,xa=!1){return xa?ha():aa()}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const VALID_FAN_MODE_VALUES=["fanIn","fanOut","fanAvg"],VALID_DISTRIBUTION_VALUES=["normal","uniform","truncatedNormal"];/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function checkFanMode(ha){checkStringTypeUnionValue(VALID_FAN_MODE_VALUES,"FanMode",ha)}function checkDistribution(ha){checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES,"Distribution",ha)}class Initializer extends Serializable$1{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Zeros extends Initializer{apply(aa,xa){return zeros$2(aa,xa)}}Zeros.className="Zeros",registerClass$1(Zeros);class Ones extends Initializer{apply(aa,xa){return ones$1(aa,xa)}}Ones.className="Ones",registerClass$1(Ones);class Constant extends Initializer{constructor(aa){if(super(),typeof aa!="object")throw new ValueError(`Expected argument of type ConstantConfig but got ${aa}`);if(aa.value===void 0)throw new ValueError(`config must have value set but got ${aa}`);this.value=aa.value}apply(aa,xa){return tidy$1(()=>mul$1(scalar$1(this.value),ones$1(aa,xa)))}getConfig(){return{value:this.value}}}Constant.className="Constant",registerClass$1(Constant);class RandomUniform extends Initializer{constructor(aa){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=aa.minval||this.DEFAULT_MINVAL,this.maxval=aa.maxval||this.DEFAULT_MAXVAL,this.seed=aa.seed}apply(aa,xa){return randomUniform(aa,this.minval,this.maxval,xa,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}RandomUniform.className="RandomUniform",registerClass$1(RandomUniform);class RandomNormal extends Initializer{constructor(aa){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=aa.mean||this.DEFAULT_MEAN,this.stddev=aa.stddev||this.DEFAULT_STDDEV,this.seed=aa.seed}apply(aa,xa){if(xa=xa||"float32",xa!=="float32"&&xa!=="int32")throw new NotImplementedError(`randomNormal does not support dType ${xa}.`);return randomNormal(aa,this.mean,this.stddev,xa,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}RandomNormal.className="RandomNormal",registerClass$1(RandomNormal);class TruncatedNormal extends Initializer{constructor(aa){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=aa.mean||this.DEFAULT_MEAN,this.stddev=aa.stddev||this.DEFAULT_STDDEV,this.seed=aa.seed}apply(aa,xa){if(xa=xa||"float32",xa!=="float32"&&xa!=="int32")throw new NotImplementedError(`truncatedNormal does not support dType ${xa}.`);return truncatedNormal(aa,this.mean,this.stddev,xa,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}TruncatedNormal.className="TruncatedNormal",registerClass$1(TruncatedNormal);let Identity$1=class extends Initializer{constructor(aa){super(),this.gain=aa.gain!=null?aa.gain:1}apply(aa,xa){return tidy$1(()=>{if(aa.length!==2||aa[0]!==aa[1])throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");return mul$1(this.gain,eye(aa[0]))})}getConfig(){return{gain:this.gain}}};Identity$1.className="Identity",registerClass$1(Identity$1);function computeFans(ha,aa="channelsLast"){let xa,ba;if(checkDataFormat(aa),ha.length===2)xa=ha[0],ba=ha[1];else if([3,4,5].indexOf(ha.length)!==-1){if(aa==="channelsFirst"){const Sa=arrayProd(ha,2);xa=ha[1]*Sa,ba=ha[0]*Sa}else if(aa==="channelsLast"){const Sa=arrayProd(ha,0,ha.length-2);xa=ha[ha.length-2]*Sa,ba=ha[ha.length-1]*Sa}}else{const Sa=arrayProd(ha);xa=Math.sqrt(Sa),ba=Math.sqrt(Sa)}return[xa,ba]}class VarianceScaling extends Initializer{constructor(aa){if(super(),aa.scale<0)throw new ValueError(`scale must be a positive float. Got: ${aa.scale}`);this.scale=aa.scale==null?1:aa.scale,this.mode=aa.mode==null?"fanIn":aa.mode,checkFanMode(this.mode),this.distribution=aa.distribution==null?"normal":aa.distribution,checkDistribution(this.distribution),this.seed=aa.seed}apply(aa,xa){const ba=computeFans(aa),Sa=ba[0],Ta=ba[1];let wa=this.scale;if(this.mode==="fanIn"?wa/=Math.max(1,Sa):this.mode==="fanOut"?wa/=Math.max(1,Ta):wa/=Math.max(1,(Sa+Ta)/2),this.distribution==="normal"){const Ea=Math.sqrt(wa);if(xa=xa||"float32",xa!=="float32"&&xa!=="int32")throw new NotImplementedError(`${this.getClassName()} does not support dType ${xa}.`);return truncatedNormal(aa,0,Ea,xa,this.seed)}else{const Ea=Math.sqrt(3*wa);return randomUniform(aa,-Ea,Ea,xa,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}VarianceScaling.className="VarianceScaling",registerClass$1(VarianceScaling);class GlorotUniform extends VarianceScaling{constructor(aa){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:aa==null?null:aa.seed})}getClassName(){return VarianceScaling.className}}GlorotUniform.className="GlorotUniform",registerClass$1(GlorotUniform);class GlorotNormal extends VarianceScaling{constructor(aa){super({scale:1,mode:"fanAvg",distribution:"normal",seed:aa==null?null:aa.seed})}getClassName(){return VarianceScaling.className}}GlorotNormal.className="GlorotNormal",registerClass$1(GlorotNormal);class HeNormal extends VarianceScaling{constructor(aa){super({scale:2,mode:"fanIn",distribution:"normal",seed:aa==null?null:aa.seed})}getClassName(){return VarianceScaling.className}}HeNormal.className="HeNormal",registerClass$1(HeNormal);class HeUniform extends VarianceScaling{constructor(aa){super({scale:2,mode:"fanIn",distribution:"uniform",seed:aa==null?null:aa.seed})}getClassName(){return VarianceScaling.className}}HeUniform.className="HeUniform",registerClass$1(HeUniform);class LeCunNormal extends VarianceScaling{constructor(aa){super({scale:1,mode:"fanIn",distribution:"normal",seed:aa==null?null:aa.seed})}getClassName(){return VarianceScaling.className}}LeCunNormal.className="LeCunNormal",registerClass$1(LeCunNormal);class LeCunUniform extends VarianceScaling{constructor(aa){super({scale:1,mode:"fanIn",distribution:"uniform",seed:aa==null?null:aa.seed})}getClassName(){return VarianceScaling.className}}LeCunUniform.className="LeCunUniform",registerClass$1(LeCunUniform);class Orthogonal extends Initializer{constructor(aa){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=aa.gain==null?this.DEFAULT_GAIN:aa.gain,this.seed=aa.seed}apply(aa,xa){return tidy$1(()=>{if(aa.length<2)throw new NotImplementedError("Shape must be at least 2D.");if(xa!=="int32"&&xa!=="float32"&&xa!==void 0)throw new TypeError(`Unsupported data type ${xa}.`);xa=xa;const ba=sizeFromShape$1(aa.slice(0,-1)),Sa=aa[aa.length-1],Ta=ba*Sa;Ta>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${Ta}) elements: Slowness may result.`);const wa=[Math.max(Sa,ba),Math.min(Sa,ba)],Ea=randomNormal(wa,0,1,xa,this.seed),ka=linalg.qr(Ea,!1);let Aa=ka[0];const La=ka[1].flatten().stridedSlice([0],[Math.min(Sa,ba)*Math.min(Sa,ba)],[Math.min(Sa,ba)+1]);return Aa=mul$1(Aa,La.sign()),ba<Sa&&(Aa=Aa.transpose()),mul$1(scalar$1(this.gain),Aa.reshape(aa))})}getConfig(){return{gain:this.gain,seed:this.seed}}}Orthogonal.className="Orthogonal",registerClass$1(Orthogonal);const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function deserializeInitializer(ha,aa={}){return deserializeKerasObject(ha,SerializationMap$1.getMap().classNameMap,aa,"initializer")}function serializeInitializer(ha){return serializeKerasObject(ha)}function getInitializer(ha){if(typeof ha=="string"){const aa=ha in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[ha]:ha;if(aa==="GlorotNormal")return new GlorotNormal;if(aa==="GlorotUniform")return new GlorotUniform;if(aa==="HeNormal")return new HeNormal;if(aa==="HeUniform")return new HeUniform;if(aa==="LeCunNormal")return new LeCunNormal;if(aa==="LeCunUniform")return new LeCunUniform;{const xa={};return xa.className=aa,xa.config={},deserializeInitializer(xa)}}else return ha instanceof Initializer?ha:deserializeInitializer(ha)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isArrayOfShapes(ha){return Array.isArray(ha)&&Array.isArray(ha[0])}function normalizeShapeList(ha){return ha.length===0?[]:Array.isArray(ha[0])?ha:[ha]}function getExactlyOneTensor(ha){let aa;if(Array.isArray(ha)){if(ha.length!==1)throw new ValueError(`Expected Tensor length to be 1; got ${ha.length}`);aa=ha[0]}else aa=ha;return aa}function getExactlyOneShape(ha){if(Array.isArray(ha)&&Array.isArray(ha[0])){if(ha.length===1)return ha=ha,ha[0];throw new ValueError(`Expected exactly 1 Shape; got ${ha.length}`)}else return ha}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function countParamsInWeights(ha){let aa=0;for(const xa of ha)xa.shape.length===0?aa+=1:aa+=xa.shape.reduce((ba,Sa)=>ba*Sa);return aa}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const DEFAULT_VARIABLE_NAME_PREFIX="Variable";class LayerVariable{constructor(aa,xa="float32",ba=DEFAULT_VARIABLE_NAME_PREFIX,Sa=!0,Ta=null){this.dtype=xa??"float32",this.shape=aa.shape,this.id=getNextUniqueTensorId(),ba=ba??DEFAULT_VARIABLE_NAME_PREFIX,this.originalName=getScopedTensorName(ba),this.name=getUniqueTensorName(this.originalName),this.trainable_=Sa,this.constraint=Ta,this.val=variable(aa,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(aa){return this.assertNotDisposed(),checkShapesMatch(this.val,aa),this.val.id!==aa.id&&(this.val.assign(aa),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(aa){this.trainable_=aa,this.val.trainable=aa}}function checkShapesMatch(ha,aa){if(ha.shape.toString()!==aa.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(ha.shape)+" vs. "+JSON.stringify(aa.shape))}function batchGetValue(ha){return ha.map(aa=>aa.read())}function batchSetValue(ha){ha.forEach(aa=>{aa[0].write(aa[1])})}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class InputSpec{constructor(aa){this.dtype=aa.dtype,this.shape=aa.shape,aa.shape!=null?this.ndim=aa.shape.length:this.ndim=aa.ndim,this.maxNDim=aa.maxNDim,this.minNDim=aa.minNDim,this.axes=aa.axes||{}}}class SymbolicTensor{constructor(aa,xa,ba,Sa,Ta,wa,Ea){this.dtype=aa,this.shape=xa,this.sourceLayer=ba,this.inputs=Sa,this.callArgs=Ta,this.outputTensorIndex=Ea,this.id=getNextUniqueTensorId(),wa!=null&&(this.originalName=getScopedTensorName(wa),this.name=getUniqueTensorName(this.originalName)),this.rank=xa.length}}let _nextNodeID=0;class Node{constructor(aa,xa){this.callArgs=xa,this.id=_nextNodeID++,this.outboundLayer=aa.outboundLayer,this.inboundLayers=aa.inboundLayers,this.nodeIndices=aa.nodeIndices,this.tensorIndices=aa.tensorIndices,this.inputTensors=aa.inputTensors,this.outputTensors=aa.outputTensors,this.inputMasks=aa.inputMasks,this.outputMasks=aa.outputMasks,this.inputShapes=aa.inputShapes,this.outputShapes=aa.outputShapes;for(const ba of aa.inboundLayers)ba!=null&&ba.outboundNodes.push(this);aa.outboundLayer.inboundNodes.push(this)}getConfig(){const aa=[];for(const xa of this.inboundLayers)xa!=null?aa.push(xa.name):aa.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:aa,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let _nextLayerID=0;class Layer extends Serializable$1{constructor(aa={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=_nextLayerID++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let xa=aa.name;if(!xa){const ba=this.getClassName();xa=toSnakeCase(ba)+"_"+getUid(ba)}if(this.name=xa,this.trainable_=aa.trainable==null?!0:aa.trainable,aa.inputShape!=null||aa.batchInputShape!=null){let ba;if(aa.batchInputShape!=null)ba=aa.batchInputShape;else if(aa.inputShape!=null){let Ta=null;aa.batchSize!=null&&(Ta=aa.batchSize),ba=[Ta].concat(aa.inputShape)}this.batchInputShape=ba;let Sa=aa.dtype;Sa==null&&(Sa=aa.inputDType),Sa==null&&(Sa="float32"),this.dtype=Sa}aa.weights!=null?this.initialWeights=aa.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(aa,xa){return aa.name+"_ib-"+xa.toString()}getNodeAtIndex(aa,xa){if(this.inboundNodes.length===0)throw new RuntimeError(`The layer has never been called and thus has no defined ${xa}.`);if(this.inboundNodes.length<=aa)throw new ValueError(`Asked to get ${xa} at node ${aa}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[aa]}getInputAt(aa){return singletonOrArray(this.getNodeAtIndex(aa,"input").inputTensors)}getOutputAt(aa){return singletonOrArray(this.getNodeAtIndex(aa,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new AttributeError(`Layer ${this.name} is not connected, no input to return.`);return singletonOrArray(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new AttributeError(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return singletonOrArray(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(aa=>aa())}get updates(){return this._updates}get built(){return this._built}set built(aa){this._built=aa}get trainable(){return this.trainable_}set trainable(aa){this._trainableWeights.forEach(xa=>xa.trainable=aa),this.trainable_=aa}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(aa=>aa.trainable):[]}set trainableWeights(aa){this._trainableWeights=aa}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(aa=>!aa.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(aa){this._nonTrainableWeights=aa}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(aa){const xa=toList(aa);if(this.inputSpec==null||this.inputSpec.length===0)return;const ba=toList(this.inputSpec);if(xa.length!==ba.length)throw new ValueError(`Layer ${this.name} expects ${ba.length} inputs, but it received ${xa.length} input tensors. Input received: ${aa}`);for(let Sa=0;Sa<xa.length;Sa++){const Ta=xa[Sa],wa=ba[Sa];if(wa==null)continue;const Ea=Ta.rank;if(wa.ndim!=null&&Ea!==wa.ndim)throw new ValueError(`Input ${Sa} is incompatible with layer ${this.name}: expected ndim=${wa.ndim}, found ndim=${Ea}`);if(wa.maxNDim!=null&&Ea>wa.maxNDim)throw new ValueError(`Input ${Sa} is incompatible with layer ${this.name}: expected max_ndim=${wa.maxNDim}, found ndim=${Ea}`);if(wa.minNDim!=null&&Ea<wa.minNDim)throw new ValueError(`Input ${Sa} is incompatible with layer ${this.name}: expected min_ndim=${wa.minNDim}, found ndim=${Ea}.`);if(wa.dtype!=null&&Ta.dtype!==wa.dtype)throw new ValueError(`Input ${Sa} is incompatible with layer ${this.name} : expected dtype=${wa.dtype}, found dtype=${Ta.dtype}.`);if(wa.axes){const ka=Ta.shape;for(const Aa in wa.axes){const Fa=Number(Aa),La=wa.axes[Aa],el=Fa>=0?ka[Fa]:ka[ka.length+Fa];if(La!=null&&[La,null].indexOf(el)===-1)throw new ValueError(`Input ${Sa} is incompatible with layer ${this.name}: expected axis ${Fa} of input shape to have value ${La} but got shape ${ka}.`)}}if(wa.shape!=null)for(let ka=0;ka<wa.shape.length;++ka){const Aa=wa.shape[ka],Fa=Ta.shape[ka];if(Aa!=null&&Fa!=null&&Aa!==Fa)throw new ValueError(`Input ${Sa} is incompatible with layer ${this.name}: expected shape=${wa.shape}, found shape=${Ta.shape}.`)}}}call(aa,xa){return aa}invokeCallHook(aa,xa){this._callHook!=null&&this._callHook(aa,xa)}setCallHook(aa){this._callHook=aa}clearCallHook(){this._callHook=null}apply(aa,xa){xa=xa||{},this.assertNotDisposed();const ba=toList(aa),Sa=checkAllSymbolic(aa),Ta=checkNoneSymbolic(aa);if(Sa===Ta)throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");return nameScope(this.name,()=>{if(!this.built){this.assertInputCompatibility(aa);const wa=[];for(const Ea of toList(aa))wa.push(Ea.shape);this.build(singletonOrArray(wa)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&Ta&&(this._refCount=1)}if(this.assertInputCompatibility(aa),Ta){let wa=this.call(aa,xa);this.supportsMasking&&this.setMaskMetadata(aa,wa);const Ea=toList(wa),ka=[];for(let Aa of Ea)ba.indexOf(Aa)!==-1&&(Aa=Aa.clone()),ka.push(Aa);if(wa=singletonOrArray(ka),this.activityRegularizer!=null)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return wa}else{const wa=collectInputShape(aa),Ea=this.computeOutputShape(wa);let ka;const Aa=guessOutputDType(aa);if(this.warnOnIncompatibleInputShape(Array.isArray(aa)?wa[0]:wa),Ea!=null&&Ea.length>0&&Array.isArray(Ea[0])?ka=Ea.map((Fa,La)=>new SymbolicTensor(Aa,Fa,this,toList(aa),xa,this.name,La)):ka=new SymbolicTensor(Aa,Ea,this,toList(aa),xa,this.name),this.addInboundNode(aa,ka,null,null,wa,Ea,xa),this._refCount++,this.activityRegularizer!=null)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return ka}})}warnOnIncompatibleInputShape(aa){if(this.batchInputShape!=null)if(aa.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(aa)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let xa=!1;this.batchInputShape.forEach((ba,Sa)=>{ba!=null&&aa[Sa]!=null&&aa[Sa]!==ba&&(xa=!0)}),xa&&console.warn(`The shape of the input tensor (${JSON.stringify(aa)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new AttributeError(`The layer ${this.name} has never been called and thus has no defined output shape.`);const aa=[];for(const xa of this.inboundNodes){const ba=JSON.stringify(xa.outputShapes);aa.indexOf(ba)===-1&&aa.push(ba)}if(aa.length===1){const xa=this.inboundNodes[0].outputShapes;return Array.isArray(xa)&&Array.isArray(xa[0])&&xa.length===1?xa[0]:xa}else throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new RuntimeError(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return countParamsInWeights(this.weights)}build(aa){this.built=!0}getWeights(aa=!1){return batchGetValue(aa?this.trainableWeights:this.weights)}setWeights(aa){tidy$1(()=>{const xa=this.weights;if(xa.length!==aa.length)throw new ValueError(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${aa.length}, but the layer was expecting ${xa.length} weights. Provided weights: ${aa}...`);if(xa.length===0)return;const ba=[],Sa=batchGetValue(xa);for(let Ta=0;Ta<Sa.length;++Ta){const wa=Sa[Ta],Ea=xa[Ta],ka=aa[Ta];if(!arraysEqual$1(wa.shape,ka.shape))throw new ValueError(`Layer weight shape ${wa.shape} not compatible with provided weight shape ${ka.shape}`);ba.push([Ea,ka])}batchSetValue(ba)})}addWeight(aa,xa,ba,Sa,Ta,wa,Ea,ka){if(this._addedWeightNames.indexOf(aa)!==-1)throw new ValueError(`Duplicate weight name ${aa} for layer ${this.name}`);this._addedWeightNames.push(aa),ba==null&&(ba="float32"),this.fastWeightInitDuringBuild&&(Sa=ka!=null?ka():getInitializer("zeros"));const Aa=Sa.apply(xa,ba),Fa=new LayerVariable(Aa,ba,aa,wa,Ea);return Aa.dispose(),Ta!=null&&this.addLoss(()=>Ta.apply(Fa.read())),wa==null&&(wa=!0),wa?this._trainableWeights.push(Fa):this._nonTrainableWeights.push(Fa),Fa}setFastWeightInitDuringBuild(aa){this.fastWeightInitDuringBuild=aa}addLoss(aa){aa==null||Array.isArray(aa)&&aa.length===0||(aa=toList(aa),this._losses!==void 0&&this._losses!==null&&this.losses.push(...aa))}computeOutputShape(aa){return aa}computeMask(aa,xa){if(!this.supportsMasking){if(xa!=null)if(Array.isArray(xa))xa.forEach(ba=>{if(ba!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return xa}setMaskMetadata(aa,xa,ba){if(!this.supportsMasking)return;const Sa=this.computeMask(aa,ba),Ta=toList(xa),wa=toList(Sa);if(Ta.length!==wa.length)throw new Error(`${this.name} outputs ${Ta.length} tensors but ${Ta.length} masks for those tensors`);for(let Ea=0;Ea<Ta.length;Ea++)Ta[Ea].kerasMask=wa[Ea]}addInboundNode(aa,xa,ba,Sa,Ta,wa,Ea=null){const ka=toList(aa);xa=toList(xa),ba=toList(ba),Sa=toList(Sa),Ta=normalizeShapeList(Ta),wa=normalizeShapeList(wa);const Aa=[],Fa=[],La=[];for(const el of ka)Aa.push(el.sourceLayer),Fa.push(el.nodeIndex),La.push(el.tensorIndex);new Node({outboundLayer:this,inboundLayers:Aa,nodeIndices:Fa,tensorIndices:La,inputTensors:ka,outputTensors:xa,inputMasks:ba,outputMasks:Sa,inputShapes:Ta,outputShapes:wa},Ea);for(let el=0;el<xa.length;el++)xa[el].sourceLayer=this,xa[el].nodeIndex=this.inboundNodes.length-1,xa[el].tensorIndex=el}getConfig(){const aa={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(aa.batchInputShape=this.batchInputShape),this.dtype!=null&&(aa.dtype=this.dtype),aa}disposeWeights(){return this.weights.forEach(aa=>aa.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let aa=0;return--this._refCount===0&&(aa=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:aa}}}function collectInputShape(ha){ha=toList(ha);const aa=[];for(const xa of ha)aa.push(xa.shape);return singletonOrArray(aa)}function guessOutputDType(ha){return"float32"}function getSourceInputs(ha,aa,xa){if((aa==null||xa!=null&&xa>0)&&(aa=ha.sourceLayer,xa=ha.nodeIndex),aa.inboundNodes.length===0)return[ha];{const ba=aa.inboundNodes[xa];if(ba.inboundLayers.length===0)return ba.inputTensors;{const Sa=[];for(let Ta=0;Ta<ba.inboundLayers.length;Ta++){const wa=ba.inputTensors[Ta],Ea=ba.inboundLayers[Ta],ka=ba.nodeIndices[Ta],Aa=getSourceInputs(wa,Ea,ka);for(const Fa of Aa)Sa.indexOf(Fa)===-1&&Sa.push(Fa)}return Sa}}}function checkAllSymbolic(ha){let aa=!0;for(const xa of toList(ha))if(!(xa instanceof SymbolicTensor)){aa=!1;break}return aa}function checkNoneSymbolic(ha){let aa=!0;for(const xa of toList(ha))if(xa instanceof SymbolicTensor){aa=!1;break}return aa}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class InputLayer extends Layer{constructor(aa){if(super({dtype:aa.dtype,name:aa.name!=null?aa.name:getUid("input").toString()}),aa.batchSize==null&&(aa.batchSize=null),aa.sparse==null&&(aa.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=aa.sparse,aa.inputShape!=null&&aa.batchInputShape!=null)throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let xa=aa.batchInputShape;if(xa==null){if(aa.inputShape==null)throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");xa=[aa.batchSize].concat(aa.inputShape)}else if(aa.batchSize!=null)throw new ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const ba=aa.dtype||"float32";this.batchInputShape=xa,this.dtype=ba,this.inputSpec=[{shape:xa}];const Sa=new SymbolicTensor(this.dtype,this.batchInputShape,this,[],{},this.name);Sa.nodeIndex=0,Sa.tensorIndex=0,new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[Sa],outputTensors:[Sa],inputMasks:[null],outputMasks:[null],inputShapes:[xa],outputShapes:[xa]})}apply(aa,xa){throw new ValueError(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}InputLayer.className="InputLayer",registerClass$1(InputLayer);function Input(ha){if(ha.batchShape==null&&ha.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(ha.batchShape!=null&&ha.shape!=null)throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let aa=ha.batchShape;ha.shape!=null&&aa==null&&(aa=[null].concat(ha.shape));let xa=ha.dtype;return xa==null&&(xa="float32"),new InputLayer({batchInputShape:aa,name:ha.name,dtype:xa,sparse:ha.sparse}).inboundNodes[0].outputTensors[0]}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function assertFeedCompatibility(ha,aa){if(ha.dtype==null||ha.dtype===aa.dtype)return aa;try{return cast$5(aa,ha.dtype)}catch{throw new ValueError(`The dtype of the feed (${aa.dtype}) can not be cast to the dtype of the key '${ha.name}' (${ha.dtype}).`)}}class FeedDict{constructor(aa){if(this.id2Value={},this.id2Mask={},this.name2Id={},aa instanceof FeedDict)for(const xa in aa.id2Value)this.id2Value[xa]=aa.id2Value[xa],xa in aa.id2Mask&&(this.id2Mask[xa]=aa.id2Mask[xa]);else{if(aa==null)return;for(const xa of aa)this.add(xa.key,xa.value)}}add(aa,xa,ba){if(this.id2Value[aa.id]==null)this.id2Value[aa.id]=assertFeedCompatibility(aa,xa),this.name2Id[aa.name]=aa.id,ba!=null&&(this.id2Mask[aa.id]=ba);else throw new ValueError(`Duplicate key: name=${aa.name}, id=${aa.id}`);return this}addFeed(aa){this.add(aa.key,aa.value)}hasKey(aa){return this.id2Value[aa.id]!=null}names(){return Object.keys(this.name2Id)}getValue(aa){if(aa instanceof SymbolicTensor){if(this.id2Value[aa.id]==null)throw new ValueError(`Nonexistent key: ${aa.name}`);return this.id2Value[aa.id]}else{const xa=this.name2Id[aa];if(xa==null)throw new ValueError(`Feed dict has no SymbolicTensor name: ${aa}`);return this.id2Value[xa]}}getMask(aa){if(aa instanceof SymbolicTensor){if(this.id2Value[aa.id]==null)throw new ValueError(`Nonexistent key: ${aa.name}`);return this.id2Mask[aa.id]}else{const xa=this.name2Id[aa];if(xa==null)throw new ValueError(`Feed dict has no SymbolicTensor name: ${aa}`);return this.id2Mask[xa]}}disposeMasks(){this.id2Mask!=null&&dispose$1(this.id2Mask)}}const cachedSorted=new LruCache,cachedRecipientCounts=new LruCache;function updateCacheMaxEntries(ha){cachedSorted!=null&&cachedSorted.setMaxEntries(ha),cachedRecipientCounts!=null&&cachedRecipientCounts.setMaxEntries(ha)}function execute(ha,aa,xa,ba){const Sa=xa==null?!1:xa.training,Ta=Array.isArray(ha),wa=Ta?ha:[ha],Ea=wa.map(nl=>nl.name),ka=[],Aa=aa.names();for(const nl of Ea)Aa.indexOf(nl)!==-1?ka.push(aa.getValue(nl)):ka.push(null);const Fa=Ea.join(",")+"|"+aa.names().sort().join(",");let La=cachedSorted.get(Fa),el;if(La==null){const nl=getTopologicalSortAndRecipientCounts(wa,aa);La=nl.sorted,el=nl.recipientCounts,cachedSorted.put(Fa,La),cachedRecipientCounts.put(Fa,el)}el={},Sa||Object.assign(el,cachedRecipientCounts.get(Fa));const tl=new FeedDict(aa);for(let nl=0;nl<La.length;++nl){const rl=La[nl],sl=rl.sourceLayer;if(sl instanceof InputLayer)continue;const ol=[],al=[],ll=[];let il=!1;for(const pl of rl.inputs){const fl=tl.getValue(pl),ml=tl.getMask(pl);ol.push(fl),al.push(ml),ml!=null&&(il=!0),Sa||(el[pl.name]--,el[pl.name]===0&&!aa.hasKey(pl)&&Ea.indexOf(pl.name)===-1&&!fl.isDisposed&&pl.sourceLayer.stateful!==!0&&ll.push(fl))}il&&(xa=xa||{},xa.mask=al[0]);const cl=toList(sl.apply(ol,xa));let ul=null;sl.supportsMasking&&(ul=sl.computeMask(ol,al));const dl=getNodeOutputs(rl),hl=Array.isArray(dl)?dl:[dl];for(let pl=0;pl<hl.length;++pl){tl.hasKey(hl[pl])||tl.add(hl[pl],cl[pl],Array.isArray(ul)?ul[0]:ul);const fl=Ea.indexOf(hl[pl].name);fl!==-1&&(ka[fl]=cl[pl])}Sa||dispose$1(ll)}return tl.disposeMasks(),Ta?ka:ka[0]}function getTopologicalSortAndRecipientCounts(ha,aa){assert$2(ha!=null&&ha.length>0,()=>"Expected at least one fetch, got none");let xa=[],ba={};if(ha.length===1){const Sa=getTopologicalSortAndRecipientCountsForOneFetch(ha[0],aa);xa=Sa.sorted,ba=Sa.recipientMap}else{const Sa=new Set;for(const Ta of ha){const{sorted:wa,recipientMap:Ea}=getTopologicalSortAndRecipientCountsForOneFetch(Ta,aa);for(const ka of wa)Sa.has(ka.name)||(xa.push(ka),Sa.add(ka.name));for(const ka in Ea)ba[ka]==null&&(ba[ka]=new Set),Ea[ka].forEach(Aa=>ba[ka].add(Aa))}}return{sorted:xa,recipientCounts:recipientMap2Counts(ba)}}function recipientMap2Counts(ha){const aa={};for(const xa in ha)aa[xa]=ha[xa].size;return aa}function getTopologicalSortAndRecipientCountsForOneFetch(ha,aa){const xa=new Set,ba=[],Sa={};for(const Ea of aa.names())xa.add(Ea);const Ta=[],wa=[];for(Ta.push(ha);Ta.length>0;){const Ea=Ta[Ta.length-1];if(xa.has(Ea.name)){Ta.pop();continue}const ka=wa[wa.length-1]===Ta.length-1;if(Ea.inputs.length===0||ka)Ta.pop(),ba.push(Ea),xa.add(Ea.name),ka&&wa.pop();else{wa.push(Ta.length-1);for(const Aa of Ea.inputs)Sa[Aa.name]==null&&(Sa[Aa.name]=new Set),Sa[Aa.name].add(Ea.name),!xa.has(Aa.name)&&Ta.push(Aa)}}return{sorted:ba,recipientMap:Sa}}function getNodeOutputs(ha){let aa;if(ha.sourceLayer.inboundNodes.length===1)aa=ha.sourceLayer.output;else{let xa=null;for(let ba=0;ba<ha.sourceLayer.inboundNodes.length;++ba)for(const Sa of ha.sourceLayer.inboundNodes[ba].outputTensors)if(Sa.id===ha.id){xa=ba;break}aa=ha.sourceLayer.getOutputAt(xa)}return aa}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$5=env$1();ENV$5.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,updateCacheMaxEntries);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function calcL2Norms(ha,aa){return tidy$1(()=>sqrt$4(sum$5(mul$1(ha,ha),aa,!0)))}class Constraint extends Serializable$1{getConfig(){return{}}}class MaxNorm extends Constraint{constructor(aa){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=aa.maxValue!=null?aa.maxValue:this.defaultMaxValue,this.axis=aa.axis!=null?aa.axis:this.defaultAxis}apply(aa){return tidy$1(()=>{const xa=calcL2Norms(aa,this.axis),ba=clipByValue$3(xa,0,this.maxValue);return mul$1(aa,div$2(ba,add$3(epsilon$1(),xa)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}MaxNorm.className="MaxNorm",registerClass$1(MaxNorm);class UnitNorm extends Constraint{constructor(aa){super(),this.defaultAxis=0,this.axis=aa.axis!=null?aa.axis:this.defaultAxis}apply(aa){return tidy$1(()=>div$2(aa,add$3(epsilon$1(),calcL2Norms(aa,this.axis))))}getConfig(){return{axis:this.axis}}}UnitNorm.className="UnitNorm",registerClass$1(UnitNorm);class NonNeg extends Constraint{apply(aa){return relu$4(aa)}}NonNeg.className="NonNeg",registerClass$1(NonNeg);class MinMaxNorm extends Constraint{constructor(aa){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=aa.minValue!=null?aa.minValue:this.defaultMinValue,this.maxValue=aa.maxValue!=null?aa.maxValue:this.defaultMaxValue,this.rate=aa.rate!=null?aa.rate:this.defaultRate,this.axis=aa.axis!=null?aa.axis:this.defaultAxis}apply(aa){return tidy$1(()=>{const xa=calcL2Norms(aa,this.axis),ba=add$3(mul$1(this.rate,clipByValue$3(xa,this.minValue,this.maxValue)),mul$1(1-this.rate,xa));return mul$1(aa,div$2(ba,add$3(epsilon$1(),xa)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}MinMaxNorm.className="MinMaxNorm",registerClass$1(MinMaxNorm);const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function serializeConstraint(ha){return serializeKerasObject(ha)}function deserializeConstraint(ha,aa={}){return deserializeKerasObject(ha,SerializationMap$1.getMap().classNameMap,aa,"constraint")}function getConstraint(ha){if(ha==null)return null;if(typeof ha=="string"){const xa={className:ha in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP?CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[ha]:ha,config:{}};return deserializeConstraint(xa)}else return ha instanceof Constraint?ha:deserializeConstraint(ha)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */async function resolveScalarsInLogs(ha){if(ha==null)return;const aa=[],xa=[],ba=[];for(const Sa in ha){const Ta=ha[Sa];if(typeof Ta!="number"){const wa=Ta;aa.push(wa.data()),xa.push(Sa),ba.push(wa)}}if(aa.length>0){const Sa=await Promise.all(aa);for(let Ta=0;Ta<Sa.length;++Ta)ha[xa[Ta]]=Sa[Ta][0];dispose$1(ba)}}function disposeTensorsInLogs(ha){if(ha!=null)for(const aa in ha){const xa=ha[aa];typeof xa!="number"&&xa.dispose()}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var ModelLoggingVerbosity;(function(ha){ha[ha.SILENT=0]="SILENT",ha[ha.VERBOSE=1]="VERBOSE"})(ModelLoggingVerbosity||(ModelLoggingVerbosity={}));const DEFAULT_YIELD_EVERY_MS=125;class BaseCallback{constructor(){this.validationData=null}setParams(aa){this.params=aa}async onEpochBegin(aa,xa){}async onEpochEnd(aa,xa){}async onBatchBegin(aa,xa){}async onBatchEnd(aa,xa){}async onTrainBegin(aa){}async onTrainEnd(aa){}setModel(aa){}}class CallbackList{constructor(aa,xa=10){aa==null&&(aa=[]),this.callbacks=aa,this.queueLength=xa}append(aa){this.callbacks.push(aa)}setParams(aa){for(const xa of this.callbacks)xa.setParams(aa)}setModel(aa){for(const xa of this.callbacks)xa.setModel(aa)}async onEpochBegin(aa,xa){xa==null&&(xa={});for(const ba of this.callbacks)await ba.onEpochBegin(aa,xa)}async onEpochEnd(aa,xa){xa==null&&(xa={});for(const ba of this.callbacks)await ba.onEpochEnd(aa,xa)}async onBatchBegin(aa,xa){xa==null&&(xa={});for(const ba of this.callbacks)await ba.onBatchBegin(aa,xa)}async onBatchEnd(aa,xa){xa==null&&(xa={});for(const ba of this.callbacks)await ba.onBatchEnd(aa,xa)}async onTrainBegin(aa){aa==null&&(aa={});for(const xa of this.callbacks)await xa.onTrainBegin(aa)}async onTrainEnd(aa){aa==null&&(aa={});for(const xa of this.callbacks)await xa.onTrainEnd(aa)}}class BaseLogger extends BaseCallback{constructor(){super()}async onEpochBegin(aa){this.seen=0,this.totals={}}async onBatchEnd(aa,xa){xa==null&&(xa={});const ba=xa.size==null?0:xa.size;this.seen+=ba;for(const Sa in xa){const Ta=xa[Sa];if(typeof Ta=="number")this.totals.hasOwnProperty(Sa)||(this.totals[Sa]=0),this.totals[Sa]=this.totals[Sa]+Ta*ba;else{let wa;Sa in this.totals?wa=this.totals[Sa]:this.totals[Sa]=0;const Ea=tidy$1(()=>add$3(this.totals[Sa],mul$1(Ta,ba)));this.totals[Sa]=Ea,wa!=null&&wa.dispose()}}}async onEpochEnd(aa,xa){if(xa!=null)for(const ba of this.params.metrics)this.totals[ba]!=null&&(typeof this.totals[ba]=="number"?xa[ba]=this.totals[ba]/this.seen:tidy$1(()=>{const Sa=mul$1(div$2(1,this.seen),this.totals[ba]);xa[ba]=Sa,this.totals[ba].dispose(),keep$1(xa[ba])}))}}class History extends BaseCallback{async onTrainBegin(aa){this.epoch=[],this.history={}}async onEpochEnd(aa,xa){xa==null&&(xa={}),this.epoch.push(aa);for(const ba in xa)this.history[ba]==null&&(this.history[ba]=[]),this.history[ba].push(xa[ba])}async syncData(){const aa=[],xa=[],ba=[];for(const Ta in this.history){const wa=this.history[Ta];for(let Ea=0;Ea<wa.length;++Ea)if(typeof wa[Ea]!="number"){const ka=wa[Ea];aa.push(ka.data()),xa.push(Ta),ba.push(Ea)}}const Sa=await Promise.all(aa);for(let Ta=0;Ta<Sa.length;++Ta)this.history[xa[Ta]][ba[Ta]].dispose(),this.history[xa[Ta]][ba[Ta]]=Sa[Ta][0]}}class CustomCallback extends BaseCallback{constructor(aa,xa){if(super(),this.currentEpoch=0,this.nowFunc=aa.nowFunc,this.nextFrameFunc=aa.nextFrameFunc||nextFrame$1,this.yieldEvery=xa||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=DEFAULT_YIELD_EVERY_MS),this.yieldEvery==="never"&&aa.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");isNumber$1(this.yieldEvery)&&(this.maybeWait=debounce(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=aa.onTrainBegin,this.trainEnd=aa.onTrainEnd,this.epochBegin=aa.onEpochBegin,this.epochEnd=aa.onEpochEnd,this.batchBegin=aa.onBatchBegin,this.batchEnd=aa.onBatchEnd,this.yield=aa.onYield}async maybeWait(aa,xa,ba){const Sa=[];this.yield!=null&&(await resolveScalarsInLogs(ba),Sa.push(this.yield(aa,xa,ba))),Sa.push(this.nextFrameFunc()),await Promise.all(Sa)}async onEpochBegin(aa,xa){this.currentEpoch=aa,this.epochBegin!=null&&(await resolveScalarsInLogs(xa),await this.epochBegin(aa,xa))}async onEpochEnd(aa,xa){const ba=[];this.epochEnd!=null&&(await resolveScalarsInLogs(xa),ba.push(this.epochEnd(aa,xa))),this.yieldEvery==="epoch"&&ba.push(this.nextFrameFunc()),await Promise.all(ba)}async onBatchBegin(aa,xa){this.batchBegin!=null&&(await resolveScalarsInLogs(xa),await this.batchBegin(aa,xa))}async onBatchEnd(aa,xa){const ba=[];this.batchEnd!=null&&(await resolveScalarsInLogs(xa),ba.push(this.batchEnd(aa,xa))),this.yieldEvery==="batch"?ba.push(this.nextFrameFunc()):isNumber$1(this.yieldEvery)&&ba.push(this.maybeWait(this.currentEpoch,aa,xa)),await Promise.all(ba)}async onTrainBegin(aa){this.trainBegin!=null&&(await resolveScalarsInLogs(aa),await this.trainBegin(aa))}async onTrainEnd(aa){this.trainEnd!=null&&(await resolveScalarsInLogs(aa),await this.trainEnd(aa))}}function standardizeCallbacks(ha,aa){return ha==null&&(ha={}),ha instanceof BaseCallback?[ha]:Array.isArray(ha)&&ha[0]instanceof BaseCallback?ha:toList(ha).map(ba=>new CustomCallback(ba,aa))}class CallbackConstructorRegistry{constructor(){}static registerCallbackConstructor(aa,xa){assert$2(aa>=0&&Number.isInteger(aa),()=>`Verbosity level is expected to be an integer >= 0, but got ${aa}`),CallbackConstructorRegistry.checkForDuplicate(xa),CallbackConstructorRegistry.constructors[aa]==null&&(CallbackConstructorRegistry.constructors[aa]=[]),CallbackConstructorRegistry.constructors[aa].push(xa)}static checkForDuplicate(aa){for(const xa in CallbackConstructorRegistry.constructors)CallbackConstructorRegistry.constructors[+xa].forEach(Sa=>{if(Sa===aa)throw new ValueError("Duplicate callback constructor.")})}static clear(){CallbackConstructorRegistry.constructors={}}static createCallbacks(aa){const xa=[];for(const ba in CallbackConstructorRegistry.constructors){const Sa=+ba;aa>=Sa&&xa.push(...CallbackConstructorRegistry.constructors[Sa])}return xa.map(ba=>new ba)}}CallbackConstructorRegistry.constructors={};function configureCallbacks(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){const Aa=new History,Fa=[new BaseLogger,...CallbackConstructorRegistry.createCallbacks(aa)];ha!=null&&Fa.push(...ha),Fa.push(Aa);const La=new CallbackList(Fa);return La.setParams({epochs:xa,initialEpoch:ba,samples:Sa,steps:Ta,batchSize:wa,verbose:aa,doValidation:Ea,metrics:ka}),{callbackList:La,history:Aa}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function deserialize(ha,aa={},xa=!1){return deserializeKerasObject(ha,SerializationMap$1.getMap().classNameMap,aa,"layer",xa)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function l2Normalize(ha,aa){return tidy$1(()=>{ha.dtype!=="float32"&&(ha=cast$5(ha,"float32"));const xa=sum$5(square$3(ha),aa,!0),ba=fill$4(xa.shape,epsilon$1()),Sa=sqrt$4(maximum$4(xa,ba));return div$2(ha,Sa)})}function meanSquaredError(ha,aa){return tidy$1(()=>mean$1(square$3(sub$4(aa,ha)),-1))}function meanAbsoluteError(ha,aa){return tidy$1(()=>mean$1(abs$4(sub$4(aa,ha)),-1))}function meanAbsolutePercentageError(ha,aa){return tidy$1(()=>{const xa=sub$4(ha,aa),ba=clipByValue$3(abs$4(ha),epsilon$1(),Number.MAX_VALUE),Sa=abs$4(div$2(xa,ba));return mul$1(100,mean$1(Sa,-1))})}function meanSquaredLogarithmicError(ha,aa){return tidy$1(()=>{const xa=clipByValue$3(aa,epsilon$1(),Number.MAX_VALUE),ba=log$4(add$3(1,xa)),Sa=clipByValue$3(ha,epsilon$1(),Number.MAX_VALUE),Ta=log$4(add$3(1,Sa));return mean$1(square$3(sub$4(ba,Ta)),-1)})}function squaredHinge(ha,aa){return tidy$1(()=>{const xa=maximum$4(0,sub$4(1,mul$1(ha,aa)));return mean$1(square$3(xa),-1)})}function hinge(ha,aa){return tidy$1(()=>{const xa=maximum$4(0,sub$4(1,mul$1(ha,aa)));return mean$1(xa,-1)})}function categoricalHinge(ha,aa){return tidy$1(()=>{const xa=sum$5(mul$1(ha,aa),-1),ba=max$4(mul$1(sub$4(1,ha),aa),-1);return maximum$4(0,add$3(1,sub$4(ba,xa)))})}function logcosh(ha,aa){return tidy$1(()=>{const xa=Math.log(2),ba=sub$4(aa,ha),Sa=sub$4(add$3(ba,softplus$3(mul$1(-2,ba))),xa);return mean$1(Sa,-1)})}function categoricalCrossentropy$1(ha,aa,xa=!1){return tidy$1(()=>{if(xa)aa=softmax$3(aa);else{const ba=sum$5(aa,aa.shape.length-1,!0);aa=div$2(aa,ba)}return aa=clipByValue$3(aa,epsilon$1(),1-epsilon$1()),neg$3(sum$5(mul$1(cast$5(ha,"float32"),log$4(aa)),aa.shape.length-1))})}function sparseCategoricalCrossentropy$1(ha,aa,xa=!1){return tidy$1(()=>{const ba=cast$5(floor$3(flatten$1(ha)),"int32");aa=clipByValue$3(aa,epsilon$1(),1-epsilon$1());const Sa=aa.shape,Ta=reshape$4(oneHot$3(ba,Sa[Sa.length-1]),Sa);return categoricalCrossentropy$1(Ta,aa,xa)})}function sigmoidCrossEntropyWithLogits(ha,aa){if(!arraysEqual$1(ha.shape,aa.shape))throw new ValueError(`logits and labels must have the same shape, but got shapes ${JSON.stringify(ha.shape)} and ${JSON.stringify(aa.shape)}`);return tidy$1(()=>{const xa=relu$4(aa),ba=neg$3(abs$4(aa));return add$3(sub$4(xa,mul$1(aa,ha)),log1p$3(exp$3(ba)))})}function binaryCrossentropy$1(ha,aa){return tidy$1(()=>{let xa;return xa=clipByValue$3(aa,epsilon$1(),1-epsilon$1()),xa=log$4(div$2(xa,sub$4(1,xa))),mean$1(sigmoidCrossEntropyWithLogits(ha,xa),-1)})}function kullbackLeiblerDivergence(ha,aa){return tidy$1(()=>{const xa=clipByValue$3(ha,epsilon$1(),1),ba=clipByValue$3(aa,epsilon$1(),1);return sum$5(mul$1(ha,log$4(div$2(xa,ba))),-1)})}function poisson(ha,aa){return tidy$1(()=>{const xa=log$4(add$3(epsilon$1(),aa));return mean$1(sub$4(aa,mul$1(ha,xa)),-1)})}function cosineProximity(ha,aa){return tidy$1(()=>{const xa=l2Normalize(ha,-1),ba=l2Normalize(aa,-1),Sa=mul$1(xa,ba);return neg$3(sum$5(Sa,-1))})}const lossesMap={meanSquaredError,meanAbsoluteError,meanAbsolutePercentageError,meanSquaredLogarithmicError,squaredHinge,hinge,categoricalHinge,logcosh,categoricalCrossentropy:categoricalCrossentropy$1,sparseCategoricalCrossentropy:sparseCategoricalCrossentropy$1,binaryCrossentropy:binaryCrossentropy$1,kullbackLeiblerDivergence,poisson,cosineProximity};function get$1(ha){if(typeof ha=="string"){if(ha in lossesMap)return lossesMap[ha];let aa=`Unknown loss ${ha}`;throw ha.toLowerCase().includes("softmaxcrossentropy")&&(aa=`Unknown loss ${ha}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new ValueError(aa)}else return ha}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function binaryAccuracy(ha,aa){return tidy$1(()=>{const xa=mul$1(.5,onesLike$3(aa)),ba=cast$4(greater$3(aa,xa),ha.dtype);return mean$1(equal$3(ha,ba),-1)})}function categoricalAccuracy(ha,aa){return tidy$1(()=>cast$4(equal$3(argMax$3(ha,-1),argMax$3(aa,-1)),"float32"))}function truePositives(ha,aa){return tidy$1(()=>cast$5(sum$5(logicalAnd$3(equal$3(ha,1),equal$3(aa,1))),"float32"))}function falsePositives(ha,aa){return tidy$1(()=>cast$5(sum$5(logicalAnd$3(equal$3(ha,0),equal$3(aa,1))),"float32"))}function precision(ha,aa){return tidy$1(()=>{const xa=truePositives(ha,aa),ba=falsePositives(ha,aa),Sa=add$3(xa,ba);return cast$5(where(greater$3(Sa,0),div$2(xa,Sa),0),"float32")})}function binaryCrossentropy(ha,aa){return binaryCrossentropy$1(ha,aa)}function sparseCategoricalAccuracy(ha,aa){return ha.rank===aa.rank&&(ha=squeeze(ha,[ha.rank-1])),aa=argMax$3(aa,-1),aa.dtype!==ha.dtype&&(aa=cast$5(aa,ha.dtype)),cast$5(equal$3(ha,aa),"float32")}const mse=meanSquaredError,MSE=meanSquaredError,mae=meanAbsoluteError,MAE=meanAbsoluteError,mape=meanAbsolutePercentageError,MAPE=meanAbsolutePercentageError,categoricalCrossentropy=categoricalCrossentropy$1,cosine=cosineProximity,sparseCategoricalCrossentropy=sparseCategoricalCrossentropy$1,metricsMap={binaryAccuracy,categoricalAccuracy,precision,categoricalCrossentropy,sparseCategoricalCrossentropy,mse,MSE,mae,MAE,mape,MAPE,cosine};function get(ha){if(typeof ha=="string"&&ha in metricsMap)return metricsMap[ha];if(typeof ha!="string"&&ha!=null)return ha;throw new ValueError(`Unknown metric ${ha}`)}function getLossOrMetricName(ha){if(assert$1(ha!==null,`Unknown LossOrMetricFn ${ha}`),typeof ha=="string")return ha;{let aa;for(const xa of Object.keys(lossesMap))if(lossesMap[xa]===ha){aa=xa;break}if(aa!==void 0)return aa;for(const xa of Object.keys(metricsMap))if(metricsMap[xa]===ha){aa=xa;break}return aa!==void 0?aa:ha.name}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function getOptimizer(ha){const aa={Adagrad:()=>train.adagrad(.01),Adadelta:()=>train.adadelta(1,.95,epsilon$1()),Adam:()=>train.adam(.001,.9,.999,epsilon$1()),Adamax:()=>train.adamax(.002,.9,.999,epsilon$1(),0),RMSProp:()=>train.rmsprop(.001,.9,0,epsilon$1()),SGD:()=>train.sgd(.01)};if(aa.adagrad=aa.Adagrad,aa.adadelta=aa.Adadelta,aa.adam=aa.Adam,aa.adamax=aa.Adamax,aa.rmsprop=aa.RMSProp,aa.sgd=aa.SGD,ha in aa)return aa[ha]();throw new ValueError(`Unknown Optimizer ${ha}`)}/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH=1*1024*1024;function checkUserDefinedMetadata(ha,aa,xa=!1){if(ha==null||typeof ha!="object"||Object.getPrototypeOf(ha)!==Object.prototype||!plainObjectCheck(ha))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(xa){const ba=JSON.stringify(ha);ba.length>MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH&&console.warn(`User-defined metadata of model "${aa}" is too large in size (length=${ba.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`)}}function plainObjectCheck(ha){if(ha===null)return!0;if(typeof ha=="object")if(Object.getPrototypeOf(ha)===Object.prototype){const aa=Object.keys(ha);for(const xa of aa)if(typeof xa!="string"||!plainObjectCheck(ha[xa]))return!1;return!0}else if(Array.isArray(ha)){for(const aa of ha)if(!plainObjectCheck(aa))return!1;return!0}else return!1;else{const aa=typeof ha;return aa==="string"||aa==="number"||aa==="boolean"}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function printSummary(ha,aa,xa,ba=console.log){const Sa=isModelSequentialLike(ha),Ta=["Layer (type)","Input Shape","Output shape","Param #"];Sa?(aa=aa||90,xa=xa||[.32,.61,.89,1]):(aa=aa||115,xa=xa||[.24,.48,.7,.8,1]),xa[xa.length-1]<=1&&(xa=xa.map(Fa=>Math.floor(aa*Fa)));let wa;if(!Sa){Ta.push("Receives inputs"),wa=[];for(const Fa in ha.nodesByDepth)wa.push(...ha.nodesByDepth[Fa])}ba("_".repeat(aa)),printRow(Ta,xa,ba),ba("=".repeat(aa));const Ea=ha.layers;for(let Fa=0;Fa<Ea.length;++Fa)Sa?printLayerSummary(Ea[Fa],xa,ba):printLayerSummaryWithConnections(Ea[Fa],xa,wa,ba),ba((Fa===Ea.length-1?"=":"_").repeat(aa));ha.checkTrainableWeightsConsistency();const ka=countTrainableParams(ha),Aa=countParamsInWeights(ha.nonTrainableWeights);ba(`Total params: ${ka+Aa}`),ba(`Trainable params: ${ka}`),ba(`Non-trainable params: ${Aa}`),ba("_".repeat(aa))}function countTrainableParams(ha){let aa;return ha.collectedTrainableWeights!=null?aa=countParamsInWeights(ha.collectedTrainableWeights):aa=countParamsInWeights(ha.trainableWeights),aa}function isModelSequentialLike(ha){let aa=!0;const xa=[],ba=[];for(const Sa in ha.nodesByDepth)xa.push(ha.nodesByDepth[Sa]);for(const Sa of xa){if(Sa.length>1||Sa.length===1&&Sa[0].inboundLayers.length>1){aa=!1;break}ba.push(...Sa)}if(aa)for(const Sa of ha.layers){let Ta=!1;for(const wa of Sa.inboundNodes)if(ba.indexOf(wa)!==-1)if(Ta){aa=!1;break}else Ta=!0;if(!aa)break}return aa}function printRow(ha,aa,xa=console.log){let ba="";for(let Sa=0;Sa<ha.length;++Sa)Sa>0&&(ba=ba.slice(0,ba.length-1)+" "),ba+=ha[Sa],ba=ba.slice(0,aa[Sa]),ba+=" ".repeat(aa[Sa]-ba.length);xa(ba)}function printLayerSummary(ha,aa,xa){let ba,Sa;try{Sa=ha.inboundNodes.map(ka=>JSON.stringify(ka.inputShapes)).join(",")}catch{Sa="multiple"}try{ba=JSON.stringify(ha.outputShape)}catch{ba="multiple"}const Ta=ha.name,wa=ha.getClassName(),Ea=[`${Ta} (${wa})`,Sa,ba,ha.countParams().toString()];printRow(Ea,aa,xa)}function printLayerSummaryWithConnections(ha,aa,xa,ba){let Sa,Ta;try{Ta=ha.inboundNodes.map(La=>JSON.stringify(La.inputShapes)).join(",")}catch{Ta="multiple"}try{Sa=JSON.stringify(ha.outputShape)}catch{Sa="multiple"}const wa=[];for(const La of ha.inboundNodes)if(!(xa!=null&&xa.length>0&&xa.indexOf(La)===-1))for(let el=0;el<La.inboundLayers.length;++el){const tl=La.inboundLayers[el].name,nl=La.nodeIndices[el],rl=La.tensorIndices[el];wa.push(`${tl}[${nl}][${rl}]`)}const Ea=ha.name,ka=ha.getClassName(),Aa=wa.length===0?"":wa[0],Fa=[`${Ea} (${ka})`,Ta,Sa,ha.countParams().toString(),Aa];printRow(Fa,aa,ba);for(let La=1;La<wa.length;++La)printRow(["","","","",wa[La]],aa,ba)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isArrayItemInputOrOutputName(ha,aa,xa){return(ha==="inboundNodes"||ha==="outputLayers"||ha==="inputLayers")&&aa===0&&typeof xa=="string"}function convertPythonicToTs(ha,aa){if(ha===null)return null;if(typeof ha=="string")return toCamelCase(ha);if(typeof ha=="number"||typeof ha=="boolean")return ha;if(ha instanceof Array){const xa=[],ba=ha.length;for(let Sa=0;Sa<ba;++Sa){const Ta=ha[Sa];isArrayItemInputOrOutputName(aa,Sa,Ta)?xa.push(Ta):xa.push(convertPythonicToTs(Ta,aa))}return xa}else{const xa={};for(const ba of Object.keys(ha)){const Sa=ha[ba];if(ba==="name"&&typeof Sa=="string")xa[ba]=Sa;else{const Ta=toCamelCase(ba);xa[Ta]=convertPythonicToTs(Sa,Ta)}}return xa}}function convertTsToPythonic(ha,aa){if(ha==null)return null;if(typeof ha=="string")return toSnakeCase(ha);if(typeof ha=="number"||typeof ha=="boolean")return ha;if(ha instanceof Array){const xa=[],ba=ha.length;for(let Sa=0;Sa<ba;++Sa){const Ta=ha[Sa];isArrayItemInputOrOutputName(aa,Sa,Ta)?xa.push(Ta):xa.push(convertTsToPythonic(Ta,aa))}return xa}else{const xa={};for(const ba of Object.keys(ha)){const Sa=ha[ba],Ta=toSnakeCase(ba);(ba==="name"||ba==="className")&&typeof Sa=="string"?xa[Ta]=Sa:xa[Ta]=convertTsToPythonic(Sa,ba)}return xa}}/** @license See the LICENSE file. */const version="4.21.0";/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const isKerasSavedModelFormat=ha=>{const aa=Object.keys(ha);if(aa.length===0)return!1;const xa=aa[0].split("/");return!isNaN(parseInt(xa[xa.length-1],10))};class Container extends Layer{constructor(aa){if(super({}),this.containerNodes=new Set,this.name=aa.name,this.name==null){const al=this.getClassName().toLowerCase();this.name=getUid(al)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(aa.inputs)?this.inputs=aa.inputs.slice():this.inputs=[aa.inputs],Array.isArray(aa.outputs)?this.outputs=aa.outputs.slice():this.outputs=[aa.outputs],unique$3(this.inputs).length!==this.inputs.length)throw new ValueError(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(al=>al.name)}`);unique$3(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(al=>al.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const al of this.outputs){const ll=al.sourceLayer,il=al.nodeIndex,cl=al.tensorIndex;this.outputLayers.push(ll),this.outputLayersNodeIndices.push(il),this.outputLayersTensorIndices.push(cl)}for(const al of this.inputs){const ll=al.sourceLayer,il=al.nodeIndex,cl=al.tensorIndex;assert$1(il===0,"input layer has >1 nodes"),assert$1(cl===0,"input layer has >1 tensors"),this.inputLayers.push(ll),this.inputLayersNodeIndices.push(il),this.inputLayersTensorIndices.push(cl)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let al=0;al<this.inputLayers.length;al++){const ll=this.inputLayers[al];if(!(ll instanceof InputLayer))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${aa.inputs}. Input ${al} (0-based) originates from layer type ${ll.getClassName()}.`);this.inputNames.push(ll.name),this.feedInputShapes.push(ll.batchInputShape),this.feedInputNames.push(ll.name)}for(const al of this.outputLayers)this.outputNames.push(al.name);this.internalInputShapes=this.inputs.map(al=>al.shape),this.internalOutputShapes=this.outputs.map(al=>al.shape);const xa={},ba={},Sa={},Ta={},wa={},Ea=[],ka=(al,ll,il,cl,ul,dl)=>{(cl==null||ul==null||dl==null)&&(cl=al.sourceLayer,ul=al.nodeIndex,dl=al.tensorIndex);const hl=cl.inboundNodes[ul];if(il.indexOf(hl)!==-1)throw new RuntimeError(`The tensor ${al.name} at layer "${cl.name}" is part of a cycle.`);if(ll.indexOf(hl)!==-1)return;this.containerNodes.add(Container.nodeKey(cl,ul)),cl.id in wa||(wa[cl.id]=Object.keys(wa).length),il.indexOf(hl)===-1&&il.push(hl);const pl=hl.inboundLayers.length;for(let fl=0;fl<pl;fl++){const ml=hl.inputTensors[fl],gl=hl.inboundLayers[fl],$l=hl.nodeIndices[fl],xl=hl.tensorIndices[fl];ka(ml,ll,il,gl,$l,xl)}for(ll.push(hl);il.indexOf(hl)>=0;)il.splice(il.indexOf(hl),1);Ea.push(hl)},Aa=[],Fa=[];for(const al of this.outputs)ka(al,Aa,Fa);const La=Ea.slice().reverse();for(const al of La){ba[al.id]=al,al.id in xa||(xa[al.id]=0);let ll=xa[al.id];const il=Sa[al.outboundLayer.id]==null?0:Sa[al.outboundLayer.id];ll=Math.max(ll,il),Sa[al.outboundLayer.id]=ll,Ta[al.outboundLayer.id]=al.outboundLayer,xa[al.id]=ll;for(let cl=0;cl<al.inboundLayers.length;cl++){const ul=al.inboundLayers[cl],dl=al.nodeIndices[cl],hl=ul.inboundNodes[dl],pl=xa[hl.id]==null?0:xa[hl.id];xa[hl.id]=Math.max(ll+1,pl),ba[hl.id]=hl}}const el={};for(const al in xa){const ll=xa[al];ll in el||(el[ll]=[]),el[ll].push(ba[al])}const tl={};for(const al in Sa){const ll=Sa[al];ll in tl||(tl[ll]=[]),tl[ll].push(Ta[al])}let nl=Object.keys(tl).map(al=>parseInt(al,10)).sort(reverseNumberCompare);this.layers=[];for(const al of nl){const ll=tl[al];ll.sort((il,cl)=>{const ul=wa[il.id],dl=wa[cl.id];return ul<dl?-1:ul>dl?1:0});for(const il of ll)il instanceof Container&&this.internalContainerRefs.push(il),this.layers.push(il)}this.layersByDepth=tl,nl=Object.keys(el).map(al=>parseInt(al,10)).sort(reverseNumberCompare);const rl=this.inputs.slice(),sl=[];for(const al of nl)for(const ll of el[al]){const il=ll.outboundLayer;if(il!=null){for(const cl of ll.inputTensors)if(rl.indexOf(cl)===-1)throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${cl} at layer "${il.name}". The following previous layers were accessed without issue: ${sl}`);for(const cl of ll.outputTensors)rl.push(cl);sl.push(il.name)}}this.nodesByDepth=el;const ol=this.layers.map(al=>al.name);for(const al of ol){const ll=ol.filter(il=>il===al).length;if(ll!==1)throw new RuntimeError(`The name "${al}" is used ${ll} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(ol))}this.outboundNodes=[],this.inboundNodes=[],new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(al=>null),outputMasks:this.outputs.map(al=>null),inputShapes:this.inputs.map(al=>al.shape),outputShapes:this.outputs.map(al=>al.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const aa={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(const xa of this.layers)aa.numDisposedVariables+=xa.dispose().numDisposedVariables;for(const xa of this.internalContainerRefs)aa.numDisposedVariables+=xa.dispose().numDisposedVariables}return aa.refCountAfterDispose=this._refCount,aa}get trainable(){return this.trainable_}set trainable(aa){this.layers.forEach(xa=>{xa._trainableWeights.forEach(ba=>ba.trainable=aa)}),this.trainable_=aa}get trainableWeights(){if(this._trainableWeights.length>0)throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let aa=[];for(const xa of this.layers)aa=aa.concat(xa.trainableWeights);return aa}get nonTrainableWeights(){const aa=[];for(const xa of this.layers)aa.push(...xa.nonTrainableWeights);if(!this.trainable){const xa=[];for(const ba of this.layers)xa.push(...ba.trainableWeights);return xa.concat(aa)}return aa}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(aa,xa=!0){const ba={};let Sa=0;const Ta=isKerasSavedModelFormat(aa);Ta&&this.parseWeights(aa);for(const Ea of this.layers)for(const[ka,Aa]of Ea.weights.entries()){const Fa=Ta?`${Aa.name.split("/").slice(0,-1).join("/")+"/"}${ka}`:Aa.originalName;if(ba[Fa]!=null)throw new ValueError(`Duplicate weight name: ${Fa}`);ba[Fa]=Aa,Sa++}const wa=[];for(const Ea in aa){let ka=Ea;if(ba[Ea]==null){const Aa=Ea.split("/");ka=Aa.slice(0,-2).concat([Aa[Aa.length-1]]).join("/")}if(ba[ka]!=null)wa.push([ba[ka],aa[Ea]]);else if(xa)throw new ValueError(`Provided weight data has no target variable: ${Ea}`);delete ba[ka]}if(xa){const Ea=[];for(const ka in ba)Ea.push(ka);if(Ea.length>0)throw new ValueError(`${Ea.length} of ${Sa} weights are not set: ${Ea}`)}batchSetValue(wa)}parseWeights(aa){for(const xa in Object.keys(aa)){const ba=xa.split("/"),Sa=["vars","layer_checkpoint_dependencies"],Ta=ba.map(wa=>wa.startsWith("_")?wa.slice(1):wa).filter(wa=>!Sa.includes(wa)).join("/");Ta!==xa&&(aa[Ta]=aa[xa],delete aa[xa])}}updatedConfig(){const aa=this.getConfig(),xa={};return xa.className=this.getClassName(),xa.config=aa,xa.kerasVersion=`tfjs-layers ${version}`,xa.backend="TensorFlow.js",xa}toJSON(aa,xa=!0){const ba=convertTsToPythonic(this.updatedConfig());return xa?JSON.stringify(ba):ba}call(aa,xa){return tidy$1(()=>{aa=toList(aa);const ba=new FeedDict;for(let Sa=0;Sa<this.inputs.length;++Sa)ba.add(this.inputs[Sa],aa[Sa]);return execute(this.outputs,ba,xa)})}computeMask(aa,xa){return tidy$1(()=>{aa=toList(aa);let ba;return xa==null?ba=pyListRepeat(null,aa.length):ba=toList(xa),this.runInternalGraph(aa,ba)[1]})}computeOutputShape(aa){const xa=normalizeShapeList(aa);if(xa.length!==this.inputLayers.length)throw new ValueError(`Invalid inputShape argument ${aa}: model has ${this.inputLayers.length} tensor inputs.`);const ba={};for(let Ea=0;Ea<xa.length;Ea++){const ka=this.inputLayers[Ea],Aa=xa[Ea],Fa=ka.name+"_0_0";ba[Fa]=Aa}const Sa=Object.keys(this.nodesByDepth).map(Ea=>parseInt(Ea,10)).sort(reverseNumberCompare);if(Sa.length>1)for(const Ea of Sa){const ka=this.nodesByDepth[Ea];for(const Aa of ka){const Fa=Aa.outboundLayer;if(this.inputLayers.map(rl=>rl.id).indexOf(Fa.id)!==-1)continue;const La=[];for(let rl=0;rl<Aa.inboundLayers.length;rl++){const sl=Aa.inboundLayers[rl],ol=Aa.nodeIndices[rl],al=Aa.tensorIndices[rl],ll=`${sl.name}_${ol}_${al}`,il=ba[ll];La.push(il)}const el=Fa.computeOutputShape(singletonOrArray(La)),tl=normalizeShapeList(el),nl=Fa.inboundNodes.indexOf(Aa);for(let rl=0;rl<tl.length;rl++){const sl=`${Fa.name}_${nl}_${rl}`;ba[sl]=tl[rl]}}}const Ta=[],wa=[];for(let Ea=0;Ea<this.outputLayers.length;Ea++){const ka=this.outputLayers[Ea],Aa=this.outputLayersNodeIndices[Ea],Fa=this.outputLayersTensorIndices[Ea],La=`${ka.name}_${Aa}_${Fa}`;wa.push(La)}for(let Ea=0;Ea<wa.length;Ea++){const ka=wa[Ea];assert$1(ka in ba),Ta.push(ba[ka])}return singletonOrArray(Ta)}runInternalGraph(aa,xa){xa==null&&(xa=pyListRepeat(null,aa.length));const ba={};for(let ka=0;ka<this.inputs.length;++ka){const Aa=this.inputs[ka],Fa=aa[ka],La=xa[ka];ba[Aa.id]=[Fa,La]}const Sa=Object.keys(this.nodesByDepth).map(ka=>parseInt(ka,10)).sort(reverseNumberCompare);for(const ka of Sa){const Aa=this.nodesByDepth[ka];for(const Fa of Aa){const La=Fa.outboundLayer,el=Fa.inputTensors,tl=Fa.outputTensors,nl=new Array;for(const rl of el)rl.id in ba&&nl.push(ba[rl.id]);if(nl.length===el.length){let rl={},sl,ol,al,ll;if(Fa.callArgs!=null&&(rl=Fa.callArgs),nl.length===1){const[il,cl]=nl[0];rl.mask==null&&(rl.mask=cl),al=toList(La.call(il,rl)),ll=toList(La.computeMask(il,cl)),sl=[il],ol=[cl]}else sl=nl.map(il=>il[0]),ol=nl.map(il=>il[1]),rl.mask==null&&(rl.mask=ol),al=toList(La.call(sl,rl)),ll=toList(La.computeMask(sl,ol));if(La.activityRegularizer)throw new NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let il=0;il<tl.length;++il){const cl=tl[il],ul=al[il],dl=ll[il];ba[cl.id]=[ul,dl]}}}}const Ta=[],wa=[],Ea=[];for(const ka of this.outputs){assert$1(ka.id in ba,`Could not compute output ${ka.name} : ${ka.id}`);const[Aa,Fa]=ba[ka.id];Ea.push(Aa.shape),Ta.push(Aa),wa.push(Fa)}return[Ta,wa,Ea]}buildNodeConversionMap(aa){const xa={};let ba;for(const Sa of this.layers){ba=Sa instanceof Container?1:0;for(let Ta=0;Ta<Sa.inboundNodes.length;Ta++){const wa=Container.nodeKey(Sa,Ta);this.containerNodes.has(wa)&&(xa[wa]=ba,ba+=1)}}return xa}getLayer(aa,xa){if(xa!=null)return this.findLayer(xa);if(aa==null)throw new ValueError("Provide either a layer name or layer index");if(typeof aa=="number")return this.findLayer(aa);for(const ba of this.layers)if(ba.name===aa)return ba;throw new ValueError(`No such layer: ${aa}`)}findLayer(aa){if(this.layers.length<=aa)throw new ValueError(`Was asked to retrieve layer at index ${aa}, but model only has ${this.layers.length} layer(s).`);return this.layers[aa]}calculateLosses(){return tidy$1(()=>{const aa=[];for(const xa of this.layers)for(let ba=0;ba<xa.inboundNodes.length;++ba){const Sa=Container.nodeKey(xa,ba);this.containerNodes.has(Sa)&&aa.push(...xa.calculateLosses())}return aa})}getConfig(){const aa={name:this.name},xa=this.buildNodeConversionMap(this.layers),ba=[];for(const wa of this.layers){const Ea=wa.getClassName(),ka=wa.getConfig(),Aa=[];for(let La=0;La<wa.inboundNodes.length;La++){const el=wa.inboundNodes[La],tl=Container.nodeKey(wa,La);let nl={};if(this.containerNodes.has(tl)){if(el.callArgs)try{JSON.stringify(el.callArgs),nl=el.callArgs}catch{console.warn(`Layer ${wa.name} was passed non-serializable keyword arguments: ${el.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),nl={}}if(el.inboundLayers.length>0){const rl=[];for(let sl=0;sl<el.inboundLayers.length;sl++){const ol=el.inboundLayers[sl],al=el.nodeIndices[sl],ll=el.tensorIndices[sl],il=Container.nodeKey(ol,al);let cl=xa[il];cl==null&&(cl=0),rl.push([ol.name,cl,ll,nl])}Aa.push(rl)}}}const Fa={};Fa.name=wa.name,Fa.className=Ea,Fa.config=ka,Fa.inboundNodes=Aa,ba.push(Fa)}aa.layers=ba;const Sa=[];for(let wa=0;wa<this.inputLayers.length;wa++){const Ea=this.inputLayers[wa],ka=this.inputLayersNodeIndices[wa],Aa=Container.nodeKey(Ea,ka);if(!this.containerNodes.has(Aa))continue;let Fa=xa[Aa];Fa==null&&(Fa=0);const La=this.inputLayersTensorIndices[wa];Sa.push([Ea.name,Fa,La])}aa.inputLayers=Sa;const Ta=[];for(let wa=0;wa<this.outputLayers.length;wa++){const Ea=this.outputLayers[wa],ka=this.outputLayersNodeIndices[wa],Aa=Container.nodeKey(Ea,ka);if(!this.containerNodes.has(Aa))continue;let Fa=xa[Aa];Fa==null&&(Fa=0);const La=this.outputLayersTensorIndices[wa];Ta.push([Ea.name,Fa,La])}return aa.outputLayers=Ta,aa}static fromConfig(aa,xa,ba={},Sa=!1){const Ta={},wa={};function Ea(sl,ol){sl.name in wa?wa[sl.name].push(ol):wa[sl.name]=[ol]}function ka(sl,ol){const al=[];let ll;for(const il of ol){const cl=il[0],ul=il[1],dl=il[2];if(ll=il[3]==null?{}:il[3],!(cl in Ta)){Ea(sl,ol);return}const hl=Ta[cl];if(hl.inboundNodes.length<=ul){Ea(sl,ol);return}const pl=hl.inboundNodes[ul];al.push(pl.outputTensors[dl])}al.length>0&&sl.apply(singletonOrArray(al),ll)}function Aa(sl){const ol=sl.name,al=deserialize(sl,xa.customObjects!=null?xa.customObjects:{});al.setFastWeightInitDuringBuild(Sa),Ta[ol]=al,sl.inboundNodes.forEach(il=>{if(!(il instanceof Array))throw new ValueError(`Corrupted configuration, expected array for nodeData: ${il}`);Ea(al,il)})}const Fa=xa.name,La=xa.layers;for(const sl of La)Aa(sl);for(;!isObjectEmpty(wa);)for(const sl of La){const ol=Ta[sl.name];if(ol.name in wa){const al=wa[ol.name];delete wa[ol.name];for(const ll of al)ka(ol,ll)}}const el=[],tl=[],nl=xa.inputLayers;for(const sl of nl){const ol=sl[0],al=sl[1],ll=sl[2];assert$1(ol in Ta);const cl=Ta[ol].inboundNodes[al].outputTensors;el.push(cl[ll])}const rl=xa.outputLayers;for(const sl of rl){const ol=sl[0],al=sl[1],ll=sl[2];assert$1(ol in Ta);const cl=Ta[ol].inboundNodes[al].outputTensors;tl.push(cl[ll])}return new aa({inputs:el,outputs:tl,name:Fa})}get stateful(){if(this._stateful)throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const aa of this.layers)if(aa.stateful)return!0;return!1}resetStates(){tidy$1(()=>{this.layers.forEach(aa=>{aa.stateful&&aa.resetStates()})})}}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function standardizeSampleOrClassWeights(ha,aa,xa){const ba=aa.length;if(ha==null||Array.isArray(ha)&&ha.length===0)return aa.map(Sa=>null);if(ba===1)return Array.isArray(ha)&&ha.length===1?ha:typeof ha=="object"&&aa[0]in ha?[ha[aa[0]]]:[ha];if(Array.isArray(ha)){if(ha.length!==ba)throw new Error(`Provided ${xa} is an array of ${ha.length} element(s), but the model has ${ba} outputs. Make sure a set of weights is provided for each model output.`);return ha}else if(typeof ha=="object"&&Object.keys(ha).length>0&&typeof ha[Object.keys(ha)[0]]=="object"){const Sa=[];return aa.forEach(Ta=>{Ta in ha?Sa.push(ha[Ta]):Sa.push(null)}),Sa}else throw new Error(`The model has multiple (${ba}) outputs, so ${xa} must be either an array with ${ba} elements or an object with ${aa} keys. Provided ${xa} not understood: ${JSON.stringify(ha)}`)}function standardizeClassWeights(ha,aa){return standardizeSampleOrClassWeights(ha,aa,"classWeight")}async function standardizeWeights(ha,aa,xa,ba){if(xa!=null){const Sa=tidy$1(()=>{if(ha.shape.length===1)return clone$1(ha);if(ha.shape.length===2){if(ha.shape[1]>1)return argMax$3(ha,1);if(ha.shape[1]===1)return reshape$4(ha,[ha.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${ha.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${ha.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),Ta=Array.from(await Sa.data());dispose$1(Sa);const wa=[];return Ta.forEach(Ea=>{if(xa[Ea]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${Ea} exists in the data but not in classWeight`);wa.push(xa[Ea])}),tensor1d(wa,"float32")}else return null}function computeWeightedLoss(ha,aa){return mul$1(ha,aa)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const DEFAULT_VALIDATION_BATCH_SIZE=32;function standardizeDataIteratorOutput(ha,aa){let xa,ba;const Sa=aa;xa=Sa.xs,ba=Sa.ys,assert$2(xa!=null&&ba!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${aa}`);const Ta=flattenTensorOrArrayOrMap("input",ha.inputNames,xa),wa=flattenTensorOrArrayOrMap("output",ha.outputNames,ba),Ea=Ta[0].shape[0];assert$2(Ta.length===ha.inputs.length,()=>`LayersModel has ${ha.inputs.length} inputs, but the dataset provides ${Ta.length} inputs.  (Expected input keys: ${JSON.stringify(ha.inputNames)})`),assert$2(wa.length===ha.outputs.length,()=>`LayersModel has ${ha.outputs.length} outputs, but the dataset provides ${wa.length} outputs.  (Expected output keys: ${JSON.stringify(ha.outputNames)})`);for(let ka=0;ka<Ta.length;ka++)assert$2(Ta[ka].shape[0]===Ea,()=>`Batch size mismatch: input ${ha.inputNames[ka]} has ${Ta[ka].shape[0]}; expected  ${Ea} based on input ${ha.inputNames[0]}.`);for(let ka=0;ka<wa.length;ka++)assert$2(wa[ka].shape[0]===Ea,()=>`Batch size mismatch: output ${ha.outputNames[ka]} has ${wa[ka].shape[0]}; expected  ${Ea} based on input ${ha.inputNames[0]}.`);return{xs:Ta,ys:wa}}function flattenTensorOrArrayOrMap(ha,aa,xa){if(xa instanceof Tensor$1)return[xa];if(Array.isArray(xa))return assert$2(xa.length===aa.length,()=>`Received an array of ${xa.length} Tensors, but expected ${aa.length} to match the ${ha} keys ${aa}.`),xa;{const ba=[];for(const Sa of aa){if(xa[Sa]==null)throw new ValueError(`The feature data generated by the dataset lacks the required ${ha} key '${Sa}'.`);ba.push(xa[Sa])}return ba}}function standardizeTensorValidationData(ha){if(ha.length===3)throw new NotImplementedError("Validation with sample weights is not implemented yet.");return{xs:ha[0],ys:ha[1]}}async function fitDataset(ha,aa,xa){const ba=xa.batchesPerEpoch!=null;if(assert$2(ha.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),assert$2(xa!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),assert$2(xa.epochs!=null&&xa.epochs>0&&Number.isInteger(xa.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${xa.epochs}`),assert$2(!ba||xa.batchesPerEpoch>0&&Number.isInteger(xa.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${xa.batchesPerEpoch}`),assert$2(xa.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),ha.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");ha.isTraining=!0;try{const Sa=xa.validationData!=null;let Ta,wa;if(Sa)if(isDatasetObject(xa.validationData))assert$2(xa.validationBatches==null||xa.validationBatches>0&&Number.isInteger(xa.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${xa.validationBatches}`);else{const sl=standardizeTensorValidationData(xa.validationData);Ta=sl.xs,wa=sl.ys}const Ea=ha.makeTrainFunction(),ka=ha.getDedupedMetricsNames();let Aa;Sa?Aa=ka.slice().concat(ka.map(sl=>"val_"+sl)):Aa=ka.slice();const Fa=standardizeCallbacks(xa.callbacks,xa.yieldEvery),La=xa.verbose==null?1:xa.verbose,{callbackList:el,history:tl}=configureCallbacks(Fa,La,xa.epochs,null,null,getStepsPerEpoch(aa,xa),null,Sa,Aa);el.setModel(ha),ha.history=tl,await el.onTrainBegin(),ha.stopTraining_=!1;let nl=xa.initialEpoch==null?0:xa.initialEpoch,rl=await aa.iterator();for(;nl<xa.epochs;){const sl={};await el.onEpochBegin(nl);let ol=0,al=0;for(ba||(rl=await aa.iterator());!ba||ol<xa.batchesPerEpoch;){const ll=await rl.next();if(ba&&ll.done){console.warn(`You provided \`batchesPerEpoch\` as ${xa.batchesPerEpoch}, but your dataset iterator ran out of data after ${ol} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${xa.batchesPerEpoch*xa.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(ll.value!=null){const{xs:il,ys:cl}=standardizeDataIteratorOutput(ha,ll.value),ul={};ul.batch=al,ul.size=il[0].shape[0],await el.onBatchBegin(al,ul);const dl=[];if(xa.classWeight!=null){const fl=standardizeClassWeights(xa.classWeight,ha.outputNames);for(let ml=0;ml<fl.length;++ml)dl.push(await standardizeWeights(cl[ml],null,fl[ml]))}const hl=il.concat(cl).concat(dl),pl=Ea(hl);dispose$1(hl);for(let fl=0;fl<ka.length;++fl){const ml=ka[fl],gl=pl[fl];ul[ml]=gl,keep$1(gl)}await el.onBatchEnd(al,ul),disposeTensorsInLogs(ul),al++,ol++}if(ba?ol>=xa.batchesPerEpoch:ll.done){if(Sa){let il;isDatasetObject(xa.validationData)?il=toList(await ha.evaluateDataset(xa.validationData,{batches:xa.validationBatches})):il=toList(ha.evaluate(Ta,wa,{batchSize:xa.validationBatchSize==null?DEFAULT_VALIDATION_BATCH_SIZE:xa.validationBatchSize,verbose:0}));for(let cl=0;cl<ha.metricsNames.length;++cl)sl[`val_${ha.metricsNames[cl]}`]=il[cl]}break}if(ha.stopTraining_)break}if(await el.onEpochEnd(nl,sl),nl++,ha.stopTraining_)break}return await el.onTrainEnd(),await ha.history.syncData(),ha.history}finally{ha.isTraining=!1}}function getStepsPerEpoch(ha,aa){let xa=null;return aa.batchesPerEpoch!=null?xa=aa.batchesPerEpoch:Number.isFinite(ha.size)&&(xa=ha.size),xa}function isDatasetObject(ha){return typeof ha.iterator=="function"}function isLazyIteratorObject(ha){return typeof ha.next=="function"}async function evaluateDataset(ha,aa,xa){xa=xa||{};const ba=xa.batches!=null,Sa=ha.testFunction;let Ta=[];if(xa.verbose>0)throw new NotImplementedError("Verbose mode is not implemented yet.");assert$2(!ba||xa.batches>0&&Number.isInteger(xa.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(xa.batches)}`);const wa=isLazyIteratorObject(aa)?aa:await aa.iterator();let Ea=0,ka=0;for(;!ba||ka<xa.batches;){const Aa=await wa.next();if(Ta=tidy$1(()=>{if(Aa.value){const{xs:Fa,ys:La}=standardizeDataIteratorOutput(ha,Aa.value),el=Fa.concat(La),tl=tidy$1(()=>Sa(el));if(dispose$1(el),ka===0)for(let rl=0;rl<tl.length;++rl)Ta.push(scalar$1(0));const nl=el[0].shape[0];for(let rl=0;rl<tl.length;++rl){const sl=tl[rl],ol=Ta[rl];Ta[rl]=tidy$1(()=>add$3(Ta[rl],mul$1(nl,sl))),ka>0&&dispose$1(ol)}dispose$1(tl),Ea+=nl,++ka}return Ta}),Aa.done){ba&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${xa.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let Aa=0;Aa<Ta.length;++Aa){const Fa=Ta[Aa];Ta[Aa]=div$2(Ta[Aa],Ea),dispose$1(Fa)}return singletonOrArray(Ta)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function checkBatchSize(ha){assert$2(ha>0&&Number.isInteger(ha),()=>`batchSize is required to be a positive integer, but got ${ha}`)}function sliceArrays(ha,aa,xa){return ha==null?[null]:Array.isArray(ha)?ha.map(ba=>sliceAlongFirstAxis(ba,aa,xa-aa)):sliceAlongFirstAxis(ha,aa,xa-aa)}function sliceArraysByIndices(ha,aa){return tidy$1(()=>ha==null?null:Array.isArray(ha)?ha.map(xa=>sliceArraysByIndices(xa,aa)):gather(ha,aa.dtype==="int32"?aa:cast$5(aa,"int32")))}function makeBatches(ha,aa){const xa=[];let ba=0,Sa=null;for(;ba<ha;)Sa=ba+aa,Sa>=ha&&(Sa=ha),xa.push([ba,Sa]),ba=Sa;return xa}function ensureTensorsRank2OrHigher(ha){const aa=[];ha instanceof Tensor$1&&(ha=[ha]);for(let xa=0;xa<ha.length;++xa){const ba=ha[xa];if(ba.rank===1)aa.push(expandDims$3(ba,1));else{if(ba.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");aa.push(ba)}}return aa}function disposeNewTensors(ha,aa){if(ha==null)return;const xa=[];if(aa instanceof Tensor$1)xa.push(aa.id);else if(Array.isArray(aa))aa.forEach(Sa=>xa.push(Sa.id));else if(aa!=null)for(const Sa in aa){const Ta=aa[Sa];xa.push(Ta.id)}const ba=[];if(ha instanceof Tensor$1)xa.indexOf(ha.id)===-1&&ba.push(ha);else if(Array.isArray(ha))ha.forEach(Sa=>{xa.indexOf(Sa.id)===-1&&ba.push(Sa)});else if(ha!=null)for(const Sa in ha){const Ta=ha[Sa];xa.indexOf(Ta.id)===-1&&ba.push(Ta)}ba.forEach(Sa=>{Sa.isDisposed||Sa.dispose()})}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function isDataTensor(ha){return ha instanceof Tensor$1}function isDataArray(ha){return Array.isArray(ha)}function isDataDict(ha){return!isDataTensor(ha)&&!isDataArray(ha)}function standardizeInputData(ha,aa,xa,ba=!0,Sa=""){if(aa==null||aa.length===0){if(ha!=null){let wa=!1;if(isDataArray(ha)&&ha.length>0)wa=!0;else if(isDataDict(ha)){for(const Ea in ha)if(ha.hasOwnProperty(Ea)){wa=!0;break}}else wa=!0;if(wa)throw new ValueError(`Error when checking model ${Sa} expected no data, but got ${ha}`)}return[]}if(ha==null)return aa.map(wa=>null);let Ta;if(isDataDict(ha)){ha=ha,Ta=[];for(const wa of aa){if(ha[wa]==null)throw new ValueError(`No data provided for "${wa}". Need data for each key in: ${aa}`);Ta.push(ha[wa])}}else if(isDataArray(ha)){if(ha=ha,ha.length!==aa.length)throw new ValueError(`Error when checking model ${Sa}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${aa.length} Tensor(s), but instead got the following list of Tensor(s): ${ha}`);Ta=ha}else{if(ha=ha,aa.length>1)throw new ValueError(`The model ${Sa} expects ${aa.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${ha.shape}`);Ta=[ha]}if(Ta=ensureTensorsRank2OrHigher(Ta),xa!=null)for(let wa=0;wa<aa.length;++wa){if(xa[wa]==null)continue;const Ea=Ta[wa];if(Ea.shape.length!==xa[wa].length)throw new ValueError(`Error when checking ${Sa}: expected ${aa[wa]} to have ${xa[wa].length} dimension(s). but got array with shape ${Ea.shape}`);for(let ka=0;ka<xa[wa].length;++ka){if(ka===0&&!ba)continue;const Aa=Ea.shape[ka],Fa=xa[wa][ka];if(Fa!=null&&Fa>=0&&Aa!==Fa)throw new ValueError(`${Sa} expected a batch of elements where each example has shape [${xa[wa].slice(1,xa[wa].length)}] (i.e.,tensor shape [*,${xa[wa].slice(1,xa[wa].length)}]) but the ${Sa} received an input with ${Ea.shape[0]} examples, each with shape [${Ea.shape.slice(1,Ea.shape.length)}] (tensor shape [${Ea.shape}])`)}}return Ta}function checkArrayLengths(ha,aa,xa){const ba=unique$3(ha.map(Ta=>Ta.shape[0]));ba.sort();const Sa=unique$3(aa.map(Ta=>Ta.shape[0]));if(Sa.sort(),ba.length>1)throw new ValueError(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(ha.map(Ta=>Ta.shape))}`);if(Sa.length>1)throw new ValueError(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(aa.map(Ta=>Ta.shape))}`);if(ba.length>0&&Sa.length>0&&!arraysEqual$1(ba,Sa))throw new ValueError(`Input Tensors should have the same number of samples as target Tensors. Found ${ba[0]} input sample(s) and ${Sa[0]} target sample(s).`)}function checkLossAndTargetCompatibility(ha,aa,xa){const ba=[meanSquaredError,binaryCrossentropy$1,categoricalCrossentropy$1];for(let Sa=0;Sa<ha.length;++Sa){const Ta=ha[Sa],wa=aa[Sa],Ea=xa[Sa];if(wa!=null){if(wa===categoricalCrossentropy$1&&Ta.shape[Ta.shape.length-1]===1)throw new ValueError(`You are passing a target array of shape ${Ta.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(ba.indexOf(wa)!==-1){const ka=Ta.shape.slice(1),Aa=Ea.slice(1);for(let Fa=0;Fa<ka.length;++Fa){const La=ka[Fa],el=Aa[Fa];if(el!=null&&La!==el)throw new ValueError(`A target Tensor with shape ${Ta.shape} was passed for an output of shape ${Ea}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function checkInputData(ha,aa,xa,ba=!0,Sa=""){let Ta;if(Array.isArray(ha)){if(ha.length!==aa.length)throw new ValueError(`Error when checking model ${Sa}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${aa.length} Tensor(s), but instead got ${ha.length} Tensors(s).`);Ta=ha}else{if(aa.length>1)throw new ValueError(`The model expects ${aa.length} ${Sa} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(ha.shape)}.`);Ta=[ha]}if(xa!=null)for(let wa=0;wa<aa.length;++wa){if(xa[wa]==null)continue;const Ea=Ta[wa];if(Ea.shape.length!==xa[wa].length)throw new ValueError(`Error when checking ${Sa}: expected ${aa[wa]} to have ${xa[wa].length} dimension(s), but got array with shape ${JSON.stringify(Ea.shape)}`);for(let ka=0;ka<xa[wa].length;++ka){if(ka===0&&!ba)continue;const Aa=Ea.shape[ka],Fa=xa[wa][ka];if(Fa!=null&&Fa!==Aa)throw new ValueError(`Error when checking ${Sa}: expected ${aa[wa]} to have shape ${JSON.stringify(xa[wa])} but got array with shape ${JSON.stringify(Ea.shape)}.`)}}}function collectMetrics(ha,aa){if(ha==null||Array.isArray(ha)&&ha.length===0)return aa.map(ba=>[]);let xa;if(typeof ha=="string"||typeof ha=="function")xa=[ha];else if(Array.isArray(ha)||typeof ha=="object")xa=ha;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${ha}`);if(Array.isArray(xa))return aa.map(ba=>xa);{const ba=[];for(const Sa of aa){let Ta=xa.hasOwnProperty(Sa)?xa[Sa]:[];Array.isArray(Ta)||(Ta=[Ta]),ba.push(Ta)}return ba}}const LAYERS_MODEL_FORMAT_NAME="layers-model";class LayersModel extends Container{constructor(aa){super(aa),this.isTraining=!1}summary(aa,xa,ba=console.log){if(!this.built)throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");printSummary(this,aa,xa,ba)}compile(aa){if(aa.loss==null&&(aa.loss=[]),this.loss=aa.loss,typeof aa.optimizer=="string")this.optimizer_=getOptimizer(aa.optimizer),this.isOptimizerOwned=!0;else{if(!(aa.optimizer instanceof Optimizer$1))throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=aa.optimizer,this.isOptimizerOwned=!1}let xa=[];if(!Array.isArray(aa.loss)&&typeof aa.loss!="string"&&typeof aa.loss!="function"){aa.loss=aa.loss;for(const wa in aa.loss)if(this.outputNames.indexOf(wa)===-1)throw new ValueError(`Unknown entry in loss dictionary: "${wa}". Only expected the following keys: ${this.outputNames}`);for(const wa of this.outputNames)aa.loss[wa]==null&&console.warn(`Output "${wa}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${wa} during training`),xa.push(get$1(aa.loss[wa]))}else if(Array.isArray(aa.loss)){if(aa.loss.length!==this.outputs.length)throw new ValueError(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${aa.loss}.`);xa=aa.loss.map(Ea=>get$1(Ea))}else{const wa=get$1(aa.loss);this.outputs.forEach(Ea=>{xa.push(wa)})}this.lossFunctions=xa,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let wa=0;wa<this.outputs.length;++wa){const Ea=this.internalOutputShapes[wa],ka=this.outputNames[wa];this.feedOutputNames.push(ka),this.feedOutputShapes.push(Ea),this.feedLossFns.push(this.lossFunctions[wa])}const ba=[];this.metrics=aa.metrics,this.metricsNames=["loss"],this.metricsTensors=[],nameScope("loss",()=>{for(let wa=0;wa<this.outputs.length;++wa){if(ba.indexOf(wa)!==-1)continue;const Ea=this.lossFunctions[wa];this.outputs.length>1&&(this.metricsTensors.push([Ea,wa]),this.metricsNames.push(this.outputNames[wa]+"_loss"))}});const Sa=collectMetrics(aa.metrics,this.outputNames),Ta=(wa,Ea,ka)=>{this.outputNames.length>1&&(Ea=this.outputNames[wa]+"_"+Ea),this.metricsNames.push(Ea),this.metricsTensors.push([ka,wa])};nameScope("metric",()=>{for(let wa=0;wa<this.outputs.length;++wa){if(ba.indexOf(wa)!==-1)continue;const Ea=Sa[wa];(Aa=>{const Fa="";let La,el,tl;for(const nl of Aa){if(typeof nl=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(nl)!==-1){const sl=this.internalOutputShapes[wa];sl[sl.length-1]===1||this.lossFunctions[wa]===binaryCrossentropy$1?["accuracy","acc"].indexOf(nl)!==-1?el=binaryAccuracy:["crossentropy","ce"].indexOf(nl)!==-1&&(el=binaryCrossentropy):this.lossFunctions[wa]===sparseCategoricalCrossentropy$1?["accuracy","acc"].indexOf(nl)!==-1?el=sparseCategoricalAccuracy:["crossentropy","ce"].indexOf(nl)!==-1&&(el=sparseCategoricalCrossentropy):["accuracy","acc"].indexOf(nl)!==-1?el=categoricalAccuracy:["crossentropy","ce"].indexOf(nl)!==-1&&(el=categoricalCrossentropy);let ol;["accuracy","acc"].indexOf(nl)!==-1?ol="acc":["crossentropy","ce"].indexOf(nl)!==-1&&(ol="ce"),tl=el,La=Fa+ol}else tl=get(nl),La=Fa+getLossOrMetricName(nl);let rl;nameScope(La,()=>{rl=tl}),Ta(wa,La,rl)}})(Ea)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(aa,xa,ba={}){const Sa=ba.batchSize==null?32:ba.batchSize;checkBatchSize(Sa);const wa=this.standardizeUserDataXY(aa,xa,!0,Sa);try{const Ea=wa[0].concat(wa[1]);this.makeTestFunction();const ka=this.testFunction,Aa=this.testLoop(ka,Ea,Sa,ba.verbose,ba.steps);return singletonOrArray(Aa)}finally{disposeNewTensors(wa[0],aa),disposeNewTensors(wa[1],xa)}}async evaluateDataset(aa,xa){return this.makeTestFunction(),evaluateDataset(this,aa,xa)}checkNumSamples(aa,xa,ba,Sa="steps"){let Ta;if(ba!=null){if(Ta=null,xa!=null)throw new ValueError(`If ${Sa} is set, batchSize must be null or undefined.Got batchSize = ${xa}`)}else if(aa!=null)Array.isArray(aa)?Ta=aa[0].shape[0]:Ta=aa.shape[0];else throw new ValueError(`Either the input data should have a defined shape, or ${Sa} shoud be specified.`);return Ta}execute(aa,xa){if(Array.isArray(xa)&&xa.length===0)throw new ValueError("`outputs` is an empty Array, which is not allowed.");const ba=Array.isArray(xa),Sa=ba?xa:[xa],Ta=this.retrieveSymbolicTensors(Sa),wa=new FeedDict;if(aa instanceof Tensor$1&&(aa=[aa]),Array.isArray(aa)){if(aa.length!==this.inputs.length)throw new ValueError(`The number of inputs provided (${aa.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let ka=0;ka<this.inputs.length;++ka)wa.add(this.inputs[ka],aa[ka])}else for(const ka of this.inputs){const Aa=aa[ka.name];if(Aa==null)throw new ValueError(`No value is provided for the model's input ${ka.name}`);wa.add(ka,Aa)}const Ea=execute(Ta,wa);return ba?Ea:Ea[0]}retrieveSymbolicTensors(aa){const xa=pyListRepeat(null,aa.length);let ba=aa.length;for(const Sa of this.layers){const Ta=Array.isArray(Sa.output)?Sa.output:[Sa.output],wa=Ta.map(Ea=>Ea.name);for(let Ea=0;Ea<aa.length;++Ea){const ka=wa.indexOf(aa[Ea]);if(ka!==-1&&(xa[Ea]=Ta[ka],ba--),ba===0)break}if(ba===0)break}if(ba>0){const Sa=[];throw xa.forEach((Ta,wa)=>{Ta==null&&Sa.push(aa[wa])}),new ValueError(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(Sa)}`)}return xa}predictLoop(aa,xa=32,ba=!1){return tidy$1(()=>{const Sa=this.checkNumSamples(aa);if(ba)throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");const Ta=makeBatches(Sa,xa),wa=this.outputs.map(Ea=>[]);for(let Ea=0;Ea<Ta.length;++Ea)tidy$1(()=>{const Aa=Ta[Ea][0],Fa=Ta[Ea][1],La=sliceArrays(aa,Aa,Fa),el=[];if(Array.isArray(La))for(let nl=0;nl<La.length;++nl)el.push({key:this.inputs[nl],value:La[nl]});else el.push({key:this.inputs[0],value:La});const tl=new FeedDict(el);return execute(this.outputs,tl)}).forEach((Aa,Fa)=>wa[Fa].push(Aa));return singletonOrArray(wa.map(Ea=>concat$3(Ea,0)))})}predict(aa,xa={}){const ba=ensureTensorsRank2OrHigher(aa);checkInputData(ba,this.inputNames,this.feedInputShapes,!1);try{const Sa=xa.batchSize==null?32:xa.batchSize;return checkBatchSize(Sa),this.predictLoop(ba,Sa)}finally{disposeNewTensors(ba,aa)}}predictOnBatch(aa){checkInputData(aa,this.inputNames,this.feedInputShapes,!0);const xa=(Array.isArray(aa)?aa[0]:aa).shape[0];return this.predictLoop(aa,xa)}standardizeUserDataXY(aa,xa,ba=!0,Sa){if(this.optimizer_==null)throw new RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const Ta=[];for(let wa=0;wa<this.feedOutputShapes.length;++wa){const Ea=this.feedOutputShapes[wa];this.feedLossFns[wa]===sparseCategoricalCrossentropy$1?Ta.push(Ea.slice(0,Ea.length-1).concat([1])):Ta.push(Ea)}if(aa=standardizeInputData(aa,this.feedInputNames,this.feedInputShapes,!1,"input"),xa=standardizeInputData(xa,this.feedOutputNames,Ta,!1,"target"),checkArrayLengths(aa,xa),checkLossAndTargetCompatibility(xa,this.feedLossFns,this.feedOutputShapes),this.stateful&&Sa!=null&&Sa>0&&aa[0].shape[0]%Sa!==0)throw new ValueError(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${Sa}. Found: ${aa[0].shape[0]} sample(s).`);return[aa,xa]}async standardizeUserData(aa,xa,ba,Sa,Ta=!0,wa){const[Ea,ka]=this.standardizeUserDataXY(aa,xa,Ta,wa);if(ba!=null)throw new Error("sample weight is not supported yet.");let Aa=null;if(Sa!=null){const Fa=standardizeClassWeights(Sa,this.outputNames);Aa=[];for(let La=0;La<Fa.length;++La)Aa.push(await standardizeWeights(ka[La],null,Fa[La]))}return[Ea,ka,Aa]}testLoop(aa,xa,ba,Sa=0,Ta){return tidy$1(()=>{const wa=this.checkNumSamples(xa,ba,Ta,"steps"),Ea=[];if(Sa>0)throw new NotImplementedError("Verbose mode is not implemented yet.");if(Ta!=null)throw new NotImplementedError("steps mode in testLoop() is not implemented yet");{const ka=makeBatches(wa,ba),Aa=tensor1d(range$3(0,wa));for(let Fa=0;Fa<ka.length;++Fa){const La=ka[Fa][0],el=ka[Fa][1],tl=sliceAlongFirstAxis(Aa,La,el-La),nl=sliceArraysByIndices(xa,tl),rl=aa(nl);if(Fa===0)for(let sl=0;sl<rl.length;++sl)Ea.push(scalar$1(0));for(let sl=0;sl<rl.length;++sl){const ol=rl[sl];Ea[sl]=add$3(Ea[sl],mul$1(el-La,ol))}}for(let Fa=0;Fa<Ea.length;++Fa)Ea[Fa]=div$2(Ea[Fa],wa)}return Ea})}getDedupedMetricsNames(){const aa=this.metricsNames,xa=[];for(let ba=0;ba<aa.length;++ba){const Sa=aa[ba];let Ta=Sa;if(count(aa,Sa)>1){const wa=count(aa.slice(0,ba),Sa);Ta+=`_${wa}`}xa.push(Ta)}return xa}makeTrainFunction(){return aa=>{const xa=[],ba=aa.slice(0,this.inputs.length),Sa=aa.slice(this.inputs.length,this.inputs.length+this.outputs.length),Ta=aa.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),wa=[],Ea=()=>{const La=[];for(let rl=0;rl<this.inputs.length;++rl)La.push({key:this.inputs[rl],value:ba[rl]});const el=new FeedDict(La),tl=execute(this.outputs,el,{training:!0});let nl;for(let rl=0;rl<this.lossFunctions.length;++rl){const sl=this.lossFunctions[rl];let ol=sl(Sa[rl],tl[rl]);Ta[rl]!=null&&(ol=computeWeightedLoss(ol,Ta[rl]));const al=mean$1(ol);xa.push(al),rl===0?nl=ol:nl=add$3(nl,ol)}for(let rl=0;rl<this.metricsTensors.length;++rl){let sl;if(this.outputs.length>1&&rl<this.outputs.length)sl=xa[rl];else{const ol=this.metricsTensors[rl][0],al=this.metricsTensors[rl][1];sl=mean$1(ol(Sa[al],tl[al]))}keep$1(sl),wa.push(sl)}return nl=mean$1(nl),this.calculateLosses().forEach(rl=>{nl=add$3(nl,rl)}),nl},ka=this.collectedTrainableWeights.map(La=>La.read());return[this.optimizer_.minimize(Ea,!0,ka)].concat(wa)}}makeTestFunction(){this.testFunction=aa=>tidy$1(()=>{const xa=[];let ba;const Sa=aa.slice(0,this.inputs.length),Ta=aa.slice(this.inputs.length,this.inputs.length+this.outputs.length),wa=[];for(let Aa=0;Aa<this.inputs.length;++Aa)wa.push({key:this.inputs[Aa],value:Sa[Aa]});const Ea=new FeedDict(wa),ka=execute(this.outputs,Ea);for(let Aa=0;Aa<this.lossFunctions.length;++Aa){const Fa=this.lossFunctions[Aa],La=mean$1(Fa(Ta[Aa],ka[Aa]));Aa===0?ba=La:ba=add$3(ba,La),xa.push(ba)}for(let Aa=0;Aa<this.metricsTensors.length;++Aa){const Fa=this.metricsTensors[Aa][0],La=this.metricsTensors[Aa][1],el=mean$1(Fa(Ta[La],ka[La]));xa.push(el)}return xa})}async fit(aa,xa,ba={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;let Sa,Ta,wa,Ea,ka,Aa,Fa,La,el;try{const tl=ba.batchSize==null?32:ba.batchSize;checkBatchSize(tl);const rl=await this.standardizeUserData(aa,xa,ba.sampleWeight,ba.classWeight,!1,tl);Sa=rl[0],Ta=rl[1],el=rl[2];let sl=!1,ol;if(ba.validationData!=null&&ba.validationData.length>0){if(sl=!0,ba.validationData.length===2)ka=ba.validationData[0],Aa=ba.validationData[1];else throw ba.validationData.length===3?new NotImplementedError("validationData including sample weights is not supported yet."):new ValueError(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${ba.validationData} is invalid.`);const fl=await this.standardizeUserData(ka,Aa,null,null,!0,tl);Fa=fl[0],La=fl[1],ol=Fa.concat(La)}else if(ba.validationSplit!=null&&ba.validationSplit>0&&ba.validationSplit<1){sl=!0;const pl=Math.floor(Sa[0].shape[0]*(1-ba.validationSplit)),fl=Sa[0].shape[0];Fa=sliceArrays(Sa,pl,fl),wa=Sa,Sa=sliceArrays(Sa,0,pl),La=sliceArrays(Ta,pl,fl),Ea=Ta,Ta=sliceArrays(Ta,0,pl),ol=Fa.concat(La)}else ba.validationSteps!=null&&(sl=!0);const al=Sa.concat(Ta).concat(el);this.checkTrainableWeightsConsistency();const ll=this.makeTrainFunction(),il=this.getDedupedMetricsNames();let cl,ul;sl?(this.makeTestFunction(),cl=this.testFunction,ul=il.slice().concat(il.map(pl=>"val_"+pl))):(cl=null,ol=[],ul=il.slice());const dl=standardizeCallbacks(ba.callbacks,ba.yieldEvery);return await this.fitLoop(ll,al,il,tl,ba.epochs,ba.verbose,dl,cl,ol,ba.shuffle,ul,ba.initialEpoch,null,null)}finally{this.isTraining=!1,disposeNewTensors(Sa,aa),disposeNewTensors(Ta,xa),disposeNewTensors(wa,aa),disposeNewTensors(Ea,xa),disposeNewTensors(Fa,ka),disposeNewTensors(La,Aa),el!=null&&dispose$1(el)}}async fitLoop(aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa,La,el,tl,nl){Sa==null&&(Sa=32),Ta==null&&(Ta=1),Fa==null&&(Fa=!0),el==null&&(el=0);let rl=!1;if(ka!=null&&Aa!=null&&(rl=!0),nl!=null&&(rl=!0,tl==null))throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const sl=this.checkNumSamples(xa,Sa,tl,"steps_per_epoch");let ol;sl!=null&&(ol=range$3(0,sl)),wa==null&&(wa=1);const{callbackList:al,history:ll}=configureCallbacks(Ea,wa,Ta,el,sl,tl,Sa,rl,La);al.setModel(this),this.history=ll,await al.onTrainBegin(),this.stopTraining_=!1;for(let il=el;il<Ta;++il){await al.onEpochBegin(il);const cl={};if(tl!=null)throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");{if(Fa==="batch")throw new NotImplementedError("batch shuffling is not implemneted yet");Fa&&shuffle(ol);const ul=tensor1d(ol),dl=makeBatches(sl,Sa);for(let hl=0;hl<dl.length;++hl){const pl={};if(await al.onBatchBegin(hl,pl),tidy$1(()=>{const fl=dl[hl][0],ml=dl[hl][1],gl=sliceAlongFirstAxis(ul,fl,ml-fl);pl.batch=hl,pl.size=ml-fl;const $l=sliceArraysByIndices(xa,gl),xl=aa($l);for(let yl=0;yl<ba.length;++yl){const bl=ba[yl],Sl=xl[yl];pl[bl]=Sl,keep$1(Sl)}if(hl===dl.length-1&&rl){const yl=this.testLoop(ka,Aa,Sa);for(let bl=0;bl<ba.length;++bl){const Sl=ba[bl],Cl=yl[bl];keep$1(Cl),cl["val_"+Sl]=Cl}}}),await al.onBatchEnd(hl,pl),disposeTensorsInLogs(pl),this.stopTraining_)break}ul.dispose()}if(await al.onEpochEnd(il,cl),this.stopTraining_)break}return await al.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(aa,xa){return fitDataset(this,aa,xa)}async trainOnBatch(aa,xa){const ba=await this.standardizeUserData(aa,xa),Sa=ba[0],Ta=ba[1],Ea=this.makeTrainFunction()(Sa.concat(Ta)),ka=[];for(const Aa of Ea){const Fa=await Aa.data();ka.push(Fa[0])}return dispose$1(Ea),disposeNewTensors(ba[0],aa),disposeNewTensors(ba[1],xa),singletonOrArray(ka)}getNamedWeights(aa){const xa=[],ba=aa!=null&&aa.trainableOnly,Sa=ba?this.trainableWeights:this.weights,Ta=this.getWeights(ba);for(let wa=0;wa<Sa.length;++wa)ba&&!Sa[wa].trainable||xa.push({name:Sa[wa].originalName,tensor:Ta[wa]});return xa}set stopTraining(aa){this.stopTraining_=aa}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(aa){this.optimizer_!==aa&&(this.optimizer_=aa,this.isOptimizerOwned=!1)}dispose(){const aa=super.dispose();if(aa.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){const xa=memory().numTensors;this.optimizer_.dispose(),aa.numDisposedVariables+=xa-memory().numTensors}return aa}getLossIdentifiers(){let aa;if(typeof this.loss=="string")aa=toSnakeCase(this.loss);else if(Array.isArray(this.loss)){for(const xa of this.loss)if(typeof xa!="string")throw new Error("Serialization of non-string loss is not supported.");aa=this.loss.map(xa=>toSnakeCase(xa))}else{const xa=Object.keys(this.loss);aa={};const ba=this.loss;for(const Sa of xa)if(typeof ba[Sa]=="string")aa[Sa]=toSnakeCase(ba[Sa]);else throw new Error("Serialization of non-string loss is not supported.")}return aa}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[toSnakeCase(getLossOrMetricName(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(aa=>toSnakeCase(getLossOrMetricName(aa)));{const aa={};for(const xa in this.metrics)aa[xa]=toSnakeCase(getLossOrMetricName(this.metrics[xa]));return aa}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(aa){if(aa.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(aa.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(aa.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");const xa=convertPythonicToTs(aa.optimizer_config),ba=deserialize(xa);let Sa;if(typeof aa.loss=="string")Sa=toCamelCase(aa.loss);else if(Array.isArray(aa.loss))Sa=aa.loss.map(wa=>toCamelCase(wa));else if(aa.loss!=null){Sa={};for(const wa in aa.loss)Sa[wa]=toCamelCase(aa.loss[wa])}let Ta;if(Array.isArray(aa.metrics))Ta=aa.metrics.map(wa=>toCamelCase(wa));else if(aa.metrics!=null){Ta={};for(const wa in aa.metrics)Ta[wa]=toCamelCase(aa.metrics[wa])}this.compile({loss:Sa,metrics:Ta,optimizer:ba})}async save(aa,xa){if(typeof aa=="string"){const Aa=getSaveHandlers(aa);if(Aa.length===0)throw new ValueError(`Cannot find any save handlers for URL '${aa}'`);if(Aa.length>1)throw new ValueError(`Found more than one (${Aa.length}) save handlers for URL '${aa}'`);aa=Aa[0]}if(aa.save==null)throw new ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const ba=await encodeWeights(this.getNamedWeights(xa)),Ea={modelTopology:this.toJSON(null,!1),format:LAYERS_MODEL_FORMAT_NAME,generatedBy:`TensorFlow.js tfjs-layers v${version}`,convertedBy:null};if((xa==null?!1:xa.includeOptimizer)&&this.optimizer!=null){Ea.trainingConfig=this.getTrainingConfig();const Aa="optimizer",{data:Fa,specs:La}=await encodeWeights(await this.optimizer.getWeights(),Aa);ba.specs.push(...La),ba.data=concatenateArrayBuffers$1([ba.data,Fa])}return this.userDefinedMetadata!=null&&(checkUserDefinedMetadata(this.userDefinedMetadata,this.name,!0),Ea.userDefinedMetadata=this.userDefinedMetadata),Ea.weightData=ba.data,Ea.weightSpecs=ba.specs,aa.save(Ea)}setUserDefinedMetadata(aa){checkUserDefinedMetadata(aa,this.name),this.userDefinedMetadata=aa}getUserDefinedMetadata(){return this.userDefinedMetadata}}LayersModel.className="Model",registerClass$1(LayersModel);class Functional extends LayersModel{}Functional.className="Functional",registerClass$1(Functional);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Sequential extends LayersModel{constructor(aa){if(super({inputs:[],outputs:[]}),aa=aa||{},this.trainable=!0,this.built=!1,this.name=aa.name!=null?aa.name:getUid("sequential_"),aa.layers!=null)for(const xa of aa.layers)this.add(xa)}checkShape(aa){if(aa.inboundNodes[0].outputTensors[0].shape.some(ba=>ba<0))throw new ValueError(`Negative dimension size caused by adding layer ${aa.name} with input shape [${aa.inboundNodes[0].inputTensors[0].shape}]`)}add(aa){const xa=aa instanceof Sequential||aa instanceof LayersModel;let ba;if(xa){if(ba=aa,ba.outputs.length!==1)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(ba.inputs.length!==1)throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(aa.inboundNodes.length===0){if(aa.batchInputShape==null)throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const Sa=Input({batchShape:aa.batchInputShape,dtype:aa.dtype,name:aa.name+"_input"});aa.apply(Sa)}if(xa)this.outputs=ba.outputs,this.inputs=ba.inputs;else{if(aa.inboundNodes.length!==1)throw new ValueError(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${aa.name} which has ${aa.inboundNodes.length} pre-existing inbound connections.`);if(aa.inboundNodes[0].outputTensors.length!==1)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(aa),this.outputs=[aa.inboundNodes[0].outputTensors[0]],this.inputs=getSourceInputs(this.outputs[0])}this.inboundNodes=[],new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:pyListRepeat(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(Sa=>Sa.shape),outputShapes:this.outputs[0].shape})}else{const Sa=aa.apply(this.outputs[0]);if(Array.isArray(Sa))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(aa),this.outputs=[Sa],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(aa),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const aa=this.layers.length-1;this.layers[aa].outboundNodes=[],this.outputs=[this.layers[aa].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(aa,xa){return this.model==null&&this.build(),this.model.call(aa,xa)}build(aa){if(getExactlyOneShape(aa),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new LayersModel({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(aa,xa,ba=console.log){this.built||this.build(),super.summary(aa,xa,ba)}setWeights(aa){this.model==null&&this.build(),this.model.setWeights(aa)}evaluate(aa,xa,ba={}){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(aa,xa,ba)}async evaluateDataset(aa,xa){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluateDataset(aa,xa)}predict(aa,xa={}){return this.model==null&&this.build(),this.model.predict(aa,xa)}predictOnBatch(aa){return this.model==null&&this.build(),this.model.predictOnBatch(aa)}compile(aa){this.build(),this.model.compile(aa),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(aa){this.model.optimizer=aa}async fit(aa,xa,ba={}){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.fit(aa,xa,ba)}async fitDataset(aa,xa){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.fitDataset(aa,xa)}async trainOnBatch(aa,xa){return this.model.trainOnBatch(aa,xa)}static fromConfig(aa,xa,ba={},Sa=!1){let Ta,wa={};if(xa instanceof Array){if(xa[0].className==null||xa[0].className==="Merge")throw new ValueError("Legacy serialization format not supported yet.");Ta=xa}else assert$2(xa.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),Ta=xa.layers,delete xa.layers,wa=xa;const Ea=new aa(wa);if(!(Ea instanceof Sequential))throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${Ea}`);for(const ka of Ta){const Fa=deserialize(ka,void 0,Sa);Sa&&Fa.setFastWeightInitDuringBuild(!0),Ea.add(Fa)}return Ea}set stopTraining(aa){if(this.model==null)throw new ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=aa}get stopTraining(){if(this.model==null)throw new ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const aa=[];for(const xa of this.layers){const ba={};ba.className=xa.getClassName(),ba.config=xa.getConfig(),aa.push(ba)}return{name:this.name,layers:aa}}}Sequential.className="Sequential",registerClass$1(Sequential);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */let Activation$1=class extends Serializable$1{getConfig(){return{}}},Elu$1=class extends Activation$1{apply(aa,xa=1){return elu$4(aa,xa)}};Elu$1.className="elu",registerClass$1(Elu$1);let Selu$1=class extends Activation$1{apply(aa){return selu$3(aa)}};Selu$1.className="selu",registerClass$1(Selu$1);let Relu$1=class extends Activation$1{apply(aa){return relu$4(aa)}};Relu$1.className="relu",registerClass$1(Relu$1);let Relu6$1=class extends Activation$1{apply(aa){return tidy$1(()=>minimum$3(6,relu$4(aa)))}};Relu6$1.className="relu6",registerClass$1(Relu6$1);class Linear extends Activation$1{apply(aa){return aa}}Linear.className="linear",registerClass$1(Linear);let Sigmoid$1=class extends Activation$1{apply(aa){return sigmoid$4(aa)}};Sigmoid$1.className="sigmoid",registerClass$1(Sigmoid$1);class HardSigmoid extends Activation$1{apply(aa){return hardSigmoid(aa)}}HardSigmoid.className="hardSigmoid",registerClass$1(HardSigmoid);let Softplus$1=class extends Activation$1{apply(aa){return softplus$3(aa)}};Softplus$1.className="softplus",registerClass$1(Softplus$1);class Softsign extends Activation$1{apply(aa){return softsign(aa)}}Softsign.className="softsign",registerClass$1(Softsign);let Tanh$1=class extends Activation$1{apply(aa){return tanh$3(aa)}};Tanh$1.className="tanh",registerClass$1(Tanh$1);let Softmax$2=class extends Activation$1{apply(aa,xa=-1){return softmax$3(aa,xa)}};Softmax$2.className="softmax",registerClass$1(Softmax$2);class LogSoftmax extends Activation$1{apply(aa,xa=-1){return logSoftmax(aa,xa)}}LogSoftmax.className="logSoftmax",registerClass$1(LogSoftmax);class Gelu extends Activation$1{apply(aa){return tidy$1(()=>tidy$1(()=>{const xa=Math.sqrt(2),ba=mul$1(.5,add$3(1,erf$3(div$2(aa,xa))));return mul$1(aa,ba)}))}}Gelu.className="gelu",registerClass$1(Gelu);class GeluNew extends Activation$1{apply(aa){return tidy$1(()=>mul$1(.5,mul$1(aa,add$3(1,tanh$3(mul$1(sqrt$4(div$2(2,Math.PI)),add$3(aa,mul$1(.044715,pow$4(aa,3)))))))))}}GeluNew.className="gelu_new",registerClass$1(GeluNew);class Mish extends Activation$1{apply(aa){return tidy$1(()=>mul$1(aa,tanh$3(softplus$3(aa))))}}Mish.className="mish",registerClass$1(Mish);class Swish extends Activation$1{apply(aa,xa=1){return tidy$1(()=>mul$1(sigmoid$4(mul$1(aa,xa)),aa))}}Swish.className="swish",registerClass$1(Swish);function serializeActivation(ha){return ha.getClassName()}function deserializeActivation(ha,aa={}){return deserializeKerasObject(ha,SerializationMap$1.getMap().classNameMap,aa,"activation")}function getActivation(ha){if(ha==null){const aa={};return aa.className="linear",aa.config={},deserializeActivation(aa)}if(typeof ha=="string"){const aa={};return aa.className=ha,aa.config={},deserializeActivation(aa)}else return ha instanceof Activation$1?ha:deserializeActivation(ha)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function assertObjectArgs(ha){if(ha!=null&&typeof ha!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${ha}`)}class Regularizer extends Serializable$1{}class L1L2 extends Regularizer{constructor(aa){super(),assertObjectArgs(aa),this.l1=aa==null||aa.l1==null?.01:aa.l1,this.l2=aa==null||aa.l2==null?.01:aa.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(aa){return tidy$1(()=>{let xa=zeros$2([1]);return this.hasL1&&(xa=add$3(xa,sum$5(mul$1(this.l1,abs$4(aa))))),this.hasL2&&(xa=add$3(xa,sum$5(mul$1(this.l2,square$3(aa))))),reshape$4(xa,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(aa,xa){return new aa({l1:xa.l1,l2:xa.l2})}}L1L2.className="L1L2",registerClass$1(L1L2);const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={l1l2:"L1L2"};function serializeRegularizer(ha){return serializeKerasObject(ha)}function deserializeRegularizer(ha,aa={}){return deserializeKerasObject(ha,SerializationMap$1.getMap().classNameMap,aa,"regularizer")}function getRegularizer(ha){if(ha==null)return null;if(typeof ha=="string"){const xa={className:ha in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[ha]:ha,config:{}};return deserializeRegularizer(xa)}else return ha instanceof Regularizer?ha:deserializeRegularizer(ha)}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class ReLU extends Layer{constructor(aa){super(aa??{}),this.supportsMasking=!0,aa!=null&&(this.maxValue=aa.maxValue)}call(aa,xa){aa=getExactlyOneTensor(aa);let ba=relu$4(aa);return this.maxValue!=null&&(ba=clipByValue$3(ba,0,this.maxValue)),ba}computeOutputShape(aa){return aa}getConfig(){const aa={maxValue:this.maxValue},xa=super.getConfig();return Object.assign(aa,xa),aa}}ReLU.className="ReLU",registerClass$1(ReLU);class LeakyReLU extends Layer{constructor(aa){super(aa??{}),this.DEFAULT_ALPHA=.3,aa==null&&(aa={}),this.alpha=aa.alpha==null?this.DEFAULT_ALPHA:aa.alpha}call(aa,xa){const ba=getExactlyOneTensor(aa);return leakyRelu$4(ba,this.alpha)}computeOutputShape(aa){return aa}getConfig(){const aa={alpha:this.alpha},xa=super.getConfig();return Object.assign(aa,xa),aa}}LeakyReLU.className="LeakyReLU",registerClass$1(LeakyReLU);class PReLU extends Layer{constructor(aa){if(super(aa??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",aa==null&&(aa={}),this.supportsMasking=!0,this.alphaInitializer=getInitializer(aa.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=getRegularizer(aa.alphaRegularizer),this.alphaConstraint=getConstraint(aa.alphaConstraint),aa.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(aa.sharedAxes))this.sharedAxes=aa.sharedAxes;else if(typeof aa.sharedAxes=="number")this.sharedAxes=[aa.sharedAxes];else throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, but got ${aa.sharedAxes}`)}build(aa){aa=getExactlyOneShape(aa);const xa=aa.slice(1);if(this.sharedAxes!=null)for(const Sa of this.sharedAxes)xa[Sa-1]=1;this.alpha=this.addWeight("alpha",xa,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const ba={};if(this.sharedAxes!=null)for(let Sa=1;Sa<aa.length;++Sa)ba[Sa]=aa[Sa];this.inputSpec=[new InputSpec({ndim:aa.length,axes:ba})],this.built=!0}call(aa,xa){return aa=getExactlyOneTensor(aa),prelu$4(aa,this.alpha.read())}getConfig(){const aa={alphaInitializer:serializeInitializer(this.alphaInitializer),alphaRegularizer:serializeRegularizer(this.alphaRegularizer),alphaConstraint:serializeConstraint(this.alphaConstraint),sharedAxes:this.sharedAxes},xa=super.getConfig();return Object.assign(aa,xa),aa}}PReLU.className="PReLU",registerClass$1(PReLU);let ELU$6=class extends Layer{constructor(aa){if(super(aa??{}),this.DEFAULT_ALPHA=1,aa==null&&(aa={}),aa.alpha!=null&&aa.alpha!==this.DEFAULT_ALPHA)throw new NotImplementedError(`Non-default alpha value (${aa.alpha}) is not supported by the ELU layer yet.`);this.alpha=aa.alpha==null?this.DEFAULT_ALPHA:aa.alpha}call(aa,xa){const ba=getExactlyOneTensor(aa);return elu$5(ba)}computeOutputShape(aa){return aa}getConfig(){const aa={alpha:this.alpha},xa=super.getConfig();return Object.assign(aa,xa),aa}};ELU$6.className="ELU",registerClass$1(ELU$6);class ThresholdedReLU extends Layer{constructor(aa){super(aa??{}),this.DEFAULT_THETA=1,aa==null&&(aa={}),this.theta=aa.theta==null?this.DEFAULT_THETA:aa.theta}call(aa,xa){const ba=getExactlyOneTensor(aa);return mul$1(ba,cast$5(greater$3(ba,this.theta),"float32"))}computeOutputShape(aa){return aa}getConfig(){const aa={theta:this.theta},xa=super.getConfig();return Object.assign(aa,xa),aa}}ThresholdedReLU.className="ThresholdedReLU",registerClass$1(ThresholdedReLU);let Softmax$1=class extends Layer{constructor(aa){super(aa??{}),this.DEFAULT_AXIS=1,aa==null&&(aa={}),this.softmax=new Softmax$2().apply,this.axis=aa.axis==null?this.DEFAULT_AXIS:aa.axis}call(aa,xa){return tidy$1(()=>{let ba=getExactlyOneTensor(aa);const Sa=xa.mask;if(Sa!=null){const Ta=mul$1(sub$4(ones$1(ba.shape),cast$5(Sa,ba.dtype)),scalar$1(-1e9));ba=add$3(ba,Ta)}return this.axis instanceof Array?this.axis.length>1?exp$3(sub$4(ba,logSumExp(ba,this.axis,!0))):this.softmax(ba,this.axis[0]):this.softmax(ba,this.axis)})}computeOutputShape(aa){return aa}getConfig(){const aa={axis:this.axis},xa=super.getConfig();return Object.assign(aa,xa),aa}};Softmax$1.className="Softmax",registerClass$1(Softmax$1);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function normalizeArray(ha,aa,xa){if(typeof ha=="number")return pyListRepeat(ha,aa);if(ha.length!==aa)throw new ValueError(`The ${xa} argument must be an integer or tuple of ${aa} integers. Received: ${ha.length} elements.`);for(let ba=0;ba<aa;++ba){const Sa=ha[ba];if(!isInteger(Sa))throw new ValueError(`The ${xa} argument must be an integer or tuple of ${aa} integers. Received: ${JSON.stringify(ha)} including a non-integer number ${Sa}`)}return ha}function convOutputLength(ha,aa,xa,ba,Sa=1){if(ha==null)return ha;const Ta=aa+(aa-1)*(Sa-1);let wa;return xa==="same"?wa=ha:wa=ha-Ta+1,Math.floor((wa+ba-1)/ba)}function deconvLength(ha,aa,xa,ba){if(ha==null)return null;if(ba==="valid")ha=ha*aa+max$3([xa-aa,0]);else if(ba==="same")ha=ha*aa;else throw new ValueError(`Unsupport padding mode: ${ba}.`);return ha}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function preprocessConv2DInput(ha,aa){return tidy$1(()=>(checkDataFormat(aa),aa==="channelsFirst"?transpose$3(ha,[0,2,3,1]):ha))}function preprocessConv3DInput(ha,aa){return tidy$1(()=>(checkDataFormat(aa),aa==="channelsFirst"?transpose$3(ha,[0,2,3,4,1]):ha))}function conv1dWithBias(ha,aa,xa,ba=1,Sa="valid",Ta,wa=1){return tidy$1(()=>{if(Ta==null&&(Ta=imageDataFormat()),checkDataFormat(Ta),ha.shape.length!==3)throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ${ha.shape.length} instead.`);if(aa.shape.length!==3)throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ${aa.shape.length} instead`);if(xa!=null&&xa.shape.length!==1)throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ${xa.shape.length} instead`);if(Ta==="channelsFirst"&&(ha=transpose$3(ha,[0,2,1])),Sa==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let Ea=conv1d(ha,aa,ba,Sa==="same"?"same":"valid","NWC",wa);return xa!=null&&(Ea=biasAdd(Ea,xa)),Ea})}function conv2dWithBiasActivation(ha,aa,xa,ba=[1,1],Sa="valid",Ta,wa,Ea=null){return tidy$1(()=>{if(Ta==null&&(Ta=imageDataFormat()),checkDataFormat(Ta),ha.rank!==3&&ha.rank!==4)throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${ha.rank}.`);if(aa.rank!==3&&aa.rank!==4)throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${ha.rank}.`);let ka=preprocessConv2DInput(ha,Ta);if(Sa==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return ka=conv2d$2({x:ka,filter:aa,strides:ba,pad:Sa==="same"?"same":"valid",dilations:wa,dataFormat:"NHWC",bias:xa,activation:Ea}),Ta==="channelsFirst"&&(ka=transpose$3(ka,[0,3,1,2])),ka})}function conv3dWithBias(ha,aa,xa,ba=[1,1,1],Sa="valid",Ta,wa){return tidy$1(()=>{if(Ta==null&&(Ta=imageDataFormat()),checkDataFormat(Ta),ha.rank!==4&&ha.rank!==5)throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ${ha.rank}.`);if(aa.rank!==4&&aa.rank!==5)throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${ha.rank}.`);let Ea=preprocessConv3DInput(ha,Ta);if(Sa==="causal")throw new NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return Ea=conv3d(Ea,aa,ba,Sa==="same"?"same":"valid","NDHWC",wa),xa!=null&&(Ea=biasAdd(Ea,xa)),Ta==="channelsFirst"&&(Ea=transpose$3(Ea,[0,4,1,2,3])),Ea})}class BaseConv extends Layer{constructor(aa,xa){if(super(xa),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",BaseConv.verifyArgs(xa),this.rank=aa,assertPositiveInteger(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=normalizeArray(xa.kernelSize,aa,"kernelSize"),this.strides=normalizeArray(xa.strides==null?1:xa.strides,aa,"strides"),this.padding=xa.padding==null?"valid":xa.padding,checkPaddingMode(this.padding),this.dataFormat=xa.dataFormat==null?"channelsLast":xa.dataFormat,checkDataFormat(this.dataFormat),this.activation=getActivation(xa.activation),this.useBias=xa.useBias==null?!0:xa.useBias,this.biasInitializer=getInitializer(xa.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=getConstraint(xa.biasConstraint),this.biasRegularizer=getRegularizer(xa.biasRegularizer),this.activityRegularizer=getRegularizer(xa.activityRegularizer),this.dilationRate=normalizeArray(xa.dilationRate==null?1:xa.dilationRate,aa,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new ValueError(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new ValueError(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new ValueError(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(aa){if(assert$1("kernelSize"in aa,"required key 'kernelSize' not in config"),typeof aa.kernelSize!="number"&&!checkArrayTypeAndLength(aa.kernelSize,"number",1,3))throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(aa.kernelSize)}.`)}getConfig(){const aa={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:serializeActivation(this.activation),useBias:this.useBias,biasInitializer:serializeInitializer(this.biasInitializer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),biasConstraint:serializeConstraint(this.biasConstraint)},xa=super.getConfig();return Object.assign(aa,xa),aa}}class Conv extends BaseConv{constructor(aa,xa){super(aa,xa),this.kernel=null,Conv.verifyArgs(xa),this.filters=xa.filters,assertPositiveInteger(this.filters,"filters"),this.kernelInitializer=getInitializer(xa.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=getConstraint(xa.kernelConstraint),this.kernelRegularizer=getRegularizer(xa.kernelRegularizer)}build(aa){aa=getExactlyOneShape(aa);const xa=this.dataFormat==="channelsFirst"?1:aa.length-1;if(aa[xa]==null)throw new ValueError(`The channel dimension of the input should be defined. Found ${aa[xa]}`);const ba=aa[xa],Sa=this.kernelSize.concat([ba,this.filters]);this.kernel=this.addWeight("kernel",Sa,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[xa]:ba}}],this.built=!0}call(aa,xa){return tidy$1(()=>{aa=getExactlyOneTensor(aa);let ba;const Sa=this.bias==null?null:this.bias.read(),Ta=mapActivationToFusedKernel(this.activation.getClassName());if(Ta!=null&&this.rank===2)ba=conv2dWithBiasActivation(aa,this.kernel.read(),Sa,this.strides,this.padding,this.dataFormat,this.dilationRate,Ta);else{if(this.rank===1)ba=conv1dWithBias(aa,this.kernel.read(),Sa,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)ba=conv2dWithBiasActivation(aa,this.kernel.read(),Sa,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)ba=conv3dWithBias(aa,this.kernel.read(),Sa,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new NotImplementedError("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(ba=this.activation.apply(ba))}return ba})}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=[],ba=this.dataFormat==="channelsLast"?aa.slice(1,aa.length-1):aa.slice(2);for(let Ta=0;Ta<ba.length;++Ta){const wa=convOutputLength(ba[Ta],this.kernelSize[Ta],this.padding,this.strides[Ta],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[Ta]);xa.push(wa)}let Sa=[aa[0]];return this.dataFormat==="channelsLast"?(Sa=Sa.concat(xa),Sa.push(this.filters)):(Sa.push(this.filters),Sa=Sa.concat(xa)),Sa}getConfig(){const aa={filters:this.filters,kernelInitializer:serializeInitializer(this.kernelInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint)},xa=super.getConfig();return Object.assign(aa,xa),aa}static verifyArgs(aa){if(!("filters"in aa)||typeof aa.filters!="number"||aa.filters<1)throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(aa.filters)}`)}}let Conv2D$1=class uc extends Conv{constructor(aa){super(2,aa),uc.verifyArgs(aa)}getConfig(){const aa=super.getConfig();return delete aa.rank,aa}static verifyArgs(aa){if(typeof aa.kernelSize!="number"&&!checkArrayTypeAndLength(aa.kernelSize,"number",1,2))throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(aa.kernelSize)}.`)}};Conv2D$1.className="Conv2D",registerClass$1(Conv2D$1);let Conv3D$1=class dc extends Conv{constructor(aa){super(3,aa),dc.verifyArgs(aa)}getConfig(){const aa=super.getConfig();return delete aa.rank,aa}static verifyArgs(aa){if(typeof aa.kernelSize!="number"&&!(Array.isArray(aa.kernelSize)&&(aa.kernelSize.length===1||aa.kernelSize.length===3)))throw new ValueError(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(aa.kernelSize)}.`)}};Conv3D$1.className="Conv3D",registerClass$1(Conv3D$1);class Conv2DTranspose extends Conv2D$1{constructor(aa){if(super(aa),this.inputSpec=[new InputSpec({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(aa){if(aa=getExactlyOneShape(aa),aa.length!==4)throw new ValueError("Input should have rank 4; Received input shape: "+JSON.stringify(aa));const xa=this.dataFormat==="channelsFirst"?1:aa.length-1;if(aa[xa]==null)throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");const ba=aa[xa],Sa=this.kernelSize.concat([this.filters,ba]);this.kernel=this.addWeight("kernel",Sa,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:4,axes:{[xa]:ba}})],this.built=!0}call(aa,xa){return tidy$1(()=>{let ba=getExactlyOneTensor(aa);if(ba.shape.length!==4)throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${ba.shape.length}`);const Sa=ba.shape,Ta=Sa[0];let wa,Ea;this.dataFormat==="channelsFirst"?(wa=2,Ea=3):(wa=1,Ea=2);const ka=Sa[wa],Aa=Sa[Ea],Fa=this.kernelSize[0],La=this.kernelSize[1],el=this.strides[0],tl=this.strides[1],nl=deconvLength(ka,el,Fa,this.padding),rl=deconvLength(Aa,tl,La,this.padding),sl=[Ta,nl,rl,this.filters];this.dataFormat!=="channelsLast"&&(ba=transpose$3(ba,[0,2,3,1]));let ol=conv2dTranspose(ba,this.kernel.read(),sl,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(ol=transpose$3(ol,[0,3,1,2])),this.bias!=null&&(ol=biasAdd(ol,this.bias.read(),this.dataFormat)),this.activation!=null&&(ol=this.activation.apply(ol)),ol})}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa.slice();let ba,Sa,Ta;this.dataFormat==="channelsFirst"?(ba=1,Sa=2,Ta=3):(ba=3,Sa=1,Ta=2);const wa=this.kernelSize[0],Ea=this.kernelSize[1],ka=this.strides[0],Aa=this.strides[1];return xa[ba]=this.filters,xa[Sa]=deconvLength(xa[Sa],ka,wa,this.padding),xa[Ta]=deconvLength(xa[Ta],Aa,Ea,this.padding),xa}getConfig(){const aa=super.getConfig();return delete aa.dilationRate,aa}}Conv2DTranspose.className="Conv2DTranspose",registerClass$1(Conv2DTranspose);class Conv3DTranspose extends Conv3D$1{constructor(aa){if(super(aa),this.inputSpec=[new InputSpec({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(aa){if(aa=getExactlyOneShape(aa),aa.length!==5)throw new ValueError("Input should have rank 5; Received input shape: "+JSON.stringify(aa));const xa=this.dataFormat==="channelsFirst"?1:aa.length-1;if(aa[xa]==null)throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");const ba=aa[xa],Sa=this.kernelSize.concat([this.filters,ba]);this.kernel=this.addWeight("kernel",Sa,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:5,axes:{[xa]:ba}})],this.built=!0}call(aa,xa){return tidy$1(()=>{let ba=getExactlyOneTensor(aa);if(ba.shape.length!==5)throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${ba.shape.length}`);const Sa=ba.shape,Ta=Sa[0];let wa,Ea,ka;this.dataFormat==="channelsFirst"?(ka=2,wa=3,Ea=4):(ka=1,wa=2,Ea=3);const Aa=Sa[ka],Fa=Sa[wa],La=Sa[Ea],el=this.kernelSize[0],tl=this.kernelSize[1],nl=this.kernelSize[2],rl=this.strides[0],sl=this.strides[1],ol=this.strides[2],al=deconvLength(Aa,rl,el,this.padding),ll=deconvLength(Fa,sl,tl,this.padding),il=deconvLength(La,ol,nl,this.padding),cl=[Ta,al,ll,il,this.filters];this.dataFormat!=="channelsLast"&&(ba=transpose$3(ba,[0,2,3,4,1]));let ul=conv3dTranspose(ba,this.kernel.read(),cl,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(ul=transpose$3(ul,[0,4,1,2,3])),this.bias!==null&&(ul=biasAdd(ul,this.bias.read(),this.dataFormat)),this.activation!==null&&(ul=this.activation.apply(ul)),ul})}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa.slice();let ba,Sa,Ta,wa;this.dataFormat==="channelsFirst"?(ba=1,Sa=2,Ta=3,wa=4):(ba=4,Sa=1,Ta=2,wa=3);const Ea=this.kernelSize[0],ka=this.kernelSize[1],Aa=this.kernelSize[2],Fa=this.strides[0],La=this.strides[1],el=this.strides[2];return xa[ba]=this.filters,xa[Sa]=deconvLength(xa[Sa],Fa,Ea,this.padding),xa[Ta]=deconvLength(xa[Ta],La,ka,this.padding),xa[wa]=deconvLength(xa[wa],el,Aa,this.padding),xa}getConfig(){const aa=super.getConfig();return delete aa.dilationRate,aa}}Conv3DTranspose.className="Conv3DTranspose",registerClass$1(Conv3DTranspose);class SeparableConv extends Conv{constructor(aa,xa){if(super(aa,xa),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,xa.filters==null)throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(xa.kernelInitializer!=null||xa.kernelRegularizer!=null||xa.kernelConstraint!=null)throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(xa.padding!=null&&xa.padding!=="same"&&xa.padding!=="valid")throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(xa.padding)}`);this.depthMultiplier=xa.depthMultiplier==null?1:xa.depthMultiplier,this.depthwiseInitializer=getInitializer(xa.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=getRegularizer(xa.depthwiseRegularizer),this.depthwiseConstraint=getConstraint(xa.depthwiseConstraint),this.pointwiseInitializer=getInitializer(xa.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=getRegularizer(xa.pointwiseRegularizer),this.pointwiseConstraint=getConstraint(xa.pointwiseConstraint)}build(aa){if(aa=getExactlyOneShape(aa),aa.length<this.rank+2)throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(aa)}`);const xa=this.dataFormat==="channelsFirst"?1:aa.length-1;if(aa[xa]==null||aa[xa]<0)throw new ValueError(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(aa[xa])}`);const ba=aa[xa],Sa=this.kernelSize.concat([ba,this.depthMultiplier]),Ta=[];for(let Ea=0;Ea<this.rank;++Ea)Ta.push(1);Ta.push(ba*this.depthMultiplier,this.filters);const wa=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",Sa,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,wa,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",Ta,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,wa,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,wa,this.biasConstraint):this.bias=null,this.inputSpec=[new InputSpec({ndim:this.rank+2,axes:{[xa]:ba}})],this.built=!0}call(aa,xa){return tidy$1(()=>{aa=getExactlyOneTensor(aa);let ba;if(this.rank===1)throw new NotImplementedError("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(aa=transpose$3(aa,[0,2,3,1])),ba=separableConv2d(aa,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(ba=biasAdd(ba,this.bias.read(),this.dataFormat)),this.activation!=null&&(ba=this.activation.apply(ba)),this.dataFormat==="channelsFirst"&&(ba=transpose$3(ba,[0,3,1,2])),ba})}getConfig(){const aa=super.getConfig();return delete aa.rank,delete aa.kernelInitializer,delete aa.kernelRegularizer,delete aa.kernelConstraint,aa.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),aa.pointwiseInitializer=serializeInitializer(this.pointwiseInitializer),aa.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),aa.pointwiseRegularizer=serializeRegularizer(this.pointwiseRegularizer),aa.depthwiseConstraint=serializeConstraint(this.depthwiseConstraint),aa.pointwiseConstraint=serializeConstraint(this.pointwiseConstraint),aa}}SeparableConv.className="SeparableConv";class SeparableConv2D extends SeparableConv{constructor(aa){super(2,aa)}}SeparableConv2D.className="SeparableConv2D",registerClass$1(SeparableConv2D);class Conv1D extends Conv{constructor(aa){super(1,aa),Conv1D.verifyArgs(aa),this.inputSpec=[{ndim:3}]}getConfig(){const aa=super.getConfig();return delete aa.rank,delete aa.dataFormat,aa}static verifyArgs(aa){if(typeof aa.kernelSize!="number"&&!checkArrayTypeAndLength(aa.kernelSize,"number",1,1))throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(aa.kernelSize)}.`)}}Conv1D.className="Conv1D",registerClass$1(Conv1D);class Cropping2D extends Layer{constructor(aa){super(aa),typeof aa.cropping=="number"?this.cropping=[[aa.cropping,aa.cropping],[aa.cropping,aa.cropping]]:typeof aa.cropping[0]=="number"?this.cropping=[[aa.cropping[0],aa.cropping[0]],[aa.cropping[1],aa.cropping[1]]]:this.cropping=aa.cropping,this.dataFormat=aa.dataFormat===void 0?"channelsLast":aa.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(aa){return this.dataFormat==="channelsFirst"?[aa[0],aa[1],aa[2]-this.cropping[0][0]-this.cropping[0][1],aa[3]-this.cropping[1][0]-this.cropping[1][1]]:[aa[0],aa[1]-this.cropping[0][0]-this.cropping[0][1],aa[2]-this.cropping[1][0]-this.cropping[1][1],aa[3]]}call(aa,xa){return tidy$1(()=>{if(aa=getExactlyOneTensor(aa),this.dataFormat==="channelsLast"){const ba=sliceAlongAxis(aa,this.cropping[0][0],aa.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return sliceAlongAxis(ba,this.cropping[1][0],aa.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{const ba=sliceAlongAxis(aa,this.cropping[0][0],aa.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return sliceAlongAxis(ba,this.cropping[1][0],aa.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const aa={cropping:this.cropping,dataFormat:this.dataFormat},xa=super.getConfig();return Object.assign(aa,xa),aa}}Cropping2D.className="Cropping2D",registerClass$1(Cropping2D);class UpSampling2D extends Layer{constructor(aa){super(aa),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=aa.size==null?this.DEFAULT_SIZE:aa.size,this.dataFormat=aa.dataFormat==null?"channelsLast":aa.dataFormat,checkDataFormat(this.dataFormat),this.interpolation=aa.interpolation==null?"nearest":aa.interpolation,checkInterpolationFormat(this.interpolation)}computeOutputShape(aa){if(this.dataFormat==="channelsFirst"){const xa=aa[2]==null?null:this.size[0]*aa[2],ba=aa[3]==null?null:this.size[1]*aa[3];return[aa[0],aa[1],xa,ba]}else{const xa=aa[1]==null?null:this.size[0]*aa[1],ba=aa[2]==null?null:this.size[1]*aa[2];return[aa[0],xa,ba,aa[3]]}}call(aa,xa){return tidy$1(()=>{let ba=getExactlyOneTensor(aa);const Sa=ba.shape;if(this.dataFormat==="channelsFirst"){ba=transpose$3(ba,[0,2,3,1]);const Ta=this.size[0]*Sa[2],wa=this.size[1]*Sa[3],Ea=this.interpolation==="nearest"?image$1.resizeNearestNeighbor(ba,[Ta,wa]):image$1.resizeBilinear(ba,[Ta,wa]);return transpose$3(Ea,[0,3,1,2])}else{const Ta=this.size[0]*Sa[1],wa=this.size[1]*Sa[2];return this.interpolation==="nearest"?image$1.resizeNearestNeighbor(ba,[Ta,wa]):image$1.resizeBilinear(ba,[Ta,wa])}})}getConfig(){const aa={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},xa=super.getConfig();return Object.assign(aa,xa),aa}}UpSampling2D.className="UpSampling2D",registerClass$1(UpSampling2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function depthwiseConv2d(ha,aa,xa=[1,1],ba="valid",Sa,Ta){return tidy$1(()=>{Sa==null&&(Sa=imageDataFormat()),checkDataFormat(Sa);let wa=preprocessConv2DInput(ha,Sa);if(ha.rank!==4)throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ${ha.rank}-D`);if(aa.rank!==4)throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ${aa.rank}-D`);return wa=depthwiseConv2d$2(wa,aa,xa,ba==="same"?"same":"valid","NHWC",Ta),Sa==="channelsFirst"&&(wa=transpose$3(wa,[0,3,1,2])),wa})}class DepthwiseConv2D extends BaseConv{constructor(aa){super(2,aa),this.depthwiseKernel=null,this.depthMultiplier=aa.depthMultiplier==null?1:aa.depthMultiplier,this.depthwiseInitializer=getInitializer(aa.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=getConstraint(aa.depthwiseConstraint),this.depthwiseRegularizer=getRegularizer(aa.depthwiseRegularizer)}build(aa){if(aa=getExactlyOneShape(aa),aa.length<4)throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(aa)}.`);const xa=this.dataFormat==="channelsFirst"?1:3;if(aa[xa]==null||aa[xa]<0)throw new ValueError(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${aa[xa]}).`);const ba=aa[xa],Sa=[this.kernelSize[0],this.kernelSize[1],ba,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",Sa,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[ba*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(aa,xa){return tidy$1(()=>{aa=getExactlyOneTensor(aa);let ba=depthwiseConv2d(aa,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(ba=biasAdd(ba,this.bias.read(),this.dataFormat)),this.activation!=null&&(ba=this.activation.apply(ba)),ba})}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=this.dataFormat==="channelsFirst"?aa[2]:aa[1],ba=this.dataFormat==="channelsFirst"?aa[3]:aa[2],Sa=this.dataFormat==="channelsFirst"?aa[1]*this.depthMultiplier:aa[3]*this.depthMultiplier,Ta=convOutputLength(xa,this.kernelSize[0],this.padding,this.strides[0]),wa=convOutputLength(ba,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[aa[0],Sa,Ta,wa]:[aa[0],Ta,wa,Sa]}getConfig(){const aa=super.getConfig();return aa.depthMultiplier=this.depthMultiplier,aa.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),aa.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),aa.depthwiseConstraint=serializeConstraint(this.depthwiseRegularizer),aa}}DepthwiseConv2D.className="DepthwiseConv2D",registerClass$1(DepthwiseConv2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function standardizeArgs(ha,aa,xa,ba){if(Array.isArray(ha)){if(aa!=null||xa!=null)throw new ValueError("When inputs is an array, neither initialState or constants should be provided");ba!=null&&(xa=ha.slice(ha.length-ba,ha.length),ha=ha.slice(0,ha.length-ba)),ha.length>1&&(aa=ha.slice(1,ha.length)),ha=ha[0]}function Sa(Ta){return Ta==null||Array.isArray(Ta)?Ta:[Ta]}return aa=Sa(aa),xa=Sa(xa),{inputs:ha,initialState:aa,constants:xa}}function rnn(ha,aa,xa,ba=!1,Sa,Ta,wa=!1,Ea=!1){return tidy$1(()=>{const ka=aa.shape.length;if(ka<3)throw new ValueError(`Input should be at least 3D, but is ${ka}D.`);const Aa=[1,0].concat(range$3(2,ka));aa=transpose$3(aa,Aa),wa&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),Sa!=null&&(Sa=cast$5(cast$5(Sa,"bool"),"float32"),Sa.rank===ka-1&&(Sa=expandDims$4(Sa,-1)),Sa=transpose$3(Sa,Aa)),ba&&(aa=reverse$3(aa,0),Sa!=null&&(Sa=reverse$3(Sa,0)));const Fa=[];let La,el=xa;const tl=aa.shape[0],nl=unstack(aa);let rl;Sa!=null&&(rl=unstack(Sa));for(let ol=0;ol<tl;++ol){const al=nl[ol],ll=tidy$1(()=>ha(al,el));if(Sa==null)La=ll[0],el=ll[1];else{const il=tidy$1(()=>{const cl=rl[ol],ul=sub$4(onesLike$3(cl),cl),dl=add$3(mul$1(ll[0],cl),mul$1(el[0],ul)),hl=el.map((pl,fl)=>add$3(mul$1(ll[1][fl],cl),mul$1(pl,ul)));return{output:dl,newStates:hl}});La=il.output,el=il.newStates}Ea&&Fa.push(La)}let sl;return Ea&&(sl=stack(Fa,1)),[La,sl,el]})}class RNN extends Layer{constructor(aa){super(aa);let xa;if(aa.cell==null)throw new ValueError("cell property is missing for the constructor of RNN.");if(Array.isArray(aa.cell)?xa=new StackedRNNCells({cells:aa.cell}):xa=aa.cell,xa.stateSize==null)throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=xa,this.returnSequences=aa.returnSequences==null?!1:aa.returnSequences,this.returnState=aa.returnState==null?!1:aa.returnState,this.goBackwards=aa.goBackwards==null?!1:aa.goBackwards,this._stateful=aa.stateful==null?!1:aa.stateful,this.unroll=aa.unroll==null?!1:aa.unroll,this.supportsMasking=!0,this.inputSpec=[new InputSpec({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){const aa=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return range$3(0,aa).map(xa=>null)}else return this.states_}setStates(aa){this.states_=aa}computeOutputShape(aa){isArrayOfShapes(aa)&&(aa=aa[0]),aa=aa;let xa=this.cell.stateSize;Array.isArray(xa)||(xa=[xa]);const ba=xa[0];let Sa;if(this.returnSequences?Sa=[aa[0],aa[1],ba]:Sa=[aa[0],ba],this.returnState){const Ta=[];for(const wa of xa)Ta.push([aa[0],wa]);return[Sa].concat(Ta)}else return Sa}computeMask(aa,xa){return tidy$1(()=>{Array.isArray(xa)&&(xa=xa[0]);const ba=this.returnSequences?xa:null;if(this.returnState){const Sa=this.states.map(Ta=>null);return[ba].concat(Sa)}else return ba})}get states(){if(this.states_==null){const aa=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,xa=[];for(let ba=0;ba<aa;++ba)xa.push(null);return xa}else return this.states_}set states(aa){this.states_=aa}build(aa){if(this.numConstants!=null)throw new NotImplementedError("Constants support is not implemented in RNN yet.");isArrayOfShapes(aa)&&(aa=aa[0]),aa=aa;const xa=this.stateful?aa[0]:null,ba=aa.slice(2);this.inputSpec[0]=new InputSpec({shape:[xa,null,...ba]});const Sa=[aa[0]].concat(aa.slice(2));this.cell.build(Sa);let Ta;if(Array.isArray(this.cell.stateSize)?Ta=this.cell.stateSize:Ta=[this.cell.stateSize],this.stateSpec!=null){if(!arraysEqual$1(this.stateSpec.map(wa=>wa.shape[wa.shape.length-1]),Ta))throw new ValueError(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=Ta.map(wa=>new InputSpec({shape:[null,wa]}));this.stateful&&this.resetStates()}resetStates(aa,xa=!1){tidy$1(()=>{if(!this.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");const ba=this.inputSpec[0].shape[0];if(ba==null)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(Sa=>zeros$2([ba,Sa])):this.states_=[zeros$2([ba,this.cell.stateSize])];else if(aa==null)dispose$1(this.states_),this.keptStates!=null&&(dispose$1(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(Sa=>zeros$2([ba,Sa])):this.states_[0]=zeros$2([ba,this.cell.stateSize]);else{if(Array.isArray(aa)||(aa=[aa]),aa.length!==this.states_.length)throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${aa.length} state value(s). Input received: ${aa}`);xa===!0?this.keptStates.push(this.states_.slice()):dispose$1(this.states_);for(let Sa=0;Sa<this.states_.length;++Sa){const Ta=aa[Sa],wa=Array.isArray(this.cell.stateSize)?this.cell.stateSize[Sa]:this.cell.stateSize,Ea=[ba,wa];if(!arraysEqual$1(Ta.shape,Ea))throw new ValueError(`State ${Sa} is incompatible with layer ${this.name}: expected shape=${Ea}, received shape=${Ta.shape}`);this.states_[Sa]=Ta}}this.states_=this.states_.map(Sa=>keep$1(Sa.clone()))})}apply(aa,xa){let ba=xa==null?null:xa.initialState,Sa=xa==null?null:xa.constants;xa==null&&(xa={});const Ta=standardizeArgs(aa,ba,Sa,this.numConstants);aa=Ta.inputs,ba=Ta.initialState,Sa=Ta.constants;let wa=[],Ea=[];if(ba!=null){xa.initialState=ba,wa=wa.concat(ba),this.stateSpec=[];for(const Aa of ba)this.stateSpec.push(new InputSpec({shape:Aa.shape}));Ea=Ea.concat(this.stateSpec)}if(Sa!=null&&(xa.constants=Sa,wa=wa.concat(Sa),this.numConstants=Sa.length),wa[0]instanceof SymbolicTensor){const Aa=[aa].concat(wa),Fa=this.inputSpec.concat(Ea),La=this.inputSpec;this.inputSpec=Fa;const el=super.apply(Aa,xa);return this.inputSpec=La,el}else return super.apply(aa,xa)}call(aa,xa){return tidy$1(()=>{const ba=xa==null?null:xa.mask,Sa=xa==null?null:xa.training;let Ta=xa==null?null:xa.initialState;aa=getExactlyOneTensor(aa),Ta==null&&(this.stateful?Ta=this.states_:Ta=this.getInitialState(aa));const wa=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(Ta.length!==wa)throw new ValueError(`RNN Layer has ${wa} state(s) but was passed ${Ta.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const Ea={training:Sa},Aa=rnn((nl,rl)=>{const sl=this.cell.call([nl].concat(rl),Ea);return[sl[0],sl.slice(1)]},aa,Ta,this.goBackwards,ba,null,this.unroll,this.returnSequences),Fa=Aa[0],La=Aa[1],el=Aa[2];this.stateful&&this.resetStates(el,Sa);const tl=this.returnSequences?La:Fa;return this.returnState?[tl].concat(el):tl})}getInitialState(aa){return tidy$1(()=>{let xa=zeros$2(aa.shape);return xa=sum$5(xa,[1,2]),xa=expandDims$3(xa),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(ba=>ba>1?tile$3(xa,[1,ba]):xa):this.cell.stateSize>1?[tile$3(xa,[1,this.cell.stateSize])]:[xa]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(aa){super.setFastWeightInitDuringBuild(aa),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(aa)}getConfig(){const aa=super.getConfig(),xa={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(xa.numConstants=this.numConstants);const ba=this.cell.getConfig();return this.getClassName()===RNN.className&&(xa.cell={className:this.cell.getClassName(),config:ba}),Object.assign(Object.assign(Object.assign({},ba),aa),xa)}static fromConfig(aa,xa,ba={}){const Sa=xa.cell,Ta=deserialize(Sa,ba);return new aa(Object.assign(xa,{cell:Ta}))}}RNN.className="RNN",registerClass$1(RNN);class RNNCell extends Layer{}class SimpleRNNCell extends RNNCell{constructor(aa){super(aa),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=aa.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(aa.activation==null?this.DEFAULT_ACTIVATION:aa.activation),this.useBias=aa.useBias==null?!0:aa.useBias,this.kernelInitializer=getInitializer(aa.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(aa.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(aa.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=getRegularizer(aa.kernelRegularizer),this.recurrentRegularizer=getRegularizer(aa.recurrentRegularizer),this.biasRegularizer=getRegularizer(aa.biasRegularizer),this.kernelConstraint=getConstraint(aa.kernelConstraint),this.recurrentConstraint=getConstraint(aa.recurrentConstraint),this.biasConstraint=getConstraint(aa.biasConstraint),this.dropout=min$3([1,max$3([0,aa.dropout==null?0:aa.dropout])]),this.recurrentDropout=min$3([1,max$3([0,aa.recurrentDropout==null?0:aa.recurrentDropout])]),this.dropoutFunc=aa.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(aa){aa=getExactlyOneShape(aa),this.kernel=this.addWeight("kernel",[aa[aa.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(aa,xa){return tidy$1(()=>{if(aa=aa,aa.length!==2)throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${aa.length}.`);let ba=aa[1];aa=aa[0];const Sa=xa.training==null?!1:xa.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(aa),rate:this.dropout,training:Sa,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(ba),rate:this.recurrentDropout,training:Sa,dropoutFunc:this.dropoutFunc}));let Ta;const wa=this.dropoutMask,Ea=this.recurrentDropoutMask;wa!=null?Ta=dot(mul$1(aa,wa),this.kernel.read()):Ta=dot(aa,this.kernel.read()),this.bias!=null&&(Ta=biasAdd(Ta,this.bias.read())),Ea!=null&&(ba=mul$1(ba,Ea));let ka=add$3(Ta,dot(ba,this.recurrentKernel.read()));return this.activation!=null&&(ka=this.activation.apply(ka)),[ka,ka]})}getConfig(){const aa=super.getConfig(),xa={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},aa),xa)}}SimpleRNNCell.className="SimpleRNNCell",registerClass$1(SimpleRNNCell);class SimpleRNN extends RNN{constructor(aa){aa.cell=new SimpleRNNCell(aa),super(aa)}call(aa,xa){return tidy$1(()=>{this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const ba=xa==null?null:xa.mask,Sa=xa==null?null:xa.training,Ta=xa==null?null:xa.initialState;return super.call(aa,{mask:ba,training:Sa,initialState:Ta})})}static fromConfig(aa,xa){return new aa(xa)}}SimpleRNN.className="SimpleRNN",registerClass$1(SimpleRNN);class GRUCell extends RNNCell{constructor(aa){if(super(aa),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",aa.resetAfter)throw new ValueError("GRUCell does not support reset_after parameter set to true.");this.units=aa.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(aa.activation===void 0?this.DEFAULT_ACTIVATION:aa.activation),this.recurrentActivation=getActivation(aa.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:aa.recurrentActivation),this.useBias=aa.useBias==null?!0:aa.useBias,this.kernelInitializer=getInitializer(aa.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(aa.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(aa.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=getRegularizer(aa.kernelRegularizer),this.recurrentRegularizer=getRegularizer(aa.recurrentRegularizer),this.biasRegularizer=getRegularizer(aa.biasRegularizer),this.kernelConstraint=getConstraint(aa.kernelConstraint),this.recurrentConstraint=getConstraint(aa.recurrentConstraint),this.biasConstraint=getConstraint(aa.biasConstraint),this.dropout=min$3([1,max$3([0,aa.dropout==null?0:aa.dropout])]),this.recurrentDropout=min$3([1,max$3([0,aa.recurrentDropout==null?0:aa.recurrentDropout])]),this.dropoutFunc=aa.dropoutFunc,this.implementation=aa.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(aa){aa=getExactlyOneShape(aa);const xa=aa[aa.length-1];this.kernel=this.addWeight("kernel",[xa,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(aa,xa){return tidy$1(()=>{if(aa=aa,aa.length!==2)throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ${aa.length}.`);const ba=xa.training==null?!1:xa.training;let Sa=aa[1];aa=aa[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(aa),rate:this.dropout,training:ba,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(Sa),rate:this.recurrentDropout,training:ba,count:3,dropoutFunc:this.dropoutFunc}));const Ta=this.dropoutMask,wa=this.recurrentDropoutMask;let Ea,ka,Aa;0<this.dropout&&this.dropout<1&&(aa=mul$1(aa,Ta[0]));let Fa=dot(aa,this.kernel.read());this.useBias&&(Fa=biasAdd(Fa,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(Sa=mul$1(Sa,wa[0]));const La=this.recurrentKernel.read(),[el,tl]=split$3(La,[2*this.units,this.units],La.rank-1),nl=dot(Sa,el),[rl,sl,ol]=split$3(Fa,3,Fa.rank-1),[al,ll]=split$3(nl,2,nl.rank-1);Ea=this.recurrentActivation.apply(add$3(rl,al)),ka=this.recurrentActivation.apply(add$3(sl,ll));const il=dot(mul$1(ka,Sa),tl);Aa=this.activation.apply(add$3(ol,il));const cl=add$3(mul$1(Ea,Sa),mul$1(add$3(1,neg$3(Ea)),Aa));return[cl,cl]})}getConfig(){const aa=super.getConfig(),xa={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},aa),xa)}}GRUCell.className="GRUCell",registerClass$1(GRUCell);class GRU extends RNN{constructor(aa){aa.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),aa.cell=new GRUCell(aa),super(aa)}call(aa,xa){return tidy$1(()=>{this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const ba=xa==null?null:xa.mask,Sa=xa==null?null:xa.training,Ta=xa==null?null:xa.initialState;return super.call(aa,{mask:ba,training:Sa,initialState:Ta})})}static fromConfig(aa,xa){return xa.implmentation===0&&(xa.implementation=1),new aa(xa)}}GRU.className="GRU",registerClass$1(GRU);class LSTMCell extends RNNCell{constructor(aa){super(aa),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=aa.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(aa.activation===void 0?this.DEFAULT_ACTIVATION:aa.activation),this.recurrentActivation=getActivation(aa.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:aa.recurrentActivation),this.useBias=aa.useBias==null?!0:aa.useBias,this.kernelInitializer=getInitializer(aa.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=getInitializer(aa.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=getInitializer(aa.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=aa.unitForgetBias,this.kernelRegularizer=getRegularizer(aa.kernelRegularizer),this.recurrentRegularizer=getRegularizer(aa.recurrentRegularizer),this.biasRegularizer=getRegularizer(aa.biasRegularizer),this.kernelConstraint=getConstraint(aa.kernelConstraint),this.recurrentConstraint=getConstraint(aa.recurrentConstraint),this.biasConstraint=getConstraint(aa.biasConstraint),this.dropout=min$3([1,max$3([0,aa.dropout==null?0:aa.dropout])]),this.recurrentDropout=min$3([1,max$3([0,aa.recurrentDropout==null?0:aa.recurrentDropout])]),this.dropoutFunc=aa.dropoutFunc,this.implementation=aa.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(aa){var xa;aa=getExactlyOneShape(aa);const ba=aa[aa.length-1];this.kernel=this.addWeight("kernel",[ba,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let Sa;if(this.useBias){if(this.unitForgetBias){const Ta=this.biasInitializer,wa=this.units;Sa=new(xa=class extends Initializer{apply(ka,Aa){const Fa=Ta.apply([wa]),La=new Ones().apply([wa]),el=Ta.apply([wa*2]);return concatAlongFirstAxis(concatAlongFirstAxis(Fa,La),el)}},xa.className="CustomInit",xa)}else Sa=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,Sa,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(aa,xa){return tidy$1(()=>{const ba=xa.training==null?!1:xa.training;if(aa=aa,aa.length!==3)throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${aa.length}.`);let Sa=aa[1];const Ta=aa[2];aa=aa[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(aa),rate:this.dropout,training:ba,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(Sa),rate:this.recurrentDropout,training:ba,count:4,dropoutFunc:this.dropoutFunc}));const wa=this.dropoutMask,Ea=this.recurrentDropoutMask;let ka,Aa,Fa,La;0<this.dropout&&this.dropout<1&&(aa=mul$1(aa,wa[0]));let el=dot(aa,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(Sa=mul$1(Sa,Ea[0])),el=add$3(el,dot(Sa,this.recurrentKernel.read())),this.useBias&&(el=biasAdd(el,this.bias.read()));const[tl,nl,rl,sl]=split$3(el,4,el.rank-1);ka=this.recurrentActivation.apply(tl),Aa=this.recurrentActivation.apply(nl),Fa=add$3(mul$1(Aa,Ta),mul$1(ka,this.activation.apply(rl))),La=this.recurrentActivation.apply(sl);const ol=mul$1(La,this.activation.apply(Fa));return[ol,ol,Fa]})}getConfig(){const aa=super.getConfig(),xa={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},aa),xa)}}LSTMCell.className="LSTMCell",registerClass$1(LSTMCell);class LSTM extends RNN{constructor(aa){aa.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),aa.cell=new LSTMCell(aa),super(aa)}call(aa,xa){return tidy$1(()=>{this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const ba=xa==null?null:xa.mask,Sa=xa==null?null:xa.training,Ta=xa==null?null:xa.initialState;return super.call(aa,{mask:ba,training:Sa,initialState:Ta})})}static fromConfig(aa,xa){return xa.implmentation===0&&(xa.implementation=1),new aa(xa)}}LSTM.className="LSTM",registerClass$1(LSTM);class StackedRNNCells extends RNNCell{constructor(aa){super(aa),this.cells=aa.cells}get stateSize(){const aa=[];for(const xa of this.cells.slice().reverse())Array.isArray(xa.stateSize)?aa.push(...xa.stateSize):aa.push(xa.stateSize);return aa}call(aa,xa){return tidy$1(()=>{aa=aa;let ba=aa.slice(1);const Sa=[];for(const Ea of this.cells.slice().reverse())Array.isArray(Ea.stateSize)?Sa.push(ba.splice(0,Ea.stateSize.length)):Sa.push(ba.splice(0,1));Sa.reverse();const Ta=[];let wa;for(let Ea=0;Ea<this.cells.length;++Ea){const ka=this.cells[Ea];ba=Sa[Ea],Ea===0?wa=[aa[0]].concat(ba):wa=[wa[0]].concat(ba),wa=ka.call(wa,xa),Ta.push(wa.slice(1))}ba=[];for(const Ea of Ta.slice().reverse())ba.push(...Ea);return[wa[0]].concat(ba)})}build(aa){isArrayOfShapes(aa)&&(aa=aa[0]),aa=aa;let xa;this.cells.forEach((ba,Sa)=>{nameScope(`RNNCell_${Sa}`,()=>{ba.build(aa),Array.isArray(ba.stateSize)?xa=ba.stateSize[0]:xa=ba.stateSize,aa=[aa[0],xa]})}),this.built=!0}getConfig(){const aa=super.getConfig(),xa=Ta=>({className:Ta.getClassName(),config:Ta.getConfig()}),Sa={cells:this.cells.map(xa)};return Object.assign(Object.assign({},aa),Sa)}static fromConfig(aa,xa,ba={}){const Sa=[];for(const Ta of xa.cells)Sa.push(deserialize(Ta,ba));return new aa({cells:Sa})}get trainableWeights(){if(!this.trainable)return[];const aa=[];for(const xa of this.cells)aa.push(...xa.trainableWeights);return aa}get nonTrainableWeights(){const aa=[];for(const xa of this.cells)aa.push(...xa.nonTrainableWeights);if(!this.trainable){const xa=[];for(const ba of this.cells)xa.push(...ba.trainableWeights);return xa.concat(aa)}return aa}getWeights(){const aa=[];for(const xa of this.cells)aa.push(...xa.weights);return batchGetValue(aa)}setWeights(aa){const xa=[];for(const ba of this.cells){const Sa=ba.weights.length,Ta=aa.splice(Sa);for(let wa=0;wa<ba.weights.length;++wa)xa.push([ba.weights[wa],Ta[wa]])}batchSetValue(xa)}}StackedRNNCells.className="StackedRNNCells",registerClass$1(StackedRNNCells);function generateDropoutMask(ha){const{ones:aa,rate:xa,training:ba=!1,count:Sa=1,dropoutFunc:Ta}=ha,wa=()=>Ta!=null?Ta(aa(),xa):dropout(aa(),xa),Ea=()=>inTrainPhase(wa,aa,ba);return!Sa||Sa<=1?keep$1(Ea().clone()):Array(Sa).fill(void 0).map(Ea).map(Aa=>keep$1(Aa.clone()))}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var __rest=function(ha,aa){var xa={};for(var ba in ha)Object.prototype.hasOwnProperty.call(ha,ba)&&aa.indexOf(ba)<0&&(xa[ba]=ha[ba]);if(ha!=null&&typeof Object.getOwnPropertySymbols=="function")for(var Sa=0,ba=Object.getOwnPropertySymbols(ha);Sa<ba.length;Sa++)aa.indexOf(ba[Sa])<0&&Object.prototype.propertyIsEnumerable.call(ha,ba[Sa])&&(xa[ba[Sa]]=ha[ba[Sa]]);return xa};class ConvRNN2D extends RNN{constructor(aa){if(aa.unroll)throw new NotImplementedError("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(aa.cell))throw new NotImplementedError("It is not possible at the moment to stack convolutional cells.");super(aa),this.inputSpec=[new InputSpec({ndim:5})]}call(aa,xa){return tidy$1(()=>{if(this.cell.dropoutMask!=null&&(dispose$1(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(dispose$1(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),xa&&xa.constants)throw new ValueError("ConvRNN2D cell does not support constants");const ba=xa==null?null:xa.mask,Sa=xa==null?null:xa.training,Ta=xa==null?null:xa.initialState;return super.call(aa,{mask:ba,training:Sa,initialState:Ta})})}computeOutputShape(aa){let xa=this.computeSingleOutputShape(aa);return this.returnSequences||(xa=[xa[0],...xa.slice(2)]),this.returnState&&(xa=[xa,...Array(2).fill([aa[0],...xa.slice(-3)])]),xa}getInitialState(aa){return tidy$1(()=>{const{stateSize:xa}=this.cell,ba=aa.shape,Sa=this.computeSingleOutputShape(ba),Ta=[Sa[0],...Sa.slice(2)],wa=zeros$2(Ta);return Array.isArray(xa)?Array(xa.length).fill(wa):[wa]})}resetStates(aa,xa=!1){tidy$1(()=>{if(!this.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");const ba=this.inputSpec[0].shape,Sa=this.computeSingleOutputShape(ba),Ta=[Sa[0],...Sa.slice(2)];if(ba[0]==null)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>zeros$2(Ta)):this.states_=[zeros$2(Ta)];else if(aa==null)dispose$1(this.states_),this.keptStates!=null&&(dispose$1(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>zeros$2(Ta)):this.states_[0]=zeros$2(Ta);else{if(Array.isArray(aa)||(aa=[aa]),aa.length!==this.states_.length)throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${aa.length} state value(s). Input received: ${aa}`);xa?this.keptStates.push(this.states_.slice()):dispose$1(this.states_);for(let Ea=0;Ea<this.states_.length;++Ea){const ka=aa[Ea],Aa=Ta;if(!arraysEqual$1(ka.shape,Aa))throw new ValueError(`State ${Ea} is incompatible with layer ${this.name}: expected shape=${Aa}, received shape=${ka.shape}`);this.states_[Ea]=ka}}this.states_=this.states_.map(Ea=>keep$1(Ea.clone()))})}computeSingleOutputShape(aa){const{dataFormat:xa,filters:ba,kernelSize:Sa,padding:Ta,strides:wa,dilationRate:Ea}=this.cell,ka=xa==="channelsFirst",Aa=aa[ka?3:2],Fa=aa[ka?4:3],La=convOutputLength(Aa,Sa[0],Ta,wa[0],Ea[0]),el=convOutputLength(Fa,Sa[1],Ta,wa[1],Ea[1]);return[...aa.slice(0,2),...ka?[ba,La,el]:[La,el,ba]]}}ConvRNN2D.className="ConvRNN2D";class ConvLSTM2DCell extends LSTMCell{constructor(aa){const{filters:xa,kernelSize:ba,strides:Sa,padding:Ta,dataFormat:wa,dilationRate:Ea}=aa;super(Object.assign(Object.assign({},aa),{units:xa})),this.filters=xa,assertPositiveInteger(this.filters,"filters"),this.kernelSize=normalizeArray(ba,2,"kernelSize"),this.kernelSize.forEach(ka=>assertPositiveInteger(ka,"kernelSize")),this.strides=normalizeArray(Sa||1,2,"strides"),this.strides.forEach(ka=>assertPositiveInteger(ka,"strides")),this.padding=Ta||"valid",checkPaddingMode(this.padding),this.dataFormat=wa||"channelsLast",checkDataFormat(this.dataFormat),this.dilationRate=normalizeArray(Ea||1,2,"dilationRate"),this.dilationRate.forEach(ka=>assertPositiveInteger(ka,"dilationRate"))}build(aa){var xa;aa=getExactlyOneShape(aa);const ba=this.dataFormat==="channelsFirst"?1:aa.length-1;if(aa[ba]==null)throw new ValueError(`The channel dimension of the input should be defined. Found ${aa[ba]}`);const Sa=aa[ba],Ta=4,wa=this.kernelSize.concat([Sa,this.filters*Ta]);this.kernel=this.addWeight("kernel",wa,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const Ea=this.kernelSize.concat([this.filters,this.filters*Ta]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",Ea,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let ka;if(this.unitForgetBias){const Aa=this.biasInitializer,Fa=this.filters;ka=new(xa=class extends Initializer{apply(el,tl){const nl=Aa.apply([Fa]),rl=ones$1([Fa]),sl=Aa.apply([Fa*2]);return concatenate([nl,rl,sl])}},xa.className="CustomInit",xa)}else ka=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*Ta],null,ka,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(aa,xa){return tidy$1(()=>{if(aa.length!==3)throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${aa.length}.`);const ba=xa.training||!1,Sa=aa[0],Ta=aa[1],wa=aa[2],Ea=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=generateDropoutMask({ones:()=>onesLike$3(Sa),rate:this.dropout,training:ba,count:Ea,dropoutFunc:this.dropoutFunc}));const ka=this.dropoutMask,Aa=(Il,wl,Nl)=>!wl||!wl[Nl]?Il:mul$1(wl[Nl],Il);let Fa=Aa(Sa,ka,0),La=Aa(Sa,ka,1),el=Aa(Sa,ka,2),tl=Aa(Sa,ka,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=generateDropoutMask({ones:()=>onesLike$3(Ta),rate:this.recurrentDropout,training:ba,count:Ea,dropoutFunc:this.dropoutFunc}));const nl=this.recurrentDropoutMask;let rl=Aa(Ta,nl,0),sl=Aa(Ta,nl,1),ol=Aa(Ta,nl,2),al=Aa(Ta,nl,3);const ll=3,[il,cl,ul,dl]=split$3(this.kernel.read(),Ea,ll),[hl,pl,fl,ml]=this.useBias?split$3(this.bias.read(),Ea):[null,null,null,null];Fa=this.inputConv(Fa,il,hl,this.padding),La=this.inputConv(La,cl,pl,this.padding),el=this.inputConv(el,ul,fl,this.padding),tl=this.inputConv(tl,dl,ml,this.padding);const[gl,$l,xl,yl]=split$3(this.recurrentKernel.read(),Ea,ll);rl=this.recurrentConv(rl,gl),sl=this.recurrentConv(sl,$l),ol=this.recurrentConv(ol,xl),al=this.recurrentConv(al,yl);const bl=this.recurrentActivation.apply(add$3(Fa,rl)),Sl=this.recurrentActivation.apply(add$3(La,sl)),Cl=add$3(mul$1(Sl,wa),mul$1(bl,this.activation.apply(add$3(el,ol)))),Tl=mul$1(this.recurrentActivation.apply(add$3(tl,al)),this.activation.apply(Cl));return[Tl,Tl,Cl]})}getConfig(){const aa=super.getConfig(),xa=__rest(aa,["units"]),ba={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},xa),ba)}inputConv(aa,xa,ba,Sa){const Ta=conv2d$3(aa,xa,this.strides,Sa||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return ba?biasAdd(Ta,ba,this.dataFormat):Ta}recurrentConv(aa,xa){return conv2d$3(aa,xa,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}}ConvLSTM2DCell.className="ConvLSTM2DCell",registerClass$1(ConvLSTM2DCell);class ConvLSTM2D extends ConvRNN2D{constructor(aa){const xa=new ConvLSTM2DCell(aa);super(Object.assign(Object.assign({},aa),{cell:xa}))}static fromConfig(aa,xa){return new aa(xa)}}ConvLSTM2D.className="ConvLSTM2D",registerClass$1(ConvLSTM2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Dropout extends Layer{constructor(aa){super(aa),this.rate=Math.max(Math.min(aa.rate,1),0),this.noiseShape=aa.noiseShape,this.seed=aa.seed,this.supportsMasking=!0}getNoiseShape(aa){if(this.noiseShape==null)return this.noiseShape;const xa=aa.shape,ba=[];for(let Sa=0;Sa<this.noiseShape.length;++Sa)ba.push(this.noiseShape[Sa]==null?xa[Sa]:this.noiseShape[Sa]);return ba}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa);if(0<this.rate&&this.rate<1){const Sa=xa.training==null?!1:xa.training,Ta=this.getNoiseShape(ba);return inTrainPhase(()=>dropout(ba,this.rate,Ta,this.seed),()=>ba,Sa)}return aa})}getConfig(){const aa={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},xa=super.getConfig();return Object.assign(aa,xa),aa}dispose(){return super.dispose()}}Dropout.className="Dropout",registerClass$1(Dropout);class SpatialDropout1D extends Dropout{constructor(aa){super(aa),this.inputSpec=[{ndim:3}]}getNoiseShape(aa){const xa=aa.shape;return[xa[0],1,xa[2]]}}SpatialDropout1D.className="SpatialDropout1D",registerClass$1(SpatialDropout1D);class Dense extends Layer{constructor(aa){if(super(aa),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",aa.batchInputShape==null&&aa.inputShape==null&&aa.inputDim!=null){let xa=null;aa.batchSize!=null&&(xa=aa.batchSize),this.batchInputShape=[xa,aa.inputDim]}this.units=aa.units,assertPositiveInteger(this.units,"units"),this.activation=getActivation(aa.activation),aa.useBias!=null&&(this.useBias=aa.useBias),this.kernelInitializer=getInitializer(aa.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=getInitializer(aa.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=getConstraint(aa.kernelConstraint),this.biasConstraint=getConstraint(aa.biasConstraint),this.kernelRegularizer=getRegularizer(aa.kernelRegularizer),this.biasRegularizer=getRegularizer(aa.biasRegularizer),this.activityRegularizer=getRegularizer(aa.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(aa){aa=getExactlyOneShape(aa);const xa=aa[aa.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[xa,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:xa}}],this.built=!0}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa.slice();return xa[xa.length-1]=this.units,xa}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa),Sa=mapActivationToFusedKernel(this.activation.getClassName());let Ta;return Sa!=null?Ta=dot(ba,this.kernel.read(),Sa,this.bias?this.bias.read():null):(Ta=dot(ba,this.kernel.read()),this.bias!=null&&(Ta=biasAdd(Ta,this.bias.read())),this.activation!=null&&(Ta=this.activation.apply(Ta))),Ta})}getConfig(){const aa={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),biasConstraint:serializeConstraint(this.biasConstraint)},xa=super.getConfig();return Object.assign(aa,xa),aa}}Dense.className="Dense",registerClass$1(Dense);class Flatten extends Layer{constructor(aa){aa=aa||{},super(aa),this.inputSpec=[{minNDim:3}],this.dataFormat=aa.dataFormat}computeOutputShape(aa){aa=getExactlyOneShape(aa);for(const xa of aa.slice(1))if(xa==null)throw new ValueError(`The shape of the input to "Flatten" is not fully defined (got ${aa.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[aa[0],arrayProd(aa,1)]}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);let ba=getExactlyOneTensor(aa);if(this.dataFormat==="channelsFirst"&&ba.rank>1){const Sa=[0];for(let Ta=2;Ta<ba.rank;++Ta)Sa.push(Ta);Sa.push(1),ba=transpose$3(ba,Sa)}return batchFlatten(ba)})}getConfig(){const aa={};this.dataFormat!=null&&(aa.dataFormat=this.dataFormat);const xa=super.getConfig();return Object.assign(aa,xa),aa}}Flatten.className="Flatten",registerClass$1(Flatten);class Activation extends Layer{constructor(aa){super(aa),this.supportsMasking=!0,this.activation=getActivation(aa.activation)}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa);return this.activation.apply(ba)})}getConfig(){const aa={activation:serializeActivation(this.activation)},xa=super.getConfig();return Object.assign(aa,xa),aa}}Activation.className="Activation",registerClass$1(Activation);class RepeatVector extends Layer{constructor(aa){super(aa),this.n=aa.n,this.inputSpec=[{ndim:2}]}computeOutputShape(aa){return[aa[0],this.n,aa[1]]}call(aa,xa){return tidy$1(()=>(aa=getExactlyOneTensor(aa),repeat(aa,this.n)))}getConfig(){const aa={n:this.n},xa=super.getConfig();return Object.assign(aa,xa),aa}}RepeatVector.className="RepeatVector",registerClass$1(RepeatVector);let Reshape$1=class extends Layer{constructor(aa){super(aa),this.targetShape=aa.targetShape;for(let xa=0;xa<this.targetShape.length;++xa)this.isUnknown(this.targetShape[xa])&&(this.targetShape[xa]=null)}isUnknown(aa){return aa<0||aa==null}fixUnknownDimension(aa,xa){const ba="Total size of new array must be unchanged.",Sa=xa.slice();let Ta=1,wa=null;for(let ka=0;ka<Sa.length;++ka){const Aa=Sa[ka];if(this.isUnknown(Aa))if(wa===null)wa=ka;else throw new ValueError("Can only specifiy one unknown dimension.");else Ta*=Aa}const Ea=arrayProd(aa);if(wa!==null){if(Ta===0||Ea%Ta!==0)throw new ValueError(ba);Sa[wa]=Ea/Ta}else if(Ea!==Ta)throw new ValueError(ba);return Sa}computeOutputShape(aa){let xa=!1;for(let ba=0;ba<aa.length;++ba)if(this.isUnknown(aa[ba])){xa=!0;break}return xa?aa.slice(0,1).concat(this.targetShape):aa.slice(0,1).concat(this.fixUnknownDimension(aa.slice(1),this.targetShape))}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa),Sa=ba.shape,Ta=Sa.slice(0,1).concat(this.fixUnknownDimension(Sa.slice(1),this.targetShape));return reshape$4(ba,Ta)})}getConfig(){const aa={targetShape:this.targetShape},xa=super.getConfig();return Object.assign(aa,xa),aa}};Reshape$1.className="Reshape",registerClass$1(Reshape$1);class Permute extends Layer{constructor(aa){if(super(aa),aa.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(aa.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${aa.dims} instead.`);const xa=range$3(1,aa.dims.length+1);if(!arraysEqual$1(aa.dims.slice().sort(),xa))throw new Error("Invalid permutation `dims`: "+JSON.stringify(aa.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=aa.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new InputSpec({ndim:this.dims.length+1})]}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa.slice();return this.dims.forEach((ba,Sa)=>{xa[Sa+1]=aa[ba]}),xa}call(aa,xa){return transpose$3(getExactlyOneTensor(aa),this.dimsIncludingBatch)}getConfig(){const aa={dims:this.dims},xa=super.getConfig();return Object.assign(aa,xa),aa}}Permute.className="Permute",registerClass$1(Permute);class Masking extends Layer{constructor(aa){super(aa??{}),this.supportsMasking=!0,aa!=null?this.maskValue=aa.maskValue==null?0:aa.maskValue:this.maskValue=0}computeOutputShape(aa){return aa}getConfig(){const aa=super.getConfig(),xa={maskValue:this.maskValue};return Object.assign(xa,aa),xa}computeMask(aa,xa){const ba=getExactlyOneTensor(aa);return any$3(notEqual$3(ba,this.maskValue),-1)}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa),wa=any$3(notEqual$3(ba,this.maskValue),-1,!0);return mul$1(ba,cast$5(wa,ba.dtype))})}}Masking.className="Masking",registerClass$1(Masking);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Embedding extends Layer{constructor(aa){if(super(aa),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",aa.batchInputShape==null&&aa.inputShape==null){let xa=null;aa.batchSize!=null&&(xa=aa.batchSize),aa.inputLength==null?this.batchInputShape=[xa,null]:this.batchInputShape=[xa].concat(toList(aa.inputLength))}this.inputDim=aa.inputDim,assertPositiveInteger(this.inputDim,"inputDim"),this.outputDim=aa.outputDim,assertPositiveInteger(this.outputDim,"outputDim"),this.embeddingsInitializer=getInitializer(aa.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=getRegularizer(aa.embeddingsRegularizer),this.activityRegularizer=getRegularizer(aa.activityRegularizer),this.embeddingsConstraint=getConstraint(aa.embeddingsConstraint),this.maskZero=aa.maskZero,this.supportsMasking=aa.maskZero,this.inputLength=aa.inputLength}build(aa){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(aa){}computeMask(aa,xa){return tidy$1(()=>this.maskZero?(aa=getExactlyOneTensor(aa),notEqual$3(aa,zerosLike$4(aa))):null)}computeOutputShape(aa){if(aa=getExactlyOneShape(aa),this.inputLength==null)return[...aa,this.outputDim];const xa=toList(this.inputLength);if(xa.length!==aa.length-1)throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${aa}`);{let ba=0;for(let Sa=0;Sa<xa.length;++Sa){const Ta=xa[Sa],wa=aa[Sa+1];if(Ta!=null&&wa!=null&&Ta!==wa)throw new ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${aa}`);Ta==null&&(xa[ba]=wa),ba++}}return[aa[0],...xa,this.outputDim]}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);let ba=getExactlyOneTensor(aa);ba.dtype!=="int32"&&(ba=cast$4(ba,"int32"));const Sa=gather(this.embeddings.read(),reshape$4(ba,[ba.size]));return reshape$4(Sa,getExactlyOneShape(this.computeOutputShape(ba.shape)))})}getConfig(){const aa={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:serializeInitializer(this.embeddingsInitializer),embeddingsRegularizer:serializeRegularizer(this.embeddingsRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),embeddingsConstraint:serializeConstraint(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},xa=super.getConfig();return Object.assign(aa,xa),aa}}Embedding.className="Embedding",registerClass$1(Embedding);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Merge extends Layer{constructor(aa){super(aa||{}),this.supportsMasking=!0}mergeFunction(aa){throw new NotImplementedError}computeElementwiseOpOutputShape(aa,xa){if(aa==null||xa==null)return null;if(aa.length<xa.length)return this.computeElementwiseOpOutputShape(xa,aa);if(xa.length===0)return aa;const ba=aa.slice(0,aa.length-xa.length);for(let Sa=0;Sa<xa.length;++Sa){const Ta=aa[aa.length-xa.length+Sa],wa=xa[Sa];if(Ta==null||wa==null||Ta<0||wa<0)ba.push(null);else if(Ta===1)ba.push(wa);else if(wa===1)ba.push(Ta);else{if(Ta!==wa)throw new ValueError("Operands could not be broadcast together with shapes "+JSON.stringify(aa)+" "+JSON.stringify(xa));ba.push(Ta)}}return ba}build(aa){if(Array.isArray(aa)&&!Array.isArray(aa[0])&&(aa=[getExactlyOneShape(aa)]),aa=aa,aa.length<2)throw new ValueError(`A merge layer should be called on an Array of at least 2 inputs. Got ${aa.length} input(s).`);let xa=[];for(const Ta of aa)Ta!=null&&Ta[0]!==null&&xa.push(Ta[0]);if(xa=unique$3(xa),xa.length>1)throw new ValueError(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(aa)}.`);let ba=aa[0]==null?null:aa[0].slice(1);for(let Ta=1;Ta<aa.length;++Ta){const wa=aa[Ta]==null?null:aa[Ta].slice(1);ba=this.computeElementwiseOpOutputShape(ba,wa)}const Sa=aa.map(Ta=>Ta.length);aa.indexOf(null)===-1&&unique$3(Sa).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(aa,xa){return tidy$1(()=>{if(aa=aa,this.reshapeRequired){const ba=[],Sa=aa.map(Ta=>Ta.rank);if(Sa.indexOf(null)===-1){const Ta=max$3(Sa);for(let wa of aa){const Ea=wa.rank;for(let ka=0;ka<Ta-Ea;++ka)wa=expandDims$3(wa,1);ba.push(wa)}return this.mergeFunction(ba)}else{let Ta=!1;for(const ka of aa){const Aa=ka.rank;if(Aa==null){const Fa=ka.shape,La=Fa[0],el=Fa.slice(1).concat([La]);let tl=reshape$4(ka,[La].concat(arrayProd(Fa.slice(1))));tl=transpose$3(tl,[1,0]),tl=reshape$4(tl,el),ba.push(tl),Ta=!0}else if(Aa>1){const Fa=range$3(1,Aa).concat([0]);ba.push(transpose$3(ka,Fa)),Ta=!0}else ba.push(ka)}let wa=this.mergeFunction(ba);const Ea=wa.rank;if(Ta){if(Ea==null){const ka=wa.shape,Aa=ka.length,Fa=ka[Aa-1],La=[Fa].concat(ka.slice(0,ka.length-1));wa=reshape$4(transpose$3(reshape$4(wa,[-1,Fa]),[1,0]),La)}else if(Ea>1){const ka=[Ea-1].concat(range$3(0,Ea-1));wa=transpose$3(wa,ka)}}return wa}}else return this.mergeFunction(aa)})}computeOutputShape(aa){aa=aa;let xa;aa[0]==null?xa=null:xa=aa[0].slice(1);for(let Sa=1;Sa<aa.length;++Sa){const Ta=aa[Sa]==null?null:aa[Sa].slice(1);xa=this.computeElementwiseOpOutputShape(xa,Ta)}let ba=[];for(const Sa of aa)Sa!=null&&Sa[0]!==null&&ba.push(Sa[0]);return ba=unique$3(ba),ba.length===1?xa=ba.concat(xa):xa=[null].concat(xa),xa}computeMask(aa,xa){return tidy$1(()=>{if(xa==null)return null;if(!Array.isArray(xa))throw new ValueError("`mask` should be an Array");if(!Array.isArray(aa))throw new ValueError("`inputs` should be an Array");if(xa.length!==aa.length)throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${aa.length} vs ${xa.length})`);if(xa.every(Sa=>Sa==null))return null;xa=xa.map(Sa=>Sa==null?Sa:expandDims$4(Sa,0));let ba=xa[0];for(let Sa=1;Sa<xa.length-1;++Sa)ba=logicalAnd$3(ba,xa[Sa]);return ba})}}let Add$1=class extends Merge{constructor(aa){super(aa)}mergeFunction(aa){return tidy$1(()=>{let xa=aa[0].clone();for(let ba=1;ba<aa.length;++ba)xa=add$3(xa,aa[ba]);return xa})}};Add$1.className="Add",registerClass$1(Add$1);let Multiply$1=class extends Merge{constructor(aa){super(aa)}mergeFunction(aa){return tidy$1(()=>{let xa=aa[0].clone();for(let ba=1;ba<aa.length;++ba)xa=mul$1(xa,aa[ba]);return xa})}};Multiply$1.className="Multiply",registerClass$1(Multiply$1);class Average extends Merge{constructor(aa){super(aa)}mergeFunction(aa){return tidy$1(()=>{let xa=aa[0].clone();for(let ba=1;ba<aa.length;++ba)xa=add$3(xa,aa[ba]);return mul$1(1/aa.length,xa)})}}Average.className="Average",registerClass$1(Average);let Maximum$1=class extends Merge{constructor(aa){super(aa)}mergeFunction(aa){return tidy$1(()=>{let xa=aa[0];for(let ba=1;ba<aa.length;++ba)xa=maximum$4(xa,aa[ba]);return xa})}};Maximum$1.className="Maximum",registerClass$1(Maximum$1);let Minimum$1=class extends Merge{constructor(aa){super(aa)}mergeFunction(aa){return tidy$1(()=>{let xa=aa[0];for(let ba=1;ba<aa.length;++ba)xa=minimum$3(xa,aa[ba]);return xa})}};Minimum$1.className="Minimum",registerClass$1(Minimum$1);class Concatenate extends Merge{constructor(aa){super(aa),this.DEFAULT_AXIS=-1,aa==null&&(aa={}),this.axis=aa.axis==null?this.DEFAULT_AXIS:aa.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(aa){if(!(Array.isArray(aa)&&Array.isArray(aa[0]))||aa.length===1)throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");aa=aa;let xa=!0;for(const Sa of aa)if(Sa!=null){xa=!1;break}if(xa)return;const ba=[];for(let Sa=0;Sa<aa.length;++Sa){const Ta=aa[Sa].slice();Ta.splice(this.axis,1);let wa=!1;for(const Ea of ba)if(arraysEqual$1(Ea,Ta)){wa=!0;break}wa||ba.push(Ta)}if(ba.length>1)throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(aa))}mergeFunction(aa){return tidy$1(()=>concatenate(aa,this.axis))}computeOutputShape(aa){if(!(Array.isArray(aa)&&Array.isArray(aa[0])))throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");const xa=aa,ba=xa[0].slice(),Sa=this.axis<0?ba.length+this.axis:this.axis;for(const Ta of xa.slice(1)){if(ba[Sa]==null||Ta[Sa]==null){ba[Sa]=null;break}ba[Sa]+=Ta[Sa]}return ba}computeMask(aa,xa){if(xa==null)return null;if(!Array.isArray(xa))throw new ValueError("`mask` should be an array for Concatenate");if(!Array.isArray(aa))throw new ValueError("`inputs` should be an array for Concatenate");if(xa.length!==aa.length)throw new ValueError(`Mismatch in the length of mask (${xa.length}) and the legnth of inputs (${aa.length})`);return tidy$1(()=>{let ba=!0;if(xa.forEach(wa=>{if(wa!=null){ba=!1;return}}),ba)return null;const Sa=[];for(let wa=0;wa<aa.length;++wa)xa[wa]==null?Sa.push(cast$5(onesLike$3(aa[wa]),"bool")):xa[wa].rank<aa[wa].rank?Sa.push(expandDims$4(xa[wa],-1)):Sa.push(xa[wa]);const Ta=concat$3(Sa,this.axis);return all$3(Ta,-1,!1)})}getConfig(){const aa={axis:this.axis},xa=super.getConfig();return Object.assign(aa,xa),aa}}Concatenate.className="Concatenate",registerClass$1(Concatenate);function interpretAxis(ha,aa){for(;ha<0;)ha+=aa;return ha}function batchDot(ha,aa,xa){if(ha.shape.length>3||aa.shape.length>3)throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");if(assert$2(ha.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${ha.shape.length}`),assert$2(ha.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${aa.shape.length}`),typeof xa=="number"&&(xa=[xa,xa]),ha.dtype==="complex64"||aa.dtype==="complex64")throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");const ba=ha.shape.length,Sa=aa.shape.length;xa==null&&(xa=[ba-1,Sa-2]);const Ta=xa;return tidy$1(()=>{let wa;if(ba>Sa){wa=ba-Sa;const ka=[];for(let Aa=0;Aa<wa;++Aa)ka.push(1);aa=reshape$4(aa,aa.shape.concat(ka))}else if(Sa>ba){wa=Sa-ba;const ka=[];for(let Aa=0;Aa<wa;++Aa)ka.push(1);ha=reshape$4(ha,ha.shape.concat(ka))}else wa=0;let Ea;if(ha.shape.length===2&&aa.shape.length===2)Ta[0]===Ta[1]?Ea=sum$5(mul$1(ha,aa),Ta[0]):Ea=sum$5(mul$1(transpose$3(ha,[1,0]),aa),Ta[1]);else{const ka=Ta[0]!==ha.shape.length-1,Aa=Ta[1]===aa.shape.length-1;Ea=matMul$1(ha,aa,ka,Aa)}if(wa>0){let ka;ba>Sa?ka=ba+Sa-3:ka=ba-1;const Aa=[];for(let Fa=ka;Fa<ka+wa;++Fa)Aa.push(Fa);Ea=squeeze(Ea,Aa)}return Ea.shape.length===1&&(Ea=expandDims$4(Ea,1)),Ea})}class Dot extends Merge{constructor(aa){super(aa),this.axes=aa.axes,this.normalize=aa.normalize==null?!1:aa.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(aa){assert$2(Array.isArray(aa)&&aa.length===2&&Array.isArray(aa[0])&&Array.isArray(aa[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const xa=aa[0],ba=aa[1];if(xa.length>3||ba.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");const Sa=this.interpretAxes(xa,ba);if(xa[Sa[0]]!==ba[Sa[1]])throw new ValueError(`Dimension incompatibility: ${xa[Sa[0]]} !== ${ba[Sa[1]]}`)}mergeFunction(aa){if(aa.length!==2)throw new ValueError(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${aa.length} input(s).`);let xa=aa[0],ba=aa[1],Sa;return Array.isArray(this.axes)?Sa=this.axes.map((Ta,wa)=>interpretAxis(Ta,aa[wa].shape.length)):Sa=[interpretAxis(this.axes,xa.shape.length),interpretAxis(this.axes,ba.shape.length)],this.normalize&&(xa=l2Normalize(xa,Sa[0]),ba=l2Normalize(ba,Sa[1])),batchDot(xa,ba,Sa)}interpretAxes(aa,xa){let ba;return Array.isArray(this.axes)?ba=this.axes:ba=[interpretAxis(this.axes,aa.length),interpretAxis(this.axes,xa.length)],ba}computeOutputShape(aa){assert$2(Array.isArray(aa)&&aa.length===2&&Array.isArray(aa[0])&&Array.isArray(aa[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const xa=aa[0].slice(),ba=aa[1].slice();if(xa.length>3||ba.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");const Sa=this.interpretAxes(xa,ba);xa.splice(Sa[0],1),ba.splice(Sa[1],1),ba.splice(0,1);const Ta=xa.concat(ba);return Ta.length===1&&Ta.push(1),Ta}computeMask(aa,xa){return null}getConfig(){const aa={axes:this.axes,normalize:this.normalize},xa=super.getConfig();return Object.assign(aa,xa),aa}}Dot.className="Dot",registerClass$1(Dot);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class GaussianNoise extends Layer{constructor(aa){super(aa),this.supportsMasking=!0,this.stddev=aa.stddev}computeOutputShape(aa){return aa}getConfig(){const aa=super.getConfig(),xa={stddev:this.stddev};return Object.assign(xa,aa),xa}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa);return inTrainPhase(()=>add$3(randomNormal(ba.shape,0,this.stddev),ba),()=>ba,xa.training||!1)})}}GaussianNoise.className="GaussianNoise",registerClass$1(GaussianNoise);class GaussianDropout extends Layer{constructor(aa){super(aa),this.supportsMasking=!0,this.rate=aa.rate}computeOutputShape(aa){return aa}getConfig(){const aa=super.getConfig(),xa={rate:this.rate};return Object.assign(xa,aa),xa}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa);const ba=getExactlyOneTensor(aa);return this.rate>0&&this.rate<1?inTrainPhase(()=>{const Ta=Math.sqrt(this.rate/(1-this.rate));return mul$1(ba,randomNormal(ba.shape,1,Ta))},()=>ba,xa.training||!1):ba})}}GaussianDropout.className="GaussianDropout",registerClass$1(GaussianDropout);class AlphaDropout extends Layer{constructor(aa){super(aa),this.supportsMasking=!0,this.rate=aa.rate,this.noiseShape=aa.noiseShape}_getNoiseShape(aa){return this.noiseShape||getExactlyOneTensor(aa).shape}computeOutputShape(aa){return aa}getConfig(){const aa=super.getConfig(),xa={rate:this.rate};return Object.assign(xa,aa),xa}call(aa,xa){return tidy$1(()=>{if(this.rate<1&&this.rate>0){const ba=this._getNoiseShape(aa);return inTrainPhase(()=>{const Ta=getExactlyOneTensor(aa),ka=-1.6732632423543772*1.0507009873554805;let Aa=greaterEqual$3(randomUniform(ba),this.rate);Aa=cast$4(Aa,"float32");const Fa=((1-this.rate)*(1+this.rate*ka**2))**-.5,La=-Fa*ka*this.rate,el=add$3(mul$1(Ta,Aa),mul$1(add$3(Aa,-1),ka));return add$3(mul$1(el,Fa),La)},()=>getExactlyOneTensor(aa),xa.training||!1)}return aa})}}AlphaDropout.className="AlphaDropout",registerClass$1(AlphaDropout);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function batchNormalization(ha,aa,xa,ba,Sa,Ta=.001){let wa;if(ha.rank===2)wa=batchNorm2d(ha,aa,xa,ba,Sa,Ta);else if(ha.rank===3)wa=batchNorm3d(ha,aa,xa,ba,Sa,Ta);else if(ha.rank===4)wa=batchNorm4d(ha,aa,xa,ba,Sa,Ta);else throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${ha.rank} yet`);return wa}function regularNormalizeBatchInTraining(ha,aa,xa,ba,Sa=.001){return tidy$1(()=>{const Ta=moments(ha,ba),wa=Ta.mean,Ea=Ta.variance;return[batchNormalization(ha,wa,Ea,xa,aa,Sa),wa,Ea]})}function broadcastNormalizeBatchInTraining(ha,aa,xa,ba,Sa=.001){return tidy$1(()=>{const Ta=moments(ha,ba),wa=Ta.mean,Ea=Ta.variance,ka=[];for(const nl of range$3(0,ha.rank))ba.indexOf(nl)!==-1?ka.push(1):ka.push(ha.shape[nl]);const Aa=reshape$4(wa,ka),Fa=reshape$4(Ea,ka),La=aa==null?null:reshape$4(aa,ka),el=xa==null?null:reshape$4(xa,ka);return[batchNormalization(ha,Aa,Fa,el,La,Sa),wa,Ea]})}function normalizeBatchInTraining(ha,aa,xa,ba,Sa=.001){return arraysEqual$1(ba.slice().sort(),range$3(0,ha.rank-1))?regularNormalizeBatchInTraining(ha,aa,xa,ba,Sa):broadcastNormalizeBatchInTraining(ha,aa,xa,ba,Sa)}class BatchNormalization extends Layer{constructor(aa){aa==null&&(aa={}),super(aa),this.supportsMasking=!0,this.axis=aa.axis==null?-1:aa.axis,this.momentum=aa.momentum==null?.99:aa.momentum,this.epsilon=aa.epsilon==null?.001:aa.epsilon,this.center=aa.center==null?!0:aa.center,this.scale=aa.scale==null?!0:aa.scale,this.betaInitializer=getInitializer(aa.betaInitializer||"zeros"),this.gammaInitializer=getInitializer(aa.gammaInitializer||"ones"),this.movingMeanInitializer=getInitializer(aa.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=getInitializer(aa.movingVarianceInitializer||"ones"),this.betaConstraint=getConstraint(aa.betaConstraint),this.gammaConstraint=getConstraint(aa.gammaConstraint),this.betaRegularizer=getRegularizer(aa.betaRegularizer),this.gammaRegularizer=getRegularizer(aa.gammaRegularizer)}build(aa){aa=getExactlyOneShape(aa);const xa=this.axis>=0?this.axis:this.axis+aa.length,ba=aa[xa];if(ba==null)throw new ValueError(`Axis ${xa} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(aa)}.`);this.inputSpec=[new InputSpec({ndim:aa.length,axes:{[xa]:ba}})];const Sa=[ba];this.scale&&(this.gamma=this.addWeight("gamma",Sa,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",Sa,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",Sa,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",Sa,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(aa,xa){return tidy$1(()=>{const ba=xa.training==null?!1:xa.training,Sa=getExactlyOneTensor(aa),Ta=Sa.shape,wa=Ta.length,Ea=range$3(0,wa),ka=this.axis>=0?this.axis:this.axis+wa;Ea.splice(ka,1);const Aa=pyListRepeat(1,wa);Aa[ka]=Ta[ka];const Fa=Ea.slice();Fa.sort();const La=!arraysEqual$1(Fa,range$3(0,wa).slice(0,wa-1)),el=()=>{if(La){const al=reshape$4(this.movingMean.read(),Aa),ll=reshape$4(this.movingVariance.read(),Aa),il=this.center?reshape$4(this.beta.read(),Aa):null,cl=this.scale?reshape$4(this.gamma.read(),Aa):null;return batchNormalization(Sa,al,ll,il,cl,this.epsilon)}else return batchNormalization(Sa,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!ba)return el();const[tl,nl,rl]=normalizeBatchInTraining(Sa,this.gamma.read(),this.beta.read(),Ea,this.epsilon),sl=(al,ll,il)=>{tidy$1(()=>{const cl=1-il,ul=al.read(),dl=mul$1(sub$4(ul,ll),cl);al.write(sub$4(ul,dl))})};return(()=>{sl(this.movingMean,nl,this.momentum),sl(this.movingVariance,rl,this.momentum)})(),tl})}getConfig(){const aa={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),movingMeanInitializer:serializeInitializer(this.movingMeanInitializer),movingVarianceInitializer:serializeInitializer(this.movingVarianceInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer),betaConstraint:serializeConstraint(this.betaConstraint),gammaConstraint:serializeConstraint(this.gammaConstraint)},xa=super.getConfig();return Object.assign(aa,xa),aa}}BatchNormalization.className="BatchNormalization",registerClass$1(BatchNormalization);class LayerNormalization extends Layer{constructor(aa){if(aa==null&&(aa={}),super(aa),this.axis=aa.axis==null?-1:aa.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(const xa of this.axis)if(!Number.isInteger(xa))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=aa.epsilon==null?.001:aa.epsilon,this.center=aa.center==null?!0:aa.center,this.scale=aa.scale==null?!0:aa.scale,this.betaInitializer=getInitializer(aa.betaInitializer||"zeros"),this.gammaInitializer=getInitializer(aa.gammaInitializer||"ones"),this.betaRegularizer=getRegularizer(aa.betaRegularizer),this.gammaRegularizer=getRegularizer(aa.gammaRegularizer),this.supportsMasking=!0}build(aa){aa=getExactlyOneShape(aa);const xa=aa.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let Ta=0;Ta<this.axis.length;++Ta)this.axis[Ta]<0&&(this.axis[Ta]+=xa);for(const Ta of this.axis)if(Ta<0||Ta>=xa)throw new Error(`Invalid axis: ${Ta}`);if(this.axis.length!==unique$3(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const ba=this.axis.map(Ta=>aa[Ta]),Sa=!0;this.scale?this.gamma=this.addWeight("gamma",ba,"float32",this.gammaInitializer,this.gammaRegularizer,Sa):this.gamma=null,this.center?this.beta=this.addWeight("beta",ba,"float32",this.betaInitializer,this.betaRegularizer,Sa):this.beta=null,this.built=!0}call(aa,xa){const ba=getExactlyOneTensor(aa),Sa=ba.shape,Ta=Sa.length;return tidy$1(()=>{let{mean:Ea,variance:ka}=moments(ba,this.axis,!0);const Aa=pyListRepeat(1,Ta);for(const rl of this.axis)Aa[rl]=Sa[rl];const Fa=rl=>rl!=null&&rl.shape.length!==Ta?reshape$4(rl,Aa):rl;let La=this.scale?Fa(this.gamma.read()):null,el=this.center?Fa(this.beta.read()):null;const tl=[],nl=[];for(let rl=0;rl<Ta;++rl)this.axis.indexOf(rl)!==-1?(tl.push(Sa[rl]),nl.push(1)):(tl.push(1),nl.push(Sa[rl]));return Ea=tile$4(Ea,tl),ka=tile$4(ka,tl),La!=null&&(La=tile$4(La,nl)),el!=null&&(el=tile$4(el,nl)),batchNormalization(ba,Ea,ka,el,La,this.epsilon)})}getConfig(){const aa={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer)},xa=super.getConfig();return Object.assign(aa,xa),aa}}LayerNormalization.className="LayerNormalization",registerClass$1(LayerNormalization);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function spatial2dPadding(ha,aa,xa){return tidy$1(()=>{if(ha.rank!==4)throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ${ha.rank}-D tensor.`);if(aa==null&&(aa=[[1,1],[1,1]]),aa.length!==2||aa[0].length!==2||aa[1].length!==2)throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(xa==null&&(xa=imageDataFormat()),xa!=="channelsLast"&&xa!=="channelsFirst")throw new ValueError(`Unknown data format: ${xa}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let ba;return xa==="channelsFirst"?ba=[[0,0],[0,0],aa[0],aa[1]]:ba=[[0,0],aa[0],aa[1],[0,0]],pad(ha,ba)})}class ZeroPadding2D extends Layer{constructor(aa){if(aa==null&&(aa={}),super(aa),this.dataFormat=aa.dataFormat==null?imageDataFormat():aa.dataFormat,aa.padding==null)this.padding=[[1,1],[1,1]];else if(typeof aa.padding=="number")this.padding=[[aa.padding,aa.padding],[aa.padding,aa.padding]];else{if(aa.padding=aa.padding,aa.padding.length!==2)throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${aa.padding.length} array.`);let xa,ba;if(typeof aa.padding[0]=="number")xa=[aa.padding[0],aa.padding[0]],ba=[aa.padding[1],aa.padding[1]];else{if(aa.padding=aa.padding,aa.padding[0].length!==2)throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${aa.padding[0].length} array.`);if(xa=aa.padding[0],aa.padding[1].length!==2)throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${aa.padding[1].length} array.`);ba=aa.padding[1]}this.padding=[xa,ba]}this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(aa){aa=getExactlyOneShape(aa);let xa,ba;return this.dataFormat==="channelsFirst"?(aa[2]!=null&&aa[2]>=0?xa=aa[2]+this.padding[0][0]+this.padding[0][1]:xa=null,aa[3]!=null&&aa[3]>=0?ba=aa[3]+this.padding[1][0]+this.padding[1][1]:ba=null,[aa[0],aa[1],xa,ba]):(aa[1]!=null&&aa[1]>=0?xa=aa[1]+this.padding[0][0]+this.padding[0][1]:xa=null,aa[2]!=null&&aa[2]>=0?ba=aa[2]+this.padding[1][0]+this.padding[1][1]:ba=null,[aa[0],xa,ba,aa[3]])}call(aa,xa){return tidy$1(()=>spatial2dPadding(getExactlyOneTensor(aa),this.padding,this.dataFormat))}getConfig(){const aa={padding:this.padding,dataFormat:this.dataFormat},xa=super.getConfig();return Object.assign(aa,xa),aa}}ZeroPadding2D.className="ZeroPadding2D",registerClass$1(ZeroPadding2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function pool2d(ha,aa,xa,ba,Sa,Ta){return tidy$1(()=>{checkDataFormat(Sa),checkPoolMode(Ta),checkPaddingMode(ba),xa==null&&(xa=[1,1]),ba==null&&(ba="valid"),Sa==null&&(Sa=imageDataFormat()),Ta==null&&(Ta="max"),ha=preprocessConv2DInput(ha,Sa);let wa;const Ea=ba==="same"?"same":"valid";return Ta==="max"?wa=maxPool$3(ha,aa,xa,Ea):wa=avgPool$3(ha,aa,xa,Ea),Sa==="channelsFirst"&&(wa=transpose$3(wa,[0,3,1,2])),wa})}function pool3d$1(ha,aa,xa,ba,Sa,Ta){return tidy$1(()=>{checkDataFormat(Sa),checkPoolMode(Ta),checkPaddingMode(ba),xa==null&&(xa=[1,1,1]),ba==null&&(ba="valid"),Sa==null&&(Sa=imageDataFormat()),Ta==null&&(Ta="max"),ha=preprocessConv3DInput(ha,Sa);let wa;const Ea=ba==="same"?"same":"valid";return Ta==="max"?wa=maxPool3d$2(ha,aa,xa,Ea):wa=avgPool3d(ha,aa,xa,Ea),Sa==="channelsFirst"&&(wa=transpose$3(wa,[0,4,1,2,3])),wa})}class Pooling1D extends Layer{constructor(aa){if(aa.poolSize==null&&(aa.poolSize=2),super(aa),typeof aa.poolSize=="number")this.poolSize=[aa.poolSize];else if(Array.isArray(aa.poolSize)&&aa.poolSize.length===1&&typeof aa.poolSize[0]=="number")this.poolSize=aa.poolSize;else throw new ValueError(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(aa.poolSize)}`);if(assertPositiveInteger(this.poolSize,"poolSize"),aa.strides==null)this.strides=this.poolSize;else if(typeof aa.strides=="number")this.strides=[aa.strides];else if(Array.isArray(aa.strides)&&aa.strides.length===1&&typeof aa.strides[0]=="number")this.strides=aa.strides;else throw new ValueError(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(aa.strides)}`);assertPositiveInteger(this.strides,"strides"),this.padding=aa.padding==null?"valid":aa.padding,checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:3})]}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=convOutputLength(aa[1],this.poolSize[0],this.padding,this.strides[0]);return[aa[0],xa,aa[2]]}call(aa,xa){return tidy$1(()=>{this.invokeCallHook(aa,xa),aa=expandDims$3(getExactlyOneTensor(aa),2);const ba=this.poolingFunction(getExactlyOneTensor(aa),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return squeeze(ba,[2])})}getConfig(){const aa={poolSize:this.poolSize,padding:this.padding,strides:this.strides},xa=super.getConfig();return Object.assign(aa,xa),aa}}class MaxPooling1D extends Pooling1D{constructor(aa){super(aa)}poolingFunction(aa,xa,ba,Sa,Ta){return checkDataFormat(Ta),checkPaddingMode(Sa),pool2d(aa,xa,ba,Sa,Ta,"max")}}MaxPooling1D.className="MaxPooling1D",registerClass$1(MaxPooling1D);class AveragePooling1D extends Pooling1D{constructor(aa){super(aa)}poolingFunction(aa,xa,ba,Sa,Ta){return checkDataFormat(Ta),checkPaddingMode(Sa),pool2d(aa,xa,ba,Sa,Ta,"avg")}}AveragePooling1D.className="AveragePooling1D",registerClass$1(AveragePooling1D);class Pooling2D extends Layer{constructor(aa){if(aa.poolSize==null&&(aa.poolSize=[2,2]),super(aa),this.poolSize=Array.isArray(aa.poolSize)?aa.poolSize:[aa.poolSize,aa.poolSize],aa.strides==null)this.strides=this.poolSize;else if(Array.isArray(aa.strides)){if(aa.strides.length!==2)throw new ValueError(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${aa.strides.length}.`);this.strides=aa.strides}else this.strides=[aa.strides,aa.strides];assertPositiveInteger(this.poolSize,"poolSize"),assertPositiveInteger(this.strides,"strides"),this.padding=aa.padding==null?"valid":aa.padding,this.dataFormat=aa.dataFormat==null?"channelsLast":aa.dataFormat,checkDataFormat(this.dataFormat),checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(aa){aa=getExactlyOneShape(aa);let xa=this.dataFormat==="channelsFirst"?aa[2]:aa[1],ba=this.dataFormat==="channelsFirst"?aa[3]:aa[2];return xa=convOutputLength(xa,this.poolSize[0],this.padding,this.strides[0]),ba=convOutputLength(ba,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[aa[0],aa[1],xa,ba]:[aa[0],xa,ba,aa[3]]}call(aa,xa){return tidy$1(()=>(this.invokeCallHook(aa,xa),this.poolingFunction(getExactlyOneTensor(aa),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const aa={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},xa=super.getConfig();return Object.assign(aa,xa),aa}}class MaxPooling2D extends Pooling2D{constructor(aa){super(aa)}poolingFunction(aa,xa,ba,Sa,Ta){return checkDataFormat(Ta),checkPaddingMode(Sa),pool2d(aa,xa,ba,Sa,Ta,"max")}}MaxPooling2D.className="MaxPooling2D",registerClass$1(MaxPooling2D);class AveragePooling2D extends Pooling2D{constructor(aa){super(aa)}poolingFunction(aa,xa,ba,Sa,Ta){return checkDataFormat(Ta),checkPaddingMode(Sa),pool2d(aa,xa,ba,Sa,Ta,"avg")}}AveragePooling2D.className="AveragePooling2D",registerClass$1(AveragePooling2D);class Pooling3D extends Layer{constructor(aa){if(aa.poolSize==null&&(aa.poolSize=[2,2,2]),super(aa),this.poolSize=Array.isArray(aa.poolSize)?aa.poolSize:[aa.poolSize,aa.poolSize,aa.poolSize],aa.strides==null)this.strides=this.poolSize;else if(Array.isArray(aa.strides)){if(aa.strides.length!==3)throw new ValueError(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${aa.strides.length}.`);this.strides=aa.strides}else this.strides=[aa.strides,aa.strides,aa.strides];assertPositiveInteger(this.poolSize,"poolSize"),assertPositiveInteger(this.strides,"strides"),this.padding=aa.padding==null?"valid":aa.padding,this.dataFormat=aa.dataFormat==null?"channelsLast":aa.dataFormat,checkDataFormat(this.dataFormat),checkPaddingMode(this.padding),this.inputSpec=[new InputSpec({ndim:5})]}computeOutputShape(aa){aa=getExactlyOneShape(aa);let xa=this.dataFormat==="channelsFirst"?aa[2]:aa[1],ba=this.dataFormat==="channelsFirst"?aa[3]:aa[2],Sa=this.dataFormat==="channelsFirst"?aa[4]:aa[3];return xa=convOutputLength(xa,this.poolSize[0],this.padding,this.strides[0]),ba=convOutputLength(ba,this.poolSize[1],this.padding,this.strides[1]),Sa=convOutputLength(Sa,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[aa[0],aa[1],xa,ba,Sa]:[aa[0],xa,ba,Sa,aa[4]]}call(aa,xa){return tidy$1(()=>(this.invokeCallHook(aa,xa),this.poolingFunction(getExactlyOneTensor(aa),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const aa={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},xa=super.getConfig();return Object.assign(aa,xa),aa}}class MaxPooling3D extends Pooling3D{constructor(aa){super(aa)}poolingFunction(aa,xa,ba,Sa,Ta){return checkDataFormat(Ta),checkPaddingMode(Sa),pool3d$1(aa,xa,ba,Sa,Ta,"max")}}MaxPooling3D.className="MaxPooling3D",registerClass$1(MaxPooling3D);class AveragePooling3D extends Pooling3D{constructor(aa){super(aa)}poolingFunction(aa,xa,ba,Sa,Ta){return checkDataFormat(Ta),checkPaddingMode(Sa),pool3d$1(aa,xa,ba,Sa,Ta,"avg")}}AveragePooling3D.className="AveragePooling3D",registerClass$1(AveragePooling3D);class GlobalPooling1D extends Layer{constructor(aa){super(aa),this.inputSpec=[new InputSpec({ndim:3})]}computeOutputShape(aa){return[aa[0],aa[2]]}call(aa,xa){throw new NotImplementedError}}class GlobalAveragePooling1D extends GlobalPooling1D{constructor(aa){super(aa||{})}call(aa,xa){return tidy$1(()=>{const ba=getExactlyOneTensor(aa);return mean$1(ba,1)})}}GlobalAveragePooling1D.className="GlobalAveragePooling1D",registerClass$1(GlobalAveragePooling1D);class GlobalMaxPooling1D extends GlobalPooling1D{constructor(aa){super(aa||{})}call(aa,xa){return tidy$1(()=>{const ba=getExactlyOneTensor(aa);return max$4(ba,1)})}}GlobalMaxPooling1D.className="GlobalMaxPooling1D",registerClass$1(GlobalMaxPooling1D);class GlobalPooling2D extends Layer{constructor(aa){super(aa),this.dataFormat=aa.dataFormat==null?"channelsLast":aa.dataFormat,checkDataFormat(this.dataFormat),this.inputSpec=[new InputSpec({ndim:4})]}computeOutputShape(aa){return aa=aa,this.dataFormat==="channelsLast"?[aa[0],aa[3]]:[aa[0],aa[1]]}call(aa,xa){throw new NotImplementedError}getConfig(){const aa={dataFormat:this.dataFormat},xa=super.getConfig();return Object.assign(aa,xa),aa}}class GlobalAveragePooling2D extends GlobalPooling2D{call(aa,xa){return tidy$1(()=>{const ba=getExactlyOneTensor(aa);return this.dataFormat==="channelsLast"?mean$1(ba,[1,2]):mean$1(ba,[2,3])})}}GlobalAveragePooling2D.className="GlobalAveragePooling2D",registerClass$1(GlobalAveragePooling2D);class GlobalMaxPooling2D extends GlobalPooling2D{call(aa,xa){return tidy$1(()=>{const ba=getExactlyOneTensor(aa);return this.dataFormat==="channelsLast"?max$4(ba,[1,2]):max$4(ba,[2,3])})}}GlobalMaxPooling2D.className="GlobalMaxPooling2D",registerClass$1(GlobalMaxPooling2D);/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Wrapper extends Layer{constructor(aa){super(aa),this.layer=aa.layer}build(aa){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(aa){this.layer!=null&&(this.layer.trainable=aa)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(aa){this.layer.setWeights(aa)}getConfig(){const aa={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},xa=super.getConfig();return Object.assign(aa,xa),aa}setFastWeightInitDuringBuild(aa){super.setFastWeightInitDuringBuild(aa),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(aa)}static fromConfig(aa,xa,ba={}){const Sa=xa.layer,Ta=deserialize(Sa,ba);delete xa.layer;const wa={layer:Ta};return Object.assign(wa,xa),new aa(wa)}}class TimeDistributed extends Wrapper{constructor(aa){super(aa),this.supportsMasking=!0}build(aa){if(aa=getExactlyOneShape(aa),aa.length<3)throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(aa)}`);this.inputSpec=[{shape:aa}];const xa=[aa[0]].concat(aa.slice(2));this.layer.built||(this.layer.build(xa),this.layer.built=!0),super.build(aa)}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=[aa[0]].concat(aa.slice(2)),ba=this.layer.computeOutputShape(xa),Sa=aa[1];return[ba[0],Sa].concat(ba.slice(1))}call(aa,xa){return tidy$1(()=>(aa=getExactlyOneTensor(aa),rnn((wa,Ea)=>[getExactlyOneTensor(this.layer.call(wa,xa)),[]],aa,[],!1,null,null,!1,!0)[1]))}}TimeDistributed.className="TimeDistributed",registerClass$1(TimeDistributed);function checkBidirectionalMergeMode(ha){checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES,"BidirectionalMergeMode",ha)}const DEFAULT_BIDIRECTIONAL_MERGE_MODE="concat";class Bidirectional extends Wrapper{constructor(aa){super(aa);const xa=aa.layer.getConfig(),ba={};ba.className=aa.layer.getClassName(),ba.config=xa,this.forwardLayer=deserialize(ba),xa.goBackwards=xa.goBackwards!==!0;const Sa={};if(Sa.className=aa.layer.getClassName(),Sa.config=xa,this.backwardLayer=deserialize(Sa),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=aa.mergeMode===void 0?DEFAULT_BIDIRECTIONAL_MERGE_MODE:aa.mergeMode,checkBidirectionalMergeMode(this.mergeMode),aa.weights)throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");this._stateful=aa.layer.stateful,this.returnSequences=aa.layer.returnSequences,this.returnState=aa.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=aa.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(aa){this._trainable=aa,this.forwardLayer!=null&&(this.forwardLayer.trainable=aa),this.backwardLayer!=null&&(this.backwardLayer.trainable=aa)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(aa){const xa=aa.length,ba=Math.floor(xa/2);this.forwardLayer.setWeights(aa.slice(0,ba)),this.backwardLayer.setWeights(aa.slice(ba))}computeOutputShape(aa){let xa=this.forwardLayer.computeOutputShape(aa);Array.isArray(xa)&&Array.isArray(xa[0])||(xa=[xa]),xa=xa;let ba,Sa,Ta;return this.returnState&&(Ta=xa.slice(1)),ba=xa[0],ba=ba,this.mergeMode==="concat"?(ba[ba.length-1]*=2,Sa=[ba]):this.mergeMode==null?Sa=[ba,ba.slice()]:Sa=[ba],this.returnState?this.mergeMode==null?Sa.concat(Ta).concat(Ta.slice()):[ba].concat(Ta).concat(Ta.slice()):singletonOrArray(Sa)}apply(aa,xa){let ba=xa==null?null:xa.initialState,Sa=xa==null?null:xa.constants;xa==null&&(xa={});const Ta=standardizeArgs(aa,ba,Sa,this.numConstants);if(aa=Ta.inputs,ba=Ta.initialState,Sa=Ta.constants,Array.isArray(aa)&&(ba=aa.slice(1),aa=aa[0]),(ba==null||ba.length===0)&&Sa==null)return super.apply(aa,xa);const wa=[],Ea=[];if(ba!=null){const Aa=ba.length;if(Aa%2>0)throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");xa.initialState=ba,wa.push(...ba);const Fa=ba.map(La=>new InputSpec({shape:La.shape}));this.forwardLayer.stateSpec=Fa.slice(0,Aa/2),this.backwardLayer.stateSpec=Fa.slice(Aa/2),Ea.push(...Fa)}if(Sa!=null)throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");const ka=wa[0]instanceof SymbolicTensor;for(const Aa of wa)if(Aa instanceof SymbolicTensor!==ka)throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(ka){const Aa=[aa].concat(wa),Fa=this.inputSpec.concat(Ea),La=this.inputSpec;this.inputSpec=Fa;const el=super.apply(Aa,xa);return this.inputSpec=La,el}else return super.apply(aa,xa)}call(aa,xa){return tidy$1(()=>{const ba=xa.initialState;let Sa,Ta;if(ba==null)Sa=this.forwardLayer.call(aa,xa),Ta=this.backwardLayer.call(aa,xa);else{const ka=ba.slice(0,ba.length/2),Aa=ba.slice(ba.length/2);Sa=this.forwardLayer.call(aa,Object.assign(xa,{initialState:ka})),Ta=this.backwardLayer.call(aa,Object.assign(xa,{initialState:Aa}))}let wa;this.returnState&&(Array.isArray(Sa)&&(wa=Sa.slice(1).concat(Ta.slice(1))),Sa=Sa[0],Ta=Ta[0]),this.returnSequences&&(Ta=reverse$3(Ta,1));let Ea;return this.mergeMode==="concat"?Ea=concatenate([Sa,Ta]):this.mergeMode==="sum"?Ea=add$3(Sa,Ta):this.mergeMode==="ave"?Ea=mul$1(.5,add$3(Sa,Ta)):this.mergeMode==="mul"?Ea=mul$1(Sa,Ta):this.mergeMode==null&&(Ea=[Sa,Ta]),this.returnState?this.mergeMode==null?Ea.concat(wa):[Ea].concat(wa):Ea})}resetStates(aa){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(aa){nameScope(this.forwardLayer.name,()=>{this.forwardLayer.build(aa)}),nameScope(this.backwardLayer.name,()=>{this.backwardLayer.build(aa)}),this.built=!0}computeMask(aa,xa){Array.isArray(xa)&&(xa=xa[0]);let ba;if(this.returnSequences?this.mergeMode==null?ba=[xa,xa]:ba=xa:this.mergeMode==null?ba=[null,null]:ba=null,this.returnState){const Ta=this.forwardLayer.states.map(wa=>null);return Array.isArray(ba)?ba.concat(Ta).concat(Ta):[ba].concat(Ta).concat(Ta)}else return ba}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(aa){super.setFastWeightInitDuringBuild(aa),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(aa),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(aa)}getConfig(){const aa={mergeMode:this.mergeMode},xa=super.getConfig();return Object.assign(aa,xa),aa}static fromConfig(aa,xa){const ba=deserialize(xa.layer);if(delete xa.layer,xa.numConstants!=null)throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const Sa=xa;return Sa.layer=ba,new aa(Sa)}}Bidirectional.className="Bidirectional",registerClass$1(Bidirectional);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class Rescaling extends Layer{constructor(aa){super(aa),this.scale=aa.scale,aa.offset?this.offset=aa.offset:this.offset=0}getConfig(){const aa={scale:this.scale,offset:this.offset},xa=super.getConfig();return Object.assign(aa,xa),aa}call(aa,xa){return tidy$1(()=>(aa=getExactlyOneTensor(aa),aa.dtype!=="float32"&&(aa=cast$4(aa,"float32")),add$3(mul$1(aa,this.scale),this.offset)))}}Rescaling.className="Rescaling",registerClass$1(Rescaling);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const{resizeBilinear:resizeBilinear$3,cropAndResize:cropAndResize$3}=image$1;class CenterCrop extends Layer{constructor(aa){super(aa),this.height=aa.height,this.width=aa.width}centerCrop(aa,xa,ba,Sa,Ta,wa,Ea,ka){return tidy$1(()=>{let Aa,Fa=!1;const La=xa/wa,el=ba/Ea,tl=(Sa+xa)/wa,nl=(Ta+ba)/Ea,rl=[La,el,tl,nl],sl=[];aa.rank===3?(Fa=!0,Aa=stack([aa])):Aa=aa;for(let cl=0;cl<Aa.shape[0];cl++)sl.push(rl);const ol=tensor(sl,[sl.length,4]),al=range$4(0,sl.length,1,"int32"),il=cropAndResize$3(Aa,ol,al,[Sa,Ta],"nearest");return cast$4(Fa?getExactlyOneTensor(unstack(il)):il,ka)})}upsize(aa,xa,ba,Sa){return tidy$1(()=>{const Ta=resizeBilinear$3(aa,[xa,ba]);return cast$4(Ta,Sa)})}call(aa,xa){return tidy$1(()=>{const ba=getExactlyOneTensor(aa),Sa=ba.dtype,Ta=ba.shape,wa=Ta[Ta.length-3],Ea=Ta[Ta.length-2];let ka=0;wa!==this.height&&(ka=Math.floor((wa-this.height)/2));let Aa=0;return Ea!==this.width&&(Aa=Math.floor((Ea-this.width)/2),Aa===0&&(Aa=1)),ka>=0&&Aa>=0?this.centerCrop(ba,ka,Aa,this.height,this.width,wa,Ea,Sa):this.upsize(aa,this.height,this.width,Sa)})}getConfig(){const aa={height:this.height,width:this.width},xa=super.getConfig();return Object.assign(aa,xa),aa}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa.length-3,ba=aa.length-2;return aa[xa]=this.height,aa[ba]=this.width,aa}}CenterCrop.className="CenterCrop",registerClass$1(CenterCrop);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function encodeCategoricalInputs(ha,aa,xa,ba){let Sa=getExactlyOneTensor(ha);if(Sa.dtype!=="int32"&&(Sa=cast$4(Sa,"int32")),aa==="int")return Sa;const Ta=Sa.shape;if(Sa.rank===0&&(Sa=expandDims$4(Sa,-1)),aa==="oneHot"&&Sa.shape[Sa.shape.length-1]!==1&&(Sa=expandDims$4(Sa,-1)),Sa.rank>2)throw new ValueError(`When outputMode is not int, maximum output rank is 2 Received outputMode ${aa} and input shape ${Ta} which would result in output rank ${Sa.rank}.`);const wa=["multiHot","oneHot"].includes(aa),Ea=Sa;let ka;if(typeof ba<"u"&&aa==="count"?ka=denseBincount$3(Ea,ba,xa,wa):ka=denseBincount$3(Ea,[],xa,wa),aa!=="tfIdf")return ka;if(ba)return mul$1(ka,ba);throw new ValueError("When outputMode is 'tfIdf', weights must be provided.")}/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class CategoryEncoding extends Layer{constructor(aa){super(aa),this.numTokens=aa.numTokens,aa.outputMode?this.outputMode=aa.outputMode:this.outputMode="multiHot"}getConfig(){const aa={numTokens:this.numTokens,outputMode:this.outputMode},xa=super.getConfig();return Object.assign(aa,xa),aa}computeOutputShape(aa){return aa=getExactlyOneShape(aa),aa==null?[this.numTokens]:this.outputMode==="oneHot"&&aa[aa.length-1]!==1?(aa.push(this.numTokens),aa):(aa[aa.length-1]=this.numTokens,aa)}call(aa,xa){return tidy$1(()=>{aa=getExactlyOneTensor(aa),aa.dtype!=="int32"&&(aa=cast$4(aa,"int32"));let ba;if(typeof xa.countWeights<"u"){if(this.outputMode!=="count")throw new ValueError(`countWeights is not used when outputMode !== count.
              Received countWeights=${xa.countWeights}`);ba=getExactlyOneTensor(xa.countWeights)}const Sa=max$4(aa),Ta=min$4(aa),wa=greater$3(this.numTokens,Sa).bufferSync().get(0),Ea=greaterEqual$3(Ta,0).bufferSync().get(0);if(!(wa&&Ea))throw new ValueError(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return encodeCategoricalInputs(aa,this.outputMode,this.numTokens,ba)})}}CategoryEncoding.className="CategoryEncoding",registerClass$1(CategoryEncoding);/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const INTERPOLATION_KEYS$1=["bilinear","nearest"],INTERPOLATION_METHODS$1=new Set(INTERPOLATION_KEYS$1);class Resizing extends Layer{constructor(aa){if(super(aa),this.height=aa.height,this.width=aa.width,aa.interpolation)if(INTERPOLATION_METHODS$1.has(aa.interpolation))this.interpolation=aa.interpolation;else throw new ValueError(`Invalid interpolation parameter: ${aa.interpolation} is not implemented`);else this.interpolation="bilinear";this.cropToAspectRatio=!!aa.cropToAspectRatio}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa[2];return[this.height,this.width,xa]}getConfig(){const aa={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},xa=super.getConfig();return Object.assign(aa,xa),aa}call(aa,xa){return tidy$1(()=>{const ba=[this.height,this.width];if(this.interpolation==="bilinear")return image$1.resizeBilinear(aa,ba,!this.cropToAspectRatio);if(this.interpolation==="nearest")return image$1.resizeNearestNeighbor(aa,ba,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS$1]} are supported`)})}}Resizing.className="Resizing",registerClass$1(Resizing);/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class RandomSeed{constructor(aa){this.seed=aa}next(){if(this.seed!==void 0)return this.seed++}}RandomSeed.className="RandomSeed";/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */class BaseRandomLayer extends Layer{constructor(aa){super(aa),this.randomGenerator=new RandomSeed(aa.seed)}getConfig(){const aa={seed:this.randomGenerator.seed},xa=super.getConfig();return Object.assign(aa,xa),aa}}BaseRandomLayer.className="BaseRandomLayer";/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */const INTERPOLATION_KEYS=["bilinear","nearest"],INTERPOLATION_METHODS=new Set(INTERPOLATION_KEYS);class RandomWidth extends BaseRandomLayer{constructor(aa){super(aa);const{factor:xa,interpolation:ba="bilinear"}=aa;if(this.factor=xa,Array.isArray(this.factor)&&this.factor.length===2)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else if(!Array.isArray(this.factor)&&this.factor>0)this.widthLower=-this.factor,this.widthUpper=this.factor;else throw new ValueError(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);if(this.widthLower<-1||this.widthUpper<-1)throw new ValueError(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new ValueError(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);if(ba)if(INTERPOLATION_METHODS.has(ba))this.interpolation=ba;else throw new ValueError(`Invalid interpolation parameter: ${ba} is not implemented`)}getConfig(){const aa={factor:this.factor,interpolation:this.interpolation},xa=super.getConfig();return Object.assign(aa,xa),aa}computeOutputShape(aa){aa=getExactlyOneShape(aa);const xa=aa[2];return[this.imgHeight,-1,xa]}call(aa,xa){return tidy$1(()=>{const ba=getExactlyOneTensor(aa);this.imgHeight=ba.shape[ba.shape.length-3];const Sa=ba.shape[ba.shape.length-2];this.widthFactor=randomUniform([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let Ta=this.widthFactor.dataSync()[0]*Sa;Ta=Math.round(Ta);const wa=[this.imgHeight,Ta];switch(this.interpolation){case"bilinear":return image$1.resizeBilinear(aa,wa);case"nearest":return image$1.resizeNearestNeighbor(aa,wa);default:throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...INTERPOLATION_METHODS]} are supported`)}})}}RandomWidth.className="RandomWidth",registerClass$1(RandomWidth);/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$4=env$1();ENV$4.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,ha=>{ha&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */var DataType;(function(ha){ha[ha.DT_INVALID=0]="DT_INVALID",ha[ha.DT_FLOAT=1]="DT_FLOAT",ha[ha.DT_DOUBLE=2]="DT_DOUBLE",ha[ha.DT_INT32=3]="DT_INT32",ha[ha.DT_UINT8=4]="DT_UINT8",ha[ha.DT_INT16=5]="DT_INT16",ha[ha.DT_INT8=6]="DT_INT8",ha[ha.DT_STRING=7]="DT_STRING",ha[ha.DT_COMPLEX64=8]="DT_COMPLEX64",ha[ha.DT_INT64=9]="DT_INT64",ha[ha.DT_BOOL=10]="DT_BOOL",ha[ha.DT_QINT8=11]="DT_QINT8",ha[ha.DT_QUINT8=12]="DT_QUINT8",ha[ha.DT_QINT32=13]="DT_QINT32",ha[ha.DT_BFLOAT16=14]="DT_BFLOAT16",ha[ha.DT_QINT16=15]="DT_QINT16",ha[ha.DT_QUINT16=16]="DT_QUINT16",ha[ha.DT_UINT16=17]="DT_UINT16",ha[ha.DT_COMPLEX128=18]="DT_COMPLEX128",ha[ha.DT_HALF=19]="DT_HALF",ha[ha.DT_RESOURCE=20]="DT_RESOURCE",ha[ha.DT_VARIANT=21]="DT_VARIANT",ha[ha.DT_UINT32=22]="DT_UINT32",ha[ha.DT_UINT64=23]="DT_UINT64",ha[ha.DT_FLOAT_REF=101]="DT_FLOAT_REF",ha[ha.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",ha[ha.DT_INT32_REF=103]="DT_INT32_REF",ha[ha.DT_UINT8_REF=104]="DT_UINT8_REF",ha[ha.DT_INT16_REF=105]="DT_INT16_REF",ha[ha.DT_INT8_REF=106]="DT_INT8_REF",ha[ha.DT_STRING_REF=107]="DT_STRING_REF",ha[ha.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",ha[ha.DT_INT64_REF=109]="DT_INT64_REF",ha[ha.DT_BOOL_REF=110]="DT_BOOL_REF",ha[ha.DT_QINT8_REF=111]="DT_QINT8_REF",ha[ha.DT_QUINT8_REF=112]="DT_QUINT8_REF",ha[ha.DT_QINT32_REF=113]="DT_QINT32_REF",ha[ha.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",ha[ha.DT_QINT16_REF=115]="DT_QINT16_REF",ha[ha.DT_QUINT16_REF=116]="DT_QUINT16_REF",ha[ha.DT_UINT16_REF=117]="DT_UINT16_REF",ha[ha.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",ha[ha.DT_HALF_REF=119]="DT_HALF_REF",ha[ha.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",ha[ha.DT_VARIANT_REF=121]="DT_VARIANT_REF",ha[ha.DT_UINT32_REF=122]="DT_UINT32_REF",ha[ha.DT_UINT64_REF=123]="DT_UINT64_REF"})(DataType||(DataType={}));var SaverDef;(function(ha){(function(aa){aa[aa.LEGACY=0]="LEGACY",aa[aa.V1=1]="V1",aa[aa.V2=2]="V2"})(ha.CheckpointFormatVersion||(ha.CheckpointFormatVersion={}))})(SaverDef||(SaverDef={}));/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CUSTOM_OPS={};function getRegisteredOp(ha){return CUSTOM_OPS[ha]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getParamValue(ha,aa,xa,ba,Sa){const Ta=aa.inputParams[ha];if(Ta&&Ta.inputIndexStart!==void 0){const Ea=Ta.inputIndexStart,ka=Ta.inputIndexEnd===0?void 0:Ta.inputIndexEnd===void 0?Ea+1:Ta.inputIndexEnd,Aa=Ea<0?aa.inputNames.length+Ea:Ea;if(Ta.type==="tensor")return getTensor(aa.inputNames[Aa],xa,ba,Sa);if(Ta.type==="tensors"){const el=aa.inputs.slice(Ea,ka);return aa.inputNames.slice(Ea,ka).filter((nl,rl)=>{var sl;return((sl=el[rl])===null||sl===void 0?void 0:sl.op)!=="NoOp"}).map(nl=>getTensor(nl,xa,ba,Sa))}const Fa=getTensor(aa.inputNames[Aa],xa,ba,Sa),La=Fa.dataSync();return Ta.type==="number"?La[0]:toNestedArray$1(Fa.shape,La)}const wa=aa.attrParams[ha];return wa&&wa.value}function getTensor(ha,aa,xa,ba){const[Sa,Ta]=parseNodeName(ha,xa);if(ba!=null){const Ea=ba.getHashTableHandleByName(Sa);if(Ea!=null)return Ea}const wa=xa.currentContextIds.find(Ea=>!!aa[getNodeNameWithContextId(Sa,Ea)]);return wa!==void 0?aa[getNodeNameWithContextId(Sa,wa)][Ta]:void 0}function getTensorsForCurrentContext(ha,aa,xa){return aa[getNodeNameWithContextId(ha,xa.currentContextId)]}function getNodeNameAndIndex(ha,aa){const[xa,ba,Sa]=parseNodeName(ha,aa);return[getNodeNameWithContextId(xa,aa&&aa.currentContextId),ba,Sa]}function getNodeNameWithContextId(ha,aa){return aa?`${ha}-${aa}`:ha}function parseNodeName(ha,aa){if(ha==="")return["",0,void 0];const xa=aa!=null&&aa.parseNodeNameCache!=null;if(xa){const Ta=aa.parseNodeNameCache.get(ha);if(Ta!=null)return Ta}const ba=ha.split(":");let Sa;if(ba.length===1)Sa=[ha,0,void 0];else{const Ta=ba[0],wa=ba.length===3?ba[1]:void 0,Ea=Number(ba[ba.length-1]);Sa=[Ta,Ea,wa]}return xa&&aa.parseNodeNameCache.set(ha,Sa),Sa}function getPadding(ha,aa,xa){let ba=getParamValue("pad",ha,aa,xa);if(ba==="explicit"){ba=getParamValue("explicitPaddings",ha,aa,xa);const Sa=[[0,0],[0,0],[0,0],[0,0]];for(let Ta=0;Ta<4;Ta++)Sa[Ta][0]=ba[Ta*2],Sa[Ta][1]=ba[Ta*2+1];return Sa}return ba}function cloneTensor(ha){return ha.kept?ha:clone$1(ha)}/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$i=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var arithmetic=Object.freeze({__proto__:null,json:json$i});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$h=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var basicMath=Object.freeze({__proto__:null,json:json$h});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$g=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var control=Object.freeze({__proto__:null,json:json$g});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$f=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var convolution=Object.freeze({__proto__:null,json:json$f});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$e=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var creation=Object.freeze({__proto__:null,json:json$e});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$d=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var dynamic=Object.freeze({__proto__:null,json:json$d});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$c=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var evaluation=Object.freeze({__proto__:null,json:json$c});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$b=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var graph=Object.freeze({__proto__:null,json:json$b});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$a=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var hashTable=Object.freeze({__proto__:null,json:json$a});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$9=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var image=Object.freeze({__proto__:null,json:json$9});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$8=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var logical=Object.freeze({__proto__:null,json:json$8});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$7=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var matrices=Object.freeze({__proto__:null,json:json$7});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$6=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var normalization=Object.freeze({__proto__:null,json:json$6});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$5=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var reduction=Object.freeze({__proto__:null,json:json$5});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$4=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var sliceJoin=Object.freeze({__proto__:null,json:json$4});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$3=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var sparse=Object.freeze({__proto__:null,json:json$3});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$2=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var spectral=Object.freeze({__proto__:null,json:json$2});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json$1=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var string=Object.freeze({__proto__:null,json:json$1});/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const json=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var transformation=Object.freeze({__proto__:null,json});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OperationMapper{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const aa=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,graph,hashTable,image,logical,matrices,normalization,reduction,sliceJoin,sparse,spectral,string,transformation],xa=[].concat(...aa.map(ba=>ba.json));this.opMappers=xa.reduce((ba,Sa)=>(ba[Sa.tfOpName]=Sa,ba),{})}transformGraph(aa,xa={}){const ba=aa.node,Sa=[],Ta=[],wa=[],Ea=ba.reduce((rl,sl)=>(rl[sl.name]=this.mapNode(sl),sl.op.startsWith("Placeholder")?Sa.push(rl[sl.name]):sl.op==="Const"?Ta.push(rl[sl.name]):(sl.input==null||sl.input.length===0)&&wa.push(rl[sl.name]),rl),{});let ka=[];const Aa=[];let Fa={},La={};xa!=null&&(Fa=this.mapSignatureEntries(xa.inputs),La=this.mapSignatureEntries(xa.outputs));const el=Object.keys(Ea);el.forEach(rl=>{const sl=Ea[rl];sl.inputNames.forEach((ol,al)=>{const[ll,,il]=getNodeNameAndIndex(ol),cl=Ea[ll];if(cl.outputs!=null){const ul=cl.outputs.indexOf(il);if(ul!==-1){const dl=`${ll}:${ul}`;sl.inputNames[al]=dl}}sl.inputs.push(cl),cl.children.push(sl)})}),Object.keys(La).length===0?el.forEach(rl=>{const sl=Ea[rl];sl.children.length===0&&Aa.push(sl)}):Object.keys(La).forEach(rl=>{const[sl]=getNodeNameAndIndex(rl),ol=Ea[sl];ol!=null&&(ol.signatureKey=La[rl],Aa.push(ol))}),Object.keys(Fa).length>0?Object.keys(Fa).forEach(rl=>{const[sl]=getNodeNameAndIndex(rl),ol=Ea[sl];ol&&(ol.signatureKey=Fa[rl],ka.push(ol))}):ka=Sa;let tl={};aa.library!=null&&aa.library.function!=null&&(tl=aa.library.function.reduce((rl,sl)=>(rl[sl.signature.name]=this.mapFunction(sl),rl),{}));const nl={nodes:Ea,inputs:ka,outputs:Aa,weights:Ta,placeholders:Sa,signature:xa,functions:tl};return wa.length>0&&(nl.initNodes=wa),nl}mapSignatureEntries(aa){return Object.keys(aa||{}).reduce((xa,ba)=>(xa[aa[ba].name]=ba,xa),{})}mapNode(aa){const xa=getRegisteredOp(aa.op)||this.opMappers[aa.op]||{};aa.attr==null&&(aa.attr={});const ba={name:aa.name,op:aa.op,category:xa.category,inputNames:(aa.input||[]).map(Sa=>Sa.startsWith("^")?Sa.slice(1):Sa),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:aa.attr,outputs:xa.outputs};return xa.inputs!=null&&(ba.inputParams=xa.inputs.reduce((Sa,Ta)=>(Sa[Ta.name]={type:Ta.type,inputIndexStart:Ta.start,inputIndexEnd:Ta.end},Sa),{})),xa.attrs!=null&&(ba.attrParams=xa.attrs.reduce((Sa,Ta)=>{const wa=Ta.type;let Ea;switch(Ta.type){case"string":Ea=getStringParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getStringParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"string[]":Ea=getStringArrayParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getStringArrayParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"number":Ea=getNumberParam(aa.attr,Ta.tfName,Ta.defaultValue||0),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getNumberParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"number[]":Ea=getNumericArrayParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getNumericArrayParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"bool":Ea=getBoolParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getBoolParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"bool[]":Ea=getBoolArrayParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getBoolArrayParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"shape":Ea=getTensorShapeParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getTensorShapeParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"shape[]":Ea=getTensorShapeArrayParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getTensorShapeArrayParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"dtype":Ea=getDtypeParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getDtypeParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"dtype[]":Ea=getDtypeArrayParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getDtypeArrayParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"func":Ea=getFuncParam(aa.attr,Ta.tfName,Ta.defaultValue),Ea===void 0&&Ta.tfDeprecatedName&&(Ea=getFuncParam(aa.attr,Ta.tfDeprecatedName,Ta.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${Ta.type} for op: ${aa.op}`)}return Sa[Ta.name]={value:Ea,type:wa},Sa},{})),ba}mapFunction(aa){const xa=aa.nodeDef,ba=[],Sa=[];let Ta={};xa!=null&&(Ta=xa.reduce((La,el)=>(La[el.name]=this.mapNode(el),el.op==="Const"&&Sa.push(La[el.name]),La),{}));const wa=[],Ea=[];aa.signature.inputArg.forEach(La=>{const[el]=getNodeNameAndIndex(La.name),tl={name:el,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:parseDtypeParam(La.type),type:"dtype"}},children:[]};tl.signatureKey=La.name,wa.push(tl),Ta[el]=tl}),Object.keys(Ta).forEach(La=>{const el=Ta[La];el.inputNames.forEach((tl,nl)=>{const[rl,,sl]=getNodeNameAndIndex(tl),ol=Ta[rl];if(ol.outputs!=null){const al=ol.outputs.indexOf(sl);if(al!==-1){const ll=`${rl}:${al}`;el.inputNames[nl]=ll}}el.inputs.push(ol),ol.children.push(el)})});const Aa=aa.ret;aa.signature.outputArg.forEach(La=>{const[el,tl]=getNodeNameAndIndex(Aa[La.name]),nl=Ta[el];nl!=null&&(nl.defaultOutput=tl,Ea.push(nl))});const Fa=this.mapArgsToSignature(aa);return{nodes:Ta,inputs:wa,outputs:Ea,weights:Sa,placeholders:ba,signature:Fa}}mapArgsToSignature(aa){return{methodName:aa.signature.name,inputs:aa.signature.inputArg.reduce((xa,ba)=>(xa[ba.name]=this.mapArgToTensorInfo(ba),xa),{}),outputs:aa.signature.outputArg.reduce((xa,ba)=>(xa[ba.name]=this.mapArgToTensorInfo(ba,aa.ret),xa),{})}}mapArgToTensorInfo(aa,xa){let ba=aa.name;return xa!=null&&(ba=xa[ba]),{name:ba,dtype:aa.type}}}function decodeBase64(ha){const aa=env$1().global;if(typeof aa.atob<"u")return aa.atob(ha);if(typeof Buffer<"u")return new Buffer(ha,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function parseStringParam(ha,aa){const xa=Array.isArray(ha)?String.fromCharCode.apply(null,ha):decodeBase64(ha);return aa?xa:xa.toLowerCase()}function getStringParam(ha,aa,xa,ba=!1){const Sa=ha[aa];return Sa!=null?parseStringParam(Sa.s,ba):xa}function getBoolParam(ha,aa,xa){const ba=ha[aa];return ba?ba.b:xa}function getNumberParam(ha,aa,xa){const ba=ha[aa]||{},Sa=ba.i!=null?ba.i:ba.f!=null?ba.f:xa;return typeof Sa=="number"?Sa:parseInt(Sa,10)}function parseDtypeParam(ha){switch(typeof ha=="string"&&(ha=DataType[ha]),ha){case DataType.DT_FLOAT:case DataType.DT_HALF:return"float32";case DataType.DT_INT32:case DataType.DT_INT64:case DataType.DT_INT8:case DataType.DT_UINT8:return"int32";case DataType.DT_BOOL:return"bool";case DataType.DT_DOUBLE:return"float32";case DataType.DT_STRING:return"string";case DataType.DT_COMPLEX64:case DataType.DT_COMPLEX128:return"complex64";default:return null}}function getFuncParam(ha,aa,xa){const ba=ha[aa];return ba&&ba.func?ba.func.name:xa}function getDtypeParam(ha,aa,xa){const ba=ha[aa];return ba&&ba.type?parseDtypeParam(ba.type):xa}function getDtypeArrayParam(ha,aa,xa){const ba=ha[aa];return ba&&ba.list&&ba.list.type?ba.list.type.map(Sa=>parseDtypeParam(Sa)):xa}function parseTensorShapeParam(ha){if(!ha.unknownRank)return ha.dim!=null?ha.dim.map(aa=>typeof aa.size=="number"?aa.size:parseInt(aa.size,10)):[]}function getTensorShapeParam(ha,aa,xa){const ba=ha[aa];return ba&&ba.shape?parseTensorShapeParam(ba.shape):xa}function getNumericArrayParam(ha,aa,xa){const ba=ha[aa];return ba?((ba.list.f&&ba.list.f.length?ba.list.f:ba.list.i)||[]).map(Sa=>typeof Sa=="number"?Sa:parseInt(Sa,10)):xa}function getStringArrayParam(ha,aa,xa,ba=!1){const Sa=ha[aa];return Sa&&Sa.list&&Sa.list.s?Sa.list.s.map(Ta=>parseStringParam(Ta,ba)):xa}function getTensorShapeArrayParam(ha,aa,xa){const ba=ha[aa];return ba&&ba.list&&ba.list.shape?ba.list.shape.map(Sa=>parseTensorShapeParam(Sa)):xa}function getBoolArrayParam(ha,aa,xa){const ba=ha[aa];return ba&&ba.list&&ba.list.b?ba.list.b:xa}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class NodeValueImpl{constructor(aa,xa,ba){this.node=aa,this.tensorMap=xa,this.context=ba,this.inputs=[],this.attrs={},this.inputs=aa.inputNames.map(Sa=>this.getInput(Sa)),aa.rawAttrs!=null&&(this.attrs=Object.keys(aa.rawAttrs).reduce((Sa,Ta)=>(Sa[Ta]=this.getAttr(Ta),Sa),{}))}getInput(aa){return getTensor(aa,this.tensorMap,this.context)}getAttr(aa,xa){const ba=this.node.rawAttrs[aa];if(ba.tensor!=null)return getTensor(aa,this.tensorMap,this.context);if(ba.i!=null||ba.f!=null)return getNumberParam(this.node.rawAttrs,aa,xa);if(ba.s!=null)return getStringParam(this.node.rawAttrs,aa,xa);if(ba.b!=null)return getBoolParam(this.node.rawAttrs,aa,xa);if(ba.shape!=null)return getTensorShapeParam(this.node.rawAttrs,aa,xa);if(ba.type!=null)return getDtypeParam(this.node.rawAttrs,aa,xa);if(ba.list!=null){if(ba.list.i!=null||ba.list.f!=null)return getNumericArrayParam(this.node.rawAttrs,aa,xa);if(ba.list.s!=null)return getStringArrayParam(this.node.rawAttrs,aa,xa);if(ba.list.shape!=null)return getTensorShapeArrayParam(this.node.rawAttrs,aa,xa);if(ba.list.b!=null)return getBoolArrayParam(this.node.rawAttrs,aa,xa);if(ba.list.type!=null)return getDtypeArrayParam(this.node.rawAttrs,aa,xa)}return xa}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var tfOps=Object.freeze({__proto__:null,OP_SCOPE_SUFFIX:OP_SCOPE_SUFFIX$1,abs:abs$4,acos:acos$3,acosh:acosh$3,add:add$3,addN:addN$3,all:all$3,any:any$3,argMax:argMax$3,argMin:argMin$3,asin:asin$3,asinh:asinh$3,atan:atan$3,atan2:atan2$3,atanh:atanh$3,avgPool:avgPool$3,avgPool3d,basicLSTMCell,batchNorm:batchNorm$3,batchNorm2d,batchNorm3d,batchNorm4d,batchToSpaceND:batchToSpaceND$3,bincount:bincount$3,bitwiseAnd:bitwiseAnd$3,booleanMaskAsync,broadcastArgs:broadcastArgs$3,broadcastTo:broadcastTo$1,buffer:buffer$1,cast:cast$5,ceil:ceil$3,clipByValue:clipByValue$3,clone:clone$1,complex:complex$4,concat:concat$3,concat1d,concat2d,concat3d,concat4d,conv1d,conv2d:conv2d$3,conv2dTranspose,conv3d,conv3dTranspose,cos:cos$3,cosh:cosh$3,cosineWindow,cumprod:cumprod$3,cumsum:cumsum$3,denseBincount:denseBincount$3,depthToSpace:depthToSpace$3,depthwiseConv2d:depthwiseConv2d$2,diag:diag$3,dilation2d,div:div$2,divNoNan,dot:dot$1,dropout:dropout$1,einsum:einsum$3,elu:elu$5,enclosingPowerOfTwo,ensureShape,equal:equal$3,erf:erf$3,euclideanNorm,exp:exp$3,expandDims:expandDims$4,expm1:expm1$3,eye,fft:fft$3,fill:fill$4,floor:floor$3,floorDiv:floorDiv$4,fused:fused_ops,gather:gather$1,gatherND,greater:greater$3,greaterEqual:greaterEqual$3,ifft:ifft$3,imag:imag$3,image:image$1,inTopKAsync,irfft,isFinite:isFinite$4,isInf:isInf$3,isNaN:isNaN$4,leakyRelu:leakyRelu$4,less:less$3,lessEqual:lessEqual$3,linalg,linspace,localResponseNormalization,log:log$4,log1p:log1p$3,logSigmoid,logSoftmax,logSumExp,logicalAnd:logicalAnd$3,logicalNot:logicalNot$3,logicalOr:logicalOr$3,logicalXor,losses,lowerBound:lowerBound$1,matMul:matMul$1,max:max$4,maxPool:maxPool$3,maxPool3d:maxPool3d$2,maxPoolWithArgmax,maximum:maximum$4,mean:mean$1,meshgrid,min:min$4,minimum:minimum$3,mirrorPad:mirrorPad$1,mod:mod$3,moments,movingAverage,mul:mul$1,multiRNNCell,multinomial:multinomial$3,neg:neg$3,norm,notEqual:notEqual$3,oneHot:oneHot$3,ones:ones$1,onesLike:onesLike$3,op:op$1,outerProduct,pad,pad1d,pad2d,pad3d,pad4d,pool:pool$1,pow:pow$4,prelu:prelu$4,print:print$1,prod:prod$3,raggedGather:raggedGather$3,raggedRange:raggedRange$3,raggedTensorToTensor:raggedTensorToTensor$3,rand,randomGamma,randomNormal:randomNormal$1,randomStandardNormal,randomUniform,randomUniformInt,range:range$4,real:real$3,reciprocal:reciprocal$3,relu:relu$4,relu6:relu6$4,reshape:reshape$4,reverse:reverse$3,reverse1d,reverse2d,reverse3d,reverse4d,rfft,round:round$4,rsqrt:rsqrt$3,scalar:scalar$1,scatterND,searchSorted:searchSorted$3,selu:selu$3,separableConv2d,setdiff1dAsync,sigmoid:sigmoid$4,sign:sign$3,signal,sin:sin$3,sinh:sinh$3,slice:slice$3,slice1d,slice2d,slice3d,slice4d,softmax:softmax$3,softplus:softplus$3,spaceToBatchND:spaceToBatchND$3,sparse:sparse$1,sparseToDense:sparseToDense$3,spectral:spectral$1,split:split$3,sqrt:sqrt$4,square:square$4,squaredDifference:squaredDifference$3,squeeze,stack,step:step$4,stridedSlice:stridedSlice$3,string:string$1,sub:sub$4,sum:sum$5,tan:tan$3,tanh:tanh$3,tensor,tensor1d,tensor2d,tensor3d,tensor4d,tensor5d,tensor6d,tensorScatterUpdate:tensorScatterUpdate$3,tile:tile$4,topk,transpose:transpose$3,truncatedNormal,unique:unique$4,unsortedSegmentSum:unsortedSegmentSum$3,unstack,upperBound:upperBound$1,variable,where,whereAsync,zeros:zeros$2,zerosLike:zerosLike$4});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$k=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"BiasAdd":case"AddV2":case"Add":return[ba.add(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"AddN":return[ba.addN(getParamValue("tensors",ha,aa,xa))];case"FloorMod":case"Mod":return[ba.mod(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Mul":return[ba.mul(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"RealDiv":case"Div":return[ba.div(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"DivNoNan":return[ba.divNoNan(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"FloorDiv":return[ba.floorDiv(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Sub":return[ba.sub(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Minimum":return[ba.minimum(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Maximum":return[ba.maximum(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Pow":return[ba.pow(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"SquaredDifference":return[ba.squaredDifference(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$j=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Abs":case"ComplexAbs":return[ba.abs(getParamValue("x",ha,aa,xa))];case"Acos":return[ba.acos(getParamValue("x",ha,aa,xa))];case"Acosh":return[ba.acosh(getParamValue("x",ha,aa,xa))];case"Asin":return[ba.asin(getParamValue("x",ha,aa,xa))];case"Asinh":return[ba.asinh(getParamValue("x",ha,aa,xa))];case"Atan":return[ba.atan(getParamValue("x",ha,aa,xa))];case"Atan2":return[ba.atan2(getParamValue("x",ha,aa,xa),getParamValue("y",ha,aa,xa))];case"Atanh":return[ba.atanh(getParamValue("x",ha,aa,xa))];case"Ceil":return[ba.ceil(getParamValue("x",ha,aa,xa))];case"Complex":return[ba.complex(getParamValue("real",ha,aa,xa),getParamValue("imag",ha,aa,xa))];case"Cos":return[ba.cos(getParamValue("x",ha,aa,xa))];case"Cosh":return[ba.cosh(getParamValue("x",ha,aa,xa))];case"Elu":return[ba.elu(getParamValue("x",ha,aa,xa))];case"Erf":return[ba.erf(getParamValue("x",ha,aa,xa))];case"Exp":return[ba.exp(getParamValue("x",ha,aa,xa))];case"Expm1":return[ba.expm1(getParamValue("x",ha,aa,xa))];case"Floor":return[ba.floor(getParamValue("x",ha,aa,xa))];case"Log":return[ba.log(getParamValue("x",ha,aa,xa))];case"Log1p":return[ba.log1p(getParamValue("x",ha,aa,xa))];case"Imag":return[ba.imag(getParamValue("x",ha,aa,xa))];case"Neg":return[ba.neg(getParamValue("x",ha,aa,xa))];case"Reciprocal":return[ba.reciprocal(getParamValue("x",ha,aa,xa))];case"Real":return[ba.real(getParamValue("x",ha,aa,xa))];case"Relu":return[ba.relu(getParamValue("x",ha,aa,xa))];case"Round":return[ba.round(getParamValue("x",ha,aa,xa))];case"Selu":return[ba.selu(getParamValue("x",ha,aa,xa))];case"Sigmoid":return[ba.sigmoid(getParamValue("x",ha,aa,xa))];case"Sin":return[ba.sin(getParamValue("x",ha,aa,xa))];case"Sign":return[ba.sign(getParamValue("x",ha,aa,xa))];case"Sinh":return[ba.sinh(getParamValue("x",ha,aa,xa))];case"Softplus":return[ba.softplus(getParamValue("x",ha,aa,xa))];case"Sqrt":return[ba.sqrt(getParamValue("x",ha,aa,xa))];case"Square":return[ba.square(getParamValue("x",ha,aa,xa))];case"Tanh":return[ba.tanh(getParamValue("x",ha,aa,xa))];case"Tan":return[ba.tan(getParamValue("x",ha,aa,xa))];case"ClipByValue":return[ba.clipByValue(getParamValue("x",ha,aa,xa),getParamValue("clipValueMin",ha,aa,xa),getParamValue("clipValueMax",ha,aa,xa))];case"Relu6":return[ba.relu6(getParamValue("x",ha,aa,xa))];case"Rsqrt":return[ba.rsqrt(getTensor(ha.inputNames[0],aa,xa))];case"LeakyRelu":return[ba.leakyRelu(getParamValue("x",ha,aa,xa),getParamValue("alpha",ha,aa,xa))];case"Prelu":return[ba.prelu(getParamValue("x",ha,aa,xa),getParamValue("alpha",ha,aa,xa))];case"IsNan":return[ba.isNaN(getTensor(ha.inputNames[0],aa,xa))];case"IsInf":return[ba.isInf(getTensor(ha.inputNames[0],aa,xa))];case"IsFinite":return[ba.isFinite(getTensor(ha.inputNames[0],aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertShapesMatchAllowUndefinedSize(ha,aa,xa=""){if(!(typeof ha=="number"||typeof aa=="number")){assert$2(ha.length===aa.length,()=>xa+` Shapes ${ha} and ${aa} must match`);for(let ba=0;ba<ha.length;ba++){const Sa=ha[ba],Ta=aa[ba];assert$2(Sa<0||Ta<0||Sa===Ta,()=>xa+` Shapes ${ha} and ${aa} must match`)}}}function fullDefinedShape(ha){return!(typeof ha=="number"||ha.some(aa=>aa<0))}function inferElementShape(ha,aa,xa){let ba=mergeElementShape(ha,xa);const Sa=!fullDefinedShape(ba);if(Sa&&aa.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${ba}`);if(Sa&&aa.forEach(Ta=>{ba=mergeElementShape(Ta.shape,ba)}),!fullDefinedShape(ba))throw new Error(`Non-fully-defined elementShape: ${ba}`);return ba}function mergeElementShape(ha,aa){if(typeof ha=="number")return aa;if(typeof aa=="number")return ha;if(ha.length!==aa.length)throw new Error(`Incompatible ranks during merge: ${ha} vs. ${aa}`);const xa=[];for(let ba=0;ba<ha.length;++ba){const Sa=ha[ba],Ta=aa[ba];if(Sa>=0&&Ta>=0&&Sa!==Ta)throw new Error(`Incompatible shape during merge: ${ha} vs. ${aa}`);xa[ba]=Sa>=0?Sa:Ta}return xa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorArray{constructor(aa,xa,ba,Sa,Ta,wa,Ea){this.name=aa,this.dtype=xa,this.maxSize=ba,this.elementShape=Sa,this.identicalElementShapes=Ta,this.dynamicSize=wa,this.clearAfterRead=Ea,this.tensors=[],this.closed_=!1,this.idTensor=scalar$1(0),keep$1(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(aa){this.tensors.forEach(xa=>{(aa==null||!aa.has(xa.tensor.id))&&xa.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(aa){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(aa<0||aa>=this.size())throw new Error(`Tried to read from index ${aa}, but array size is: ${this.size()}`);const xa=this.tensors[aa];if(xa.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${aa} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(xa.cleared=!0),xa.read=!0,xa.tensor}readMany(aa){return aa.map(xa=>this.read(xa))}write(aa,xa){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(aa<0||!this.dynamicSize&&aa>=this.maxSize)throw new Error(`Tried to write to index ${aa}, but array is not resizeable and size is: ${this.maxSize}`);const ba=this.tensors[aa]||{};if(xa.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${aa},
          because the value dtype is ${xa.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=xa.shape),assertShapesMatchAllowUndefinedSize(this.elementShape,xa.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${aa}.`),ba.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${aa}, because it has already been read.`);if(ba.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${aa}, because it has already been written.`);ba.tensor=xa,keep$1(xa),ba.written=!0,this.tensors[aa]=ba}writeMany(aa,xa){if(aa.length!==xa.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${aa.length} is not the same as tensors size: ${xa.length}.`);aa.forEach((ba,Sa)=>this.write(ba,xa[Sa]))}gather(aa,xa){if(xa&&xa!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${xa}`);if(aa)aa=aa.slice(0,this.size());else{aa=[];for(let Sa=0;Sa<this.size();Sa++)aa.push(Sa)}if(aa.length===0)return tensor([],[0].concat(this.elementShape));const ba=this.readMany(aa);return assertShapesMatchAllowUndefinedSize(this.elementShape,ba[0].shape,"TensorArray shape mismatch: "),stack(ba,0)}concat(aa){if(aa&&aa!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${aa}`);if(this.size()===0)return tensor([],[0].concat(this.elementShape));const xa=[];for(let Sa=0;Sa<this.size();Sa++)xa.push(Sa);const ba=this.readMany(xa);return assertShapesMatchAllowUndefinedSize(this.elementShape,ba[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${ba[0].shape})`),concat$3(ba,0)}scatter(aa,xa){if(xa.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${xa.dtype}`);if(aa.length!==xa.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${aa.length} vs. ${xa.shape[0]}`);const ba=Math.max(...aa);if(!this.dynamicSize&&ba>=this.maxSize)throw new Error(`Max index must be < array size (${ba}  vs. ${this.maxSize})`);this.writeMany(aa,unstack(xa,0))}split(aa,xa){if(xa.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${xa.dtype}`);let ba=0;const Sa=aa.map(ka=>(ba+=ka,ba));if(ba!==xa.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${ba}, and tensor's shape is: ${xa.shape}`);if(!this.dynamicSize&&aa.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${aa.length}), and the TensorArray is not marked as dynamically resizeable`);const Ta=ba===0?0:xa.size/ba,wa=[];tidy$1(()=>{xa=reshape$4(xa,[1,ba,Ta]);for(let ka=0;ka<aa.length;++ka){const Fa=[0,ka===0?0:Sa[ka-1],0],La=[1,aa[ka],Ta];wa[ka]=reshape$4(slice$3(xa,Fa,La),this.elementShape)}return wa});const Ea=[];for(let ka=0;ka<aa.length;ka++)Ea[ka]=ka;this.writeMany(Ea,wa)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorList{get id(){return this.idTensor.id}constructor(aa,xa,ba,Sa=-1){this.tensors=aa,this.elementShape=xa,this.elementDtype=ba,aa!=null&&aa.forEach(Ta=>{if(ba!==Ta.dtype)throw new Error(`Invalid data types; op elements ${ba}, but list elements ${Ta.dtype}`);assertShapesMatchAllowUndefinedSize(xa,Ta.shape,"TensorList shape mismatch: "),keep$1(Ta)}),this.idTensor=scalar$1(0),this.maxNumElements=Sa,keep$1(this.idTensor)}copy(){return new TensorList([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(aa){this.tensors.forEach(xa=>{(aa==null||!aa.has(xa.id))&&xa.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(aa,xa,ba=-1){if(xa!==this.elementDtype)throw new Error(`Invalid data types; op elements ${xa}, but list elements ${this.elementDtype}`);if(ba!==-1&&this.tensors.length!==ba)throw new Error(`Operation expected a list with ${ba} elements but got a list with ${this.tensors.length} elements.`);assertShapesMatchAllowUndefinedSize(aa,this.elementShape,"TensorList shape mismatch: ");const Sa=inferElementShape(this.elementShape,this.tensors,aa);return tidy$1(()=>{const Ta=this.tensors.map(wa=>reshape$4(wa,Sa));return stack(Ta,0)})}popBack(aa,xa){if(xa!==this.elementDtype)throw new Error(`Invalid data types; op elements ${xa}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");const ba=inferElementShape(this.elementShape,this.tensors,aa),Sa=this.tensors.pop();return Sa.kept=!1,assertShapesMatchAllowUndefinedSize(Sa.shape,aa,"TensorList shape mismatch: "),reshape$4(Sa,ba)}pushBack(aa){if(aa.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${aa.dtype}, but list elements ${this.elementDtype}`);if(assertShapesMatchAllowUndefinedSize(aa.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");keep$1(aa),this.tensors.push(aa)}resize(aa){if(aa<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${aa}`);if(this.maxNumElements!==-1&&aa>this.maxNumElements)throw new Error(`TensorListResize input size ${aa} is greater maxNumElement ${this.maxNumElements}.`);const xa=new TensorList([],this.elementShape,this.elementDtype,this.maxNumElements);xa.tensors.length=aa;for(let ba=0;ba<Math.min(this.tensors.length,aa);++ba)xa.tensors[ba]=this.tensors[ba];return xa}getItem(aa,xa,ba){if(ba!==this.elementDtype)throw new Error(`Invalid data types; op elements ${ba}, but list elements ${this.elementDtype}`);if(aa<0||aa>this.tensors.length)throw new Error(`Trying to access element ${aa} in a list with ${this.tensors.length} elements.`);if(this.tensors[aa]==null)throw new Error(`element at index ${aa} is null.`);assertShapesMatchAllowUndefinedSize(this.tensors[aa].shape,xa,"TensorList shape mismatch: ");const Sa=inferElementShape(this.elementShape,this.tensors,xa);return reshape$4(this.tensors[aa],Sa)}setItem(aa,xa){if(xa.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${xa.dtype}, but list elements ${this.elementDtype}`);if(aa<0||this.maxNumElements!==-1&&aa>=this.maxNumElements)throw new Error(`Trying to set element ${aa} in a list with max ${this.maxNumElements} elements.`);assertShapesMatchAllowUndefinedSize(this.elementShape,xa.shape,"TensorList shape mismatch: "),keep$1(xa),this.tensors[aa]!=null&&(this.tensors[aa].kept=!1),this.tensors[aa]=xa}gather(aa,xa,ba){if(xa!==this.elementDtype)throw new Error(`Invalid data types; op elements ${xa}, but list elements ${this.elementDtype}`);assertShapesMatchAllowUndefinedSize(this.elementShape,ba,"TensorList shape mismatch: "),aa=aa.slice(0,this.size());const Sa=inferElementShape(this.elementShape,this.tensors,ba);return aa.length===0?tensor([],[0].concat(Sa)):tidy$1(()=>{const Ta=aa.map(wa=>reshape$4(this.tensors[wa],Sa));return stack(Ta,0)})}concat(aa,xa){if(aa&&aa!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${aa}`);assertShapesMatchAllowUndefinedSize(this.elementShape,xa,"TensorList shape mismatch: ");const ba=inferElementShape(this.elementShape,this.tensors,xa);return this.size()===0?tensor([],[0].concat(ba)):tidy$1(()=>{const Sa=this.tensors.map(Ta=>reshape$4(Ta,ba));return concat$3(Sa,0)})}}function fromTensor(ha,aa,xa){const ba=ha.dtype;if(ha.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${ha.shape}`);if(ha.dtype!==xa)throw new Error(`Invalid data types; op elements ${ha.dtype}, but list elements ${xa}`);const Sa=ha.shape.slice(1);assertShapesMatchAllowUndefinedSize(Sa,aa,"TensorList shape mismatch: ");const Ta=unstack(ha);return new TensorList(Ta,aa,ba)}function reserve(ha,aa,xa,ba){return new TensorList([],ha,aa,ba)}function scatter(ha,aa,xa,ba){if(aa.length!==ha.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${aa.length} vs. ${ha.shape[0]}`);const Sa=Math.max(...aa);if(ba!=null&&ba!==-1&&Sa>=ba)throw new Error(`Max index must be < array size (${Sa}  vs. ${ba})`);const Ta=new TensorList([],xa,ha.dtype,ba),wa=unstack(ha,0);return aa.forEach((Ea,ka)=>{Ta.setItem(Ea,wa[ka])}),Ta}function split$2(ha,aa,xa){let ba=0;const Sa=aa.map(Fa=>(ba+=Fa,ba));if(ba!==ha.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${ba}, and tensor's shape is: ${ha.shape}`);const Ta=ha.shape.slice(1),wa=mergeElementShape(Ta,xa),Ea=ba===0?0:ha.size/ba,ka=tidy$1(()=>{const Fa=[];ha=reshape$4(ha,[1,ba,Ea]);for(let La=0;La<aa.length;++La){const tl=[0,La===0?0:Sa[La-1],0],nl=[1,aa[La],Ea];Fa[La]=reshape$4(slice$3(ha,tl,nl),wa)}return ha.dispose(),Fa}),Aa=new TensorList([],xa,ha.dtype,aa.length);for(let Fa=0;Fa<ka.length;Fa++)Aa.setItem(Fa,ka[Fa]);return Aa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$i=async(ha,aa,xa)=>{switch(ha.op){case"If":case"StatelessIf":{const ba=getParamValue("thenBranch",ha,aa,xa),Sa=getParamValue("elseBranch",ha,aa,xa),Ta=getParamValue("cond",ha,aa,xa),wa=getParamValue("args",ha,aa,xa);return(await Ta.data())[0]?xa.functionMap[ba].executeFunctionAsync(wa,xa.tensorArrayMap,xa.tensorListMap):xa.functionMap[Sa].executeFunctionAsync(wa,xa.tensorArrayMap,xa.tensorListMap)}case"While":case"StatelessWhile":{const ba=getParamValue("body",ha,aa,xa),Sa=getParamValue("cond",ha,aa,xa),Ta=getParamValue("args",ha,aa,xa),wa=await xa.functionMap[Sa].executeFunctionAsync(Ta,xa.tensorArrayMap,xa.tensorListMap),Ea=Ta.map(Fa=>Fa.id);let ka=await wa[0].data();wa.forEach(Fa=>{!Fa.kept&&Ea.indexOf(Fa.id)===-1&&Fa.dispose()});let Aa=Ta;for(;ka[0];){const Fa=Aa;Aa=await xa.functionMap[ba].executeFunctionAsync(Aa,xa.tensorArrayMap,xa.tensorListMap);const La=Aa.map(tl=>tl.id);Fa.forEach(tl=>{!tl.kept&&Ea.indexOf(tl.id)===-1&&La.indexOf(tl.id)===-1&&tl.dispose()});const el=await xa.functionMap[Sa].executeFunctionAsync(Aa,xa.tensorArrayMap,xa.tensorListMap);ka=await el[0].data(),el.forEach(tl=>{!tl.kept&&Ea.indexOf(tl.id)===-1&&La.indexOf(tl.id)===-1&&tl.dispose()})}return Aa}case"LoopCond":{const ba=getParamValue("pred",ha,aa,xa);return[cloneTensor(ba)]}case"Switch":{const ba=getParamValue("pred",ha,aa,xa);let Sa=getParamValue("data",ha,aa,xa);return Sa.kept||(Sa=cloneTensor(Sa)),(await ba.data())[0]?[void 0,Sa]:[Sa,void 0]}case"Merge":{const ba=ha.inputNames.find(Sa=>getTensor(Sa,aa,xa)!==void 0);if(ba){const Sa=getTensor(ba,aa,xa);return[cloneTensor(Sa)]}return}case"Enter":{const ba=getParamValue("frameName",ha,aa,xa),Sa=getParamValue("tensor",ha,aa,xa);return xa.enterFrame(ba),[cloneTensor(Sa)]}case"Exit":{const ba=getParamValue("tensor",ha,aa,xa);return xa.exitFrame(),[cloneTensor(ba)]}case"NextIteration":{const ba=getParamValue("tensor",ha,aa,xa);return xa.nextIteration(),[cloneTensor(ba)]}case"TensorArrayV3":{const ba=getParamValue("size",ha,aa,xa),Sa=getParamValue("dtype",ha,aa,xa),Ta=getParamValue("elementShape",ha,aa,xa),wa=getParamValue("dynamicSize",ha,aa,xa),Ea=getParamValue("clearAfterRead",ha,aa,xa),ka=getParamValue("identicalElementShapes",ha,aa,xa),Aa=getParamValue("name",ha,aa,xa),Fa=new TensorArray(Aa,Sa,ba,Ta,ka,wa,Ea);return xa.addTensorArray(Fa),[Fa.idTensor,scalar$1(1)]}case"TensorArrayWriteV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=getParamValue("index",ha,aa,xa),Ta=getParamValue("tensor",ha,aa,xa),wa=xa.getTensorArray(ba.id);return wa.write(Sa,Ta),[wa.idTensor]}case"TensorArrayReadV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=getParamValue("index",ha,aa,xa);return[xa.getTensorArray(ba.id).read(Sa)]}case"TensorArrayGatherV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=getParamValue("indices",ha,aa,xa),Ta=getParamValue("dtype",ha,aa,xa);return[xa.getTensorArray(ba.id).gather(Sa,Ta)]}case"TensorArrayScatterV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=getParamValue("indices",ha,aa,xa),Ta=getParamValue("tensor",ha,aa,xa),wa=xa.getTensorArray(ba.id);return wa.scatter(Sa,Ta),[wa.idTensor]}case"TensorArrayConcatV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=xa.getTensorArray(ba.id),Ta=getParamValue("dtype",ha,aa,xa);return[Sa.concat(Ta)]}case"TensorArraySplitV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=getParamValue("tensor",ha,aa,xa),Ta=getParamValue("lengths",ha,aa,xa),wa=xa.getTensorArray(ba.id);return wa.split(Ta,Sa),[wa.idTensor]}case"TensorArraySizeV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=xa.getTensorArray(ba.id);return[scalar$1(Sa.size(),"int32")]}case"TensorArrayCloseV3":{const ba=getParamValue("tensorArrayId",ha,aa,xa),Sa=xa.getTensorArray(ba.id);return Sa.clearAndClose(),[Sa.idTensor]}case"TensorListSetItem":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("index",ha,aa,xa),Ta=getParamValue("tensor",ha,aa,xa),wa=xa.getTensorList(ba.id);return wa.setItem(Sa,Ta),[wa.idTensor]}case"TensorListGetItem":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("index",ha,aa,xa),Ta=getParamValue("elementShape",ha,aa,xa),wa=getParamValue("elementDType",ha,aa,xa);return[xa.getTensorList(ba.id).getItem(Sa,Ta,wa)]}case"TensorListScatterV2":case"TensorListScatter":{const ba=getParamValue("indices",ha,aa,xa),Sa=getParamValue("tensor",ha,aa,xa),Ta=getParamValue("elementShape",ha,aa,xa),wa=getParamValue("numElements",ha,aa,xa),Ea=scatter(Sa,ba,Ta,wa);return xa.addTensorList(Ea),[Ea.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const ba=getParamValue("elementShape",ha,aa,xa),Sa=getParamValue("elementDType",ha,aa,xa);let Ta;ha.op==="TensorListReserve"?Ta="numElements":Ta="maxNumElements";const wa=getParamValue(Ta,ha,aa,xa),Ea=ha.op==="TensorListReserve"?-1:wa,ka=reserve(ba,Sa,wa,Ea);return xa.addTensorList(ka),[ka.idTensor]}case"TensorListGather":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("indices",ha,aa,xa),Ta=getParamValue("elementShape",ha,aa,xa),wa=getParamValue("elementDType",ha,aa,xa);return[xa.getTensorList(ba.id).gather(Sa,wa,Ta)]}case"TensorListStack":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("elementShape",ha,aa,xa),Ta=getParamValue("elementDType",ha,aa,xa),wa=getParamValue("numElements",ha,aa,xa);return[xa.getTensorList(ba.id).stack(Sa,Ta,wa)]}case"TensorListFromTensor":{const ba=getParamValue("tensor",ha,aa,xa),Sa=getParamValue("elementShape",ha,aa,xa),Ta=getParamValue("elementDType",ha,aa,xa),wa=fromTensor(ba,Sa,Ta);return xa.addTensorList(wa),[wa.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=xa.getTensorList(ba.id),Ta=getParamValue("dtype",ha,aa,xa),wa=getParamValue("elementShape",ha,aa,xa);return[Sa.concat(Ta,wa)]}case"TensorListPushBack":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("tensor",ha,aa,xa),Ta=xa.getTensorList(ba.id);return Ta.pushBack(Sa),[Ta.idTensor]}case"TensorListPopBack":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("elementShape",ha,aa,xa),Ta=getParamValue("elementDType",ha,aa,xa);return[xa.getTensorList(ba.id).popBack(Sa,Ta)]}case"TensorListSplit":{const ba=getParamValue("tensor",ha,aa,xa),Sa=getParamValue("elementShape",ha,aa,xa),Ta=getParamValue("lengths",ha,aa,xa),wa=split$2(ba,Ta,Sa);return xa.addTensorList(wa),[wa.idTensor]}case"TensorListLength":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=xa.getTensorList(ba.id);return[scalar$1(Sa.size(),"int32")]}case"TensorListResize":{const ba=getParamValue("tensorListId",ha,aa,xa),Sa=getParamValue("size",ha,aa,xa),wa=xa.getTensorList(ba.id).resize(Sa);return xa.addTensorList(wa),[wa.idTensor]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConvAndDepthWiseParams(ha,aa,xa){const[ba,Sa]=getParamValue("fusedOps",ha,aa,xa),Ta=ba==="biasadd",wa=!Ta,Ea=Sa==="prelu",ka=ba==="fusedbatchnorm",Aa=getParamValue("numArgs",ha,aa,xa);if(Ta){if(Ea&&Aa!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!Ea&&Ta&&Aa!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(ka)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const Fa=getParamValue("strides",ha,aa,xa),La=getPadding(ha,aa,xa),el=getParamValue("dataFormat",ha,aa,xa).toUpperCase(),tl=getParamValue("dilations",ha,aa,xa);let[nl,rl]=getParamValue("args",ha,aa,xa);wa&&(rl=nl,nl=void 0);const sl=getParamValue("leakyreluAlpha",ha,aa,xa);return{stride:Fa,pad:La,dataFormat:el,dilations:tl,biasArg:nl,preluArg:rl,activationFunc:Sa,leakyreluAlpha:sl}}const executeOp$h=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Conv1D":{const Sa=getParamValue("stride",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("dataFormat",ha,aa,xa).toUpperCase(),Ea=getParamValue("dilation",ha,aa,xa);return[ba.conv1d(getParamValue("x",ha,aa,xa),getParamValue("filter",ha,aa,xa),Sa,Ta,wa,Ea)]}case"Conv2D":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getPadding(ha,aa,xa),wa=getParamValue("dataFormat",ha,aa,xa).toUpperCase(),Ea=getParamValue("dilations",ha,aa,xa);return[ba.conv2d(getParamValue("x",ha,aa,xa),getParamValue("filter",ha,aa,xa),[Sa[1],Sa[2]],Ta,wa,[Ea[1],Ea[2]])]}case"_FusedConv2D":{const{stride:Sa,pad:Ta,dataFormat:wa,dilations:Ea,biasArg:ka,preluArg:Aa,activationFunc:Fa,leakyreluAlpha:La}=fusedConvAndDepthWiseParams(ha,aa,xa);return[ba.fused.conv2d({x:getParamValue("x",ha,aa,xa),filter:getParamValue("filter",ha,aa,xa),strides:[Sa[1],Sa[2]],pad:Ta,dataFormat:wa,dilations:[Ea[1],Ea[2]],bias:ka,activation:Fa,preluActivationWeights:Aa,leakyreluAlpha:La})]}case"FusedDepthwiseConv2dNative":{const{stride:Sa,pad:Ta,dataFormat:wa,dilations:Ea,biasArg:ka,preluArg:Aa,activationFunc:Fa,leakyreluAlpha:La}=fusedConvAndDepthWiseParams(ha,aa,xa);return[ba.fused.depthwiseConv2d({x:getParamValue("x",ha,aa,xa),filter:getParamValue("filter",ha,aa,xa),strides:[Sa[1],Sa[2]],pad:Ta,dataFormat:wa,dilations:[Ea[1],Ea[2]],bias:ka,activation:Fa,preluActivationWeights:Aa,leakyreluAlpha:La})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const Sa=getParamValue("outputShape",ha,aa,xa),Ta=getParamValue("strides",ha,aa,xa),wa=getPadding(ha,aa,xa);return[ba.conv2dTranspose(getParamValue("x",ha,aa,xa),getParamValue("filter",ha,aa,xa),Sa,[Ta[1],Ta[2]],wa)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getPadding(ha,aa,xa),wa=getParamValue("dilations",ha,aa,xa),Ea=getParamValue("dataFormat",ha,aa,xa).toUpperCase();return[ba.depthwiseConv2d(getParamValue("input",ha,aa,xa),getParamValue("filter",ha,aa,xa),[Sa[1],Sa[2]],Ta,Ea,[wa[1],wa[2]])]}case"Conv3D":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("dataFormat",ha,aa,xa).toUpperCase(),Ea=getParamValue("dilations",ha,aa,xa);return[ba.conv3d(getParamValue("x",ha,aa,xa),getParamValue("filter",ha,aa,xa),[Sa[1],Sa[2],Sa[3]],Ta,wa,[Ea[1],Ea[2],Ea[3]])]}case"AvgPool":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("kernelSize",ha,aa,xa);return[ba.avgPool(getParamValue("x",ha,aa,xa),[wa[1],wa[2]],[Sa[1],Sa[2]],Ta)]}case"MaxPool":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("kernelSize",ha,aa,xa);return[ba.maxPool(getParamValue("x",ha,aa,xa),[wa[1],wa[2]],[Sa[1],Sa[2]],Ta)]}case"MaxPoolWithArgmax":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("kernelSize",ha,aa,xa),Ea=getParamValue("includeBatchInIndex",ha,aa,xa),{result:ka,indexes:Aa}=ba.maxPoolWithArgmax(getParamValue("x",ha,aa,xa),[wa[1],wa[2]],[Sa[1],Sa[2]],Ta,Ea);return[ka,Aa]}case"AvgPool3D":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("kernelSize",ha,aa,xa);return[ba.avgPool3d(getParamValue("x",ha,aa,xa),[wa[1],wa[2],wa[3]],[Sa[1],Sa[2],Sa[3]],Ta)]}case"MaxPool3D":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("kernelSize",ha,aa,xa);return[ba.maxPool3d(getParamValue("x",ha,aa,xa),[wa[1],wa[2],wa[3]],[Sa[1],Sa[2],Sa[3]],Ta)]}case"Dilation2D":{const Sa=getParamValue("strides",ha,aa,xa),Ta=getParamValue("pad",ha,aa,xa),wa=getParamValue("dilations",ha,aa,xa),Ea=Sa[1],ka=Sa[2],Aa=wa[1],Fa=wa[2];return[ba.dilation2d(getParamValue("x",ha,aa,xa),getParamValue("filter",ha,aa,xa),[Ea,ka],Ta,[Aa,Fa],"NHWC")]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$g=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Fill":{const Sa=getParamValue("shape",ha,aa,xa),Ta=getParamValue("dtype",ha,aa,xa),wa=getParamValue("value",ha,aa,xa);return[ba.fill(Sa,wa,Ta)]}case"LinSpace":{const Sa=getParamValue("start",ha,aa,xa),Ta=getParamValue("stop",ha,aa,xa),wa=getParamValue("num",ha,aa,xa);return[ba.linspace(Sa,Ta,wa)]}case"Multinomial":{const Sa=getParamValue("logits",ha,aa,xa),Ta=getParamValue("numSamples",ha,aa,xa),wa=getParamValue("seed",ha,aa,xa);return[ba.multinomial(Sa,Ta,wa)]}case"OneHot":{const Sa=getParamValue("indices",ha,aa,xa),Ta=getParamValue("depth",ha,aa,xa),wa=getParamValue("onValue",ha,aa,xa),Ea=getParamValue("offValue",ha,aa,xa),ka=getParamValue("dtype",ha,aa,xa);return[ba.oneHot(Sa,Ta,wa,Ea,ka)]}case"Ones":return[ba.ones(getParamValue("shape",ha,aa,xa),getParamValue("dtype",ha,aa,xa))];case"OnesLike":return[ba.onesLike(getParamValue("x",ha,aa,xa))];case"RandomStandardNormal":return[ba.randomStandardNormal(getParamValue("shape",ha,aa,xa),getParamValue("dtype",ha,aa,xa),getParamValue("seed",ha,aa,xa))];case"RandomUniform":return[ba.randomUniform(getParamValue("shape",ha,aa,xa),getParamValue("minval",ha,aa,xa),getParamValue("maxval",ha,aa,xa),getParamValue("dtype",ha,aa,xa))];case"RandomUniformInt":return[ba.randomUniformInt(getParamValue("shape",ha,aa,xa),getParamValue("minval",ha,aa,xa),getParamValue("maxval",ha,aa,xa),getParamValue("seed",ha,aa,xa))];case"Range":{const Sa=getParamValue("start",ha,aa,xa),Ta=getParamValue("stop",ha,aa,xa),wa=getParamValue("step",ha,aa,xa);return[ba.range(Sa,Ta,wa,getParamValue("dtype",ha,aa,xa))]}case"TruncatedNormal":{const Sa=getParamValue("shape",ha,aa,xa),Ta=getParamValue("mean",ha,aa,xa),wa=getParamValue("stdDev",ha,aa,xa),Ea=getParamValue("seed",ha,aa,xa);return[ba.truncatedNormal(Sa,Ta,wa,getParamValue("dtype",ha,aa,xa),Ea)]}case"Zeros":return[ba.zeros(getParamValue("shape",ha,aa,xa),getParamValue("dtype",ha,aa,xa))];case"ZerosLike":return[ba.zerosLike(getParamValue("x",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nmsParams(ha,aa,xa){const ba=getParamValue("boxes",ha,aa,xa),Sa=getParamValue("scores",ha,aa,xa),Ta=getParamValue("maxOutputSize",ha,aa,xa),wa=getParamValue("iouThreshold",ha,aa,xa),Ea=getParamValue("scoreThreshold",ha,aa,xa),ka=getParamValue("softNmsSigma",ha,aa,xa);return{boxes:ba,scores:Sa,maxOutputSize:Ta,iouThreshold:wa,scoreThreshold:Ea,softNmsSigma:ka}}const executeOp$f=async(ha,aa,xa,ba,Sa=tfOps)=>{switch(ha.op){case"NonMaxSuppressionV5":{const{boxes:Ta,scores:wa,maxOutputSize:Ea,iouThreshold:ka,scoreThreshold:Aa,softNmsSigma:Fa}=nmsParams(ha,aa,xa),La=await Sa.image.nonMaxSuppressionWithScoreAsync(Ta,wa,Ea,ka,Aa,Fa);return[La.selectedIndices,La.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:Ta,scores:wa,maxOutputSize:Ea,iouThreshold:ka,scoreThreshold:Aa}=nmsParams(ha,aa,xa),Fa=getParamValue("padToMaxOutputSize",ha,aa,xa),La=await Sa.image.nonMaxSuppressionPaddedAsync(Ta,wa,Ea,ka,Aa,Fa);return[La.selectedIndices,La.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:Ta,scores:wa,maxOutputSize:Ea,iouThreshold:ka,scoreThreshold:Aa}=nmsParams(ha,aa,xa);return[await Sa.image.nonMaxSuppressionAsync(Ta,wa,Ea,ka,Aa)]}case"Where":{const Ta=Sa.cast(getParamValue("condition",ha,aa,xa),"bool"),wa=[await Sa.whereAsync(Ta)];return Ta.dispose(),wa}case"ListDiff":return Sa.setdiff1dAsync(getParamValue("x",ha,aa,xa),getParamValue("y",ha,aa,xa));default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$e=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"LowerBound":{const Sa=getParamValue("sortedSequence",ha,aa,xa),Ta=getParamValue("values",ha,aa,xa);return[ba.lowerBound(Sa,Ta)]}case"TopKV2":{const Sa=getParamValue("x",ha,aa,xa),Ta=getParamValue("k",ha,aa,xa),wa=getParamValue("sorted",ha,aa,xa),Ea=ba.topk(Sa,Ta,wa);return[Ea.values,Ea.indices]}case"UpperBound":{const Sa=getParamValue("sortedSequence",ha,aa,xa),Ta=getParamValue("values",ha,aa,xa);return[ba.upperBound(Sa,Ta)]}case"Unique":{const Sa=getParamValue("x",ha,aa,xa),Ta=ba.unique(Sa);return[Ta.values,Ta.indices]}case"UniqueV2":{const Sa=getParamValue("x",ha,aa,xa),Ta=getParamValue("axis",ha,aa,xa),wa=ba.unique(Sa,Ta);return[wa.values,wa.indices]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$d=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Const":return aa[ha.name];case"PlaceholderWithDefault":const Sa=getParamValue("default",ha,aa,xa);return[getTensor(ha.name,aa,xa)||Sa];case"Placeholder":return[getTensor(ha.name,aa,xa)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const Fa=getParamValue("x",ha,aa,xa);return[cloneTensor(Fa)]}case"IdentityN":return getParamValue("x",ha,aa,xa).map(Fa=>cloneTensor(Fa));case"Snapshot":const Ta=getParamValue("x",ha,aa,xa);return[cloneTensor(Ta)];case"Shape":return[ba.tensor1d(getParamValue("x",ha,aa,xa).shape,"int32")];case"ShapeN":return getParamValue("x",ha,aa,xa).map(Fa=>ba.tensor1d(Fa.shape));case"Size":return[ba.scalar(getParamValue("x",ha,aa,xa).size,"int32")];case"Rank":return[ba.scalar(getParamValue("x",ha,aa,xa).rank,"int32")];case"NoOp":return[ba.scalar(1)];case"Print":const wa=getParamValue("x",ha,aa,xa),Ea=getParamValue("data",ha,aa,xa),ka=getParamValue("message",ha,aa,xa),Aa=getParamValue("summarize",ha,aa,xa);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(ka);for(let Fa=0;Fa<Ea.length;Fa++)console.log(Array.prototype.slice.call(Ea[Fa].dataSync()).slice(0,Aa));return[wa];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class HashTable{get id(){return this.handle.id}constructor(aa,xa){this.keyDType=aa,this.valueDType=xa,this.handle=scalar$1(0),this.tensorMap=new Map,keep$1(this.handle)}clearAndClose(){this.tensorMap.forEach(aa=>aa.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return scalar$1(this.size(),"int32")}async import(aa,xa){this.checkKeyAndValueTensor(aa,xa);const ba=await aa.data();return this.tensorMap.forEach(Sa=>Sa.dispose()),this.tensorMap.clear(),tidy$1(()=>{const Sa=unstack(xa),Ta=ba.length,wa=Sa.length;assert$2(Ta===wa,()=>`The number of elements doesn't match, keys has ${Ta} elements, the values has ${wa} elements.`);for(let Ea=0;Ea<Ta;Ea++){const ka=ba[Ea],Aa=Sa[Ea];keep$1(Aa),this.tensorMap.set(ka,Aa)}return this.handle})}async find(aa,xa){this.checkKeyAndValueTensor(aa,xa);const ba=await aa.data();return tidy$1(()=>{const Sa=[];for(let Ta=0;Ta<ba.length;Ta++){const wa=ba[Ta],Ea=this.findWithDefault(wa,xa);Sa.push(Ea)}return stack(Sa)})}findWithDefault(aa,xa){const ba=this.tensorMap.get(aa);return ba??xa}checkKeyAndValueTensor(aa,xa){if(aa.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${aa.dtype}`);if(xa.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${xa.dtype}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$c=async(ha,aa,xa,ba)=>{switch(ha.op){case"HashTable":case"HashTableV2":{const Sa=ba.getHashTableHandleByName(ha.name);if(Sa!=null)return[Sa];{const Ta=getParamValue("keyDType",ha,aa,xa),wa=getParamValue("valueDType",ha,aa,xa),Ea=new HashTable(Ta,wa);return ba.addHashTable(ha.name,Ea),[Ea.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const Sa=getParamValue("tableHandle",ha,aa,xa,ba),Ta=getParamValue("keys",ha,aa,xa),wa=getParamValue("values",ha,aa,xa);return[await ba.getHashTableById(Sa.id).import(Ta,wa)]}case"LookupTableFind":case"LookupTableFindV2":{const Sa=getParamValue("tableHandle",ha,aa,xa,ba),Ta=getParamValue("keys",ha,aa,xa),wa=getParamValue("defaultValue",ha,aa,xa);return[await ba.getHashTableById(Sa.id).find(Ta,wa)]}case"LookupTableSize":case"LookupTableSizeV2":{const Sa=getParamValue("tableHandle",ha,aa,xa,ba);return[ba.getHashTableById(Sa.id).tensorSize()]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$b=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"ResizeBilinear":{const Sa=getParamValue("images",ha,aa,xa),Ta=getParamValue("size",ha,aa,xa),wa=getParamValue("alignCorners",ha,aa,xa),Ea=getParamValue("halfPixelCenters",ha,aa,xa);return[ba.image.resizeBilinear(Sa,[Ta[0],Ta[1]],wa,Ea)]}case"ResizeNearestNeighbor":{const Sa=getParamValue("images",ha,aa,xa),Ta=getParamValue("size",ha,aa,xa),wa=getParamValue("alignCorners",ha,aa,xa),Ea=getParamValue("halfPixelCenters",ha,aa,xa);return[ba.image.resizeNearestNeighbor(Sa,[Ta[0],Ta[1]],wa,Ea)]}case"CropAndResize":{const Sa=getParamValue("image",ha,aa,xa),Ta=getParamValue("boxes",ha,aa,xa),wa=getParamValue("boxInd",ha,aa,xa),Ea=getParamValue("cropSize",ha,aa,xa),ka=getParamValue("method",ha,aa,xa),Aa=getParamValue("extrapolationValue",ha,aa,xa);return[ba.image.cropAndResize(Sa,Ta,wa,Ea,ka,Aa)]}case"ImageProjectiveTransformV3":{const Sa=getParamValue("images",ha,aa,xa),Ta=getParamValue("transforms",ha,aa,xa),wa=getParamValue("outputShape",ha,aa,xa),Ea=getParamValue("fillValue",ha,aa,xa),ka=getParamValue("interpolation",ha,aa,xa),Aa=getParamValue("fillMode",ha,aa,xa);return[ba.image.transform(Sa,Ta,ka.toLowerCase(),Aa.toLowerCase(),Ea,wa)]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$a=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Equal":return[ba.equal(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"NotEqual":return[ba.notEqual(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Greater":return[ba.greater(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"GreaterEqual":return[ba.greaterEqual(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Less":return[ba.less(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"LessEqual":return[ba.lessEqual(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"LogicalAnd":return[ba.logicalAnd(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"LogicalNot":return[ba.logicalNot(getParamValue("a",ha,aa,xa))];case"LogicalOr":return[ba.logicalOr(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"Select":case"SelectV2":return[ba.where(getParamValue("condition",ha,aa,xa),getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];case"BitwiseAnd":return[ba.bitwiseAnd(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$9=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ba.matMul(getParamValue("a",ha,aa,xa),getParamValue("b",ha,aa,xa),getParamValue("transposeA",ha,aa,xa),getParamValue("transposeB",ha,aa,xa))];case"Einsum":return[ba.einsum(getParamValue("equation",ha,aa,xa),...getParamValue("tensors",ha,aa,xa))];case"Transpose":return[ba.transpose(getParamValue("x",ha,aa,xa),getParamValue("perm",ha,aa,xa))];case"_FusedMatMul":const[Sa,Ta]=getParamValue("fusedOps",ha,aa,xa),wa=Sa==="biasadd",Ea=Ta==="prelu",ka=getParamValue("numArgs",ha,aa,xa),Aa=getParamValue("leakyreluAlpha",ha,aa,xa);if(wa){if(Ea&&ka!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!Ea&&ka!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[Fa,La]=getParamValue("args",ha,aa,xa);return[ba.fused.matMul({a:getParamValue("a",ha,aa,xa),b:getParamValue("b",ha,aa,xa),transposeA:getParamValue("transposeA",ha,aa,xa),transposeB:getParamValue("transposeB",ha,aa,xa),bias:Fa,activation:Ta,preluActivationWeights:La,leakyreluAlpha:Aa})];case"MatrixBandPart":return[ba.linalg.bandPart(getParamValue("a",ha,aa,xa),getParamValue("numLower",ha,aa,xa),getParamValue("numUpper",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$8=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"EuclideanNorm":return[ba.euclideanNorm(getParamValue("x",ha,aa,xa),getParamValue("axis",ha,aa,xa),getParamValue("keepDims",ha,aa,xa))];case"FusedBatchNorm":case"FusedBatchNormV2":return[ba.batchNorm(getParamValue("x",ha,aa,xa),getParamValue("mean",ha,aa,xa),getParamValue("variance",ha,aa,xa),getParamValue("offset",ha,aa,xa),getParamValue("scale",ha,aa,xa),getParamValue("epsilon",ha,aa,xa))];case"FusedBatchNormV3":return[ba.batchNorm(getParamValue("x",ha,aa,xa),getParamValue("mean",ha,aa,xa),getParamValue("variance",ha,aa,xa),getParamValue("offset",ha,aa,xa),getParamValue("scale",ha,aa,xa),getParamValue("epsilon",ha,aa,xa))];case"LRN":return[ba.localResponseNormalization(getParamValue("x",ha,aa,xa),getParamValue("radius",ha,aa,xa),getParamValue("bias",ha,aa,xa),getParamValue("alpha",ha,aa,xa),getParamValue("beta",ha,aa,xa))];case"Softmax":return[ba.softmax(getParamValue("x",ha,aa,xa))];case"LogSoftmax":return[ba.logSoftmax(getParamValue("x",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$7=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"RaggedGather":{const{outputNestedSplits:Sa,outputDenseValues:Ta}=ba.raggedGather(getParamValue("paramsNestedSplits",ha,aa,xa),getParamValue("paramsDenseValues",ha,aa,xa),getParamValue("indices",ha,aa,xa),getParamValue("outputRaggedRank",ha,aa,xa));return Sa.concat(Ta)}case"RaggedRange":{const{rtNestedSplits:Sa,rtDenseValues:Ta}=ba.raggedRange(getParamValue("starts",ha,aa,xa),getParamValue("limits",ha,aa,xa),getParamValue("splits",ha,aa,xa));return[Sa,Ta]}case"RaggedTensorToTensor":return[ba.raggedTensorToTensor(getParamValue("shape",ha,aa,xa),getParamValue("values",ha,aa,xa),getParamValue("defaultValue",ha,aa,xa),getParamValue("rowPartitionTensors",ha,aa,xa),getParamValue("rowPartitionTypes",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$6=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Max":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.max(getParamValue("x",ha,aa,xa),Ea,ka)]}case"Mean":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.mean(getParamValue("x",ha,aa,xa),Ea,ka)]}case"Min":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.min(getParamValue("x",ha,aa,xa),Ea,ka)]}case"Sum":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.sum(getParamValue("x",ha,aa,xa),Ea,ka)]}case"All":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.all(getParamValue("x",ha,aa,xa),Ea,ka)]}case"Any":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.any(getParamValue("x",ha,aa,xa),Ea,ka)]}case"ArgMax":{const Ea=getParamValue("axis",ha,aa,xa);return[ba.argMax(getParamValue("x",ha,aa,xa),Ea)]}case"ArgMin":{const Ea=getParamValue("axis",ha,aa,xa);return[ba.argMin(getParamValue("x",ha,aa,xa),Ea)]}case"Prod":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("keepDims",ha,aa,xa);return[ba.prod(getParamValue("x",ha,aa,xa),Ea,ka)]}case"Cumprod":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("exclusive",ha,aa,xa),Aa=getParamValue("reverse",ha,aa,xa);return[ba.cumprod(getParamValue("x",ha,aa,xa),Ea,ka,Aa)]}case"Cumsum":{const Ea=getParamValue("axis",ha,aa,xa),ka=getParamValue("exclusive",ha,aa,xa),Aa=getParamValue("reverse",ha,aa,xa);return[ba.cumsum(getParamValue("x",ha,aa,xa),Ea,ka,Aa)]}case"Bincount":const Sa=getParamValue("x",ha,aa,xa),Ta=getParamValue("weights",ha,aa,xa),wa=getParamValue("size",ha,aa,xa);return[ba.bincount(Sa,Ta,wa)];case"DenseBincount":{const Ea=getParamValue("x",ha,aa,xa),ka=getParamValue("weights",ha,aa,xa),Aa=getParamValue("size",ha,aa,xa),Fa=getParamValue("binaryOutput",ha,aa,xa);return[ba.denseBincount(Ea,ka,Aa,Fa)]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$5=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"ConcatV2":case"Concat":{const Sa=getParamValue("n",ha,aa,xa),Ta=getParamValue("axis",ha,aa,xa);let wa=getParamValue("tensors",ha,aa,xa);return wa=wa.slice(0,Sa),[ba.concat(wa,Ta)]}case"Gather":{const Sa=getParamValue("x",ha,aa,xa),Ta=getParamValue("indices",ha,aa,xa);return[ba.gather(Sa,ba.cast(Ta,"int32"),0)]}case"GatherV2":{const Sa=getParamValue("axis",ha,aa,xa),Ta=getParamValue("batchDims",ha,aa,xa),wa=getParamValue("x",ha,aa,xa),Ea=getParamValue("indices",ha,aa,xa);return[ba.gather(wa,ba.cast(Ea,"int32"),Sa,Ta)]}case"Reverse":{const Sa=getParamValue("dims",ha,aa,xa),Ta=[];for(let Ea=0;Ea<Sa.length;Ea++)Sa[Ea]&&Ta.push(Ea);const wa=getParamValue("x",ha,aa,xa);return[ba.reverse(wa,Ta)]}case"ReverseV2":{const Sa=getParamValue("axis",ha,aa,xa),Ta=getParamValue("x",ha,aa,xa);return[ba.reverse(Ta,Sa)]}case"Slice":{const Sa=getParamValue("begin",ha,aa,xa),Ta=getParamValue("size",ha,aa,xa);return[ba.slice(getParamValue("x",ha,aa,xa),Sa,Ta)]}case"StridedSlice":{const Sa=getParamValue("begin",ha,aa,xa),Ta=getParamValue("end",ha,aa,xa),wa=getParamValue("strides",ha,aa,xa),Ea=getParamValue("beginMask",ha,aa,xa),ka=getParamValue("endMask",ha,aa,xa),Aa=getParamValue("ellipsisMask",ha,aa,xa),Fa=getParamValue("newAxisMask",ha,aa,xa),La=getParamValue("shrinkAxisMask",ha,aa,xa),el=getParamValue("x",ha,aa,xa);return[ba.stridedSlice(el,Sa,Ta,wa,Ea,ka,Aa,Fa,La)]}case"Pack":return tidy$1(()=>{const Sa=getParamValue("axis",ha,aa,xa),Ta=getParamValue("tensors",ha,aa,xa),wa=Ta[0].shape,Ea=ba.squeeze(Ta[0]).shape,ka=Ta.map(Aa=>{const Fa=arraysEqual$1(Aa.shape,wa);if(!Fa&&!arraysEqual$1(ba.squeeze(Aa).shape,Ea))throw new Error("the input tensors shape does not match");return Fa?Aa:ba.reshape(Aa,wa)});return[ba.stack(ka,Sa)]});case"Unpack":{const Sa=getParamValue("axis",ha,aa,xa),Ta=getParamValue("tensor",ha,aa,xa);return ba.unstack(Ta,Sa)}case"Tile":{const Sa=getParamValue("reps",ha,aa,xa);return[ba.tile(getParamValue("x",ha,aa,xa),Sa)]}case"Split":case"SplitV":{const Sa=getParamValue("axis",ha,aa,xa),Ta=getParamValue("numOrSizeSplits",ha,aa,xa),wa=getParamValue("x",ha,aa,xa);return ba.split(wa,Ta,Sa)}case"ScatterNd":{const Sa=getParamValue("indices",ha,aa,xa),Ta=getParamValue("values",ha,aa,xa),wa=getParamValue("shape",ha,aa,xa);return[ba.scatterND(Sa,Ta,wa)]}case"GatherNd":{const Sa=getParamValue("x",ha,aa,xa),Ta=getParamValue("indices",ha,aa,xa);return[ba.gatherND(Sa,Ta)]}case"SparseToDense":{const Sa=getParamValue("sparseIndices",ha,aa,xa),Ta=getParamValue("outputShape",ha,aa,xa),wa=getParamValue("sparseValues",ha,aa,xa),Ea=getParamValue("defaultValue",ha,aa,xa);return[ba.sparseToDense(Sa,wa,Ta,wa.dtype===Ea.dtype?Ea:ba.cast(Ea,wa.dtype))]}case"TensorScatterUpdate":{const Sa=getParamValue("indices",ha,aa,xa),Ta=getParamValue("values",ha,aa,xa),wa=getParamValue("tensor",ha,aa,xa);return[ba.tensorScatterUpdate(wa,Sa,Ta)]}default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$4=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"SparseFillEmptyRows":{const{outputIndices:Sa,outputValues:Ta,emptyRowIndicator:wa,reverseIndexMap:Ea}=ba.sparse.sparseFillEmptyRows(getParamValue("indices",ha,aa,xa),getParamValue("values",ha,aa,xa),getParamValue("denseShape",ha,aa,xa),getParamValue("defaultValue",ha,aa,xa));return[Sa,Ta,wa,Ea]}case"SparseReshape":{const{outputIndices:Sa,outputShape:Ta}=ba.sparse.sparseReshape(getParamValue("inputIndices",ha,aa,xa),getParamValue("inputShape",ha,aa,xa),getParamValue("newShape",ha,aa,xa));return[Sa,Ta]}case"SparseSegmentMean":return[ba.sparse.sparseSegmentMean(getParamValue("data",ha,aa,xa),getParamValue("indices",ha,aa,xa),getParamValue("segmentIds",ha,aa,xa))];case"SparseSegmentSum":return[ba.sparse.sparseSegmentSum(getParamValue("data",ha,aa,xa),getParamValue("indices",ha,aa,xa),getParamValue("segmentIds",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$3=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"FFT":return[ba.fft(getParamValue("x",ha,aa,xa))];case"IFFT":return[ba.ifft(getParamValue("x",ha,aa,xa))];case"RFFT":return[ba.rfft(getParamValue("x",ha,aa,xa))];case"IRFFT":return[ba.irfft(getParamValue("x",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$2=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"StaticRegexReplace":return[ba.string.staticRegexReplace(getParamValue("input",ha,aa,xa),getParamValue("pattern",ha,aa,xa),getParamValue("rewrite",ha,aa,xa),getParamValue("replaceGlobal",ha,aa,xa))];case"StringNGrams":{const{nGrams:Sa,nGramsSplits:Ta}=ba.string.stringNGrams(getParamValue("data",ha,aa,xa),getParamValue("dataSplits",ha,aa,xa),getParamValue("separator",ha,aa,xa),getParamValue("nGramWidths",ha,aa,xa),getParamValue("leftPad",ha,aa,xa),getParamValue("rightPad",ha,aa,xa),getParamValue("padWidth",ha,aa,xa),getParamValue("preserveShortSequences",ha,aa,xa));return[Sa,Ta]}case"StringSplit":{const{indices:Sa,values:Ta,shape:wa}=ba.string.stringSplit(getParamValue("input",ha,aa,xa),getParamValue("delimiter",ha,aa,xa),getParamValue("skipEmpty",ha,aa,xa));return[Sa,Ta,wa]}case"StringToHashBucketFast":return[ba.string.stringToHashBucketFast(getParamValue("input",ha,aa,xa),getParamValue("numBuckets",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const executeOp$1=(ha,aa,xa,ba=tfOps)=>{switch(ha.op){case"Cast":return[ba.cast(getParamValue("x",ha,aa,xa),getParamValue("dtype",ha,aa,xa))];case"ExpandDims":{const Sa=getParamValue("axis",ha,aa,xa);return[ba.expandDims(getParamValue("x",ha,aa,xa),Sa)]}case"Squeeze":{const Sa=getParamValue("axis",ha,aa,xa);return[ba.squeeze(getParamValue("x",ha,aa,xa),Sa)]}case"Reshape":return[ba.reshape(getParamValue("x",ha,aa,xa),getParamValue("shape",ha,aa,xa))];case"EnsureShape":return[ba.ensureShape(getParamValue("x",ha,aa,xa),getParamValue("shape",ha,aa,xa))];case"MirrorPad":return[ba.mirrorPad(getParamValue("x",ha,aa,xa),getParamValue("padding",ha,aa,xa),getParamValue("mode",ha,aa,xa))];case"PadV2":case"Pad":return[ba.pad(getParamValue("x",ha,aa,xa),getParamValue("padding",ha,aa,xa),getParamValue("constantValue",ha,aa,xa))];case"SpaceToBatchND":{const Sa=getParamValue("blockShape",ha,aa,xa),Ta=getParamValue("paddings",ha,aa,xa);return[ba.spaceToBatchND(getParamValue("x",ha,aa,xa),Sa,Ta)]}case"BatchToSpaceND":{const Sa=getParamValue("blockShape",ha,aa,xa),Ta=getParamValue("crops",ha,aa,xa);return[ba.batchToSpaceND(getParamValue("x",ha,aa,xa),Sa,Ta)]}case"DepthToSpace":{const Sa=getParamValue("blockSize",ha,aa,xa),Ta=getParamValue("dataFormat",ha,aa,xa).toUpperCase();return[ba.depthToSpace(getParamValue("x",ha,aa,xa),Sa,Ta)]}case"BroadcastTo":return[ba.broadcastTo(getParamValue("x",ha,aa,xa),getParamValue("shape",ha,aa,xa))];case"BroadcastArgs":return[ba.broadcastArgs(getParamValue("s0",ha,aa,xa),getParamValue("s1",ha,aa,xa))];default:throw TypeError(`Node type ${ha.op} is not implemented`)}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function executeOp(ha,aa,xa,ba,Sa=tidy$1){const Ta=((wa,Ea,ka)=>{switch(wa.category){case"arithmetic":return Sa(()=>executeOp$k(wa,Ea,ka));case"basic_math":return Sa(()=>executeOp$j(wa,Ea,ka));case"control":return executeOp$i(wa,Ea,ka);case"convolution":return Sa(()=>executeOp$h(wa,Ea,ka));case"creation":return Sa(()=>executeOp$g(wa,Ea,ka));case"dynamic":return executeOp$f(wa,Ea,ka);case"evaluation":return Sa(()=>executeOp$e(wa,Ea,ka));case"image":return Sa(()=>executeOp$b(wa,Ea,ka));case"graph":return Sa(()=>executeOp$d(wa,Ea,ka));case"logical":return Sa(()=>executeOp$a(wa,Ea,ka));case"matrices":return Sa(()=>executeOp$9(wa,Ea,ka));case"normalization":return Sa(()=>executeOp$8(wa,Ea,ka));case"ragged":return Sa(()=>executeOp$7(wa,Ea,ka));case"reduction":return Sa(()=>executeOp$6(wa,Ea,ka));case"slice_join":return Sa(()=>executeOp$5(wa,Ea,ka));case"sparse":return Sa(()=>executeOp$4(wa,Ea,ka));case"spectral":return Sa(()=>executeOp$3(wa,Ea,ka));case"string":return Sa(()=>executeOp$2(wa,Ea,ka));case"transformation":return Sa(()=>executeOp$1(wa,Ea,ka));case"hash_table":return executeOp$c(wa,Ea,ka,ba);case"custom":const Aa=getRegisteredOp(wa.op);if(Aa&&Aa.customExecutor)return Aa.customExecutor(new NodeValueImpl(wa,Ea,ka));throw TypeError(`Custom op ${wa.op} is not registered.`);default:throw TypeError(`Unknown op '${wa.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(ha,aa,xa);return isPromise$1(Ta)?Ta.then(wa=>[].concat(wa)):[].concat(Ta)}class ExecutionContext{constructor(aa={},xa={},ba={},Sa={},Ta){this.weightMap=aa,this.tensorArrayMap=xa,this.tensorListMap=ba,this.functionMap=Sa,this.parseNodeNameCache=Ta,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(aa,xa){return{id:aa,frameName:xa,iterationId:0}}set currentContext(aa){this.contexts!==aa&&(this.contexts=aa,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const aa=[];for(let xa=0;xa<this.contexts.length-1;xa++){const ba=this.contexts.slice(0,this.contexts.length-xa);aa.push(this.contextIdforContexts(ba))}aa.push(""),this._currentContextIds=aa}contextIdforContexts(aa){return aa?aa.map(xa=>xa.id===0&&xa.iterationId===0?"":`${xa.frameName}-${xa.iterationId}`).join("/"):""}enterFrame(aa){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,aa)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;const aa=Object.assign({},this.contexts[this.contexts.length-1]);aa.iterationId+=1,aa.id=this.lastId,this.contexts.splice(-1,1,aa),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(aa){return this.weightMap[aa]}addTensorArray(aa){this.tensorArrayMap[aa.id]=aa}getTensorArray(aa){return this.tensorArrayMap[aa]}addTensorList(aa){this.tensorListMap[aa.id]=aa}getTensorList(aa){return this.tensorListMap[aa]}dispose(aa){for(const xa in this.tensorArrayMap)this.tensorArrayMap[xa].clearAndClose(aa);for(const xa in this.tensorListMap)this.tensorListMap[xa].clearAndClose(aa)}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getExecutionSubgraph(ha,aa,xa,ba){const Sa=new Set,Ta=[];let wa=null,Ea=null;const ka=new Set,Aa=new Set(Object.keys(ha).map(el=>parseNodeName(el)[0]));ba=ba||[];const Fa=new Set(ba.map(el=>parseNodeName(el.name)[0])),La=[...aa];for(;La.length>0;){const el=La.pop();if((isControlFlow(el)||isDynamicShape(el)||isHashTable(el))&&wa==null&&(wa=el,Ea=wa.children.map(tl=>tl.name).filter(tl=>Sa.has(tl))),Sa.add(el.name),xa[el.name]==null&&!Aa.has(el.name)&&!Fa.has(el.name)){if(el.inputs.length===0){Ta.push(el.name);continue}el.inputs.forEach(tl=>{ka.has(tl.name)||(ka.add(tl.name),La.push(tl))})}}return{inputs:ha,outputs:aa,usedNodes:Sa,missingInputs:Ta,dynamicNode:wa,syncInputs:Ea}}function getNodesInTopologicalOrder(ha,aa){const{usedNodes:xa,inputs:ba}=aa,Sa=Object.keys(ba).map(sl=>parseNodeName(sl)[0]).map(sl=>ha.nodes[sl]),Ta=ha.initNodes||[],wa=sl=>xa.has(typeof sl=="string"?sl:sl.name);function Ea(sl){return[...new Map(sl.map(ol=>[ol.name,ol])).values()]}const ka=Ea([...Sa,...ha.weights,...Ta]).filter(wa),Aa=Ea([...ka,...Object.values(ha.nodes)]).filter(wa),Fa=new Map(Aa.map(sl=>[sl.name,sl])),La={};for(const sl of Aa){La[sl.name]=La[sl.name]||0;for(const ol of sl.children)wa(ol)||(La[ol.name]=Number.POSITIVE_INFINITY),La[ol.name]=(La[ol.name]||0)+1}const el=Object.entries(La).filter(([,sl])=>sl===0).map(([sl])=>sl),tl=[...el];for(;el.length>0;){const sl=el.pop(),ol=Fa.get(sl);for(const al of ol.children.filter(wa))--La[al.name]===0&&(tl.push(al.name),el.push(al.name))}const nl=tl.map(sl=>Fa.get(sl)),rl=filterPredefinedReachableNodes(nl,ka);return validateNodesExecutionOrder(rl,ka),rl}function filterPredefinedReachableNodes(ha,aa){const xa=new Map(ha.map(wa=>[wa.name,wa])),ba=aa.map(wa=>wa.name),Sa=new Set(ba);for(;ba.length>0;){const wa=ba.pop(),Ea=xa.get(wa);for(const ka of Ea.children)!xa.has(ka.name)||Sa.has(ka.name)||(Sa.add(ka.name),ba.push(ka.name))}return ha.filter(wa=>Sa.has(wa.name))}class NodesExecutionOrderError extends Error{constructor(aa){super(`NodesExecutionOrderError: ${aa}`)}}function validateNodesExecutionOrder(ha,aa){const xa=new Map(ha.map((Ea,ka)=>[Ea.name,ka])),ba=new Set(aa.map(Ea=>Ea.name)),Sa=Ea=>ba.has(typeof Ea=="string"?Ea:Ea.name),Ta=new Set(ha.map(Ea=>Ea.name)),wa=Ea=>Ta.has(typeof Ea=="string"?Ea:Ea.name);for(const Ea of ha){for(const ka of Ea.children.filter(wa)){if(!xa.has(ka.name))throw new NodesExecutionOrderError(`Child ${ka.name} of node ${Ea.name} is unreachable.`);if(xa.get(Ea.name)>xa.get(ka.name))throw new NodesExecutionOrderError(`Node ${Ea.name} is scheduled to run after its child ${ka.name}.`)}if(!Sa(Ea))for(const ka of Ea.inputs){if(!xa.has(ka.name))throw new NodesExecutionOrderError(`Input ${ka.name} of node ${Ea.name} is unreachable.`);if(xa.get(ka.name)>xa.get(Ea.name))throw new NodesExecutionOrderError(`Node ${Ea.name} is scheduled to run before its input ${ka.name}.`)}}}function getNodeLiveUntilMap(ha){const aa=new Map(ha.map((Ea,ka)=>[Ea.name,ka])),xa=Number.MAX_SAFE_INTEGER,ba=ha.map((Ea,ka)=>isControlFlow(Ea)?xa:ka),Sa=Ea=>{const ka=ba[aa.get(Ea.name)];return ka??-1},Ta=ha.map((Ea,ka)=>Ea.children.map(Sa).reduce((Aa,Fa)=>Math.max(Aa,Fa),ba[ka])),wa=new Map;for(let Ea=0;Ea<ha.length;++Ea){const ka=Ta[Ea];if(ka===xa)continue;const Aa=ha[Ea],Fa=ha[ka];wa.has(Fa.name)||wa.set(Fa.name,[]),wa.get(Fa.name).push(Aa)}return wa}const CONTROL_FLOW_OPS=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),DYNAMIC_SHAPE_OPS=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),HASH_TABLE_OPS=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function isControlFlow(ha){return CONTROL_FLOW_OPS.has(ha.op)}function isDynamicShape(ha){return DYNAMIC_SHAPE_OPS.has(ha.op)}function isHashTable(ha){return HASH_TABLE_OPS.has(ha.op)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GraphExecutor{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(aa){const xa=Object.keys(aa).map(ba=>aa[ba].map(Sa=>Sa.id));this._weightIds=[].concat(...xa),this._weightMap=aa}set resourceManager(aa){this._resourceManager=aa}get inputs(){return this._inputs.map(aa=>({name:aa.name,shape:aa.attrParams.shape?aa.attrParams.shape.value:void 0,dtype:aa.attrParams.dtype?aa.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(aa=>({name:aa.name,shape:aa.attrParams.shape?aa.attrParams.shape.value:void 0,dtype:aa.attrParams.dtype?aa.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(aa=>aa.signatureKey||aa.name)}get outputNodes(){return this._outputs.map(aa=>{const xa=aa.signatureKey||aa.name;return aa.defaultOutput?`${xa}:${aa.defaultOutput}`:xa})}get functions(){return Object.keys(this._functions).reduce((aa,xa)=>(aa[xa]=this._functions[xa].signature,aa),{})}constructor(aa,xa){this.graph=aa,this.parent=xa,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=aa.outputs,this._inputs=aa.inputs,this._initNodes=aa.initNodes,this._signature=aa.signature,this._functions=aa.functions,aa.functions!=null&&Object.keys(aa.functions).forEach(ba=>{this._functionExecutorMap[ba]=new GraphExecutor(aa.functions[ba],this)})}getCompilationKey(aa,xa){const ba=aa.map(Ta=>Ta.name).sort(),Sa=xa.map(Ta=>Ta.name).sort();return ba.join(this.SEPARATOR)+"--"+Sa.join(this.SEPARATOR)}compile(aa,xa){const ba=getExecutionSubgraph(aa,xa,this.weightMap,this._initNodes),{missingInputs:Sa,dynamicNode:Ta,syncInputs:wa}=ba;if(Ta!=null)throw new Error(`This execution contains the node '${Ta.name}', which has the dynamic op '${Ta.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${wa}]`);if(Sa.length>0){const Aa=xa.map(La=>La.name),Fa=Object.keys(aa);throw new Error(`Cannot compute the outputs [${Aa}] from the provided inputs [${Fa}]. Missing the following inputs: [${Sa}]`)}const Ea=getNodesInTopologicalOrder(this.graph,ba),ka=getNodeLiveUntilMap(Ea);return{orderedNodes:Ea,nodeLiveUntilMap:ka}}cloneAndKeepTensor(aa){if(aa==null)return null;const xa=aa.clone();return keep$1(xa),xa}cloneTensorList(aa){return aa?aa.map(ba=>this.cloneAndKeepTensor(ba)):null}cloneTensorMap(aa){return Object.fromEntries(Object.entries(aa).map(([xa,ba])=>[xa,this.cloneTensorList(ba)]))}execute(aa,xa){this.disposeIntermediateTensors(),aa=this.mapInputs(aa);const ba=Object.keys(aa).sort();this.checkInputs(aa),this.checkInputShapeAndType(aa),xa=this.mapOutputs(xa),this.checkOutputs(xa);const Sa=ba.map(el=>this.graph.nodes[parseNodeName(el)[0]]),Ta=xa.map(el=>parseNodeName(el)[0]),wa=new Set(Ta);let Ea=Ta.map(el=>this.graph.nodes[el]);Ea.length===0&&(Ea=this._outputs);const ka=this.getCompilationKey(Sa,Ea);let Aa=this.compiledMap.get(ka);Aa==null&&(Aa=this.compile(aa,Ea),this.compiledMap.set(ka,Aa));try{this.keepIntermediateTensors=env$1().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(el){this.keepIntermediateTensors=!1,console.warn(el.message)}const Fa={},La={};return tidy$1(()=>{const el=new ExecutionContext(this.weightMap,Fa,La,this.functionExecutorMap,this.parseNodeNameCache),tl=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(aa).forEach(ol=>{const[al,ll]=parseNodeName(ol,el),il=[];il[ll]=aa[ol],tl[al]=il,this.keepIntermediateTensors&&(this.clonedTensorsMap[al]=this.cloneTensorList(il))});const nl=this.getFrozenTensorIds(tl),{orderedNodes:rl,nodeLiveUntilMap:sl}=Aa;for(const ol of rl){if(tl[ol.name])continue;const al=executeOp(ol,tl,el,this._resourceManager);if(isPromise$1(al))throw new Error(`The execution of the op '${ol.op}' returned a promise. Please use model.executeAsync() instead.`);tl[ol.name]=al,this.keepIntermediateTensors&&(this.clonedTensorsMap[ol.name]=this.cloneTensorList(al)),this.checkTensorForDisposalWithNodeLiveUntilInfo(ol,tl,el,nl,wa,sl.get(ol.name))}return this.parent==null&&el.dispose(nl),xa.map(ol=>getTensor(ol,tl,el))})}getFrozenTensorIds(aa){const xa=[].concat.apply([],Object.keys(aa).map(ba=>aa[ba]).map(ba=>ba.map(Sa=>Sa.id)));return new Set(xa)}checkTensorForDisposal(aa,xa,ba,Sa,Ta,wa,Ea){if(!(isControlFlow(xa)||wa.has(aa))){for(const ka of ba[aa])ka!=null&&(Ea[ka.id]=(Ea[ka.id]||0)+xa.children.length);for(const ka of xa.inputs){if(isControlFlow(ka))continue;const Aa=getTensorsForCurrentContext(ka.name,ba,Sa);if(Aa!=null)for(const Fa of Aa){if(!Fa||Fa.kept||Ta.has(Fa.id))continue;const La=Ea[Fa.id];La===1?(Fa.dispose(),delete Ea[Fa.id]):La!=null&&Ea[Fa.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(aa,xa,ba,Sa,Ta,wa){function Ea(ka){return isControlFlow(ka)||Ta.has(ka.name)}if(!(isControlFlow(aa)||wa==null))for(const ka of wa){if(Ea(ka))continue;const Aa=getTensorsForCurrentContext(ka.name,xa,ba);for(const Fa of Aa)!Fa||Fa.kept||Sa.has(Fa.id)||Fa.dispose()}}async executeAsync(aa,xa){return this._executeAsync(aa,xa)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(aa=>{for(const xa of aa)xa&&!xa.isDisposed&&xa.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(aa,xa,ba=!1,Sa={},Ta={}){this.disposeIntermediateTensors(),ba||(aa=this.mapInputs(aa),this.checkInputs(aa),this.checkInputShapeAndType(aa),xa=this.mapOutputs(xa),this.checkOutputs(xa));try{this.keepIntermediateTensors=env$1().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(el){this.keepIntermediateTensors=!1,console.warn(el.message)}const wa=new ExecutionContext(this.weightMap,Sa,Ta,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const Ea=await this.executeWithControlFlow(aa,wa,xa,ba),ka=xa.map(el=>getTensor(el,Ea,wa)),Aa=ka.map(el=>el.id),Fa=Object.keys(aa).map(el=>aa[el].id),La=new Set([...Aa,...Fa,...this.weightIds]);return Object.values(Ea).forEach(el=>{el.forEach(tl=>{tl&&!tl.isDisposed&&!La.has(tl.id)&&tl.dispose()})}),this.parent==null&&wa.dispose(La),ka}async executeFunctionAsync(aa,xa,ba){const Sa=aa.reduce((Ta,wa,Ea)=>(Ta[this.inputs[Ea].name]=wa,Ta),{});return this._executeAsync(Sa,this.outputNodes,!0,xa,ba)}async executeWithControlFlow(aa,xa,ba,Sa){const Ta=Object.keys(aa),wa=Ta.map(il=>this.graph.nodes[parseNodeName(il)[0]]),Ea=ba.map(il=>parseNodeName(il)[0]),ka=new Set(Ea);let Aa=Ea.map(il=>this.graph.nodes[il]);Aa.length===0&&(Aa=this._outputs);const{usedNodes:Fa,missingInputs:La,dynamicNode:el,syncInputs:tl}=getExecutionSubgraph(aa,Aa,this.weightMap,this._initNodes),nl=[...wa,...this.graph.weights,...this._initNodes||[]].map(il=>({node:il,contexts:xa.currentContext})),rl=Object.assign({},this.weightMap);Object.keys(aa).forEach(il=>{const[cl,ul]=parseNodeName(il),dl=[];dl[ul]=aa[il],rl[cl]=dl});const sl={},ol=this.getFrozenTensorIds(rl),al={};for(;nl.length>0;){const il=this.processStack(wa,nl,xa,rl,al,ol,ka,sl,Fa);await Promise.all(il)}el==null&&!Sa&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const ll=Aa.filter(il=>!isControlFlow(il)&&!getTensor(il.name,rl,xa)).map(il=>il.name);if(ll.length>0){let il="";throw el!=null&&(il=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${tl}]`),new Error(`Cannot compute the outputs [${ll}] from the provided inputs [${Ta}]. Consider providing the following inputs: [${La}]. ${il}`)}return rl}processStack(aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa){const Fa=[];for(;xa.length>0;){const La=xa.pop();ba.currentContext=La.contexts;let el="";if(La.node.op==="Enter"&&getParamValue("isConstant",La.node,Sa,ba)&&([el]=getNodeNameAndIndex(La.node.name,ba)),Sa[La.node.name]==null){const tl=executeOp(La.node,Sa,ba,this._resourceManager);el||([el]=getNodeNameAndIndex(La.node.name,ba));const nl=ba.currentContext;isPromise$1(tl)?Fa.push(tl.then(rl=>(Sa[el]=rl,this.keepIntermediateTensors&&(this.clonedTensorsMap[el]=this.cloneTensorList(rl)),ba.currentContext=nl,this.checkTensorForDisposal(el,La.node,Sa,ba,wa,Ea,ka),this.processChildNodes(La.node,xa,ba,Sa,Ta,Aa),rl))):(Sa[el]=tl,this.keepIntermediateTensors&&(this.clonedTensorsMap[el]=this.cloneTensorList(tl)),this.checkTensorForDisposal(el,La.node,Sa,ba,wa,Ea,ka),this.processChildNodes(La.node,xa,ba,Sa,Ta,Aa))}else this.processChildNodes(La.node,xa,ba,Sa,Ta,Aa)}return Fa}processChildNodes(aa,xa,ba,Sa,Ta,wa){aa.children.forEach(Ea=>{const[ka]=getNodeNameAndIndex(Ea.name,ba);Ta[ka]||!wa.has(Ea.name)||(Ea.op==="Merge"?Ea.inputNames.some(Aa=>!!getTensor(Aa,Sa,ba))&&(Ta[ka]=!0,xa.push({contexts:ba.currentContext,node:Ea})):Ea.inputNames.every(Aa=>!!getTensor(Aa,Sa,ba))&&(Ta[ka]=!0,xa.push({contexts:ba.currentContext,node:Ea})))})}dispose(){Object.keys(this.weightMap).forEach(aa=>this.weightMap[aa].forEach(xa=>xa.dispose()))}checkInputShapeAndType(aa){Object.keys(aa).forEach(xa=>{const ba=aa[xa],[Sa]=parseNodeName(xa),Ta=this.graph.nodes[Sa];if(Ta.attrParams.shape&&Ta.attrParams.shape.value){const wa=Ta.attrParams.shape.value,Ea=wa.length===ba.shape.length&&ba.shape.every((ka,Aa)=>wa[Aa]===-1||wa[Aa]===ka);assert$2(Ea,()=>`The shape of dict['${Ta.name}'] provided in model.execute(dict) must be [${wa}], but was [${ba.shape}]`)}Ta.attrParams.dtype&&Ta.attrParams.dtype.value&&assert$2(ba.dtype===Ta.attrParams.dtype.value,()=>`The dtype of dict['${Ta.name}'] provided in model.execute(dict) must be ${Ta.attrParams.dtype.value}, but was ${ba.dtype}`)})}mapInputs(aa){var xa,ba;const Sa={};for(const Ta in aa){const wa=(ba=(xa=this._signature)===null||xa===void 0?void 0:xa.inputs)===null||ba===void 0?void 0:ba[Ta];wa!=null?Sa[wa.name]=aa[Ta]:Sa[Ta]=aa[Ta]}return Sa}checkInputs(aa){const xa=Object.keys(aa).filter(ba=>{const[Sa]=parseNodeName(ba);return this.graph.nodes[Sa]==null});if(xa.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${xa}] that are not part of graph`)}mapOutputs(aa){return aa.map(xa=>{var ba,Sa;const Ta=(Sa=(ba=this._signature)===null||ba===void 0?void 0:ba.outputs)===null||Sa===void 0?void 0:Sa[xa];return Ta!=null?Ta.name:xa},{})}checkOutputs(aa){aa.forEach(xa=>{const[ba]=parseNodeName(xa);if(!this.graph.nodes[ba])throw new Error(`The output '${xa}' is not found in the graph`)})}}class ResourceManager{constructor(aa={},xa={}){this.hashTableNameToHandle=aa,this.hashTableMap=xa}addHashTable(aa,xa){this.hashTableNameToHandle[aa]=xa.handle,this.hashTableMap[xa.id]=xa}getHashTableHandleByName(aa){return this.hashTableNameToHandle[aa]}getHashTableById(aa){return this.hashTableMap[aa]}dispose(){for(const aa in this.hashTableMap)this.hashTableMap[aa].clearAndClose(),delete this.hashTableMap[aa];for(const aa in this.hashTableNameToHandle)this.hashTableNameToHandle[aa].dispose(),delete this.hashTableNameToHandle[aa]}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TFHUB_SEARCH_PARAM="?tfjs-format=file",DEFAULT_MODEL_NAME="model.json";class GraphModel{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(aa,xa={},ba=io$1){this.modelUrl=aa,this.loadOptions=xa,this.version="n/a",this.io=ba,xa==null&&(this.loadOptions={}),this.resourceManager=new ResourceManager}findIOHandler(){const aa=this.modelUrl;if(aa.load!=null)this.handler=aa;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(aa,this.loadOptions);else{const xa=this.io.getLoadHandlers(aa,this.loadOptions);if(xa.length===0)xa.push(this.io.browserHTTPRequest(aa,this.loadOptions));else if(xa.length>1)throw new Error(`Found more than one (${xa.length}) load handlers for URL '${[aa]}'`);this.handler=xa[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const aa=this.handler.load();return isPromise$1(aa)?aa.then(xa=>xa.getWeightStream==null?this.loadSync(xa):this.loadStreaming(xa)):this.loadSync(aa)}loadSync(aa){const xa=this.io.decodeWeights(aa.weightData,aa.weightSpecs);return this.loadWithWeightMap(aa,xa)}async loadStreaming(aa){if(aa.getWeightStream==null)throw new Error("Model artifacts missing streamWeights function");const xa=await decodeWeightsStream(aa.getWeightStream(),aa.weightSpecs);return this.loadWithWeightMap(aa,xa)}loadWithWeightMap(aa,xa){this.artifacts=aa;const ba=this.artifacts.modelTopology;let Sa=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){const Ta=this.artifacts.userDefinedMetadata;Ta.signature!=null&&(Sa=Ta.signature),Ta.structuredOutputKeys!=null&&(this.structuredOutputKeys=Ta.structuredOutputKeys)}if(this.signature=Sa,this.version=`${ba.versions.producer}.${ba.versions.minConsumer}`,this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(ba,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(xa),this.executor.resourceManager=this.resourceManager,aa.modelInitializer!=null&&aa.modelInitializer.node!=null){const Ta=OperationMapper.Instance.transformGraph(aa.modelInitializer);this.initializer=new GraphExecutor(Ta),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=aa.initializerSignature}return!0}async save(aa,xa){if(typeof aa=="string"){const ba=this.io.getSaveHandlers(aa);if(ba.length===0)throw new Error(`Cannot find any save handlers for URL '${aa}'`);if(ba.length>1)throw new Error(`Found more than one (${ba.length}) save handlers for URL '${aa}'`);aa=ba[0]}if(aa.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return aa.save(this.artifacts)}addStructuredOutputNames(aa){if(this.structuredOutputKeys){const xa=aa instanceof Tensor$1?[aa]:aa,ba={};return xa.forEach((Sa,Ta)=>ba[this.structuredOutputKeys[Ta]]=Sa),ba}return aa}predict(aa,xa){const ba=this.execute(aa,this.outputNodes);return this.addStructuredOutputNames(ba)}async predictAsync(aa,xa){const ba=await this.executeAsync(aa,this.outputNodes);return this.addStructuredOutputNames(ba)}normalizeInputs(aa){var xa;if(!(aa instanceof Tensor$1)&&!Array.isArray(aa)){const Ta=(xa=this.signature)===null||xa===void 0?void 0:xa.inputs;if(Ta!=null)for(const wa in Ta){const Ea=Ta[wa];Ea.resourceId!=null&&(aa[wa]=this.resourceIdToCapturedInput[Ea.resourceId])}return aa}aa=Array.isArray(aa)?aa:[aa];const ba=Object.keys(this.resourceIdToCapturedInput).length;if(aa.length+ba!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-ba} non-resource placeholders, while there are ${aa.length} input tensors provided.`);let Sa=0;return this.inputNodes.reduce((Ta,wa)=>{var Ea,ka,Aa;const Fa=(Aa=(ka=(Ea=this.signature)===null||Ea===void 0?void 0:Ea.inputs)===null||ka===void 0?void 0:ka[wa])===null||Aa===void 0?void 0:Aa.resourceId;return Fa!=null?Ta[wa]=this.resourceIdToCapturedInput[Fa]:Ta[wa]=aa[Sa++],Ta},{})}normalizeOutputs(aa){return aa=aa||this.outputNodes,Array.isArray(aa)?aa:[aa]}executeInitializerGraph(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(aa){if(this.resourceIdToCapturedInput={},this.initializerSignature){const xa=this.initializerSignature.outputs,ba=Object.keys(xa);for(let Sa=0;Sa<ba.length;Sa++){const Ta=ba[Sa],wa=xa[Ta];this.resourceIdToCapturedInput[wa.resourceId]=aa[Sa]}}}execute(aa,xa){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),aa=this.normalizeInputs(aa),xa=this.normalizeOutputs(xa);const ba=this.executor.execute(aa,xa);return ba.length>1?ba:ba[0]}async executeAsync(aa,xa){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),aa=this.normalizeInputs(aa),xa=this.normalizeOutputs(xa);const ba=await this.executor.executeAsync(aa,xa);return ba.length>1?ba:ba[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(aa){return Object.keys(aa).reduce((xa,ba)=>(xa[ba]=[aa[ba]],xa),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&dispose$1(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function loadGraphModel(ha,aa={},xa=io$1){if(ha==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");aa==null&&(aa={}),aa.fromTFHub&&typeof ha=="string"&&(ha=getTFHubUrl(ha));const ba=new GraphModel(ha,aa,xa);return await ba.load(),ba}function getTFHubUrl(ha){return ha.endsWith("/")||(ha=ha+"/"),`${ha}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */var ZipMismatchMode;(function(ha){ha[ha.FAIL=0]="FAIL",ha[ha.SHORTEST=1]="SHORTEST",ha[ha.LONGEST=2]="LONGEST"})(ZipMismatchMode||(ZipMismatchMode={}));/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertNotComplex$2(ha,aa){Array.isArray(ha)||(ha=[ha]),ha.forEach(xa=>{xa!=null&&assert$2(xa.dtype!=="complex64",()=>`${aa} does not support complex64 tensors in the CPU backend.`)})}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl$3=whereImpl$4;class MathBackendCPU extends KernelBackend$1{nextDataId(){return MathBackendCPU.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new DataStorage$1(this,engine$1())}write(aa,xa,ba){this.firstUse&&(this.firstUse=!1,env$1().get("IS_NODE")&&warn$1(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details.
============================`));const Sa={id:this.nextDataId()};return this.data.set(Sa,{values:aa,dtype:ba,refCount:1}),Sa}makeTensorInfo(aa,xa,ba){let Sa;if(xa==="string"&&ba!=null&&ba.length>0&&isString$1(ba[0])){const Ta=ba.map(wa=>encodeString$1(wa));Sa=this.write(Ta,aa,xa)}else Sa=this.write(ba,aa,xa);return{dataId:Sa,shape:aa,dtype:xa}}refCount(aa){return this.data.has(aa)?this.data.get(aa).refCount:0}incRef(aa){const xa=this.data.get(aa);xa.refCount++}decRef(aa){if(this.data.has(aa)){const xa=this.data.get(aa);xa.refCount--}}move(aa,xa,ba,Sa,Ta){this.data.set(aa,{values:xa,dtype:Sa,refCount:Ta})}numDataIds(){return this.data.numDataIds()}async read(aa){return this.readSync(aa)}readSync(aa){const{dtype:xa,complexTensorInfos:ba}=this.data.get(aa);if(xa==="complex64"){const Sa=this.readSync(ba.real.dataId),Ta=this.readSync(ba.imag.dataId);return mergeRealAndImagArrays$1(Sa,Ta)}return convertBackendValuesAndArrayBuffer(this.data.get(aa).values,xa)}bufferSync(aa){const xa=this.readSync(aa.dataId);if(aa.dtype==="string")try{const ba=xa.map(Sa=>decodeString$1(Sa));return buffer$1(aa.shape,aa.dtype,ba)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer$1(aa.shape,aa.dtype,xa)}makeOutput(aa,xa,ba){return engine$1().makeTensorFromTensorInfo(this.makeTensorInfo(xa,ba,aa),this)}disposeData(aa,xa=!1){if(this.data.has(aa)){if(this.data.get(aa).refCount--,!xa&&this.data.get(aa).refCount>0)return!1;const{complexTensorInfos:ba}=this.data.get(aa);ba!=null&&(this.disposeData(ba.real.dataId,!0),this.disposeData(ba.imag.dataId,!0)),this.data.delete(aa)}return!0}disposeIntermediateTensorInfo(aa){this.disposeData(aa.dataId)}async time(aa){const xa=now$1();return aa(),{kernelMs:now$1()-xa}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(aa){assertNotComplex$2([aa],"where");const xa=this.readSync(aa.dataId);return whereImpl$3(aa.shape,xa)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}MathBackendCPU.nextDataId=0;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function simpleAbsImpl$1(ha){const aa=new Float32Array(ha.length);for(let xa=0;xa<ha.length;++xa)aa[xa]=Math.abs(ha[xa]);return aa}const abs$3=ha=>{const{x:aa}=ha.inputs,xa=ha.backend;assertNotComplex$2(aa,"abs");let ba=new Float32Array(sizeFromShape$1(aa.shape));const Sa=xa.data.get(aa.dataId).values;return ba=simpleAbsImpl$1(Sa),xa.makeOutput(ba,aa.shape,aa.dtype)},absConfig$2={kernelName:Abs$1,backendName:"cpu",kernelFunc:abs$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleBinaryKernelImpl$1(ha){return(aa,xa,ba,Sa,Ta)=>{const wa=assertAndGetBroadcastShape$1(aa,xa),Ea=wa.length,ka=computeStrides$1(wa),Aa=sizeFromShape$1(wa),Fa=getTypedArrayFromDType$1(Ta,Aa),La=aa.length,el=xa.length,tl=computeStrides$1(aa),nl=computeStrides$1(xa),rl=getBroadcastDims$3(aa,wa),sl=getBroadcastDims$3(xa,wa);if(rl.length+sl.length===0)for(let ol=0;ol<Fa.length;++ol)Fa[ol]=ha(ba[ol%ba.length],Sa[ol%Sa.length]);else for(let ol=0;ol<Fa.length;++ol){const al=indexToLoc$1(ol,Ea,ka),ll=al.slice(-La);rl.forEach(dl=>ll[dl]=0);const il=locToIndex$1(ll,La,tl),cl=al.slice(-el);sl.forEach(dl=>cl[dl]=0);const ul=locToIndex$1(cl,el,nl);Fa[ol]=ha(ba[il],Sa[ul])}return[Fa,wa]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex$3(ha){const{inputs:aa,backend:xa}=ha,{real:ba,imag:Sa}=aa,Ta=xa.data.get(ba.dataId).values,wa=xa.data.get(Sa.dataId).values,Ea=xa.makeTensorInfo(ba.shape,"complex64"),ka=xa.data.get(Ea.dataId);return ka.complexTensorInfos={real:xa.makeTensorInfo(ba.shape,"float32",Ta),imag:xa.makeTensorInfo(Sa.shape,"float32",wa)},Ea}const complexConfig$2={kernelName:Complex$1,backendName:"cpu",kernelFunc:complex$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros$1(ha,aa,xa="float32"){if(xa==="complex64"){const Sa=zeros$1(ha,aa,"float32"),Ta=zeros$1(ha,aa,"float32");return complex$3({inputs:{real:Sa,imag:Ta},backend:ha})}const ba=makeZerosTypedArray$1(sizeFromShape$1(aa),xa);return ha.makeTensorInfo(aa,xa,ba)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;return xa.incRef(ba.dataId),{dataId:ba.dataId,shape:ba.shape,dtype:ba.dtype}}const identityConfig$2={kernelName:Identity$2,backendName:"cpu",kernelFunc:identity$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real$2(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=xa.data.get(ba.dataId).complexTensorInfos.real,Ta=xa.data.get(Sa.dataId).values;return xa.makeTensorInfo(Sa.shape,Sa.dtype,Ta)}const realConfig$2={kernelName:Real$1,backendName:"cpu",kernelFunc:real$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function castImpl$1(ha,aa,xa,ba){if(ba==="int32"){const Sa=Int32Array.from(ha);return[aa,"int32",Sa]}if(ba==="bool"){const Sa=toTypedArray$1([0],xa),[Ta,wa]=createSimpleBinaryKernelImpl$1((Ea,ka)=>Ea!==ka?1:0)(aa,[],ha,Sa,"bool");return[wa,"bool",Ta]}throw new Error(`Error in Cast: failed to cast ${xa} to ${ba}`)}function cast$3(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{dtype:Ta}=ba;if(Ta==="complex64"){if(Sa.dtype==="complex64")return identity$2({inputs:{x:Sa},backend:xa});const Fa=zeros$1(xa,Sa.shape,Sa.dtype),La=cast$3({inputs:{x:Sa},backend:xa,attrs:{dtype:"float32"}}),el=complex$3({inputs:{real:La,imag:Fa},backend:xa});return xa.disposeIntermediateTensorInfo(Fa),xa.disposeIntermediateTensorInfo(La),el}if(Sa.dtype==="complex64"){const Fa=real$2({inputs:{input:Sa},backend:xa}),La=cast$3({inputs:{x:Fa},backend:xa,attrs:{dtype:Ta}});return xa.disposeIntermediateTensorInfo(Fa),La}if(!hasEncodingLoss$1(Sa.dtype,Ta)){const Fa=identity$2({inputs:{x:Sa},backend:xa});return{dataId:Fa.dataId,shape:Fa.shape,dtype:Ta}}const wa=xa.data.get(Sa.dataId).values,[Ea,ka,Aa]=castImpl$1(wa,Sa.shape,Sa.dtype,Ta);return xa.makeTensorInfo(Ea,ka,Aa)}const castConfig$2={kernelName:Cast$1,backendName:"cpu",kernelFunc:cast$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryKernelFunc$2(ha,aa,xa,ba){return xa==null?({inputs:Sa,backend:Ta})=>{const{a:wa,b:Ea}=Sa,ka=Ta;assertNotComplex$2([wa,Ea],ha);const Aa=ka.data.get(wa.dataId).values,Fa=ka.data.get(Ea.dataId).values,La=wa.dtype==="string"?fromUint8ToStringArray$1(Aa):Aa,el=wa.dtype==="string"?fromUint8ToStringArray$1(Fa):Fa,tl=ba||wa.dtype,[nl,rl]=aa(wa.shape,Ea.shape,La,el,tl);return ka.makeTensorInfo(rl,tl,nl)}:({inputs:Sa,backend:Ta})=>{const{a:wa,b:Ea}=Sa,ka=Ta;if(wa.dtype==="complex64"||Ea.dtype==="complex64"){const Aa=cast$3({inputs:{x:wa},backend:ka,attrs:{dtype:"complex64"}}),Fa=ka.data.get(Aa.dataId),La=Fa.complexTensorInfos.real,el=Fa.complexTensorInfos.imag,tl=ka.data.get(La.dataId).values,nl=ka.data.get(el.dataId).values,rl=cast$3({inputs:{x:Ea},backend:ka,attrs:{dtype:"complex64"}}),sl=ka.data.get(rl.dataId),ol=sl.complexTensorInfos.real,al=sl.complexTensorInfos.imag,ll=ka.data.get(ol.dataId).values,il=ka.data.get(al.dataId).values,[cl,ul,dl]=xa(wa.shape,Ea.shape,tl,nl,ll,il),hl=ka.makeTensorInfo(dl,"float32",cl),pl=ka.makeTensorInfo(dl,"float32",ul),fl=complex$3({inputs:{real:hl,imag:pl},backend:ka});return ka.disposeIntermediateTensorInfo(Aa),ka.disposeIntermediateTensorInfo(rl),ka.disposeIntermediateTensorInfo(hl),ka.disposeIntermediateTensorInfo(pl),fl}else{const Aa=ka.data.get(wa.dataId).values,Fa=ka.data.get(Ea.dataId).values,La=ba||wa.dtype,[el,tl]=aa(wa.shape,Ea.shape,Aa,Fa,La);return ka.makeTensorInfo(tl,La,el)}}}function createComplexBinaryKernelImpl(ha){return(aa,xa,ba,Sa,Ta,wa)=>{const Ea=assertAndGetBroadcastShape$1(aa,xa),ka=sizeFromShape$1(Ea),Aa=Ea.length,Fa=computeStrides$1(Ea),La=getTypedArrayFromDType$1("float32",ka),el=getTypedArrayFromDType$1("float32",ka),tl=getBroadcastDims$3(aa,Ea),nl=getBroadcastDims$3(xa,Ea),rl=mergeRealAndImagArrays$1(ba,Sa),sl=mergeRealAndImagArrays$1(Ta,wa),ol=aa.length,al=computeStrides$1(aa),ll=xa.length,il=computeStrides$1(xa);if(tl.length+nl.length===0)for(let cl=0;cl<La.length;cl++){const ul=cl%rl.length,dl=cl%sl.length,hl=ha(rl[ul*2],rl[ul*2+1],sl[dl*2],sl[dl*2+1]);La[cl]=hl.real,el[cl]=hl.imag}else for(let cl=0;cl<La.length;cl++){const ul=indexToLoc$1(cl,Aa,Fa),dl=ul.slice(-ol);tl.forEach(gl=>dl[gl]=0);const hl=locToIndex$1(dl,ol,al),pl=ul.slice(-ll);nl.forEach(gl=>pl[gl]=0);const fl=locToIndex$1(pl,ll,il),ml=ha(rl[hl*2],rl[hl*2+1],sl[fl*2],sl[fl*2+1]);La[cl]=ml.real,el[cl]=ml.imag}return[La,el,Ea]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha+aa),addComplexImpl=createComplexBinaryKernelImpl((ha,aa,xa,ba)=>({real:ha+xa,imag:aa+ba})),add$2=binaryKernelFunc$2(Add$2,addImpl$1,addComplexImpl),addConfig$2={kernelName:Add$2,backendName:"cpu",kernelFunc:add$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincountImpl$1(ha,aa,xa,ba,Sa){const Ta=sizeFromShape$1(ba),wa=makeZerosTypedArray$1(Sa,xa);for(let Ea=0;Ea<ha.length;Ea++){const ka=ha[Ea];if(ka<0)throw new Error("Input x must be non-negative!");ka>=Sa||(Ta>0?wa[ka]+=aa[Ea]:wa[ka]+=1)}return wa}function bincountReduceImpl$1(ha,aa,xa,ba=!1){const Sa=ha.shape[0],Ta=ha.shape[1],wa=buffer$1([Sa,xa],aa.dtype);for(let Ea=0;Ea<Sa;Ea++)for(let ka=0;ka<Ta;ka++){const Aa=ha.get(Ea,ka);if(Aa<0)throw new Error("Input x must be non-negative!");Aa>=xa||(ba?wa.set(1,Ea,Aa):aa.size>0?wa.set(wa.get(Ea,Aa)+aa.get(Ea,ka),Ea,Aa):wa.set(wa.get(Ea,Aa)+1,Ea,Aa))}return wa}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const bitwiseAndImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha&aa),bitwiseAnd$2=binaryKernelFunc$2(BitwiseAnd$1,bitwiseAndImpl$1),bitwiseAndConfig$2={kernelName:BitwiseAnd$1,backendName:"cpu",kernelFunc:bitwiseAnd$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleUnaryImpl$1(ha){return(aa,xa,ba)=>{const Sa=getArrayFromDType$1(xa,aa.length);for(let Ta=0;Ta<aa.length;++Ta)Sa[Ta]=ha(aa[Ta],ba);return Sa}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unaryKernelFunc$2(ha,aa,xa){const ba=createSimpleUnaryImpl$1(aa);return unaryKernelFuncFromImpl(ha,ba,xa)}function unaryKernelFuncFromImpl(ha,aa,xa){return({inputs:ba,attrs:Sa,backend:Ta})=>{const{x:wa}=ba;assertNotComplex$2(wa,ha);const Ea=Ta,ka=Ea.data.get(wa.dataId).values;let Aa;if(wa.dtype==="string"){if(!Array.isArray(ka))throw new Error("String tensor's value was not an instance of Array");Aa=fromUint8ToStringArray$1(ka)}else Aa=ka;const Fa=xa||wa.dtype,La=aa(Aa,Fa,Sa);return Ea.makeTensorInfo(wa.shape,Fa,La)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilImpl$1=createSimpleUnaryImpl$1(ha=>Math.ceil(ha)),ceil$2=unaryKernelFuncFromImpl(Ceil$1,ceilImpl$1),ceilConfig$2={kernelName:Ceil$1,backendName:"cpu",kernelFunc:ceil$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$3(ha,aa,xa,ba){const Sa=getArrayFromDType$1(xa,sizeFromShape$1(aa));if(ba&&xa!=="string"){let Ta=0;ha.forEach(wa=>{const Ea=sizeFromShape$1(wa.shape);Sa.set(wa.vals,Ta),Ta+=Ea})}else{let Ta=0;ha.forEach(wa=>{const Ea=xa==="string"?fromUint8ToStringArray$1(wa.vals):wa.vals;let ka=0;for(let Aa=0;Aa<wa.shape[0];++Aa){const Fa=Aa*aa[1]+Ta;for(let La=0;La<wa.shape[1];++La)Sa[Fa+La]=Ea[ka++]}Ta+=wa.shape[1]})}return Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const equalImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha===aa?1:0),equal$2=binaryKernelFunc$2(Equal$1,equalImpl$1,null,"bool"),equalConfig$2={kernelName:Equal$1,backendName:"cpu",kernelFunc:equal$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expImpl$1=createSimpleUnaryImpl$1(ha=>Math.exp(ha)),exp$2=unaryKernelFuncFromImpl(Exp$1,expImpl$1,"float32"),expConfig$2={kernelName:Exp$1,backendName:"cpu",kernelFunc:exp$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1Impl$1=createSimpleUnaryImpl$1(ha=>Math.expm1(ha)),expm1$2=unaryKernelFuncFromImpl(Expm1$1,expm1Impl$1),expm1Config$2={kernelName:Expm1$1,backendName:"cpu",kernelFunc:expm1$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorImpl$1=createSimpleUnaryImpl$1(ha=>Math.floor(ha)),floor$2=unaryKernelFuncFromImpl(Floor$1,floorImpl$1),floorConfig$2={kernelName:Floor$1,backendName:"cpu",kernelFunc:floor$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>Math.floor(ha/aa)),floorDiv$3=binaryKernelFunc$2(FloorDiv$1,floorDivImpl$1,null,"int32"),floorDivConfig$2={kernelName:FloorDiv$1,backendName:"cpu",kernelFunc:floorDiv$3};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNdImpl$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){const Aa=buffer$1([ba,Ta],xa);for(let Fa=0;Fa<ba;Fa++){const La=[];let el=0;for(let tl=0;tl<Sa;tl++){const nl=ha[Fa*Sa+tl];el+=nl*wa[tl],La.push(nl)}if(el<0||el>=ka/Ta)throw new Error(`Invalid indices: ${La} does not index into ${Ea}`);for(let tl=0;tl<Ta;tl++)Aa.values[Fa*Ta+tl]=aa.get(...aa.indexToLoc(el*Ta+tl))}return Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2Impl$1(ha,aa,xa){const ba=buffer$1(xa,ha.dtype);for(let Sa=0;Sa<ba.size;++Sa){const wa=ba.indexToLoc(Sa).slice(),Ea=wa[0],ka=wa[2],Aa=aa.locToIndex([Ea,ka]);wa[2]=aa.values[Aa];const Fa=ha.locToIndex(wa);0<=Fa&&Fa<ha.values.length&&(ba.values[Sa]=ha.values[Fa])}return ba}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha>aa?1:0),greater$2=binaryKernelFunc$2(Greater$1,greaterImpl$1,null,"bool"),greaterConfig$2={kernelName:Greater$1,backendName:"cpu",kernelFunc:greater$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha>=aa?1:0),greaterEqual$2=binaryKernelFunc$2(GreaterEqual$1,greaterEqualImpl$1,null,"bool"),greaterEqualConfig$2={kernelName:GreaterEqual$1,backendName:"cpu",kernelFunc:greaterEqual$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha<aa?1:0),less$2=binaryKernelFunc$2(Less$1,lessImpl$1,null,"bool"),lessConfig$2={kernelName:Less$1,backendName:"cpu",kernelFunc:less$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessEqualImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha<=aa?1:0),lessEqual$2=binaryKernelFunc$2(LessEqual$1,lessEqualImpl$1,null,"bool"),lessEqualConfig$2={kernelName:LessEqual$1,backendName:"cpu",kernelFunc:lessEqual$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpaceImpl$1(ha,aa,xa){const ba=(aa-ha)/(xa-1),Sa=makeZerosTypedArray$1(xa,"float32");Sa[0]=ha;for(let Ta=1;Ta<Sa.length;Ta++)Sa[Ta]=Sa[Ta-1]+ba;return Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logImpl$1=createSimpleUnaryImpl$1(ha=>Math.log(ha)),log$3=unaryKernelFuncFromImpl(Log$1,logImpl$1),logConfig$2={kernelName:Log$1,backendName:"cpu",kernelFunc:log$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl$3(ha,aa,xa,ba){const Sa=getTypedArrayFromDType$1(ba,sizeFromShape$1(xa));for(let Ta=0;Ta<Sa.length;++Ta){const wa=Ta*aa;let Ea=ha[wa];for(let ka=0;ka<aa;++ka){const Aa=ha[wa+ka];(Number.isNaN(Aa)||Aa>Ea)&&(Ea=Aa)}Sa[Ta]=Ea}return Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>Math.max(ha,aa)),maximum$3=binaryKernelFunc$2(Maximum$2,maximumImpl$1),maximumConfig$2={kernelName:Maximum$2,backendName:"cpu",kernelFunc:maximum$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>Math.min(ha,aa)),minimum$2=binaryKernelFunc$2(Minimum$2,minimumImpl$1),minimumConfig$2={kernelName:Minimum$2,backendName:"cpu",kernelFunc:minimum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha*aa),multiplyComplexImpl=createComplexBinaryKernelImpl((ha,aa,xa,ba)=>({real:ha*xa-aa*ba,imag:ha*ba+aa*xa})),multiply$2=binaryKernelFunc$2(Multiply$2,multiplyImpl$1,multiplyComplexImpl),multiplyConfig$2={kernelName:Multiply$2,backendName:"cpu",kernelFunc:multiply$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function negImpl$1(ha,aa,xa){const ba=createScalarValue$1(-1,xa);return multiplyImpl$1([],aa,ba,ha,xa)}function neg$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;assertNotComplex$2(ba,"neg");const Sa=xa.data.get(ba.dataId).values,[Ta,wa]=negImpl$1(Sa,ba.shape,ba.dtype);return xa.makeTensorInfo(wa,ba.dtype,Ta)}const negConfig$2={kernelName:Neg$1,backendName:"cpu",kernelFunc:neg$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const notEqualImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha!==aa?1:0),notEqual$2=binaryKernelFunc$2(NotEqual$1,notEqualImpl$1,null,"bool"),notEqualConfig$2={kernelName:NotEqual$1,backendName:"cpu",kernelFunc:notEqual$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl$3(ha,aa,xa,ba,Sa){const Ta=aa.length,wa=sizeFromShape$1(aa),Ea=computeStrides$1(aa),ka=computeStrides$1(Sa),Aa=getTypedArrayFromDType$1(xa,sizeFromShape$1(Sa));for(let Fa=0;Fa<wa;++Fa){const La=indexToLoc$1(Fa,Ta,Ea),el=new Array(La.length);for(let nl=0;nl<el.length;nl++)el[nl]=La[ba[nl]];const tl=locToIndex$1(el,Ta,ka);Aa[tl]=ha[Fa]}return Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose$2(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{x:Sa}=aa,{perm:Ta}=xa;assertNotComplex$2(Sa,"transpose");const wa=Sa.shape.length,Ea=new Array(wa);for(let La=0;La<Ea.length;La++)Ea[La]=Sa.shape[Ta[La]];const ka=ba.data.get(Sa.dataId).values,Aa=transposeImpl$3(ka,Sa.shape,Sa.dtype,Ta,Ea);return{dataId:ba.write(Aa,Ea,Sa.dtype),shape:Ea,dtype:Sa.dtype}}const transposeConfig$2={kernelName:Transpose$1,backendName:"cpu",kernelFunc:transpose$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodImpl$1(ha,aa,xa,ba){const[Sa,Ta]=computeOutAndReduceShapes$1(ha,ba),wa=upcastType$1(aa,"int32"),Ea=makeZerosTypedArray$1(sizeFromShape$1(Sa),wa),ka=sizeFromShape$1(Ta);for(let Aa=0;Aa<Ea.length;++Aa){const Fa=Aa*ka;let La=1;for(let el=0;el<ka;++el)La*=xa[Fa+el];Ea[Aa]=La}return{outVals:Ea,outShape:Sa,outDtype:wa}}function prod$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;assertNotComplex$2(Sa,"prod");const Ea=Sa.shape.length,ka=parseAxisParam$1(Ta,Sa.shape),Aa=getAxesPermutation$1(ka,Ea);let Fa=ka,La=Sa;const el=[];Aa!=null&&(La=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:Aa}}),el.push(La),Fa=getInnerMostAxes$1(Fa.length,Ea));const tl=xa.data.get(La.dataId).values,{outVals:nl,outShape:rl,outDtype:sl}=prodImpl$1(La.shape,La.dtype,tl,Fa);let ol=rl;return wa&&(ol=expandShapeToKeepDim$1(rl,ka)),el.forEach(al=>xa.disposeIntermediateTensorInfo(al)),xa.makeTensorInfo(ol,sl,nl)}const prodConfig$2={kernelName:Prod$1,backendName:"cpu",kernelFunc:prod$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function validateIndices$1(ha,aa,xa){ha.forEach((ba,Sa)=>{if(ba<0||ba>=xa){const Ta=indexToLoc$1(Sa,aa.length,computeStrides$1(aa)).join(",");throw new Error(`indices[${Ta}] = ${ba} is not in [0, ${xa})`)}})}function validateSplits$1(ha,aa){for(let xa=0;xa<ha.length;++xa){const ba=ha[xa],Sa=xa===ha.length-1?aa:ha[xa+1].length;if(ba.length===0)throw new Error("Ragged splits may not be empty");if(ba[0]<0)throw new Error("Ragged splits must be non-negative");if(ba[ba.length-1]>Sa)throw new Error("Ragged splits must not point past values");for(let Ta=1;Ta<ba.length;++Ta)if(ba[Ta-1]>ba[Ta])throw new Error("Ragged splits must be sorted in ascending order")}}function makeSplits$1(ha,aa,xa,ba){const Sa=[];let Ta=0;const wa=aa.length-1+xa.length,Ea=new Array(wa).fill(null).map(()=>[0]);validateSplits$1(xa,ba);let ka=1;for(let Aa=0;Aa<aa.length-1;++Aa){ka*=aa[Aa];const Fa=aa[Aa+1];for(let La=1;La<ka+1;++La)Ea[Aa].push(La*Fa)}for(let Aa=0;Aa<ha.length;++Aa){let Fa=ha[Aa],La=ha[Aa]+1;for(let el=0;el<xa.length;++el){const tl=xa[el],nl=el+aa.length-1;if(nl>=0){const rl=Ea[nl],sl=rl[rl.length-1]-tl[Fa];for(let ol=Fa;ol<La;++ol)Ea[nl].push(tl[ol+1]+sl)}Fa=tl[Fa],La=tl[La]}La!==Fa&&(Sa.push([Fa,La]),Ta+=La-Fa)}return{outSplits:Ea,valueSlices:Sa,numValues:Ta}}function getSplits$1(ha){const aa=[];for(let xa=0;xa<ha.length;++xa){const ba=ha[xa].length,Sa=getArrayFromDType$1("int32",ba);aa.push(Sa),ha[xa].forEach((Ta,wa)=>Sa[wa]=Ta)}return aa}function computeFlatOuterDims$1(ha,aa){const xa=ha.slice(0,aa);for(;xa.length<aa;)xa.push(1);for(let ba=aa;ba<ha.length;ba++)xa[aa-1]*=ha[ba];return xa}function writeValueSlices$1(ha,aa,xa,ba,Sa,Ta){const wa=computeFlatOuterDims$1(aa,2)[1],Ea=computeFlatOuterDims$1(Ta,2)[1];let ka=0;for(const Aa of xa)for(let Fa=Aa[0];Fa<Aa[1];++Fa){for(let La=0;La<ba;++La)Sa[ka*Ea+La]=ha[Fa*wa+La];++ka}}function getValues$1(ha,aa,xa,ba,Sa){const Ta=aa.slice();Ta[0]=Sa;const wa=getArrayFromDType$1(xa,sizeFromShape$1(Ta)),Ea=ha.length,ka=Ea===0?0:Ea/aa[0];return writeValueSlices$1(ha,aa,ba,ka,wa,Ta),[wa,Ta]}function raggedGatherImpl$1(ha,aa,xa,ba,Sa,Ta,wa,Ea){if(ha.length===0)throw new Error("paramsNestedSplits must be non empty");if(aa[0].length===0)throw new Error("Split tensors must not be scalars");const ka=aa[0][0]-1;if(validateIndices$1(Ta,wa,ka),ba.length===0)throw new Error("params.rank must be nonzero");const Aa=ba[0],{outSplits:Fa,valueSlices:La,numValues:el}=makeSplits$1(Ta,wa,ha,Aa),tl=getSplits$1(Fa),nl=getValues$1(xa,ba,Sa,La,el);return[tl,nl[0],nl[1]]}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX$1=2147483647;function raggedRangeImpl$1(ha,aa,xa,ba,Sa,Ta,wa){if(aa.length>1)throw new Error("starts must be a scalar or vector");if(Sa.length>1)throw new Error("limits must be a scalar or vector");if(wa.length>1)throw new Error("deltas must be a scalar or vector");const Ea=aa.length===0,ka=Sa.length===0,Aa=wa.length===0,Fa=[];Ea||Fa.push(aa[0]),ka||Fa.push(Sa[0]),Aa||Fa.push(wa[0]);for(let sl=1;sl<Fa.length;++sl)if(Fa[sl]!==Fa[sl-1])throw new Error("starts, limits, and deltas must have the same shape");const La=Fa.length===0?1:Fa[0],el=getArrayFromDType$1("int32",La+1);el[0]=0;for(let sl=0;sl<La;++sl){const ol=Ea?ha[0]:ha[sl],al=ka?ba[0]:ba[sl],ll=Aa?Ta[0]:Ta[sl];if(ll===0)throw new Error("Requires delta != 0");let il;if(ll>0&&al<ol||ll<0&&al>ol)il=0;else if(il=Math.ceil(Math.abs((al-ol)/ll)),il>INT32_MAX$1)throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX$1}`);el[sl+1]=el[sl]+il}const tl=el[La],nl=getArrayFromDType$1(xa,tl);let rl=0;for(let sl=0;sl<La;++sl){const ol=el[sl+1]-el[sl];let al=Ea?ha[0]:ha[sl];const ll=Aa?Ta[0]:Ta[sl];for(let il=0;il<ol;++il)nl[rl++]=al,al+=ll}return[el,nl]}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$2=RowPartitionType$3;let RaggedTensorToTensorOp$1=class lc{constructor(aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){this.shape=aa,this.shapeShape=xa,this.values=ba,this.valuesShape=Sa,this.valuesDType=Ta,this.defaultValue=wa,this.defaultValueShape=Ea,this.rowPartitionValues=ka,this.rowPartitionValuesShapes=Aa,this.rowPartitionTypes=getRowPartitionTypesHelper$1(Fa),this.raggedRank=getRaggedRank$1(this.rowPartitionTypes)}getRowPartitionTypeByDimension(aa){return this.rowPartitionTypes[0]===RowPartitionType$2.FIRST_DIM_SIZE?this.rowPartitionTypes[aa+1]:this.rowPartitionTypes[aa]}getRowPartitionTensor(aa){return this.rowPartitionTypes[0]===RowPartitionType$2.FIRST_DIM_SIZE?this.rowPartitionValues[aa+1]:this.rowPartitionValues[aa]}getMaxWidth(aa){const xa=this.getRowPartitionTensor(aa-1);switch(this.getRowPartitionTypeByDimension(aa-1)){case RowPartitionType$2.VALUE_ROWIDS:return lc.getMaxWidthValueRowID(xa);case RowPartitionType$2.ROW_SPLITS:return lc.getMaxWidthRowSplit(xa);default:throw new Error(`Cannot handle partition type ${RowPartitionType$2[this.getRowPartitionTypeByDimension(aa-1)]}`)}}static getMaxWidthRowSplit(aa){const xa=aa.length;if(xa===0||xa===1)return 0;let ba=0;for(let Sa=0;Sa<xa-1;++Sa){const Ta=aa[Sa+1]-aa[Sa];Ta>ba&&(ba=Ta)}return ba}static getMaxWidthValueRowID(aa){const xa=aa.length;if(xa===0)return 0;let ba=0,Sa=aa[0],Ta=0;for(let wa=1;wa<xa;++wa){const Ea=aa[wa];Ea!==Sa&&(Sa=Ea,Ta=Math.max(wa-ba,Ta),ba=wa)}return Math.max(xa-ba,Ta)}tensorShapeFromTensor(aa,xa,ba=!0){if(xa.length===0){if(aa[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return makeShape$1(aa,ba)}calculateOutputSize(aa){const xa=this.valuesShape,ba=this.defaultValueShape;validateDefaultValueShape$1(ba,xa);const Sa=this.tensorShapeFromTensor(this.shape,this.shapeShape),wa=combineRaggedTensorToTensorShapes$1(this.raggedRank,Sa,xa);wa[0]<0&&(wa[0]=aa);for(let Ea=1;Ea<=this.raggedRank;++Ea)wa[Ea]<0&&(wa[Ea]=this.getMaxWidth(Ea));return wa}calculateFirstParentOutputIndex(aa,xa,ba){const Sa=Math.min(aa,ba),Ta=[];let wa=0;for(let Ea=0;Ea<Sa;++Ea,wa+=xa)Ta.push(wa);for(let Ea=Sa;Ea<aa;++Ea)Ta.push(-1);return assert$2(Ta.length===aa,()=>"Final length of result must be equal to firstDimension."),Ta}calculateOutputIndexRowSplit(aa,xa,ba,Sa){const Ta=aa.length,wa=[];for(let Ea=0;Ea<Ta-1;++Ea){const ka=aa[Ea+1]-aa[Ea];let Aa=Math.min(Sa,ka),Fa=xa[Ea];Fa===-1&&(Aa=0);for(let La=0;La<Aa;++La)wa.push(Fa),Fa+=ba;for(let La=0;La<ka-Aa;++La)wa.push(-1)}if(Ta>0&&wa.length!==aa[Ta-1])throw new Error("Invalid row split size.");return wa}calculateOutputIndexValueRowID(aa,xa,ba,Sa){const Ta=aa.length,wa=[];if(Ta===0)return[];let Ea=0,ka=aa[0];if(ka>=xa.length)throw new Error(`Got currentValueRowId=${ka}, which is not less than ${xa.length}`);let Aa=xa[ka];wa.push(Aa);for(let Fa=1;Fa<Ta;++Fa){const La=aa[Fa];if(La===ka)Aa>=0&&(++Ea,Ea<Sa?Aa+=ba:Aa=-1);else{if(Ea=0,ka=La,La>=xa.length)throw new Error(`Got nextValueRowId=${La} which is not less than ${xa.length}`);Aa=xa[La]}wa.push(Aa)}if(wa.length!==aa.length)throw new Error("Invalid row ids.");return wa}calculateOutputIndex(aa,xa,ba,Sa){const Ta=this.getRowPartitionTensor(aa),wa=this.getRowPartitionTypeByDimension(aa);switch(wa){case RowPartitionType$2.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(Ta,xa,ba,Sa);case RowPartitionType$2.ROW_SPLITS:if(Ta.length-1>xa.length)throw new Error(`Row partition size is greater than output size: ${Ta.length-1} > ${xa.length}`);return this.calculateOutputIndexRowSplit(Ta,xa,ba,Sa);default:throw new Error(`Unsupported partition type: ${RowPartitionType$2[wa]}`)}}getFirstDimensionSize(){const aa=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");const xa=this.rowPartitionTypes[0];switch(xa){case RowPartitionType$2.FIRST_DIM_SIZE:return aa[0];case RowPartitionType$2.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case RowPartitionType$2.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${RowPartitionType$2[xa]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const xa=this.getFirstDimensionSize(),ba=this.calculateOutputSize(xa),Sa=new Array(this.raggedRank+1);Sa[Sa.length-1]=1;for(let ka=Sa.length-2;ka>=0;--ka)Sa[ka]=Sa[ka+1]*ba[ka+1];const Ta=makeShape$1(ba,!1),wa=getArrayFromDType$1(this.valuesDType,sizeFromShape$1(Ta));if(Sa[0]*ba[0]>0){let ka=this.calculateFirstParentOutputIndex(xa,Sa[0],ba[0]);for(let Aa=1;Aa<=this.raggedRank;++Aa)ka=this.calculateOutputIndex(Aa-1,ka,Sa[Aa],ba[Aa]);this.setOutput(this.raggedRank,ka,wa,Ta)}return[Ta,wa]}setOutput(aa,xa,ba,Sa){if(ba.length===0)return;const Ta=this.values,wa=ba;let Ea=Sa.slice();Ea=Ea.slice(aa+1);const ka=sizeFromShape$1(Ea),Aa=xa.length;let Fa=this.defaultValue;if(Fa.length!==ka&&Fa.length!==1){const nl=this.defaultValueShape;tidy$1(()=>{const rl=reshape$4(Fa,nl);Fa=broadcastTo$1(rl,Ea).dataSync()})}let La=0,el=0,tl=0;for(let nl=0;nl<=Aa;++nl){let rl=nl<Aa?xa[nl]:-1;if(rl===tl){++tl;continue}if(el<tl){const sl=Ta.subarray(La*ka),ol=wa.subarray(el*ka),al=(tl-el)*ka;copyArray$1(ol,sl,al)}if(nl>=Aa){const sl=ba.length;rl=Math.floor(sl/ka)}if(rl>tl)if(this.defaultValue.length===1)wa.subarray(tl*ka,rl*ka).fill(this.defaultValue[0]),tl=rl;else for(;rl>tl;){const sl=wa.slice(tl*ka);copyArray$1(sl,Fa,ka),++tl}rl<0?(La=nl+1,el=tl):(La=nl,el=tl,tl=el+1)}}};function copyArray$1(ha,aa,xa){for(let ba=0;ba<xa;ba++)ha[ba]=aa[ba]}function makeShape$1(ha,aa){const xa=[];for(let ba of ha){if(ba<0){if(!aa)throw new Error(`Dimension ${ba} must be >= 0`);if(ba<-1)throw new Error(`Dimension ${ba} must be >= -1`);ba=-1}xa.push(ba)}return xa}function raggedTensorToTensorImpl$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa){return new RaggedTensorToTensorOp$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa).compute()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rangeImpl$1(ha,aa,xa,ba){const Sa=ha===aa,Ta=ha<aa&&xa<0,wa=aa<ha&&xa>1;if(Sa||Ta||wa)return makeZerosTypedArray$1(0,ba);const Ea=Math.abs(Math.ceil((aa-ha)/xa)),ka=makeZerosTypedArray$1(Ea,ba);aa<ha&&xa===1&&(xa=-1),ka[0]=ha;for(let Aa=1;Aa<ka.length;Aa++)ka[Aa]=ka[Aa-1]+xa;return ka}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtImpl$1=createSimpleUnaryImpl$1(ha=>1/Math.sqrt(ha)),rsqrt$2=unaryKernelFuncFromImpl(Rsqrt$1,rsqrtImpl$1),rsqrtConfig$2={kernelName:Rsqrt$1,backendName:"cpu",kernelFunc:rsqrt$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterImpl$1(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa){const Fa=[ba/Sa,Sa],La=ha.values,el=aa.values;if(ba===0)return buffer$1(xa,aa.dtype);const tl=ka instanceof TensorBuffer$1?ka:buffer$1(Fa,aa.dtype);typeof ka=="string"||typeof ka=="number"?tl.values.fill(ka):typeof ka=="boolean"&&tl.values.fill(+ka);for(let nl=0;nl<Ta;nl++){const rl=[];let sl=0;for(let ol=0;ol<wa;ol++){const al=La[nl*wa+ol];rl.push(al),sl+=al*Ea[ol]}if(sl<0||sl>=ba/Sa)throw new Error(`Invalid indices: ${rl} does not index into ${xa}`);for(let ol=0;ol<Sa;ol++)Aa?tl.values[sl*Sa+ol]+=el[nl*Sa+ol]:tl.values[sl*Sa+ol]=aa.rank===0?el[0]:el[nl*Sa+ol]}return tl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidImpl$1=createSimpleUnaryImpl$1(ha=>1/(1+Math.exp(-ha))),sigmoid$3=unaryKernelFunc$2(Sigmoid$2,ha=>1/(1+Math.exp(-ha))),sigmoidConfig$2={kernelName:Sigmoid$2,backendName:"cpu",kernelFunc:sigmoid$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sliceImpl$1(ha,aa,xa,ba,Sa){const Ta=isSliceContinous$1(ba,aa,xa),wa=sizeFromShape$1(xa),Ea=computeStrides$1(ba);if(Ta){const La=computeFlatOffset$1(aa,Ea);return Sa==="string"?ha.slice(La,La+wa):ha.subarray(La,La+wa)}const ka=Sa==="string"?fromUint8ToStringArray$1(ha):ha,Aa=buffer$1(ba,Sa,ka),Fa=buffer$1(xa,Sa);for(let La=0;La<Fa.size;++La){const el=Fa.indexToLoc(La),tl=el.map((nl,rl)=>nl+aa[rl]);Fa.set(Aa.get(...tl),...el)}return Sa==="string"?fromStringArrayToUint8$1(Fa.values):Fa.values}function slice$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{begin:Ta,size:wa}=ba;assertNotComplex$2(Sa,"slice");const[Ea,ka]=parseSliceParams$1(Sa,Ta,wa);assertParamsValid$1(Sa,Ea,ka);const Aa=xa.data.get(Sa.dataId).values,Fa=sliceImpl$1(Aa,Ea,ka,Sa.shape,Sa.dtype);return xa.makeTensorInfo(ka,Sa.dtype,Fa)}const sliceConfig$2={kernelName:Slice$1,backendName:"cpu",kernelFunc:slice$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRowsImpl$1(ha,aa,xa,ba,Sa,Ta,wa){const Ea=aa[0],ka=Ta[0],Aa=new Array(ka),Fa=new Array(Ea),La=aa[1];if(ka===0){if(Ea!==0)throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch$1(Ea));const sl=getArrayFromDType$1(xa,0),ol=getArrayFromDType$1(Sa,0);return[sl,[0,La],ol,Aa,Fa]}let el=!0,tl=0;const nl=new Array(ka).fill(0);for(let sl=0;sl<Ea;++sl){const ol=ha[sl*La];if(ol<0)throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage$1(sl,ol));if(ol>=ka)throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage$1(sl,ol,ka));++nl[ol],el=el&&ol>=tl,tl=ol}let rl=!0;for(let sl=0;sl<ka;++sl){const ol=nl[sl]===0;Aa[sl]=ol,rl=rl&&!ol,nl[sl]=Math.max(nl[sl],1),sl>0&&(nl[sl]+=nl[sl-1])}if(rl&&el){const sl=ha,ol=ba;for(let al=0;al<Ea;++al)Fa[al]=al;return[sl,[Ea,La],ol,Aa,Fa]}else{const sl=nl[ka-1],ol=getArrayFromDType$1(xa,sl*La),al=getArrayFromDType$1(Sa,sl),ll=new Array(ka).fill(0);for(let il=0;il<Ea;++il){const cl=ha[il*La],ul=ll[cl],dl=(cl===0?0:nl[cl-1])+ul;ll[cl]++;for(let hl=0;hl<La;++hl)ol[dl*La+hl]=ha[il*La+hl];al[dl]=ba[il],Fa[il]=dl}for(let il=0;il<ka;++il)if(ll[il]===0){const ul=il===0?0:nl[il-1];ol[ul*La+0]=il;for(let dl=1;dl<La;++dl)ol[ul*La+dl]=0;al[ul]=wa}return[ol,[sl,La],al,Aa,Fa]}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshapeImpl$1(ha,aa,xa,ba,Sa){const Ta=sizeFromShape$1(ba),wa=aa[0],Ea=Sa.length,ka=[];let Aa=1,Fa=-1;for(let sl=0;sl<Ea;++sl){const ol=Sa[sl];if(ol===-1){if(Fa!==-1)throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage$1(Fa,sl));Fa=sl,ka.push(1)}else{if(ol<0)throw new Error(getSparseReshapeNegativeOutputDimErrorMessage$1(sl,ol));Aa*=ol,ka.push(ol)}}if(Fa!==-1){if(Aa<=0)throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage$1());const sl=Math.trunc(Ta/Aa);if(Aa*sl!==Ta)throw new Error(getSparseReshapeInputOutputMultipleErrorMessage$1(ba,ka));ka[Fa]=sl}if(sizeFromShape$1(ka)!==Ta)throw new Error(getSparseReshapeInputOutputMismatchErrorMessage$1(ba,ka));const el=ba.length,tl=[];if(el>0){tl[el-1]=1;for(let sl=el-2;sl>=0;--sl)tl[sl]=tl[sl+1]*ba[sl+1]}const nl=[];if(Ea>0){nl[Ea-1]=1;for(let sl=Ea-2;sl>=0;--sl)nl[sl]=nl[sl+1]*ka[sl+1]}const rl=getArrayFromDType$1(xa,wa*Ea);for(let sl=0;sl<wa;++sl){let ol=0;for(let al=0;al<el;++al)ol+=ha[sl*el+al]*tl[al];for(let al=0;al<Ea;++al)rl[sl*Ea+al]=Math.trunc(ol/nl[al]),ol%=nl[al]}return[rl,[wa,Ea],ka]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentReductionImpl$1(ha,aa,xa,ba,Sa,Ta=!1,wa=0){const Ea=ba.length,ka=[aa[0],ha.length/aa[0]],Aa=ka[1],La=Ea>0?Sa[Ea-1]+1:0;if(La<0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1());const el=aa.slice();el[0]=La;const tl=el.reduce((ll,il)=>ll*il,1),nl=getArrayFromDType$1(xa,tl);if(Ea===0)return La>0&&nl.fill(wa),[nl,el];if(La<=0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage$1());let rl=0,sl=1,ol=0,al=Sa[rl];for(;;){let ll=0;if(sl<Ea){if(ll=Sa[sl],al===ll){++sl;continue}if(al>=ll)throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage$1())}if(al<0||al>=La)throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage$1(al,La));al>ol&&nl.fill(wa,ol*Aa,al*Aa);for(let il=rl;il<sl;++il){const cl=ba[il];if(cl<0||cl>=ka[0])throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage$1(il,ba[il],ka[0]));for(let ul=0;ul<Aa;ul++)nl[al*Aa+ul]+=ha[cl*Aa+ul]}if(Ta)for(let il=0;il<Aa;il++)nl[al*Aa+il]/=sl-rl;if(rl=sl,++sl,ol=al+1,al=ll,sl>Ea)break}return ol<La&&nl.fill(wa,ol*Aa,La*Aa),[nl,el]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtImpl$1=createSimpleUnaryImpl$1(ha=>Math.sqrt(ha)),sqrt$3=unaryKernelFunc$2(Sqrt$1,ha=>Math.sqrt(ha)),sqrtConfig$2={kernelName:Sqrt$1,backendName:"cpu",kernelFunc:sqrt$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>{const xa=ha-aa;return xa*xa}),squaredDifference$2=binaryKernelFunc$2(SquaredDifference$1,squaredDifferenceImpl$1),squaredDifferenceConfig$2={kernelName:SquaredDifference$1,backendName:"cpu",kernelFunc:squaredDifference$2};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const staticRegexReplaceImpl$1=createSimpleUnaryImpl$1((ha,aa)=>{const{pattern:xa,replaceGlobal:ba,rewrite:Sa}=aa;return ha.replace(new RegExp(xa,ba?"g":""),Sa)}),staticRegexReplace$2=unaryKernelFuncFromImpl(StaticRegexReplace$1,staticRegexReplaceImpl$1),staticRegexReplaceConfig$2={kernelName:StaticRegexReplace$1,backendName:"cpu",kernelFunc:staticRegexReplace$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSliceImpl$1(ha,aa,xa,ba){const Sa=buffer$1(ha,aa.dtype);for(let Ta=0;Ta<Sa.size;Ta++){const wa=Sa.indexToLoc(Ta),Ea=new Array(wa.length);for(let ka=0;ka<Ea.length;ka++)Ea[ka]=wa[ka]*xa[ka]+ba[ka];Sa.set(aa.get(...Ea),...wa)}return Sa}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let StringNGramsOp$1=class{constructor(aa,xa,ba,Sa,Ta,wa){this.separator=encodeString$1(aa),this.nGramWidths=xa,this.leftPad=encodeString$1(ba),this.rightPad=encodeString$1(Sa),this.padWidth=Ta,this.preserveShort=wa}getPadWidth(aa){return Math.min(this.padWidth<0?aa-1:this.padWidth,aa-1)}getNumNGrams(aa,xa){const ba=this.getPadWidth(xa);return Math.max(0,aa+2*ba-xa+1)}createNGrams(aa,xa,ba,Sa,Ta,wa){for(let Ea=0;Ea<Ta;++Ea){const ka=this.getPadWidth(wa),Aa=Math.max(0,ka-Ea),Fa=Math.max(0,ka-(Ta-(Ea+1))),La=wa-(Aa+Fa),el=xa+(Aa>0?0:Ea-ka);let tl=0;tl+=Aa*this.leftPad.length;for(let al=0;al<La;++al)tl+=aa[el+al].length;tl+=Fa*this.rightPad.length;const nl=Aa+Fa+La-1;tl+=nl*this.separator.length,ba[Sa+Ea]=new Uint8Array(tl);const rl=ba[Sa+Ea];let sl=0;const ol=al=>al.forEach(ll=>rl[sl++]=ll);for(let al=0;al<Aa;++al)ol(this.leftPad),ol(this.separator);for(let al=0;al<La-1;++al)ol(aa[el+al]),ol(this.separator);if(La>0){ol(aa[el+La-1]);for(let al=0;al<Fa;++al)ol(this.separator),ol(this.rightPad)}else{for(let al=0;al<Fa-1;++al)ol(this.rightPad),ol(this.separator);ol(this.rightPad)}}}compute(aa,xa){const ba=aa.length,Sa=xa.length;if(Sa>0){let ka=xa[0];if(ka!==0)throw new Error(`First split value must be 0, got ${ka}`);for(let Aa=1;Aa<Sa;++Aa){let Fa=xa[Aa]>=ka;if(Fa=Fa&&xa[Aa]<=ba,!Fa)throw new Error(`Invalid split value ${xa[Aa]}, must be in [${ka}, ${ba}]`);ka=xa[Aa]}if(ka!==ba)throw new Error(`Last split value must be data size. Expected ${ba}, got ${ka}`)}const Ta=Sa-1,wa=getArrayFromDType$1("int32",Sa);if(ba===0||Sa===0){const ka=new Array(ba);for(let Aa=0;Aa<=Ta;++Aa)wa[Aa]=0;return[ka,wa]}wa[0]=0;for(let ka=1;ka<=Ta;++ka){const Aa=xa[ka]-xa[ka-1];let Fa=0;this.nGramWidths.forEach(La=>{Fa+=this.getNumNGrams(Aa,La)}),this.preserveShort&&Aa>0&&Fa===0&&(Fa=1),wa[ka]=wa[ka-1]+Fa}const Ea=new Array(wa[Ta]);for(let ka=0;ka<Ta;++ka){const Aa=xa[ka];let Fa=wa[ka];if(this.nGramWidths.forEach(La=>{const el=xa[ka+1]-xa[ka],tl=this.getNumNGrams(el,La);this.createNGrams(aa,Aa,Ea,Fa,tl,La),Fa+=tl}),this.preserveShort&&Fa===wa[ka]){const La=xa[ka+1]-xa[ka];if(La===0)continue;const el=La+2*this.padWidth;this.createNGrams(aa,Aa,Ea,Fa,1,el)}}return[Ea,wa]}};function stringNGramsImpl$1(ha,aa,xa,ba,Sa,Ta,wa,Ea){return new StringNGramsOp$1(xa,ba,Sa,Ta,wa,Ea).compute(ha,aa)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split$1(ha,aa,xa,ba){if(!ha.length)return;if(aa.length===0){for(let Ta=0;Ta<ha.length;++Ta)ba.push(ha.subarray(Ta,Ta+1));return}if(aa.length===1){const Ta=aa[0];let wa=ha.indexOf(Ta);for(;wa!==-1;){const Ea=ha.subarray(0,wa);(!xa||Ea.length!==0)&&ba.push(Ea),ha=ha.subarray(wa+1),wa=ha.indexOf(Ta)}(!xa||ha.length!==0)&&ba.push(ha);return}let Sa=0;for(let Ta=0;Ta<ha.length+1;Ta++)if(Ta===ha.length||aa.indexOf(ha[Ta])!==-1){const wa=ha.subarray(Sa,Ta);(!xa||wa.length!==0)&&ba.push(wa),Sa=Ta+1}}function stringSplitImpl$1(ha,aa,xa){const ba=ha.length,Sa=[];let Ta=0,wa=0;const Ea=new Array(ba);for(let el=0;el<ba;++el){const tl=Sa.length;split$1(ha[el],aa,xa,Sa);const nl=Sa.length-tl;Ea[el]=nl,Ta+=nl,wa=Math.max(wa,nl)}const ka=getArrayFromDType$1("int32",Ta*2),Aa=new Array(Ta),Fa=[ba,wa];let La=0;for(let el=0;el<ba;++el)for(let tl=0;tl<Ea[el];++tl)ka[La*2]=el,ka[La*2+1]=tl,Aa[La]=Sa[La],++La;return[ka,Aa,Fa]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFastImpl$1(ha,aa){const xa=getArrayFromDType$1("int32",ha.length);for(let ba=0;ba<ha.length;++ba)xa[ba]=fingerPrint64$1(ha[ba]).modulo(aa).getLowBitsUnsigned();return xa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subImpl$1=createSimpleBinaryKernelImpl$1((ha,aa)=>ha-aa),subComplexImpl=createComplexBinaryKernelImpl((ha,aa,xa,ba)=>({real:ha-xa,imag:aa-ba})),sub$3=binaryKernelFunc$2(Sub$1,subImpl$1,subComplexImpl),subConfig$2={kernelName:Sub$1,backendName:"cpu",kernelFunc:sub$3};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tileImpl$1(ha,aa){const xa=new Array(ha.rank);for(let Sa=0;Sa<xa.length;Sa++)xa[Sa]=ha.shape[Sa]*aa[Sa];const ba=buffer$1(xa,ha.dtype);for(let Sa=0;Sa<ba.values.length;++Sa){const Ta=ba.indexToLoc(Sa),wa=new Array(ha.rank);for(let ka=0;ka<wa.length;ka++)wa[ka]=Ta[ka]%ha.shape[ka];const Ea=ha.locToIndex(wa);ba.values[Sa]=ha.values[Ea]}return ba}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const comparePair$1=(ha,aa)=>{const xa=aa.value-ha.value;return xa===0?ha.index-aa.index:xa};function select$4(ha,aa,xa=0,ba=ha.length-1){for(;ba>xa;){if(ba-xa>600){const Ea=ba-xa+1,ka=aa-xa+1,Aa=Math.log(Ea),Fa=.5*Math.exp(2*Aa/3),La=.5*Math.sqrt(Aa*Fa*(Ea-Fa)/Ea)*Math.sign(ka-Ea/2),el=Math.max(xa,Math.floor(aa-ka*Fa/Ea+La)),tl=Math.min(ba,Math.floor(aa+(Ea-ka)*Fa/Ea+La));select$4(ha,aa,el,tl)}const Sa=ha[aa];let Ta=xa,wa=ba;for(swap$1(ha,xa,aa),comparePair$1(ha[ba],Sa)>0&&swap$1(ha,xa,ba);Ta<wa;){for(swap$1(ha,Ta,wa),Ta++,wa--;comparePair$1(ha[Ta],Sa)<0;)Ta=Ta+1;for(;comparePair$1(ha[wa],Sa)>0;)wa=wa-1}comparePair$1(ha[xa],Sa)===0?swap$1(ha,xa,wa):(wa=wa+1,swap$1(ha,wa,ba)),wa<=aa&&(xa=wa+1),aa<=wa&&(ba=wa-1)}}function topKImpl$1(ha,aa,xa,ba,Sa){const Ta=aa[aa.length-1],[wa,Ea]=[ha.length/Ta,Ta],ka=getTypedArrayFromDType$1(xa,wa*ba),Aa=getTypedArrayFromDType$1("int32",wa*ba);for(let La=0;La<wa;La++){const el=La*Ea,tl=ha.subarray(el,el+Ea);let nl=new Array(tl.length);tl.forEach((al,ll)=>nl[ll]={value:al,index:ll}),ba<nl.length&&(select$4(nl,ba),nl=nl.slice(0,ba)),Sa&&nl.sort(comparePair$1);const rl=La*ba,sl=ka.subarray(rl,rl+ba),ol=Aa.subarray(rl,rl+ba);for(let al=0;al<ba;al++)sl[al]=nl[al].value,ol[al]=nl[al].index}const Fa=aa.slice();return Fa[Fa.length-1]=ba,[buffer$1(Fa,xa,ka),buffer$1(Fa,"int32",Aa)]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function uniqueImpl$1(ha,aa,xa,ba){const Sa=parseAxisParam$1(aa,xa)[0],Ta=[1,xa[0],1];for(let nl=0;nl<Sa;nl++)Ta[0]*=xa[nl];Ta[1]=xa[Sa];for(let nl=Sa+1;nl<xa.length;nl++)Ta[2]*=xa[nl];const wa=new Map,Ea=new Int32Array(xa[Sa]),ka=new TensorBuffer$1(Ta,ba,ha),Aa=[],Fa=Ta[0]===1&&Ta[2]===1;for(let nl=0;nl<xa[Sa];nl++){let rl;if(Fa)rl=ha[nl].toString();else{const ol=[];for(let al=0;al<Ta[0];al++)for(let ll=0;ll<Ta[2];ll++)ol.push(ka.get(al,nl,ll));rl=ol.join(",")}const sl=wa.get(rl);if(sl!=null)Ea[nl]=sl;else{const ol=wa.size;wa.set(rl,ol),Ea[nl]=ol,Aa.push(nl)}}const La=Ta.slice();La[1]=wa.size;const el=new TensorBuffer$1(La,ba);Aa.forEach((nl,rl)=>{for(let sl=0;sl<Ta[0];sl++)for(let ol=0;ol<Ta[2];ol++)el.set(ka.get(sl,nl,ol),sl,rl,ol)});const tl=xa.slice();return tl[Sa]=La[1],{outputValues:el.values,outputShape:tl,indices:Ea}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var shared$1=Object.freeze({__proto__:null,addImpl:addImpl$1,bincountImpl:bincountImpl$1,bincountReduceImpl:bincountReduceImpl$1,bitwiseAndImpl:bitwiseAndImpl$1,castImpl:castImpl$1,ceilImpl:ceilImpl$1,concatImpl:concatImpl$3,equalImpl:equalImpl$1,expImpl:expImpl$1,expm1Impl:expm1Impl$1,floorDivImpl:floorDivImpl$1,floorImpl:floorImpl$1,gatherNdImpl:gatherNdImpl$1,gatherV2Impl:gatherV2Impl$1,greaterEqualImpl:greaterEqualImpl$1,greaterImpl:greaterImpl$1,lessEqualImpl:lessEqualImpl$1,lessImpl:lessImpl$1,linSpaceImpl:linSpaceImpl$1,logImpl:logImpl$1,maxImpl:maxImpl$3,maximumImpl:maximumImpl$1,minimumImpl:minimumImpl$1,multiplyImpl:multiplyImpl$1,negImpl:negImpl$1,notEqualImpl:notEqualImpl$1,prodImpl:prodImpl$1,raggedGatherImpl:raggedGatherImpl$1,raggedRangeImpl:raggedRangeImpl$1,raggedTensorToTensorImpl:raggedTensorToTensorImpl$1,rangeImpl:rangeImpl$1,rsqrtImpl:rsqrtImpl$1,scatterImpl:scatterImpl$1,sigmoidImpl:sigmoidImpl$1,simpleAbsImpl:simpleAbsImpl$1,sliceImpl:sliceImpl$1,sparseFillEmptyRowsImpl:sparseFillEmptyRowsImpl$1,sparseReshapeImpl:sparseReshapeImpl$1,sparseSegmentReductionImpl:sparseSegmentReductionImpl$1,sqrtImpl:sqrtImpl$1,squaredDifferenceImpl:squaredDifferenceImpl$1,staticRegexReplaceImpl:staticRegexReplaceImpl$1,stridedSliceImpl:stridedSliceImpl$1,stringNGramsImpl:stringNGramsImpl$1,stringSplitImpl:stringSplitImpl$1,stringToHashBucketFastImpl:stringToHashBucketFastImpl$1,subImpl:subImpl$1,tileImpl:tileImpl$1,topKImpl:topKImpl$1,transposeImpl:transposeImpl$3,uniqueImpl:uniqueImpl$1});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerBackend$1("cpu",()=>new MathBackendCPU,1);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const elu$3=unaryKernelFunc$2(Elu$2,ha=>ha>=0?ha:Math.exp(ha)-1),eluConfig$2={kernelName:Elu$2,backendName:"cpu",kernelFunc:elu$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu$3(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{alpha:Ta}=ba;assertNotComplex$2([Sa],"leakyRelu");const wa=sizeFromShape$1(Sa.shape),Ea=xa.data.get(Sa.dataId).values,ka=getTypedArrayFromDType$1("float32",wa);for(let Aa=0;Aa<Ea.length;Aa++)ka[Aa]=Ea[Aa]<0?Ta*Ea[Aa]:Ea[Aa];return xa.makeTensorInfo(Sa.shape,"float32",ka)}const leakyReluConfig$2={kernelName:LeakyRelu$1,backendName:"cpu",kernelFunc:leakyRelu$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const preluImpl=createSimpleBinaryKernelImpl$1((ha,aa)=>ha<0?aa*ha:ha);function prelu$3(ha){const{inputs:aa,backend:xa}=ha,{x:ba,alpha:Sa}=aa;assertNotComplex$2([ba,Sa],"prelu");const Ta=xa.data.get(ba.dataId).values,wa=xa.data.get(Sa.dataId).values,[Ea,ka]=preluImpl(ba.shape,Sa.shape,Ta,wa,"float32");return xa.makeTensorInfo(ka,"float32",Ea)}const preluConfig$2={kernelName:Prelu$1,backendName:"cpu",kernelFunc:prelu$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu$3=unaryKernelFunc$2(Relu$2,ha=>Math.max(0,ha)),reluConfig$2={kernelName:Relu$2,backendName:"cpu",kernelFunc:relu$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const relu6$3=unaryKernelFunc$2(Relu6$2,ha=>Math.min(Math.max(0,ha),6)),relu6Config$2={kernelName:Relu6$2,backendName:"cpu",kernelFunc:relu6$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function applyActivation$1(ha,aa,xa,ba,Sa){if(xa==="linear")return identity$2({inputs:{x:aa},backend:ha});if(xa==="relu")return relu$3({inputs:{x:aa},backend:ha});if(xa==="elu")return elu$3({inputs:{x:aa},backend:ha});if(xa==="relu6")return relu6$3({inputs:{x:aa},backend:ha});if(xa==="prelu")return prelu$3({inputs:{x:aa,alpha:ba},backend:ha});if(xa==="leakyrelu")return leakyRelu$3({inputs:{x:aa},backend:ha,attrs:{alpha:Sa}});if(xa==="sigmoid")return sigmoid$3({inputs:{x:aa},backend:ha});throw new Error(`Activation ${xa} has not been implemented for the CPU backend.`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape$3(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{shape:Ta}=ba,wa=sizeFromShape$1(Sa.shape),Ea=inferFromImplicitShape$1(Ta,wa),ka=sizeFromShape$1(Ea);assert$2(wa===ka,()=>`The new shape (${Ea}) has ${ka} elements and the old shape (${Sa.shape}) has ${wa} elements. The new shape and old shape must have the same number of elements.`),xa.incRef(Sa.dataId);const Aa=xa.data.get(Sa.dataId);if(Aa.complexTensorInfos!=null){const Fa=Aa.complexTensorInfos.real,La=Aa.complexTensorInfos.imag;Fa.shape=Ea,La.shape=Ea}return{dataId:Sa.dataId,shape:Ea,dtype:Sa.dtype}}const reshapeConfig$2={kernelName:Reshape$2,backendName:"cpu",kernelFunc:reshape$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{a:Sa,b:Ta}=aa,{transposeA:wa,transposeB:Ea}=ba;assertNotComplex$2([Sa,Ta],"matMul");const ka=Sa.shape.length,Aa=Ta.shape.length,Fa=wa?Sa.shape[ka-2]:Sa.shape[ka-1],La=Ea?Ta.shape[Aa-1]:Ta.shape[Aa-2],el=wa?Sa.shape[ka-1]:Sa.shape[ka-2],tl=Ea?Ta.shape[Aa-2]:Ta.shape[Aa-1],nl=Sa.shape.slice(0,-2),rl=Ta.shape.slice(0,-2),sl=sizeFromShape$1(nl),ol=sizeFromShape$1(rl),ll=assertAndGetBroadcastShape$1(Sa.shape.slice(0,-2),Ta.shape.slice(0,-2)).concat([el,tl]);assert$2(Fa===La,()=>`Error in matMul: inner shapes (${Fa}) and (${La}) of Tensors with shapes ${Sa.shape} and ${Ta.shape} and transposeA=${wa} and transposeB=${Ea} must match.`);const il=wa?[sl,Fa,el]:[sl,el,Fa],cl=Ea?[ol,tl,La]:[ol,La,tl],ul=reshape$3({inputs:{x:Sa},backend:xa,attrs:{shape:il}}),dl=reshape$3({inputs:{x:Ta},backend:xa,attrs:{shape:cl}}),hl=wa?ul.shape[1]:ul.shape[2],pl=wa?ul.shape[2]:ul.shape[1],fl=Ea?dl.shape[1]:dl.shape[2],ml=Math.max(sl,ol),gl=xa.data.get(ul.dataId).values,$l=xa.data.get(dl.dataId).values,xl=computeStrides$1(ul.shape),yl=computeStrides$1(dl.shape),[bl,Sl,Cl]=wa?[xl[0],1,xl[1]]:[xl[0],xl[1],1],[Tl,Il,wl]=Ea?[1,yl[1],yl[0]]:[yl[1],1,yl[0]],Nl=pl*fl,vl=buffer$1([ml,pl,fl],ul.dtype),kl=vl.values,El=xa.blockSize;for(let Al=0;Al<ml;Al++){const Rl=Al%sl,Pl=Al%ol;for(let Dl=0;Dl<pl;Dl+=El){const _l=Math.min(Dl+El,pl);for(let Fl=0;Fl<fl;Fl+=El){const Ol=Math.min(Fl+El,fl);for(let Ml=0;Ml<hl;Ml+=El){const Ul=Math.min(Ml+El,hl);for(let Bl=Dl;Bl<_l;Bl++)for(let Ll=Fl;Ll<Ol;Ll++){let zl=0;for(let Vl=Ml;Vl<Ul;Vl++){const ql=gl[Rl*bl+Bl*Sl+Vl*Cl],Gl=$l[Vl*Tl+Ll*Il+Pl*wl];zl+=ql*Gl}kl[Al*Nl+(Bl*fl+Ll)]+=zl}}}}}return xa.disposeIntermediateTensorInfo(ul),xa.disposeIntermediateTensorInfo(dl),xa.makeTensorInfo(ll,vl.dtype,vl.values)}const batchMatMulConfig$2={kernelName:BatchMatMul$1,backendName:"cpu",kernelFunc:batchMatMul$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{a:Sa,b:Ta,bias:wa,preluActivationWeights:Ea}=aa,{transposeA:ka,transposeB:Aa,activation:Fa,leakyreluAlpha:La}=ba;let el,tl,nl;const rl=[];el=batchMatMul$2({inputs:{a:Sa,b:Ta},attrs:{transposeA:ka,transposeB:Aa},backend:xa}),wa&&(tl=add$2({inputs:{a:el,b:wa},backend:xa}),rl.push(el),el=tl),Fa&&(nl=applyActivation$1(xa,el,Fa,Ea,La),rl.push(el),el=nl);for(const ol of rl)xa.disposeIntermediateTensorInfo(ol);return el}const _fusedMatMulConfig$2={kernelName:_FusedMatMul$1,backendName:"cpu",kernelFunc:_fusedMatMul$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acos$2=unaryKernelFunc$2(Acos$1,ha=>Math.acos(ha)),acosConfig$2={kernelName:Acos$1,backendName:"cpu",kernelFunc:acos$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const acosh$2=unaryKernelFunc$2(Acosh$1,ha=>Math.acosh(ha)),acoshConfig$2={kernelName:Acosh$1,backendName:"cpu",kernelFunc:acosh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN$2(ha){const{inputs:aa,backend:xa}=ha,ba=aa;assertNotComplex$2(aa,"addN");const Sa=ba.map(Ea=>xa.data.get(Ea.dataId).values),Ta=buffer$1(ba[0].shape,ba[0].dtype),wa=Ta.values;for(let Ea=0;Ea<ba.length;Ea++){const ka=Sa[Ea];for(let Aa=0;Aa<wa.length;Aa++)wa[Aa]+=ka[Aa]}return xa.makeTensorInfo(Ta.shape,Ta.dtype,Ta.values)}const addNConfig$2={kernelName:AddN$1,backendName:"cpu",kernelFunc:addN$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;assertNotComplex$2(Sa,"all");const Ea=parseAxisParam$1(Ta,Sa.shape);let ka=Ea;const Aa=getAxesPermutation$1(ka,Sa.shape.length);let Fa=Sa;Aa!=null&&(Fa=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:Aa}}),ka=getInnerMostAxes$1(ka.length,Sa.shape.length)),assertAxesAreInnerMostDims$1("all",ka,Fa.shape.length);const[La,el]=computeOutAndReduceShapes$1(Fa.shape,ka),tl=sizeFromShape$1(el),nl=makeZerosTypedArray$1(sizeFromShape$1(La),Fa.dtype),rl=xa.data.get(Fa.dataId).values;for(let ol=0;ol<nl.length;++ol){const al=ol*tl;let ll=rl[al];for(let il=0;il<tl;++il){const cl=rl[al+il];ll=ll&&cl}nl[ol]=ll}Aa!=null&&xa.disposeIntermediateTensorInfo(Fa);const sl=xa.makeTensorInfo(La,Fa.dtype,nl);if(wa){const ol=expandShapeToKeepDim$1(La,Ea),al=reshape$3({inputs:{x:sl},backend:xa,attrs:{shape:ol}});return xa.disposeIntermediateTensorInfo(sl),al}return sl}const allConfig$2={kernelName:All$1,backendName:"cpu",kernelFunc:all$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;assertNotComplex$2(Sa,"any");const Ea=parseAxisParam$1(Ta,Sa.shape);let ka=Ea;const Aa=getAxesPermutation$1(ka,Sa.shape.length);let Fa=Sa;Aa!=null&&(Fa=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:Aa}}),ka=getInnerMostAxes$1(ka.length,Sa.shape.length)),assertAxesAreInnerMostDims$1("any",ka,Fa.shape.length);const[La,el]=computeOutAndReduceShapes$1(Fa.shape,ka),tl=sizeFromShape$1(el),nl=makeZerosTypedArray$1(sizeFromShape$1(La),Fa.dtype),rl=xa.data.get(Fa.dataId).values;for(let ol=0;ol<nl.length;++ol){const al=ol*tl;let ll=rl[al];for(let il=0;il<tl;++il){const cl=rl[al+il];ll=ll||cl}nl[ol]=ll}Aa!=null&&xa.disposeIntermediateTensorInfo(Fa);const sl=xa.makeTensorInfo(La,Fa.dtype,nl);if(wa){const ol=expandShapeToKeepDim$1(La,Ea),al=reshape$3({inputs:{x:sl},backend:xa,attrs:{shape:ol}});return xa.disposeIntermediateTensorInfo(sl),al}return sl}const anyConfig$2={kernelName:Any$1,backendName:"cpu",kernelFunc:any$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta}=ba;assertNotComplex$2(Sa,"argMax");let wa=parseAxisParam$1(Ta,Sa.shape);const Ea=getAxesPermutation$1(wa,Sa.shape.length);let ka=Sa;const Aa=[];Ea!=null&&(ka=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:Ea}}),Aa.push(ka),wa=getInnerMostAxes$1(wa.length,ka.shape.length)),wa=[wa[0]],assertAxesAreInnerMostDims$1("argMax",wa,ka.shape.length);const[Fa,La]=computeOutAndReduceShapes$1(ka.shape,wa),el=sizeFromShape$1(Fa),tl=makeZerosTypedArray$1(el,"int32"),nl=sizeFromShape$1(La),rl=xa.data.get(ka.dataId).values;for(let sl=0;sl<tl.length;++sl){const ol=sl*nl;let al=rl[ol],ll=0;for(let il=0;il<nl;++il){const cl=rl[ol+il];cl>al&&(al=cl,ll=il)}tl[sl]=ll}return Aa.forEach(sl=>xa.disposeIntermediateTensorInfo(sl)),xa.makeTensorInfo(Fa,"int32",tl)}const argMaxConfig$2={kernelName:ArgMax$1,backendName:"cpu",kernelFunc:argMax$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta}=ba;assertNotComplex$2(Sa,"argMin");let wa=parseAxisParam$1(Ta,Sa.shape);const Ea=getAxesPermutation$1(wa,Sa.shape.length);let ka=Sa;const Aa=[];Ea!=null&&(ka=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:Ea}}),Aa.push(ka),wa=getInnerMostAxes$1(wa.length,ka.shape.length)),wa=[wa[0]],assertAxesAreInnerMostDims$1("argMin",wa,ka.shape.length);const[Fa,La]=computeOutAndReduceShapes$1(ka.shape,wa),el=sizeFromShape$1(Fa),tl=makeZerosTypedArray$1(el,"int32"),nl=sizeFromShape$1(La),rl=xa.data.get(ka.dataId).values;for(let sl=0;sl<tl.length;++sl){const ol=sl*nl;let al=rl[ol],ll=0;for(let il=0;il<nl;++il){const cl=rl[ol+il];cl<al&&(al=cl,ll=il)}tl[sl]=ll}return Aa.forEach(sl=>xa.disposeIntermediateTensorInfo(sl)),xa.makeTensorInfo(Fa,"int32",tl)}const argMinConfig$2={kernelName:ArgMin$1,backendName:"cpu",kernelFunc:argMin$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asin$2=unaryKernelFunc$2(Asin$1,ha=>Math.asin(ha)),asinConfig$2={kernelName:Asin$1,backendName:"cpu",kernelFunc:asin$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const asinh$2=unaryKernelFunc$2(Asinh$1,ha=>Math.asinh(ha)),asinhConfig$2={kernelName:Asinh$1,backendName:"cpu",kernelFunc:asinh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan$2=unaryKernelFunc$2(Atan$1,ha=>Math.atan(ha)),atanConfig$2={kernelName:Atan$1,backendName:"cpu",kernelFunc:atan$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atan2Impl=createSimpleBinaryKernelImpl$1((ha,aa)=>Math.atan2(ha,aa)),atan2$2=binaryKernelFunc$2(Atan2$1,atan2Impl),atan2Config$2={kernelName:Atan2$1,backendName:"cpu",kernelFunc:atan2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const atanh$2=unaryKernelFunc$2(Atanh$1,ha=>Math.atanh(ha)),atanhConfig$2={kernelName:Atanh$1,backendName:"cpu",kernelFunc:atanh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pool(ha,aa,xa,ba,Sa,Ta){const wa=Sa.strideHeight,Ea=Sa.strideWidth,ka=Sa.dilationHeight,Aa=Sa.dilationWidth,Fa=Sa.effectiveFilterHeight,La=Sa.effectiveFilterWidth,el=Sa.padInfo.top,tl=Sa.padInfo.left,nl=Ta==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,rl=buffer$1(Sa.outShape,xa),sl=rl.values,ol=Sa.outShape[1]*Sa.outShape[2]*Sa.outShape[3],al=Sa.outShape[2]*Sa.outShape[3],ll=Sa.outShape[3];for(let il=0;il<Sa.batchSize;++il){const cl=il*ol,ul=il*ba[0];for(let dl=0;dl<Sa.inChannels;++dl)for(let hl=0;hl<Sa.outHeight;++hl){const pl=hl*wa-el,fl=Math.max(0,pl),ml=Math.min(Sa.inHeight,Fa+pl),gl=cl+hl*al;for(let $l=0;$l<Sa.outWidth;++$l){const xl=$l*Ea-tl,yl=Math.max(0,xl),bl=Math.min(Sa.inWidth,La+xl);let Sl=nl,Cl=0,Tl=0;for(let wl=fl;wl<ml;wl+=ka){const Nl=ul+wl*ba[1];for(let vl=yl;vl<bl;vl+=Aa){const kl=Nl+vl*ba[2],El=ha[kl+dl];Ta==="max"&&El>Sl?Sl=El:Ta==="avg"&&(Cl+=El,Tl++)}if(isNaN(Sl))break}const Il=gl+$l*ll+dl;sl[Il]=Ta==="avg"?Cl/Tl:Sl}}}return rl}function maxPoolPositions(ha,aa,xa,ba,Sa=!1,Ta=!1){const wa=buffer$1(ba.outShape,"int32"),Ea=ba.strideHeight,ka=ba.strideWidth,Aa=ba.dilationHeight,Fa=ba.dilationWidth,La=ba.effectiveFilterHeight,el=ba.effectiveFilterWidth,tl=ba.padInfo.top,nl=ba.padInfo.left,rl=buffer$1(aa,xa,ha);for(let sl=0;sl<ba.batchSize;++sl)for(let ol=0;ol<ba.inChannels;++ol)for(let al=0;al<ba.outHeight;++al){const ll=al*Ea-tl;let il=ll;for(;il<0;)il+=Aa;const cl=Math.min(ba.inHeight,La+ll);for(let ul=0;ul<ba.outWidth;++ul){const dl=ul*ka-nl;let hl=dl;for(;hl<0;)hl+=Fa;const pl=Math.min(ba.inWidth,el+dl);let fl=Number.NEGATIVE_INFINITY,ml=-1;for(let gl=il;gl<cl;gl+=Aa){const $l=gl-ll;for(let xl=hl;xl<pl;xl+=Fa){const yl=xl-dl,bl=rl.get(sl,gl,xl,ol);bl>fl&&(fl=bl,Sa?ml=Ta?((sl*ba.inHeight+gl)*ba.inWidth+xl)*ba.inChannels+ol:(gl*ba.inWidth+xl)*ba.inChannels+ol:ml=$l*el+yl)}}wa.set(ml,sl,al,ul,ol)}}return wa}function pool3d(ha,aa,xa,ba,Sa,Ta){const wa=Sa.strideDepth,Ea=Sa.strideHeight,ka=Sa.strideWidth,Aa=Sa.dilationDepth,Fa=Sa.dilationHeight,La=Sa.dilationWidth,el=Sa.effectiveFilterDepth,tl=Sa.effectiveFilterHeight,nl=Sa.effectiveFilterWidth,rl=Sa.padInfo.front,sl=Sa.padInfo.top,ol=Sa.padInfo.left,al=Ta==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,ll=buffer$1(Sa.outShape,xa),il=ll.values,cl=Sa.outShape[1]*Sa.outShape[2]*Sa.outShape[3]*Sa.outShape[4],ul=Sa.outShape[2]*Sa.outShape[3]*Sa.outShape[4],dl=Sa.outShape[3]*Sa.outShape[4],hl=Sa.outShape[4];for(let pl=0;pl<Sa.batchSize;++pl){const fl=pl*cl,ml=pl*ba[0];for(let gl=0;gl<Sa.inChannels;++gl)for(let $l=0;$l<Sa.outDepth;++$l){const xl=$l*wa-rl;let yl=xl;for(;yl<0;)yl+=Aa;const bl=Math.min(Sa.inDepth,el+xl),Sl=fl+$l*ul;for(let Cl=0;Cl<Sa.outHeight;++Cl){const Tl=Cl*Ea-sl;let Il=Tl;for(;Il<0;)Il+=Fa;const wl=Math.min(Sa.inHeight,tl+Tl),Nl=Sl+Cl*dl;for(let vl=0;vl<Sa.outWidth;++vl){const kl=vl*ka-ol;let El=kl;for(;El<0;)El+=La;const Al=Math.min(Sa.inWidth,nl+kl),Rl=Nl+vl*hl;let Pl=al,Dl=0,_l=0;for(let Ol=yl;Ol<bl;Ol+=Aa){const Ml=ml+Ol*ba[1];for(let Ul=Il;Ul<wl;Ul+=Fa){const Bl=Ml+Ul*ba[2];for(let Ll=El;Ll<Al;Ll+=La){const zl=Bl+Ll*ba[3],Vl=ha[zl+gl];if(Ta==="max"&&Vl>Pl?Pl=Vl:Ta==="avg"&&(Dl+=Vl,_l++),isNaN(Pl))break}if(isNaN(Pl))break}if(isNaN(Pl))break}const Fl=Rl+gl;il[Fl]=Ta==="avg"?Dl/Math.max(_l,1):Pl}}}}return ll}function maxPool3dPositions(ha,aa){const xa=buffer$1(aa.outShape,"int32"),ba=aa.strideDepth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=aa.dilationDepth,Ea=aa.dilationHeight,ka=aa.dilationWidth,Aa=aa.effectiveFilterDepth,Fa=aa.effectiveFilterHeight,La=aa.effectiveFilterWidth,el=aa.padInfo.front,tl=aa.padInfo.top,nl=aa.padInfo.left;for(let rl=0;rl<aa.batchSize;++rl)for(let sl=0;sl<aa.inChannels;++sl)for(let ol=0;ol<aa.outDepth;++ol){const al=ol*ba-el;let ll=al;for(;ll<0;)ll+=wa;const il=Math.min(aa.inDepth,Aa+al);for(let cl=0;cl<aa.outHeight;++cl){const ul=cl*Sa-tl;let dl=ul;for(;dl<0;)dl+=Ea;const hl=Math.min(aa.inHeight,Fa+ul);for(let pl=0;pl<aa.outWidth;++pl){const fl=pl*Ta-nl;let ml=fl;for(;ml<0;)ml+=ka;const gl=Math.min(aa.inWidth,La+fl);let $l=Number.NEGATIVE_INFINITY,xl=-1;for(let yl=ll;yl<il;yl+=wa){const bl=yl-al;for(let Sl=dl;Sl<hl;Sl+=Ea){const Cl=Sl-ul;for(let Tl=ml;Tl<gl;Tl+=ka){const Il=Tl-fl,wl=ha.get(rl,yl,Sl,Tl,sl);wl>=$l&&($l=wl,xl=bl*Fa*La+Cl*Fa+Il)}}}xa.set(xl,rl,ol,cl,pl,sl)}}}return xa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;assertNotComplex$2(Sa,"avgPool");const{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=ba,Aa=1;assert$2(eitherStridesOrDilationsAreOne$1(wa,Aa),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Aa}'`);const Fa=computePool2DInfo$1(Sa.shape,Ta,wa,Aa,Ea,ka);let La;if(Fa.filterWidth===1&&Fa.filterHeight===1&&arraysEqual$1(Fa.inShape,Fa.outShape))La=identity$2({inputs:{x:Sa},backend:xa});else{const el=xa.data.get(Sa.dataId).values,tl=computeStrides$1(Sa.shape),nl=pool(el,Sa.shape,Sa.dtype,tl,Fa,"avg");La=xa.makeTensorInfo(Fa.outShape,Sa.dtype,nl.values)}return La}const avgPoolConfig$2={kernelName:AvgPool$1,backendName:"cpu",kernelFunc:avgPool$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka,dataFormat:Aa}=ba;assertNotComplex$2(Sa,"avgPool3d");const Fa=computePool3DInfo$1(Sa.shape,Ta,wa,1,Ea,ka,Aa),La=xa.data.get(Sa.dataId).values,el=pool3d(La,Sa.shape,Sa.dtype,computeStrides$1(Sa.shape),Fa,"avg");return xa.makeTensorInfo(el.shape,"float32",el.values)}const avgPool3DConfig$2={kernelName:AvgPool3D$1,backendName:"cpu",kernelFunc:avgPool3D$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,{filterSize:wa,strides:Ea,pad:ka,dimRoundingMode:Aa}=ba;assertNotComplex$2([Sa,Ta],"avgPool3DGrad");const Fa=computePool3DInfo$1(Ta.shape,wa,Ea,1,ka,Aa),La=Fa.strideDepth,el=Fa.strideHeight,tl=Fa.strideWidth,nl=Fa.filterDepth,rl=Fa.filterHeight,sl=Fa.filterWidth,ol=Fa.dilationDepth,al=Fa.dilationHeight,ll=Fa.dilationWidth,il=Fa.effectiveFilterDepth,cl=Fa.effectiveFilterHeight,ul=Fa.effectiveFilterWidth,dl=il-1-Fa.padInfo.front,hl=ul-1-Fa.padInfo.left,pl=cl-1-Fa.padInfo.top,fl=buffer$1(Ta.shape,"float32"),ml=1/(nl*rl*sl),gl=xa.bufferSync(Sa);for(let $l=0;$l<Fa.batchSize;++$l)for(let xl=0;xl<Fa.inChannels;++xl)for(let yl=0;yl<Fa.inDepth;++yl)for(let bl=0;bl<Fa.inHeight;++bl)for(let Sl=0;Sl<Fa.inWidth;++Sl){const Cl=yl-dl,Tl=bl-pl,Il=Sl-hl;let wl=0;for(let Nl=0;Nl<il;Nl+=ol){const vl=(Cl+Nl)/La;if(!(vl<0||vl>=Fa.outDepth||Math.floor(vl)!==vl))for(let kl=0;kl<cl;kl+=al){const El=(Tl+kl)/el;if(!(El<0||El>=Fa.outHeight||Math.floor(El)!==El))for(let Al=0;Al<ul;Al+=ll){const Rl=(Il+Al)/tl;if(Rl<0||Rl>=Fa.outWidth||Math.floor(Rl)!==Rl)continue;const Pl=gl.get($l,vl,El,Rl,xl);wl+=Pl}}}fl.set(wl*ml,$l,yl,bl,Sl,xl)}return xa.makeTensorInfo(fl.shape,fl.dtype,fl.values)}const avgPool3DGradConfig$2={kernelName:AvgPool3DGrad$1,backendName:"cpu",kernelFunc:avgPool3DGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta;assertNotComplex$2([Sa,Ta],"avgPoolGrad");const{filterSize:Ea,strides:ka,pad:Aa}=ba,Fa=computePool2DInfo$1(wa.shape,Ea,ka,1,Aa),La=Fa.strideHeight,el=Fa.strideWidth,tl=Fa.filterHeight,nl=Fa.filterWidth,rl=Fa.dilationHeight,sl=Fa.dilationWidth,ol=Fa.effectiveFilterHeight,al=Fa.effectiveFilterWidth,ll=al-1-Fa.padInfo.left,il=ol-1-Fa.padInfo.top,cl=buffer$1(wa.shape,"float32"),ul=1/(tl*nl),dl=xa.data.get(Sa.dataId).values,hl=buffer$1(Sa.shape,"float32",dl);for(let pl=0;pl<Fa.batchSize;++pl)for(let fl=0;fl<Fa.inChannels;++fl)for(let ml=0;ml<Fa.inHeight;++ml)for(let gl=0;gl<Fa.inWidth;++gl){const $l=ml-il,xl=gl-ll;let yl=0;for(let bl=0;bl<ol;bl+=rl){const Sl=($l+bl)/La;if(!(Sl<0||Sl>=Fa.outHeight||Math.floor(Sl)!==Sl))for(let Cl=0;Cl<al;Cl+=sl){const Tl=(xl+Cl)/el;if(Tl<0||Tl>=Fa.outWidth||Math.floor(Tl)!==Tl)continue;const Il=hl.get(pl,Sl,Tl,fl);yl+=Il}}cl.set(yl*ul,pl,ml,gl,fl)}return xa.makeTensorInfo(cl.shape,cl.dtype,cl.values)}const avgPoolGradConfig$2={kernelName:AvgPoolGrad$1,backendName:"cpu",kernelFunc:avgPoolGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchNorm$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,scale:Ta,offset:wa,mean:Ea,variance:ka}=aa;assert$2(Ea.shape.length===ka.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$2(wa==null||Ea.shape.length===wa.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$2(Ta==null||Ea.shape.length===Ta.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),assertNotComplex$2([Sa,Ea,ka,Ta,wa],"batchNorm");let{varianceEpsilon:Aa}=ba;Aa==null&&(Aa=.001);const Fa=xa.data.get(Sa.dataId).values,La=xa.data.get(Ea.dataId).values,el=xa.data.get(ka.dataId).values,tl=Ta?xa.data.get(Ta.dataId).values:new Float32Array([1]),nl=wa?xa.data.get(wa.dataId).values:new Float32Array([0]),rl=new Float32Array(Fa.length),sl=nl.length,ol=tl.length,al=el.length,ll=La.length;let il=0,cl=0,ul=0,dl=0;for(let hl=0;hl<Fa.length;++hl)rl[hl]=nl[il++]+(Fa[hl]-La[cl++])*tl[ul++]/Math.sqrt(el[dl++]+Aa),il>=sl&&(il=0),cl>=ll&&(cl=0),ul>=ol&&(ul=0),dl>=al&&(dl=0);return xa.makeTensorInfo(Sa.shape,Sa.dtype,rl)}const batchNormConfig$2={kernelName:FusedBatchNorm$1,backendName:"cpu",kernelFunc:batchNorm$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchToSpaceND$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockShape:Ta,crops:wa}=ba;assertNotComplex$2([Sa],"batchToSpaceND");const Ea=Ta.reduce((ol,al)=>ol*al),ka=getReshaped$1(Sa.shape,Ta,Ea),Aa=getPermuted$1(ka.length,Ta.length),Fa=getReshapedPermuted$1(Sa.shape,Ta,Ea),La=getSliceBeginCoords$1(wa,Ta.length),el=getSliceSize$1(Fa,wa,Ta.length),tl=reshape$3({inputs:{x:Sa},backend:xa,attrs:{shape:ka}}),nl=transpose$2({inputs:{x:tl},backend:xa,attrs:{perm:Aa}}),rl=reshape$3({inputs:{x:nl},backend:xa,attrs:{shape:Fa}}),sl=slice$2({inputs:{x:rl},backend:xa,attrs:{begin:La,size:el}});return xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(rl),sl}const batchToSpaceNDConfig$2={kernelName:BatchToSpaceND$1,backendName:"cpu",kernelFunc:batchToSpaceND$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,weights:Ta}=aa,{size:wa}=ba,Ea=xa.data.get(Sa.dataId).values,ka=xa.data.get(Ta.dataId).values,Aa=bincountImpl$1(Ea,ka,Ta.dtype,Ta.shape,wa);return xa.makeTensorInfo([wa],Ta.dtype,Aa)}const bincountConfig$2={kernelName:Bincount$1,backendName:"cpu",kernelFunc:bincount$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs$2(ha){const{inputs:aa,backend:xa}=ha,{s0:ba,s1:Sa}=aa,Ta=xa.data.get(ba.dataId).values,wa=xa.data.get(Sa.dataId).values,Ea=assertAndGetBroadcastShape$1(Array.from(Ta),Array.from(wa));return xa.makeTensorInfo([Ea.length],"int32",Int32Array.from(Ea))}const broadcastArgsConfig$2={kernelName:BroadcastArgs$1,backendName:"cpu",kernelFunc:broadcastArgs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const clipByValue$2=unaryKernelFunc$2(ClipByValue$1,(ha,aa)=>{const xa=aa;return ha>xa.clipValueMax?xa.clipValueMax:ha<xa.clipValueMin?xa.clipValueMin:ha}),clipByValueConfig$2={kernelName:ClipByValue$1,backendName:"cpu",kernelFunc:clipByValue$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const complexAbs$2=ha=>{const{x:aa}=ha.inputs,xa=ha.backend,ba=new Float32Array(sizeFromShape$1(aa.shape)),Sa=xa.data.get(aa.dataId),Ta=Sa.complexTensorInfos.real,wa=Sa.complexTensorInfos.imag,Ea=xa.data.get(Ta.dataId).values,ka=xa.data.get(wa.dataId).values;for(let Aa=0;Aa<Ea.length;Aa++){const Fa=Ea[Aa],La=ka[Aa];ba[Aa]=Math.hypot(Fa,La)}return xa.makeOutput(ba,aa.shape,"float32")},complexAbsConfig$2={kernelName:ComplexAbs$1,backendName:"cpu",kernelFunc:complexAbs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag$2(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=xa.data.get(ba.dataId).complexTensorInfos.imag,Ta=xa.data.get(Sa.dataId).values;return xa.makeTensorInfo(Sa.shape,Sa.dtype,Ta)}const imagConfig$2={kernelName:Imag$1,backendName:"cpu",kernelFunc:imag$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{axis:Sa}=ba,Ta=parseAxisParam$1(Sa,aa[0].shape)[0],wa=aa.map(rl=>rl.shape);assertParamsConsistent$1(wa,Ta);let Ea=computeOutShape$4(aa.map(rl=>rl.shape),Ta);if(sizeFromShape$1(Ea)===0)return xa.makeTensorInfo(Ea,aa[0].dtype,[]);const ka=aa.filter(rl=>sizeFromShape$1(rl.shape)>0);if(ka.length===1)return identity$2({inputs:{x:ka[0]},backend:xa});if(ka[0].dtype==="complex64"){const rl=ka.map(il=>real$2({inputs:{input:il},backend:xa})),sl=ka.map(il=>imag$2({inputs:{input:il},backend:xa})),ol=concat$2({inputs:rl,backend:xa,attrs:{axis:Ta}}),al=concat$2({inputs:sl,backend:xa,attrs:{axis:Ta}}),ll=complex$3({inputs:{real:ol,imag:al},backend:xa});return rl.forEach(il=>xa.disposeIntermediateTensorInfo(il)),sl.forEach(il=>xa.disposeIntermediateTensorInfo(il)),xa.disposeIntermediateTensorInfo(ol),xa.disposeIntermediateTensorInfo(al),ll}const Aa=ka.map(rl=>{const ol=[-1,sizeFromShape$1(rl.shape.slice(Ta))];return reshape$3({inputs:{x:rl},backend:xa,attrs:{shape:ol}})}),Fa=Aa.map(rl=>({vals:xa.data.get(rl.dataId).values,shape:rl.shape}));Ea=computeOutShape$4(Aa.map(rl=>rl.shape),1);const La=Aa[0].shape[0]===1,el=concatImpl$3(Fa,Ea,aa[0].dtype,La),tl=computeOutShape$4(ka.map(rl=>rl.shape),Ta),nl=xa.makeTensorInfo(tl,aa[0].dtype,el);return Aa.forEach(rl=>xa.disposeIntermediateTensorInfo(rl)),nl}const concatConfig$2={kernelName:Concat$1,backendName:"cpu",kernelFunc:concat$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dataFormat:ka,dilations:Aa,dimRoundingMode:Fa}=ba;assertNotComplex$2([Sa,Ta],"conv2d");const La=convertConv2DDataFormat$1(ka),el=computeConv2DInfo$1(Sa.shape,Ta.shape,wa,Aa,Ea,Fa,!1,La),tl=el.filterHeight,nl=el.filterWidth,rl=el.dilationHeight,sl=el.dilationWidth,ol=el.padInfo.left,al=el.padInfo.top,ll=el.dataFormat==="channelsLast",il=new TensorBuffer$1(el.outShape,Sa.dtype),cl=computeStrides$1(Sa.shape),ul=computeStrides$1(Ta.shape),dl=cl[0],hl=ll?cl[1]:cl[2],pl=ll?cl[2]:1,fl=ll?1:cl[1],ml=il.strides[0],gl=ll?il.strides[1]:il.strides[2],$l=ll?il.strides[2]:1,xl=ll?1:il.strides[1],yl=xa.data.get(Sa.dataId).values,bl=xa.data.get(Ta.dataId).values,Sl=il.values;for(let Cl=0;Cl<el.batchSize;++Cl){const Tl=Cl*dl,Il=Cl*ml;for(let wl=0;wl<el.outHeight;++wl){const Nl=Il+wl*gl,vl=wl*el.strideHeight-al;for(let kl=0;kl<tl;++kl){const El=vl+kl*rl;if(El<0||El>=el.inHeight)continue;const Al=kl*ul[0],Rl=Tl+El*hl;for(let Pl=0;Pl<el.outWidth;++Pl){const Dl=Nl+Pl*$l,_l=Pl*el.strideWidth-ol;for(let Fl=0;Fl<nl;++Fl){const Ol=_l+Fl*sl;if(Ol<0||Ol>=el.inWidth)continue;const Ml=Al+Fl*ul[1],Ul=Rl+Ol*pl;let Bl=Ml;for(let Ll=0;Ll<el.inChannels;++Ll){const zl=yl[Ul+Ll*fl];for(let Vl=0;Vl<el.outChannels;++Vl)Sl[Dl+Vl*xl]+=zl*bl[Bl+Vl];Bl+=el.outChannels}}}}}}return xa.makeTensorInfo(il.shape,il.dtype,Sl)}const conv2DConfig$2={kernelName:Conv2D$2,backendName:"cpu",kernelFunc:conv2D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,pad:Ea,dataFormat:ka,dimRoundingMode:Aa,filterShape:Fa}=ba;assertNotComplex$2([Sa,Ta],"conv2dBackpropFilter");const La=convertConv2DDataFormat$1(ka),el=computeConv2DInfo$1(Sa.shape,Fa,wa,1,Ea,Aa,!1,La),{strideHeight:tl,strideWidth:nl,filterHeight:rl,filterWidth:sl}=el,ol=el.dataFormat==="channelsLast",al=new TensorBuffer$1(el.filterShape,"float32"),ll=el.padInfo.left,il=el.padInfo.top,cl=xa.data.get(Sa.dataId).values,ul=xa.data.get(Ta.dataId).values,dl=new TensorBuffer$1(Sa.shape,Sa.dtype,cl),hl=new TensorBuffer$1(Ta.shape,Ta.dtype,ul);for(let pl=0;pl<rl;++pl){const fl=Math.max(0,Math.ceil((il-pl)/tl)),ml=Math.min(el.outHeight,(el.inHeight+il-pl)/tl);for(let gl=0;gl<sl;++gl){const $l=Math.max(0,Math.ceil((ll-gl)/nl)),xl=Math.min(el.outWidth,(el.inWidth+ll-gl)/nl);for(let yl=0;yl<el.inChannels;++yl)for(let bl=0;bl<el.outChannels;++bl){let Sl=0;for(let Cl=0;Cl<el.batchSize;++Cl)for(let Tl=fl;Tl<ml;++Tl){const Il=pl+Tl*tl-il;for(let wl=$l;wl<xl;++wl){const Nl=gl+wl*nl-ll;ol?Sl+=dl.get(Cl,Il,Nl,yl)*hl.get(Cl,Tl,wl,bl):Sl+=dl.get(Cl,yl,Il,Nl)*hl.get(Cl,bl,Tl,wl)}}al.set(Sl,pl,gl,yl,bl)}}}return xa.makeTensorInfo(al.shape,al.dtype,al.values)}const conv2DBackpropFilterConfig$2={kernelName:Conv2DBackpropFilter$1,backendName:"cpu",kernelFunc:conv2DBackpropFilter$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{inputShape:wa,strides:Ea,pad:ka,dataFormat:Aa,dimRoundingMode:Fa}=ba;assertNotComplex$2([Sa,Ta],"conv2dBackpropInput");const La=computeStrides$1(Ta.shape),el=computeStrides$1(Sa.shape);let tl=convertConv2DDataFormat$1(Aa);const nl=computeConv2DInfo$1(wa,Ta.shape,Ea,1,ka,Fa,!1,tl),rl=new TensorBuffer$1(nl.inShape,"float32"),sl=rl.values,ol=xa.data.get(Sa.dataId).values,al=xa.data.get(Ta.dataId).values,[ll,il,cl]=La,{batchSize:ul,filterHeight:dl,filterWidth:hl,inChannels:pl,inHeight:fl,inWidth:ml,outChannels:gl,outHeight:$l,outWidth:xl,strideHeight:yl,strideWidth:bl}=nl;tl=nl.dataFormat;const Sl=dl-1-nl.padInfo.top,Cl=hl-1-nl.padInfo.left,Tl=tl==="channelsLast",Il=rl.strides[0],wl=Tl?rl.strides[1]:rl.strides[2],Nl=Tl?rl.strides[2]:1,vl=Tl?1:rl.strides[1],kl=el[0],El=Tl?el[1]:el[2],Al=Tl?el[2]:1,Rl=Tl?1:el[1];for(let Pl=0;Pl<ul;++Pl)for(let Dl=0;Dl<pl;++Dl)for(let _l=0;_l<fl;++_l){const Fl=_l-Sl,Ol=Math.max(0,Math.ceil(Fl/yl)),Ml=Math.min($l,(dl+Fl)/yl);for(let Ul=0;Ul<ml;++Ul){const Bl=Ul-Cl,Ll=Math.max(0,Math.ceil(Bl/bl)),zl=Math.min(xl,(hl+Bl)/bl);let Vl=0;for(let Gl=Ol;Gl<Ml;++Gl){const Xl=Gl*yl-Fl;for(let Wl=Ll;Wl<zl;++Wl){const ec=Wl*bl-Bl,Hl=kl*Pl+El*Gl+Al*Wl,jl=ll*(dl-1-Xl)+il*(hl-1-ec)+cl*Dl;for(let Yl=0;Yl<gl;++Yl){const Zl=ol[Hl+Rl*Yl],Jl=al[jl+Yl];Vl+=Zl*Jl}}}const ql=Il*Pl+wl*_l+Nl*Ul+vl*Dl;sl[ql]=Vl}}return xa.makeTensorInfo(rl.shape,rl.dtype,rl.values)}const conv2DBackpropInputConfig$2={kernelName:Conv2DBackpropInput$1,backendName:"cpu",kernelFunc:conv2DBackpropInput$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka}=ba;assertNotComplex$2([Sa,Ta],"conv3d");const Aa=computeConv3DInfo$1(Sa.shape,Ta.shape,wa,ka,Ea),{filterDepth:Fa,filterHeight:La,filterWidth:el,dilationDepth:tl,dilationHeight:nl,dilationWidth:rl,padInfo:sl}=Aa,ol=sl.front,al=sl.left,ll=sl.top,il=new TensorBuffer$1(Aa.outShape,Sa.dtype),cl=xa.data.get(Sa.dataId).values,ul=xa.data.get(Ta.dataId).values,dl=il.values,hl=computeStrides$1(Sa.shape),pl=computeStrides$1(Ta.shape);for(let fl=0;fl<Aa.batchSize;++fl){const ml=fl*hl[0],gl=fl*il.strides[0];for(let $l=0;$l<Aa.outDepth;++$l){const xl=gl+$l*il.strides[1],yl=$l*Aa.strideDepth-ol;for(let bl=0;bl<Fa;++bl){const Sl=yl+bl*tl;if(Sl<0||Sl>=Aa.inDepth)continue;const Cl=bl*pl[0],Tl=ml+Sl*hl[1];for(let Il=0;Il<Aa.outHeight;++Il){const wl=xl+Il*il.strides[2],Nl=Il*Aa.strideHeight-ll;for(let vl=0;vl<La;++vl){const kl=Nl+vl*nl;if(kl<0||kl>=Aa.inHeight)continue;const El=Cl+vl*pl[1],Al=Tl+kl*hl[2];for(let Rl=0;Rl<Aa.outWidth;++Rl){const Pl=wl+Rl*Aa.outChannels,Dl=Rl*Aa.strideWidth-al;for(let _l=0;_l<el;++_l){const Fl=Dl+_l*rl;if(Fl<0||Fl>=Aa.inWidth)continue;const Ol=El+_l*pl[2],Ml=Al+Fl*Aa.inChannels;let Ul=Ol;for(let Bl=0;Bl<Aa.inChannels;++Bl){const Ll=cl[Ml+Bl];for(let zl=0;zl<Aa.outChannels;++zl)dl[Pl+zl]+=Ll*ul[Ul+zl];Ul+=Aa.outChannels}}}}}}}}return xa.makeTensorInfo(il.shape,il.dtype,il.values)}const conv3DConfig$2={kernelName:Conv3D$2,backendName:"cpu",kernelFunc:conv3D$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,pad:Ea,filterShape:ka}=ba;assertNotComplex$2([Sa,Ta],"conv3dBackpropFilterV2");const Aa=computeStrides$1(Sa.shape),Fa=computeStrides$1(Ta.shape),La=computeConv3DInfo$1(Sa.shape,ka,wa,1,Ea),el=La.strideDepth,tl=La.strideHeight,nl=La.strideWidth,rl=La.filterDepth,sl=La.filterHeight,ol=La.filterWidth,al=new TensorBuffer$1(La.filterShape,"float32"),ll=al.values,[il,cl,ul,dl]=al.strides,hl=xa.data.get(Ta.dataId).values,[pl,fl,ml,gl]=Fa,$l=xa.data.get(Sa.dataId).values,[xl,yl,bl,Sl]=Aa,Cl=La.padInfo.front,Tl=La.padInfo.left,Il=La.padInfo.top;for(let wl=0;wl<rl;++wl){const Nl=Math.max(0,Math.ceil((Cl-wl)/el)),vl=Math.min(La.outDepth,(La.inDepth+Cl-wl)/el),kl=wl*il;for(let El=0;El<sl;++El){const Al=Math.max(0,Math.ceil((Il-El)/tl)),Rl=Math.min(La.outHeight,(La.inHeight+Il-El)/tl),Pl=El*cl+kl;for(let Dl=0;Dl<ol;++Dl){const _l=Math.max(0,Math.ceil((Tl-Dl)/nl)),Fl=Math.min(La.outWidth,(La.inWidth+Tl-Dl)/nl),Ol=Dl*ul+Pl;for(let Ml=0;Ml<La.inChannels;++Ml){const Ul=Ml*dl+Ol;for(let Bl=0;Bl<La.outChannels;++Bl){let Ll=0;for(let zl=0;zl<La.batchSize;++zl){const Vl=zl*xl,ql=zl*pl;for(let Gl=Nl;Gl<vl;++Gl){const Wl=(wl+Gl*el-Cl)*yl+Vl,ec=Gl*fl+ql;for(let Hl=Al;Hl<Rl;++Hl){const Yl=(El+Hl*tl-Il)*bl+Wl,Zl=Hl*ml+ec;for(let Jl=_l;Jl<Fl;++Jl){const rc=(Dl+Jl*nl-Tl)*Sl+Yl,oc=Jl*gl+Zl;Ll+=$l[rc+Ml]*hl[oc+Bl]}}}}ll[Ul+Bl]=Ll}}}}}return xa.makeTensorInfo(al.shape,al.dtype,al.values)}const conv3DBackpropFilterV2Config$2={kernelName:Conv3DBackpropFilterV2$1,backendName:"cpu",kernelFunc:conv3DBackpropFilterV2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInputV2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{pad:wa,strides:Ea,inputShape:ka}=ba;assertNotComplex$2([Sa],"conv3dBackpropInputV2");const Aa=computeStrides$1(Sa.shape),Fa=computeStrides$1(Ta.shape),La=computeConv3DInfo$1(ka,Ta.shape,Ea,1,wa),el=new TensorBuffer$1(La.inShape,"float32"),tl=el.values,[nl,rl,sl,ol]=el.strides,al=xa.data.get(Sa.dataId).values,[ll,il,cl,ul]=Aa,dl=xa.data.get(Ta.dataId).values,[hl,pl,fl,ml]=Fa,{batchSize:gl,filterDepth:$l,filterHeight:xl,filterWidth:yl,inChannels:bl,inDepth:Sl,inHeight:Cl,inWidth:Tl,outChannels:Il,outDepth:wl,outHeight:Nl,outWidth:vl,strideDepth:kl,strideHeight:El,strideWidth:Al}=La,Rl=$l-1-La.padInfo.front,Pl=xl-1-La.padInfo.top,Dl=yl-1-La.padInfo.left;for(let _l=0;_l<gl;++_l)for(let Fl=0;Fl<bl;++Fl)for(let Ol=0;Ol<Sl;++Ol){const Ml=Ol-Rl,Ul=Math.max(0,Math.ceil(Ml/kl)),Bl=Math.min(wl,($l+Ml)/kl);for(let Ll=0;Ll<Cl;++Ll){const zl=Ll-Pl,Vl=Math.max(0,Math.ceil(zl/El)),ql=Math.min(Nl,(xl+zl)/El);for(let Gl=0;Gl<Tl;++Gl){const Xl=Gl-Dl,Wl=Math.max(0,Math.ceil(Xl/Al)),ec=Math.min(vl,(yl+Xl)/Al);let Hl=0;for(let jl=Ul;jl<Bl;++jl){const Yl=jl*kl-Ml;for(let Zl=Vl;Zl<ql;++Zl){const Jl=Zl*El-zl;for(let nc=Wl;nc<ec;++nc){const rc=nc*Al-Xl,oc=ll*_l+il*jl+cl*Zl+ul*nc,pc=hl*($l-1-Yl)+pl*(xl-1-Jl)+fl*(yl-1-rc)+ml*Fl;for(let sc=0;sc<Il;++sc){const fc=al[oc+sc],mc=dl[pc+sc];Hl+=fc*mc}}}}tl[nl*_l+rl*Ol+sl*Ll+ol*Gl+Fl]=Hl}}}return xa.makeTensorInfo(el.shape,el.dtype,el.values)}const conv3DBackpropInputV2Config={kernelName:Conv3DBackpropInputV2$1,backendName:"cpu",kernelFunc:conv3DBackpropInputV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cos$2=unaryKernelFunc$2(Cos$1,ha=>Math.cos(ha)),cosConfig$2={kernelName:Cos$1,backendName:"cpu",kernelFunc:cos$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cosh$2=unaryKernelFunc$2(Cosh$1,ha=>Math.cosh(ha)),coshConfig$2={kernelName:Cosh$1,backendName:"cpu",kernelFunc:cosh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cropAndResize$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{image:Sa,boxes:Ta,boxInd:wa}=aa,{cropSize:Ea,method:ka,extrapolationValue:Aa}=ba,[Fa,La,el,tl]=Sa.shape,nl=Ta.shape[0],[rl,sl]=Ea,ol=buffer$1([nl,rl,sl,tl],"float32"),al=xa.data.get(Ta.dataId).values,ll=xa.data.get(wa.dataId).values,il=xa.data.get(Sa.dataId).values,cl=computeStrides$1(Sa.shape),ul=computeStrides$1(ol.shape);for(let dl=0;dl<nl;dl++){const hl=dl*4,pl=al[hl],fl=al[hl+1],ml=al[hl+2],gl=al[hl+3],$l=ll[dl];if($l>=Fa)continue;const xl=rl>1?(ml-pl)*(La-1)/(rl-1):0,yl=sl>1?(gl-fl)*(el-1)/(sl-1):0;for(let bl=0;bl<rl;bl++){const Sl=rl>1?pl*(La-1)+bl*xl:.5*(pl+ml)*(La-1);if(Sl<0||Sl>La-1){for(let Cl=0;Cl<sl;Cl++)for(let Tl=0;Tl<tl;Tl++){const Il=Tl+Cl*ul[2]+bl*ul[1]+dl*ul[0];ol.values[Il]=Aa}continue}if(ka==="bilinear"){const Cl=Math.floor(Sl),Tl=Math.ceil(Sl),Il=Sl-Cl;for(let wl=0;wl<sl;wl++){const Nl=sl>1?fl*(el-1)+wl*yl:.5*(fl+gl)*(el-1);if(Nl<0||Nl>el-1){for(let Al=0;Al<tl;Al++){const Rl=Al+wl*ul[2]+bl*ul[1]+dl*ul[0];ol.values[Rl]=Aa}continue}const vl=Math.floor(Nl),kl=Math.ceil(Nl),El=Nl-vl;for(let Al=0;Al<tl;Al++){let Rl=Al+vl*cl[2]+Cl*cl[1]+$l*cl[0];const Pl=il[Rl];Rl=Al+kl*cl[2]+Cl*cl[1]+$l*cl[0];const Dl=il[Rl];Rl=Al+vl*cl[2]+Tl*cl[1]+$l*cl[0];const _l=il[Rl];Rl=Al+kl*cl[2]+Tl*cl[1]+$l*cl[0];const Fl=il[Rl],Ol=Pl+(Dl-Pl)*El,Ml=_l+(Fl-_l)*El;Rl=Al+wl*ul[2]+bl*ul[1]+dl*ul[0],ol.values[Rl]=Ol+(Ml-Ol)*Il}}}else for(let Cl=0;Cl<sl;++Cl){const Tl=sl>1?fl*(el-1)+Cl*yl:.5*(fl+gl)*(el-1);if(Tl<0||Tl>el-1){for(let Nl=0;Nl<tl;Nl++){const vl=Nl+Cl*ul[2]+bl*ul[1]+dl*ul[0];ol.values[vl]=Aa}continue}const Il=Math.round(Tl),wl=Math.round(Sl);for(let Nl=0;Nl<tl;Nl++){const vl=Nl+Il*cl[2]+wl*cl[1]+$l*cl[0],kl=Nl+Cl*ul[2]+bl*ul[1]+dl*ul[0];ol.values[kl]=il[vl]}}}}return xa.makeTensorInfo(ol.shape,ol.dtype,ol.values)}const cropAndResizeConfig$2={kernelName:CropAndResize$1,backendName:"cpu",kernelFunc:cropAndResize$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,exclusive:wa,reverse:Ea}=ba;assertNotComplex$2(Sa,"cumprod");const ka=getAxesPermutation$1([Ta],Sa.shape.length);let Aa=Sa;ka!=null&&(Aa=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:ka}}));const Fa=getInnerMostAxes$1(1,Sa.shape.length)[0];if(Fa!==Aa.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${Aa.shape.length-1} but got axis=${Fa}`);const La=upcastType$1(Aa.dtype,"int32"),el=makeOnesTypedArray$1(sizeFromShape$1(Aa.shape),La),tl=xa.data.get(Aa.dataId).values,nl=Aa.shape[Aa.shape.length-1],rl=Ea?(ol,al)=>ol+nl-al-1:(ol,al)=>ol+al;for(let ol=0;ol<tl.length;ol+=nl)for(let al=0;al<nl;al++){const ll=rl(ol,al);if(al===0)el[ll]=wa?1:tl[ll];else{const il=rl(ol,al-1);el[ll]=wa?tl[il]*el[il]:tl[ll]*el[il]}}const sl=xa.makeTensorInfo(Aa.shape,La,el);if(ka!=null){const ol=getUndoAxesPermutation$1(ka),al=transpose$2({inputs:{x:sl},backend:xa,attrs:{perm:ol}});return xa.disposeIntermediateTensorInfo(sl),xa.disposeIntermediateTensorInfo(Aa),al}return sl}const cumprodConfig$2={kernelName:Cumprod$1,backendName:"cpu",kernelFunc:cumprod$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,exclusive:wa,reverse:Ea}=ba;assertNotComplex$2(Sa,"cumsum");const ka=getAxesPermutation$1([Ta],Sa.shape.length);let Aa=Sa;ka!=null&&(Aa=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:ka}}));const Fa=getInnerMostAxes$1(1,Sa.shape.length)[0];if(Fa!==Aa.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${Aa.shape.length-1} but got axis=${Fa}`);const La=upcastType$1(Aa.dtype,"int32"),el=makeZerosTypedArray$1(sizeFromShape$1(Aa.shape),La),tl=xa.data.get(Aa.dataId).values,nl=Aa.shape[Aa.shape.length-1],rl=Ea?(ol,al)=>ol+nl-al-1:(ol,al)=>ol+al;for(let ol=0;ol<tl.length;ol+=nl)for(let al=0;al<nl;al++){const ll=rl(ol,al);if(al===0)el[ll]=wa?0:tl[ll];else{const il=rl(ol,al-1);el[ll]=wa?tl[il]+el[il]:tl[ll]+el[il]}}const sl=xa.makeTensorInfo(Aa.shape,La,el);if(ka!=null){const ol=getUndoAxesPermutation$1(ka),al=transpose$2({inputs:{x:sl},backend:xa,attrs:{perm:ol}});return xa.disposeIntermediateTensorInfo(sl),xa.disposeIntermediateTensorInfo(Aa),al}return sl}const cumsumConfig$2={kernelName:Cumsum$1,backendName:"cpu",kernelFunc:cumsum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,weights:Ta}=aa,{size:wa,binaryOutput:Ea}=ba;if(Sa.shape.length===1){const ka=xa.data.get(Sa.dataId).values,Aa=xa.data.get(Ta.dataId).values,Fa=bincountImpl$1(ka,Aa,Ta.dtype,Ta.shape,wa);return xa.makeTensorInfo([wa],Ta.dtype,Fa)}else if(Sa.shape.length===2){const ka=xa.bufferSync(Sa),Aa=xa.bufferSync(Ta),Fa=bincountReduceImpl$1(ka,Aa,wa,Ea);return xa.makeTensorInfo(Fa.shape,Ta.dtype,Fa.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${Sa.shape.length}.`)}const denseBincountConfig$2={kernelName:DenseBincount$1,backendName:"cpu",kernelFunc:denseBincount$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockSize:Ta,dataFormat:wa}=ba;assert$2(wa==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${wa}`);const Ea=Sa.shape[0],ka=Sa.shape[1],Aa=Sa.shape[2],Fa=Sa.shape[3],La=ka*Ta,el=Aa*Ta,tl=Fa/(Ta*Ta),nl=xa.data.get(Sa.dataId).values,rl=new Float32Array(Ea*La*el*tl);let sl=0;for(let ol=0;ol<Ea;++ol)for(let al=0;al<La;++al){const ll=Math.floor(al/Ta),il=al%Ta;for(let cl=0;cl<el;++cl){const ul=Math.floor(cl/Ta),dl=cl%Ta,hl=(il*Ta+dl)*tl;for(let pl=0;pl<tl;++pl){const ml=pl+hl+Fa*(ul+Aa*(ll+ka*ol));rl[sl++]=nl[ml]}}}return xa.makeTensorInfo([Ea,La,el,tl],Sa.dtype,rl)}const depthToSpaceConfig$2={kernelName:DepthToSpace$1,backendName:"cpu",kernelFunc:depthToSpace$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka,dimRoundingMode:Aa}=ba;assertNotComplex$2([Sa,Ta],"depthwiseConv2DNative");const Fa=computeStrides$1(Sa.shape),La=computeStrides$1(Ta.shape);let el=ka;el==null&&(el=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(wa,el),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${wa} and dilations '${el}'`);const tl=computeConv2DInfo$1(Sa.shape,Ta.shape,wa,el,Ea,Aa,!0),{filterHeight:nl,filterWidth:rl,dilationHeight:sl,dilationWidth:ol,padInfo:al}=tl,ll=al.left,il=al.top,cl=tl.outChannels/tl.inChannels,ul=new TensorBuffer$1(tl.outShape,Sa.dtype),dl=xa.data.get(Sa.dataId).values,hl=xa.data.get(Ta.dataId).values,pl=ul.values;for(let fl=0;fl<tl.batchSize;++fl){const ml=fl*Fa[0],gl=fl*ul.strides[0];for(let $l=0;$l<tl.outHeight;++$l){const xl=gl+$l*ul.strides[1],yl=$l*tl.strideHeight-il;for(let bl=0;bl<nl;++bl){const Sl=yl+bl*sl;if(Sl<0||Sl>=tl.inHeight)continue;const Cl=bl*La[0],Tl=ml+Sl*Fa[1];for(let Il=0;Il<tl.outWidth;++Il){const wl=xl+Il*ul.strides[2],Nl=Il*tl.strideWidth-ll;for(let vl=0;vl<rl;++vl){const kl=Nl+vl*ol;if(kl<0||kl>=tl.inWidth)continue;const El=Cl+vl*La[1],Al=Tl+kl*tl.inChannels;let Rl=wl,Pl=El;for(let Dl=0;Dl<tl.inChannels;++Dl){const _l=dl[Al+Dl];for(let Fl=0;Fl<cl;++Fl)pl[Rl+Fl]+=_l*hl[Pl+Fl];Rl+=cl,Pl+=cl}}}}}}return xa.makeTensorInfo(ul.shape,ul.dtype,ul.values)}const depthwiseConv2dNativeConfig$2={kernelName:DepthwiseConv2dNative$1,backendName:"cpu",kernelFunc:depthwiseConv2dNative$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,dilations:Ea,pad:ka,dimRoundingMode:Aa,filterShape:Fa}=ba;assertNotComplex$2([Sa,Ta],"depthwiseConv2dNativeBackpropFilter");const La=computeConv2DInfo$1(Sa.shape,Fa,wa,Ea,ka,Aa,!0),{strideHeight:el,strideWidth:tl,filterHeight:nl,filterWidth:rl}=La,sl=new TensorBuffer$1(La.filterShape,"float32"),ol=La.padInfo.left,al=La.padInfo.top,ll=La.outChannels/La.inChannels,il=xa.data.get(Sa.dataId).values,cl=new TensorBuffer$1(Sa.shape,Sa.dtype,il),ul=xa.data.get(Ta.dataId).values,dl=new TensorBuffer$1(Ta.shape,Ta.dtype,ul);for(let hl=0;hl<nl;++hl){const pl=Math.max(0,Math.ceil((al-hl)/el)),fl=Math.min(La.outHeight,(La.inHeight+al-hl)/el);for(let ml=0;ml<rl;++ml){const gl=Math.max(0,Math.ceil((ol-ml)/tl)),$l=Math.min(La.outWidth,(La.inWidth+ol-ml)/tl);for(let xl=0;xl<La.outChannels;++xl){const yl=Math.trunc(xl/ll),bl=xl%ll;let Sl=0;for(let Cl=0;Cl<La.batchSize;++Cl)for(let Tl=pl;Tl<fl;++Tl){const Il=hl+Tl*el-al;for(let wl=gl;wl<$l;++wl){const Nl=ml+wl*tl-ol;Sl+=cl.get(Cl,Il,Nl,yl)*dl.get(Cl,Tl,wl,xl)}}sl.set(Sl,hl,ml,yl,bl)}}}return xa.makeTensorInfo(sl.shape,sl.dtype,sl.values)}const depthwiseConv2dNativeBackpropFilterConfig$2={kernelName:DepthwiseConv2dNativeBackpropFilter$1,backendName:"cpu",kernelFunc:depthwiseConv2dNativeBackpropFilter$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{strides:wa,dilations:Ea,pad:ka,dimRoundingMode:Aa,inputShape:Fa}=ba;assertNotComplex$2([Sa,Ta],"depthwiseConv2DNativeBackpropInput");const La=computeStrides$1(Sa.shape),el=computeStrides$1(Ta.shape),tl=computeConv2DInfo$1(Fa,Ta.shape,wa,Ea,ka,Aa,!0),nl=new TensorBuffer$1(tl.inShape,"float32"),rl=nl.values,[sl,ol,al]=nl.strides,ll=xa.data.get(Sa.dataId).values,[il,cl,ul]=La,dl=xa.data.get(Ta.dataId).values,[hl,pl,fl]=el,{batchSize:ml,filterHeight:gl,filterWidth:$l,inChannels:xl,inHeight:yl,inWidth:bl,outChannels:Sl,outHeight:Cl,outWidth:Tl,strideHeight:Il,strideWidth:wl}=tl,Nl=gl-1-tl.padInfo.top,vl=$l-1-tl.padInfo.left,kl=Sl/xl;for(let El=0;El<ml;++El)for(let Al=0;Al<xl;++Al)for(let Rl=0;Rl<yl;++Rl){const Pl=Rl-Nl,Dl=Math.max(0,Math.ceil(Pl/Il)),_l=Math.min(Cl,(gl+Pl)/Il);for(let Fl=0;Fl<bl;++Fl){const Ol=Fl-vl,Ml=Math.max(0,Math.ceil(Ol/wl)),Ul=Math.min(Tl,($l+Ol)/wl);let Bl=0;for(let Ll=Dl;Ll<_l;++Ll){const zl=Ll*Il-Pl;for(let Vl=Ml;Vl<Ul;++Vl){const ql=Vl*wl-Ol,Gl=il*El+cl*Ll+ul*Vl,Xl=hl*(gl-1-zl)+pl*($l-1-ql)+fl*Al;for(let Wl=0;Wl<kl;++Wl){const ec=Al*kl+Wl,Hl=ll[Gl+ec],jl=dl[Xl+Wl];Bl+=Hl*jl}}}rl[sl*El+ol*Rl+al*Fl+Al]=Bl}}return xa.makeTensorInfo(nl.shape,nl.dtype,nl.values)}const depthwiseConv2dNativeBackpropInputConfig$2={kernelName:DepthwiseConv2dNativeBackpropInput$1,backendName:"cpu",kernelFunc:depthwiseConv2dNativeBackpropInput$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa,Sa=sizeFromShape$1(ba.shape),Ta=xa.data.get(ba.dataId).values,wa=buffer$1([Sa,Sa],ba.dtype),Ea=wa.values;for(let Aa=0;Aa<Ta.length;Aa++)Ea[Aa*Sa+Aa]=Ta[Aa];const ka=[...ba.shape,...ba.shape];return xa.makeTensorInfo(ka,wa.dtype,wa.values)}const diagConfig$2={kernelName:Diag$1,backendName:"cpu",kernelFunc:diag$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DConfig$2={kernelName:Dilation2D$1,backendName:"cpu",kernelFunc:({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba,filter:Sa}=ha,{strides:Ta,pad:wa,dilations:Ea}=xa,ka=aa,Aa=ka.data.get(ba.dataId).values,Fa=ba.shape.length,La=ka.data.get(Sa.dataId).values,el=Sa.shape.length,{batchSize:tl,inHeight:nl,inWidth:rl,inChannels:sl,outHeight:ol,outWidth:al,padInfo:ll,strideHeight:il,strideWidth:cl,filterHeight:ul,filterWidth:dl,dilationHeight:hl,dilationWidth:pl,outShape:fl}=computeDilation2DInfo$1(ba.shape,Sa.shape,Ta,wa,"NHWC",Ea),ml=sizeFromShape$1(fl),gl=fl.length,$l=getArrayFromDType$1(ba.dtype,ml);for(let yl=0;yl<tl;++yl)for(let bl=0;bl<ol;++bl){const Sl=bl*il-ll.top;for(let Cl=0;Cl<al;++Cl){const Tl=Cl*cl-ll.left;for(let Il=0;Il<sl;++Il){let wl=Number.MIN_SAFE_INTEGER;for(let vl=0;vl<ul;++vl){const kl=Sl+vl*hl;if(kl>=0&&kl<nl)for(let El=0;El<dl;++El){const Al=Tl+El*pl;if(Al>=0&&Al<rl){const Rl=locToIndex$1([yl,kl,Al,Il],Fa,computeStrides$1(ba.shape)),Pl=locToIndex$1([vl,El,Il],el,computeStrides$1(Sa.shape)),Dl=Aa[Rl]+La[Pl];Dl>wl&&(wl=Dl)}}}const Nl=locToIndex$1([yl,bl,Cl,Il],gl,computeStrides$1(fl));$l[Nl]=wl}}}return{dataId:ka.write(toTypedArray$1($l,ba.dtype),fl,ba.dtype),shape:fl,dtype:ba.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DBackpropFilterConfig={kernelName:Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba,filter:Sa,dy:Ta}=ha,{strides:wa,pad:Ea,dilations:ka}=xa,Aa=aa,Fa=toNestedArray$1(ba.shape,Aa.data.get(ba.dataId).values),La=toNestedArray$1(Sa.shape,Aa.data.get(Sa.dataId).values),{batchSize:el,inHeight:tl,inWidth:nl,inChannels:rl,outHeight:sl,outWidth:ol,padInfo:al,strideHeight:ll,strideWidth:il,filterHeight:cl,filterWidth:ul,dilationHeight:dl,dilationWidth:hl,outShape:pl}=computeDilation2DInfo$1(ba.shape,Sa.shape,wa,Ea,"NHWC",ka);assert$2(Ta.rank===pl.length,()=>`Error in ${Dilation2DBackpropFilter}, dy must have the same rank as output ${pl.length}, but got ${Ta.rank}`);const fl=toNestedArray$1(pl,Aa.data.get(Ta.dataId).values),ml=makeZerosNestedTypedArray(Sa.shape,Sa.dtype);for(let $l=0;$l<el;++$l)for(let xl=0;xl<sl;++xl){const yl=xl*ll-al.top;for(let bl=0;bl<ol;++bl){const Sl=bl*il-al.left;for(let Cl=0;Cl<rl;++Cl){let Tl=Number.MIN_SAFE_INTEGER,Il=0,wl=0;for(let Nl=0;Nl<cl;++Nl){const vl=yl+Nl*dl;if(vl>=0&&vl<tl)for(let kl=0;kl<ul;++kl){const El=Sl+kl*hl;if(El>=0&&El<nl){const Al=Fa[$l][vl][El][Cl]+La[Nl][kl][Cl];Al>Tl&&(Tl=Al,Il=Nl,wl=kl)}}}ml[Il][wl][Cl]+=fl[$l][xl][bl][Cl]}}}return{dataId:Aa.write(toTypedArray$1(ml,ba.dtype),Sa.shape,Sa.dtype),shape:Sa.shape,dtype:Sa.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dilation2DBackpropInputConfig={kernelName:Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba,filter:Sa,dy:Ta}=ha,{strides:wa,pad:Ea,dilations:ka}=xa,Aa=aa,Fa=toNestedArray$1(ba.shape,Aa.data.get(ba.dataId).values),La=toNestedArray$1(Sa.shape,Aa.data.get(Sa.dataId).values),{batchSize:el,inHeight:tl,inWidth:nl,inChannels:rl,outHeight:sl,outWidth:ol,padInfo:al,strideHeight:ll,strideWidth:il,filterHeight:cl,filterWidth:ul,dilationHeight:dl,dilationWidth:hl,outShape:pl}=computeDilation2DInfo$1(ba.shape,Sa.shape,wa,Ea,"NHWC",ka);assert$2(Ta.rank===pl.length,()=>`Error in ${Dilation2DBackpropInput}, dy must have the same rank as output ${pl.length}, but got ${Ta.rank}`);const fl=toNestedArray$1(pl,Aa.data.get(Ta.dataId).values),ml=makeZerosNestedTypedArray(ba.shape,ba.dtype);for(let $l=0;$l<el;++$l)for(let xl=0;xl<sl;++xl){const yl=xl*ll-al.top;for(let bl=0;bl<ol;++bl){const Sl=bl*il-al.left;for(let Cl=0;Cl<rl;++Cl){let Tl=Number.MIN_SAFE_INTEGER,Il=yl<0?0:yl,wl=Sl<0?0:Sl;for(let Nl=0;Nl<cl;++Nl){const vl=yl+Nl*dl;if(vl>=0&&vl<tl)for(let kl=0;kl<ul;++kl){const El=Sl+kl*hl;if(El>=0&&El<nl){const Al=Fa[$l][vl][El][Cl]+La[Nl][kl][Cl];Al>Tl&&(Tl=Al,Il=vl,wl=El)}}}ml[$l][Il][wl][Cl]+=fl[$l][xl][bl][Cl]}}}return{dataId:Aa.write(toTypedArray$1(ml,ba.dtype),ba.shape,ba.dtype),shape:ba.shape,dtype:ba.dtype}}};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function draw(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{image:Sa}=aa,{canvas:Ta,options:wa}=ba,{contextOptions:Ea,imageOptions:ka}=wa||{},Aa=(ka==null?void 0:ka.alpha)||1,Fa=(Ea==null?void 0:Ea.contextType)||"2d";if(Fa!=="2d")throw new Error(`Context type ${Ea.contextType} is not supported by the CPU backend.`);const La=Ta.getContext(Fa,(Ea==null?void 0:Ea.contextAttributes)||{});if(La==null)throw new Error(`Could not get the context with ${Fa} type.`);const[el,tl]=Sa.shape.slice(0,2),nl=Sa.shape.length===2?1:Sa.shape[2],rl=xa.data.get(Sa.dataId).values,sl=Sa.dtype==="float32"?255:1,ol=new Uint8ClampedArray(tl*el*4);for(let ll=0;ll<el*tl;++ll){const il=[0,0,0,255*Aa];for(let ul=0;ul<nl;ul++){const dl=rl[ll*nl+ul];if(Sa.dtype==="float32"){if(dl<0||dl>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${dl}.`)}else if(Sa.dtype==="int32"&&(dl<0||dl>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${dl}.`);nl===1?(il[0]=dl*sl,il[1]=dl*sl,il[2]=dl*sl):il[ul]=dl*sl}const cl=ll*4;ol[cl+0]=Math.round(il[0]),ol[cl+1]=Math.round(il[1]),ol[cl+2]=Math.round(il[2]),ol[cl+3]=Math.round(il[3])}Ta.width=tl,Ta.height=el;const al=new ImageData(ol,tl,el);return La.putImageData(al,0,0),Sa}const drawConfig={kernelName:Draw,backendName:"cpu",kernelFunc:draw};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum$4(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;assertNotComplex$2(Sa,"sum");let Ea;Sa.dtype==="bool"?Ea=cast$3({inputs:{x:Sa},backend:xa,attrs:{dtype:"int32"}}):Ea=identity$2({inputs:{x:Sa},backend:xa});const ka=Ea.shape.length,Aa=parseAxisParam$1(Ta,Ea.shape),Fa=getAxesPermutation$1(Aa,ka);let La=Aa,el=Ea;Fa!=null&&(el=transpose$2({inputs:{x:Ea},backend:xa,attrs:{perm:Fa}}),La=getInnerMostAxes$1(La.length,ka)),assertAxesAreInnerMostDims$1("sum",La,el.shape.length);const[tl,nl]=computeOutAndReduceShapes$1(el.shape,La),rl=upcastType$1(el.dtype,"int32");let sl=zeros$1(xa,tl,rl);const ol=sizeFromShape$1(nl),al=xa.data.get(sl.dataId).values,ll=xa.data.get(el.dataId).values;for(let il=0;il<al.length;++il){const cl=il*ol;let ul=0;for(let dl=0;dl<ol;++dl)ul+=ll[cl+dl];al[il]=ul}if(wa){const il=expandShapeToKeepDim$1(sl.shape,Aa),cl=sl;sl=reshape$3({inputs:{x:sl},backend:xa,attrs:{shape:il}}),xa.disposeIntermediateTensorInfo(cl)}return xa.disposeIntermediateTensorInfo(Ea),Fa!=null&&xa.disposeIntermediateTensorInfo(el),sl}const sumConfig$2={kernelName:Sum$1,backendName:"cpu",kernelFunc:sum$4};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{equation:Sa}=ba,Ta=aa,{allDims:wa,summedDims:Ea,idDims:ka}=decodeEinsumEquation$1(Sa,Ta.length);checkEinsumDimSizes$1(wa.length,ka,Ta);const{path:Aa,steps:Fa}=getEinsumComputePath$1(Ea,ka),La=Fa.length;let el=null,tl=wa.length;const nl=[];for(let rl=0;rl<La;++rl){for(const sl of Fa[rl]){const{permutationIndices:ol,expandDims:al}=getEinsumPermutation$1(tl,ka[sl]);let ll;isIdentityPermutation$1(ol)?ll=Ta[sl]:(ll=transpose$2({inputs:{x:Ta[sl]},backend:xa,attrs:{perm:ol}}),nl.push(ll));const il=ll.shape.slice();for(let cl=0;cl<al.length;++cl)il.splice(al[cl],0,1);arraysEqual$1(ll.shape,il)||(ll=reshape$3({inputs:{x:ll},backend:xa,attrs:{shape:il}}),nl.push(ll)),el===null?el=ll:(el=multiply$2({inputs:{a:ll,b:el},backend:xa}),nl.push(el))}rl<La-1&&(Aa[rl]>=0&&(el=sum$4({inputs:{x:el},backend:xa,attrs:{axis:Aa[rl]-(wa.length-tl),keepDims:!1}}),nl.push(el)),tl--)}for(const rl of nl)rl!==el&&xa.disposeIntermediateTensorInfo(rl);return el}const einsumConfig$2={kernelName:Einsum$1,backendName:"cpu",kernelFunc:einsum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function eluGrad$2(ha){const{inputs:aa,backend:xa}=ha,{dy:ba,y:Sa}=aa;assertNotComplex$2([ba,Sa],"eluGrad");const Ta=new Float32Array(sizeFromShape$1(Sa.shape)),wa=xa.data.get(Sa.dataId).values,Ea=xa.data.get(ba.dataId).values;for(let ka=0;ka<wa.length;++ka){const Aa=wa[ka];Aa>=0?Ta[ka]=Ea[ka]:Ta[ka]=Ea[ka]*(Aa+1)}return xa.makeTensorInfo(Sa.shape,"float32",Ta)}const eluGradConfig$2={kernelName:EluGrad$1,backendName:"cpu",kernelFunc:eluGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const p$1=ERF_P$1,a1=ERF_A1$1,a2=ERF_A2$1,a3=ERF_A3$1,a4=ERF_A4$1,a5=ERF_A5$1,erf$2=unaryKernelFunc$2(Erf$1,ha=>{const aa=Math.sign(ha),xa=Math.abs(ha),ba=1/(1+p$1*xa);return aa*(1-((((a5*ba+a4)*ba+a3)*ba+a2)*ba+a1)*ba*Math.exp(-xa*xa))}),erfConfig$2={kernelName:Erf$1,backendName:"cpu",kernelFunc:erf$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{input:Sa}=aa,{dim:Ta}=ba,wa=Sa.shape.length,Ea=Sa.shape.slice();let ka=Ta;return Ta<0&&(assert$2(-(wa+1)<=Ta,()=>`Axis must be in the interval [${-(wa+1)}, ${wa}]`),ka=wa+Ta+1),Ea.splice(ka,0,1),reshape$3({inputs:{x:Sa},backend:xa,attrs:{shape:Ea}})}const expandDimsConfig$2={kernelName:ExpandDims$1,backendName:"cpu",kernelFunc:expandDims$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const realDivImpl=createSimpleBinaryKernelImpl$1((ha,aa)=>ha/aa),div$1=binaryKernelFunc$2(RealDiv$1,realDivImpl),realDivConfig$2={kernelName:RealDiv$1,backendName:"cpu",kernelFunc:div$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftBatch(ha,aa,xa){const ba=ha.shape,Sa=ba[0],Ta=ba[1],wa=xa.data.get(ha.dataId),Ea=wa.complexTensorInfos.real,ka=wa.complexTensorInfos.imag,Aa=[Sa,Ta],Fa=sizeFromShape$1(Aa),La=getTypedArrayFromDType$1("float32",Fa),el=getTypedArrayFromDType$1("float32",Fa);for(let sl=0;sl<Sa;sl++){const ol=slice$2({inputs:{x:Ea},backend:xa,attrs:{begin:[sl,0],size:[1,Ta]}}),al=slice$2({inputs:{x:ka},backend:xa,attrs:{begin:[sl,0],size:[1,Ta]}}),ll=complex$3({inputs:{real:ol,imag:al},backend:xa}),{real:il,imag:cl}=fftImpl$2(ll,aa,xa),ul=mergeRealAndImagArrays$1(il,cl);for(let dl=0;dl<Ta;dl++){const hl=getComplexWithIndex$1(ul,dl);La[sl*Ta+dl]=hl.real,el[sl*Ta+dl]=hl.imag}xa.disposeIntermediateTensorInfo(ol),xa.disposeIntermediateTensorInfo(al),xa.disposeIntermediateTensorInfo(ll)}const tl=xa.makeTensorInfo(Aa,"float32",La),nl=xa.makeTensorInfo(Aa,"float32",el),rl=complex$3({inputs:{real:tl,imag:nl},backend:xa});return xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),rl}function fftImpl$2(ha,aa,xa){const ba=sizeFromShape$1(ha.shape),Sa=xa.data.get(ha.dataId),Ta=xa.data.get(Sa.complexTensorInfos.real.dataId).values,wa=xa.data.get(Sa.complexTensorInfos.imag.dataId).values;if(isExponentOf2(ba)){const Ea=fftRadix2(Ta,wa,ba,aa,xa),ka=[ha.shape[0],ha.shape[1]];if(aa){const Aa=xa.makeTensorInfo(ka,"float32",Ea.real),Fa=xa.makeTensorInfo(ka,"float32",Ea.imag),La=xa.makeTensorInfo([],"float32",createScalarValue$1(ba,"float32")),el=identity$2({inputs:{x:La},backend:xa}),tl=realDivConfig$2.kernelFunc({inputs:{a:Aa,b:La},backend:xa}),nl=realDivConfig$2.kernelFunc({inputs:{a:Fa,b:el},backend:xa}),rl=xa.data.get(tl.dataId).values,sl=xa.data.get(nl.dataId).values;return xa.disposeIntermediateTensorInfo(Aa),xa.disposeIntermediateTensorInfo(Fa),xa.disposeIntermediateTensorInfo(La),xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),{real:rl,imag:sl}}return Ea}else{const Ea=mergeRealAndImagArrays$1(Ta,wa),ka=fourierTransformByMatmul(Ea,ba,aa);return splitRealAndImagArrays$1(ka)}}function isExponentOf2(ha){return(ha&ha-1)===0}function fftRadix2(ha,aa,xa,ba,Sa){if(xa===1)return{real:ha,imag:aa};const Ta=mergeRealAndImagArrays$1(ha,aa),wa=xa/2,Ea=complexWithEvenIndex$1(Ta),ka=Ea.real,Aa=Ea.imag,Fa=[ka.length],La=Sa.makeTensorInfo(Fa,"float32",ka),el=Sa.makeTensorInfo(Fa,"float32",Aa),tl=complex$3({inputs:{real:La,imag:el},backend:Sa}),nl=complexWithOddIndex$1(Ta),rl=nl.real,sl=nl.imag,ol=[rl.length],al=Sa.makeTensorInfo(ol,"float32",rl),ll=Sa.makeTensorInfo(ol,"float32",sl),il=complex$3({inputs:{real:al,imag:ll},backend:Sa}),cl=fftRadix2(ka,Aa,wa,ba,Sa),ul=cl.real,dl=cl.imag,hl=[ul.length],pl=Sa.makeTensorInfo(hl,"float32",ul),fl=Sa.makeTensorInfo(hl,"float32",dl),ml=complex$3({inputs:{real:pl,imag:fl},backend:Sa}),gl=fftRadix2(rl,sl,wa,ba,Sa),$l=gl.real,xl=gl.imag,yl=[$l.length],bl=Sa.makeTensorInfo(yl,"float32",$l),Sl=Sa.makeTensorInfo(yl,"float32",xl),Cl=complex$3({inputs:{real:bl,imag:Sl},backend:Sa}),Tl=exponents$1(xa,ba),Il=[Tl.real.length],wl=Sa.makeTensorInfo(Il,"float32",Tl.real),Nl=Sa.makeTensorInfo(Il,"float32",Tl.imag),vl=complex$3({inputs:{real:wl,imag:Nl},backend:Sa}),kl=multiply$2({inputs:{a:vl,b:Cl},backend:Sa}),El=add$2({inputs:{a:ml,b:kl},backend:Sa}),Al=sub$3({inputs:{a:ml,b:kl},backend:Sa}),Rl=real$2({inputs:{input:El},backend:Sa}),Pl=real$2({inputs:{input:Al},backend:Sa}),Dl=imag$2({inputs:{input:El},backend:Sa}),_l=imag$2({inputs:{input:Al},backend:Sa}),Fl=concat$2({inputs:[Rl,Pl],backend:Sa,attrs:{axis:0}}),Ol=concat$2({inputs:[Dl,_l],backend:Sa,attrs:{axis:0}}),Ml=Sa.data.get(Fl.dataId).values,Ul=Sa.data.get(Ol.dataId).values;return Sa.disposeIntermediateTensorInfo(La),Sa.disposeIntermediateTensorInfo(el),Sa.disposeIntermediateTensorInfo(tl),Sa.disposeIntermediateTensorInfo(al),Sa.disposeIntermediateTensorInfo(ll),Sa.disposeIntermediateTensorInfo(il),Sa.disposeIntermediateTensorInfo(pl),Sa.disposeIntermediateTensorInfo(fl),Sa.disposeIntermediateTensorInfo(ml),Sa.disposeIntermediateTensorInfo(bl),Sa.disposeIntermediateTensorInfo(Sl),Sa.disposeIntermediateTensorInfo(Cl),Sa.disposeIntermediateTensorInfo(wl),Sa.disposeIntermediateTensorInfo(Nl),Sa.disposeIntermediateTensorInfo(vl),Sa.disposeIntermediateTensorInfo(kl),Sa.disposeIntermediateTensorInfo(El),Sa.disposeIntermediateTensorInfo(Al),Sa.disposeIntermediateTensorInfo(Rl),Sa.disposeIntermediateTensorInfo(Dl),Sa.disposeIntermediateTensorInfo(Pl),Sa.disposeIntermediateTensorInfo(_l),Sa.disposeIntermediateTensorInfo(Fl),Sa.disposeIntermediateTensorInfo(Ol),{real:Ml,imag:Ul}}function fourierTransformByMatmul(ha,aa,xa){const ba=new Float32Array(aa*2);for(let Sa=0;Sa<aa;Sa++){let Ta=0,wa=0;for(let Ea=0;Ea<aa;Ea++){const ka=exponent$1(Sa*Ea,aa,xa),Aa=getComplexWithIndex$1(ha,Ea);Ta+=Aa.real*ka.real-Aa.imag*ka.imag,wa+=Aa.real*ka.imag+Aa.imag*ka.real}xa&&(Ta/=aa,wa/=aa),assignToTypedArray$1(ba,Ta,wa,Sa)}return ba}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft$2(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=sizeFromShape$1(ba.shape),Ta=ba.shape[ba.shape.length-1],wa=Sa/Ta,Ea=reshape$3({inputs:{x:ba},backend:xa,attrs:{shape:[wa,Ta]}}),ka=fftBatch(Ea,!1,xa),Aa=reshape$3({inputs:{x:ka},backend:xa,attrs:{shape:ba.shape}});return xa.disposeIntermediateTensorInfo(Ea),xa.disposeIntermediateTensorInfo(ka),Aa}const fftConfig$2={kernelName:FFT$1,backendName:"cpu",kernelFunc:fft$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$3(ha){const{backend:aa,attrs:xa}=ha,{shape:ba,value:Sa,dtype:Ta}=xa,wa=Ta||inferDtype$1(Sa),Ea=getArrayFromDType$1(wa,sizeFromShape$1(ba));return fillValues(Ea,Sa,wa),aa.makeTensorInfo(ba,wa,Ea)}const fillConfig$2={kernelName:Fill$1,backendName:"cpu",kernelFunc:fill$3};function fillValues(ha,aa,xa){ha.fill(aa)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig$2={kernelName:FlipLeftRight$1,backendName:"cpu",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{image:ba}=ha,Sa=xa,Ta=getTypedArrayFromDType$1(ba.dtype,sizeFromShape$1(ba.shape)),[wa,Ea,ka,Aa]=ba.shape,Fa=Sa.data.get(ba.dataId).values;for(let el=0;el<wa;el++){const tl=el*ka*Ea*Aa;for(let nl=0;nl<Ea;nl++){const rl=nl*(ka*Aa);for(let sl=0;sl<ka;sl++){const ol=sl*Aa;for(let al=0;al<Aa;al++){const ll=Math.round(ka-sl-1),il=tl+rl+ol+al;let cl=Fa[il];if(ll>=0&&ll<ka){const ul=ll*Aa,dl=tl+rl+ul+al;cl=Fa[dl]}Ta[il]=cl}}}}return{dataId:Sa.write(Ta,ba.shape,ba.dtype),shape:ba.shape,dtype:ba.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta,bias:wa,preluActivationWeights:Ea}=aa,{strides:ka,pad:Aa,dataFormat:Fa,dilations:La,dimRoundingMode:el,activation:tl,leakyreluAlpha:nl}=ba;let rl=conv2D({inputs:{x:Sa,filter:Ta},backend:xa,attrs:{strides:ka,pad:Aa,dataFormat:Fa,dilations:La,dimRoundingMode:el}});if(wa){const sl=rl;if(Fa==="NCHW"&&wa.shape.length===1&&wa.shape[0]!==1){const ol=reshape$3({inputs:{x:wa},backend:xa,attrs:{shape:[wa.shape[0],1,1]}});rl=add$2({inputs:{a:rl,b:ol},backend:xa}),xa.disposeIntermediateTensorInfo(ol)}else rl=add$2({inputs:{a:rl,b:wa},backend:xa});xa.disposeIntermediateTensorInfo(sl)}if(tl){const sl=rl;if(Fa==="NCHW"&&tl==="prelu"&&Ea.shape.length===1&&Ea.shape[0]!==1){const ol=reshape$3({inputs:{x:Ea},backend:xa,attrs:{shape:[Ea.shape[0],1,1]}});rl=applyActivation$1(xa,rl,tl,ol,nl),xa.disposeIntermediateTensorInfo(ol)}else rl=applyActivation$1(xa,rl,tl,Ea,nl);xa.disposeIntermediateTensorInfo(sl)}return rl}const fusedConv2DConfig$2={kernelName:FusedConv2D$1,backendName:"cpu",kernelFunc:fusedConv2D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta,bias:wa,preluActivationWeights:Ea}=aa,{strides:ka,pad:Aa,dataFormat:Fa,dilations:La,dimRoundingMode:el,activation:tl,leakyreluAlpha:nl}=ba;let rl=depthwiseConv2dNative$2({inputs:{x:Sa,filter:Ta},backend:xa,attrs:{strides:ka,pad:Aa,dataFormat:Fa,dilations:La,dimRoundingMode:el}});if(wa){const sl=rl;rl=add$2({inputs:{a:rl,b:wa},backend:xa}),xa.disposeIntermediateTensorInfo(sl)}if(tl){const sl=rl;rl=applyActivation$1(xa,rl,tl,Ea,nl),xa.disposeIntermediateTensorInfo(sl)}return rl}const fusedDepthwiseConv2DConfig$2={kernelName:FusedDepthwiseConv2D$1,backendName:"cpu",kernelFunc:fusedDepthwiseConv2D$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd$2(ha){const{inputs:aa,backend:xa}=ha,{params:ba,indices:Sa}=aa,Ta=sizeFromShape$1(ba.shape),wa=Sa.shape,Ea=wa[wa.length-1],[ka,Aa,Fa,La]=prepareAndValidate$1(ba,Sa);if(Aa===0)return xa.makeTensorInfo(ka,ba.dtype,[]);const el=xa.data.get(Sa.dataId).values,tl=xa.bufferSync(ba),nl=gatherNdImpl$1(el,tl,ba.dtype,Aa,Ea,Fa,La,ba.shape,Ta);return xa.makeTensorInfo(ka,ba.dtype,nl.values)}const gatherNdConfig$2={kernelName:GatherNd$1,backendName:"cpu",kernelFunc:gatherNd$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,indices:Ta}=aa,{axis:wa,batchDims:Ea}=ba;assertNotComplex$2([Sa,Ta],"gatherV2");const ka=parseAxisParam$1(wa,Sa.shape)[0],Aa=xa.data.get(Ta.dataId).values,Fa=Sa.shape[ka];for(let il=0;il<Aa.length;++il){const cl=Aa[il];assert$2(cl<=Fa-1&&cl>=0,()=>`GatherV2: the index value ${cl} is not in [0, ${Fa-1}]`)}let La=Ea;Ea==null&&(La=0);const el=sizeFromShape$1(Ta.shape),tl=collectGatherOpShapeInfo$1(Sa,Ta,ka,La),nl=reshape$3({inputs:{x:Sa},backend:xa,attrs:{shape:[tl.batchSize,tl.outerSize,tl.dimSize,tl.sliceSize]}}),rl=reshape$3({inputs:{x:Ta},backend:xa,attrs:{shape:[tl.batchSize,el/tl.batchSize]}}),sl=[tl.batchSize,tl.outerSize,el/tl.batchSize,tl.sliceSize],ol=xa.bufferSync(rl),al=xa.bufferSync(nl),ll=gatherV2Impl$1(al,ol,sl);return xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(rl),xa.makeTensorInfo(tl.outputShape,ll.dtype,ll.values)}const gatherV2Config$2={kernelName:GatherV2$1,backendName:"cpu",kernelFunc:gatherV2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft$2(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=sizeFromShape$1(ba.shape),Ta=ba.shape[ba.shape.length-1],wa=Sa/Ta,Ea=reshape$3({inputs:{x:ba},backend:xa,attrs:{shape:[wa,Ta]}}),ka=fftBatch(Ea,!0,xa),Aa=reshape$3({inputs:{x:ka},backend:xa,attrs:{shape:ba.shape}});return xa.disposeIntermediateTensorInfo(Ea),xa.disposeIntermediateTensorInfo(ka),Aa}const ifftConfig$2={kernelName:IFFT$1,backendName:"cpu",kernelFunc:ifft$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isFinite$3=unaryKernelFunc$2(IsFinite$1,ha=>Number.isFinite(ha)?1:0,"bool"),isFiniteConfig$2={kernelName:IsFinite$1,backendName:"cpu",kernelFunc:isFinite$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isInf$2=unaryKernelFunc$2(IsInf$1,ha=>Math.abs(ha)===1/0?1:0,"bool"),isInfConfig$2={kernelName:IsInf$1,backendName:"cpu",kernelFunc:isInf$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const isNaN$3=unaryKernelFunc$2(IsNan$1,ha=>Number.isNaN(ha)?1:0,"bool"),isNaNConfig$2={kernelName:IsNan$1,backendName:"cpu",kernelFunc:isNaN$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace$2(ha){const{backend:aa,attrs:xa}=ha,{start:ba,stop:Sa,num:Ta}=xa,wa=linSpaceImpl$1(ba,Sa,Ta);return aa.makeTensorInfo([wa.length],"float32",wa)}const linSpaceConfig$2={kernelName:LinSpace$1,backendName:"cpu",kernelFunc:linSpace$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const log1p$2=unaryKernelFunc$2(Log1p$1,ha=>Math.log1p(ha)),log1pConfig$2={kernelName:Log1p$1,backendName:"cpu",kernelFunc:log1p$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalAndImpl=createSimpleBinaryKernelImpl$1((ha,aa)=>ha&&aa),logicalAnd$2=binaryKernelFunc$2(LogicalAnd$1,logicalAndImpl,null,"bool"),logicalAndConfig$2={kernelName:LogicalAnd$1,backendName:"cpu",kernelFunc:logicalAnd$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalNot$2=unaryKernelFunc$2(LogicalNot$1,ha=>ha?0:1,"bool"),logicalNotConfig$2={kernelName:LogicalNot$1,backendName:"cpu",kernelFunc:logicalNot$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logicalOrImpl=createSimpleBinaryKernelImpl$1((ha,aa)=>ha||aa),logicalOr$2=binaryKernelFunc$2(LogicalOr$1,logicalOrImpl,null,"bool"),logicalOrConfig$2={kernelName:LogicalOr$1,backendName:"cpu",kernelFunc:logicalOr$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lRN(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{depthRadius:Ta,bias:wa,alpha:Ea,beta:ka}=ba;assertNotComplex$2(Sa,"LRN");const Aa=Sa.shape[3],Fa=Aa-1,La=xa.data.get(Sa.dataId).values,el=sizeFromShape$1(Sa.shape),tl=new Float32Array(el);function nl(rl){const sl=rl%Aa;let ol=rl-sl+Math.max(0,sl-Ta);const al=rl-sl+Math.min(sl+Ta,Fa);let ll=0;for(;ol<=al;ol++){const il=La[ol];ll+=il*il}return ll}for(let rl=0;rl<el;rl++){const sl=nl(rl),ol=La[rl]*Math.pow(wa+Ea*sl,-ka);tl[rl]=ol}return xa.makeTensorInfo(Sa.shape,Sa.dtype,tl)}const LRNConfig$2={kernelName:LRN$1,backendName:"cpu",kernelFunc:lRN};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lRNGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,y:Ta,dy:wa}=aa,{depthRadius:Ea,bias:ka,alpha:Aa,beta:Fa}=ba;assertNotComplex$2(wa,"LRNGrad");const La=sizeFromShape$1(wa.shape),el=wa.shape[3],tl=xa.data.get(wa.dataId).values,nl=xa.data.get(Sa.dataId).values,rl=xa.data.get(Ta.dataId).values,sl=new Float32Array(La),ol=La;for(let al=0;al<ol;al++){const ll=al%el,il=al-ll+Math.max(0,ll-Ea),cl=al-ll+Math.min(el,ll+Ea+1);let ul=0;for(let dl=il;dl<cl;dl++)ul+=Math.pow(nl[dl],2);ul=Aa*ul+ka;for(let dl=il;dl<cl;dl++){let hl=-2*Aa*Fa*nl[dl]*rl[al]/ul;al===dl&&(hl+=Math.pow(ul,-Fa)),hl*=tl[al],sl[dl]+=hl}}return xa.makeTensorInfo(wa.shape,Sa.dtype,sl)}const LRNGradConfig$2={kernelName:LRNGrad$1,backendName:"cpu",kernelFunc:lRNGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{reductionIndices:Ta,keepDims:wa}=ba,Ea=xa;let ka=Sa.shape;const Aa=ka.length,Fa=parseAxisParam$1(Ta,ka);let La=Fa;const el=getAxesPermutation$1(La,Aa);let tl=Ea.data.get(Sa.dataId).values;if(el!=null){const il=new Array(Aa);for(let cl=0;cl<il.length;cl++)il[cl]=ka[el[cl]];tl=transposeImpl$3(tl,ka,Sa.dtype,el,il),La=getInnerMostAxes$1(La.length,Aa),ka=il}assertNotComplex$2(Sa,"max"),assertAxesAreInnerMostDims$1("max",La,Aa);const[nl,rl]=computeOutAndReduceShapes$1(ka,La),sl=sizeFromShape$1(rl),ol=maxImpl$3(tl,sl,nl,Sa.dtype),al=Ea.write(ol,nl,Sa.dtype);let ll=nl;return wa&&(ll=expandShapeToKeepDim$1(nl,Fa)),{dataId:al,shape:ll,dtype:Sa.dtype}}const maxConfig$2={kernelName:Max$1,backendName:"cpu",kernelFunc:max$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;assertNotComplex$2(Sa,"maxPool");const{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=ba,Aa=1;assert$2(eitherStridesOrDilationsAreOne$1(wa,Aa),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Aa}'`);const Fa=computePool2DInfo$1(Sa.shape,Ta,wa,Aa,Ea,ka);let La;if(Fa.filterWidth===1&&Fa.filterHeight===1&&arraysEqual$1(Fa.inShape,Fa.outShape))La=identity$2({inputs:{x:Sa},backend:xa});else{const el=xa.data.get(Sa.dataId).values,tl=computeStrides$1(Sa.shape),nl=pool(el,Sa.shape,Sa.dtype,tl,Fa,"max");La=xa.makeTensorInfo(Fa.outShape,Sa.dtype,nl.values)}return La}const maxPoolConfig$2={kernelName:MaxPool$1,backendName:"cpu",kernelFunc:maxPool$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka,dataFormat:Aa}=ba;assertNotComplex$2(Sa,"maxPool3d");const Fa=computePool3DInfo$1(Sa.shape,Ta,wa,1,Ea,ka,Aa),La=xa.data.get(Sa.dataId).values,el=pool3d(La,Sa.shape,Sa.dtype,computeStrides$1(Sa.shape),Fa,"max");return xa.makeTensorInfo(el.shape,"float32",el.values)}const maxPool3DConfig$2={kernelName:MaxPool3D$1,backendName:"cpu",kernelFunc:maxPool3D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,{filterSize:wa,strides:Ea,pad:ka,dimRoundingMode:Aa}=ba;assertNotComplex$2([Sa,Ta],"maxPool3DGrad");const Fa=computePool3DInfo$1(Ta.shape,wa,Ea,1,ka,Aa),La=xa.bufferSync(Ta),el=maxPool3dPositions(La,Fa),tl=Fa.strideDepth,nl=Fa.strideHeight,rl=Fa.strideWidth,sl=Fa.dilationDepth,ol=Fa.dilationHeight,al=Fa.dilationWidth,ll=Fa.effectiveFilterDepth,il=Fa.effectiveFilterHeight,cl=Fa.effectiveFilterWidth,ul=ll-1-Fa.padInfo.front,dl=cl-1-Fa.padInfo.left,hl=il-1-Fa.padInfo.top,pl=buffer$1(Ta.shape,"float32"),fl=xa.bufferSync(Sa);for(let ml=0;ml<Fa.batchSize;++ml)for(let gl=0;gl<Fa.inChannels;++gl)for(let $l=0;$l<Fa.inDepth;++$l)for(let xl=0;xl<Fa.inHeight;++xl)for(let yl=0;yl<Fa.inWidth;++yl){const bl=$l-ul,Sl=xl-hl,Cl=yl-dl;let Tl=0;for(let Il=0;Il<ll;Il+=sl){const wl=(bl+Il)/tl;if(!(wl<0||wl>=Fa.outDepth||Math.floor(wl)!==wl))for(let Nl=0;Nl<il;Nl+=ol){const vl=(Sl+Nl)/nl;if(!(vl<0||vl>=Fa.outHeight||Math.floor(vl)!==vl))for(let kl=0;kl<cl;kl+=al){const El=(Cl+kl)/rl;if(El<0||El>=Fa.outWidth||Math.floor(El)!==El)continue;const Al=ll*il*cl-1-el.get(ml,wl,vl,El,gl),Rl=Il*il*cl+Nl*cl+kl,Pl=Al===Rl?1:0;if(Pl===0)continue;const Dl=fl.get(ml,wl,vl,El,gl);Tl+=Dl*Pl}}}pl.set(Tl,ml,$l,xl,yl,gl)}return xa.makeTensorInfo(pl.shape,pl.dtype,pl.values)}const maxPool3DGradConfig$2={kernelName:MaxPool3DGrad$1,backendName:"cpu",kernelFunc:maxPool3DGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta,output:wa}=aa,Ea=Ta;assertNotComplex$2([Ta,wa],"maxPoolGrad");const{filterSize:ka,strides:Aa,pad:Fa,dimRoundingMode:La}=ba,el=computePool2DInfo$1(Ea.shape,ka,Aa,1,Fa,La),tl=xa.data.get(Ea.dataId).values,nl=buffer$1(el.outShape,Ea.dtype,maxPoolPositions(tl,Ea.shape,Ea.dtype,el).values),rl=el.strideHeight,sl=el.strideWidth,ol=el.dilationHeight,al=el.dilationWidth,ll=el.effectiveFilterHeight,il=el.effectiveFilterWidth,cl=il-1-el.padInfo.left,ul=ll-1-el.padInfo.top,dl=buffer$1(Ea.shape,"float32"),hl=xa.data.get(Sa.dataId).values,pl=buffer$1(Sa.shape,"float32",hl);for(let fl=0;fl<el.batchSize;++fl)for(let ml=0;ml<el.inChannels;++ml)for(let gl=0;gl<el.inHeight;++gl)for(let $l=0;$l<el.inWidth;++$l){const xl=gl-ul,yl=$l-cl;let bl=0;for(let Sl=0;Sl<ll;Sl+=ol){const Cl=(xl+Sl)/rl;if(!(Cl<0||Cl>=el.outHeight||Math.floor(Cl)!==Cl))for(let Tl=0;Tl<il;Tl+=al){const Il=(yl+Tl)/sl;if(Il<0||Il>=el.outWidth||Math.floor(Il)!==Il)continue;const wl=ll*il-1-nl.get(fl,Cl,Il,ml),Nl=Sl*il+Tl,vl=wl===Nl?1:0;if(vl===0)continue;const kl=pl.get(fl,Cl,Il,ml);bl+=kl*vl}}dl.set(bl,fl,gl,$l,ml)}return xa.makeTensorInfo(dl.shape,dl.dtype,dl.values)}const maxPoolGradConfig$2={kernelName:MaxPoolGrad$1,backendName:"cpu",kernelFunc:maxPoolGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl$2(ha,aa,xa,ba,Sa){const Ta=computeStrides$1(aa),wa=pool(ha,aa,xa,Ta,Sa,"max"),Ea=maxPoolPositions(ha,aa,xa,Sa,!0,ba);return[wa.values,Ea.values]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig$2={kernelName:MaxPoolWithArgmax$1,backendName:"cpu",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{x:ba}=ha,{filterSize:Sa,strides:Ta,pad:wa,includeBatchInIndex:Ea}=aa,ka=xa;assertNotComplex$2(ba,"MaxPoolWithArgmax");const Aa=ka.data.get(ba.dataId).values,Fa=computePool2DInfo$1(ba.shape,Sa,Ta,[1,1],wa),[La,el]=maxPoolWithArgmaxImpl$2(Aa,ba.shape,ba.dtype,Ea,Fa),tl=ka.write(La,Fa.outShape,ba.dtype),nl=ka.write(el,Fa.outShape,ba.dtype);return[{dataId:tl,shape:Fa.outShape,dtype:ba.dtype},{dataId:nl,shape:Fa.outShape,dtype:"int32"}]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mean(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=parseAxisParam$1(Ta,Sa.shape),Aa=computeOutAndReduceShapes$1(Sa.shape,Ea)[1],Fa=sizeFromShape$1(Aa),La=[],el=xa.makeTensorInfo([],"float32",new Float32Array([Fa]));La.push(el);const tl=cast$3({inputs:{x:Sa},backend:xa,attrs:{dtype:"float32"}});La.push(tl);const nl=div$1({inputs:{a:tl,b:el},backend:xa});La.push(nl);const rl=sum$4({inputs:{x:nl},backend:xa,attrs:{axis:Ta,keepDims:wa}});return La.forEach(sl=>xa.disposeIntermediateTensorInfo(sl)),rl}const meanConfig$2={kernelName:Mean$1,backendName:"cpu",kernelFunc:mean};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;assertNotComplex$2(Sa,"min");const Ea=parseAxisParam$1(Ta,Sa.shape);let ka=Ea;const Aa=getAxesPermutation$1(ka,Sa.shape.length);let Fa=Sa;Aa!=null&&(Fa=transpose$2({inputs:{x:Sa},backend:xa,attrs:{perm:Aa}}),ka=getInnerMostAxes$1(ka.length,Sa.shape.length)),assertAxesAreInnerMostDims$1("min",ka,Fa.shape.length);const[La,el]=computeOutAndReduceShapes$1(Fa.shape,ka),tl=sizeFromShape$1(el),nl=makeZerosTypedArray$1(sizeFromShape$1(La),Fa.dtype),rl=xa.data.get(Fa.dataId).values;for(let ol=0;ol<nl.length;++ol){const al=ol*tl;let ll=rl[al];for(let il=0;il<tl;++il){const cl=rl[al+il];(Number.isNaN(cl)||cl<ll)&&(ll=cl)}nl[ol]=ll}Aa!=null&&xa.disposeIntermediateTensorInfo(Fa);const sl=xa.makeTensorInfo(La,Fa.dtype,nl);if(wa){const ol=expandShapeToKeepDim$1(La,Ea),al=reshape$3({inputs:{x:sl},backend:xa,attrs:{shape:ol}});return xa.disposeIntermediateTensorInfo(sl),al}return sl}const minConfig$2={kernelName:Min$1,backendName:"cpu",kernelFunc:min$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mirrorPad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{paddings:Ta,mode:wa}=ba;assertNotComplex$2(Sa,"mirrorPad");const Ea=Ta.map((ll,il)=>ll[0]+Sa.shape[il]+ll[1]),ka=Ta.map(ll=>ll[0]),Aa=Ta.map((ll,il)=>ll[0]+Sa.shape[il]),Fa=wa==="reflect"?0:1,La=xa.data.get(Sa.dataId).values,el=Sa.shape.length,tl=computeStrides$1(Sa.shape),nl=sizeFromShape$1(Ea),rl=Ea.length,sl=computeStrides$1(Ea),ol=getTypedArrayFromDType$1(Sa.dtype,nl);for(let ll=0;ll<nl;ll++){let il=indexToLoc$1(ll,rl,sl);for(let ul=0;ul<rl;ul++)il[ul]<ka[ul]?il[ul]=ka[ul]*2-il[ul]-Fa:il[ul]>=Aa[ul]&&(il[ul]=(Aa[ul]-1)*2-il[ul]+Fa);il=il.map((ul,dl)=>ul-ka[dl]);const cl=locToIndex$1(il,el,tl);ol[ll]=La[cl]}return{dataId:xa.write(ol,Ea,Sa.dtype),shape:Ea,dtype:Sa.dtype}}const mirrorPadConfig$2={kernelName:MirrorPad$1,backendName:"cpu",kernelFunc:mirrorPad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const modImpl=createSimpleBinaryKernelImpl$1((ha,aa)=>{const xa=ha%aa;return ha<0&&aa<0||ha>=0&&aa>=0?xa:(xa+aa)%aa}),mod$2=binaryKernelFunc$2(Mod$1,modImpl),modConfig$2={kernelName:Mod$1,backendName:"cpu",kernelFunc:mod$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{logits:Sa}=aa,{dim:Ta}=ba,wa=Sa.shape.length;let Ea=Ta;if(Ea===-1&&(Ea=wa-1),Ea!==wa-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${wa} and dim was ${Ea}`);const ka=parseAxisParam$1([Ea],Sa.shape),Aa=max$2({inputs:{x:Sa},backend:xa,attrs:{reductionIndices:ka,keepDims:!1}}),Fa=expandShapeToKeepDim$1(Aa.shape,ka),La=reshape$3({inputs:{x:Aa},backend:xa,attrs:{shape:Fa}}),el=sub$3({inputs:{a:Sa,b:La},backend:xa}),tl=exp$2({inputs:{x:el},backend:xa}),nl=sum$4({inputs:{x:tl},backend:xa,attrs:{axis:ka,keepDims:!1}}),rl=reshape$3({inputs:{x:nl},backend:xa,attrs:{shape:Fa}}),sl=div$1({inputs:{a:tl,b:rl},backend:xa});return xa.disposeIntermediateTensorInfo(Aa),xa.disposeIntermediateTensorInfo(La),xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(rl),sl}const softmaxConfig$2={kernelName:Softmax$3,backendName:"cpu",kernelFunc:softmax$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{logits:Sa}=aa,{numSamples:Ta,seed:wa,normalized:Ea}=ba;assertNotComplex$2(Sa,"multinomial");const ka=Ea?Sa:softmax$2({inputs:{logits:Sa},backend:xa,attrs:{dim:-1}}),Aa=ka.shape[0],Fa=ka.shape[1],La=xa.data.get(ka.dataId).values,el=[Aa,Ta],tl=makeZerosTypedArray$1(sizeFromShape$1(el),"int32");for(let nl=0;nl<Aa;++nl){const rl=nl*Fa,sl=new Float32Array(Fa-1);sl[0]=La[rl];for(let ll=1;ll<sl.length;++ll)sl[ll]=sl[ll-1]+La[rl+ll];const ol=seedrandom.alea(wa.toString()),al=nl*Ta;for(let ll=0;ll<Ta;++ll){const il=ol();tl[al+ll]=sl.length;for(let cl=0;cl<sl.length;cl++)if(il<sl[cl]){tl[al+ll]=cl;break}}}return Ea||xa.disposeIntermediateTensorInfo(ka),xa.makeTensorInfo(el,"int32",tl)}const multinomialConfig$2={kernelName:Multinomial$1,backendName:"cpu",kernelFunc:multinomial$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl$3=nonMaxSuppressionV3Impl$4;function nonMaxSuppressionV3$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka}=ba;assertNotComplex$2(Sa,"NonMaxSuppression");const Aa=xa.data.get(Sa.dataId).values,Fa=xa.data.get(Ta.dataId).values,{selectedIndices:La}=nonMaxSuppressionV3Impl$3(Aa,Fa,wa,Ea,ka);return xa.makeTensorInfo([La.length],"int32",new Int32Array(La))}const nonMaxSuppressionV3Config$2={kernelName:NonMaxSuppressionV3$1,backendName:"cpu",kernelFunc:nonMaxSuppressionV3$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl$3=nonMaxSuppressionV4Impl$4;function nonMaxSuppressionV4$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka,padToMaxOutputSize:Aa}=ba;assertNotComplex$2(Sa,"NonMaxSuppressionPadded");const Fa=xa.data.get(Sa.dataId).values,La=xa.data.get(Ta.dataId).values,{selectedIndices:el,validOutputs:tl}=nonMaxSuppressionV4Impl$3(Fa,La,wa,Ea,ka,Aa);return[xa.makeTensorInfo([el.length],"int32",new Int32Array(el)),xa.makeTensorInfo([],"int32",new Int32Array([tl]))]}const nonMaxSuppressionV4Config$2={kernelName:NonMaxSuppressionV4$1,backendName:"cpu",kernelFunc:nonMaxSuppressionV4$2};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl$3=nonMaxSuppressionV5Impl$4;function nonMaxSuppressionV5$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka,softNmsSigma:Aa}=ba;assertNotComplex$2(Sa,"NonMaxSuppressionWithScore");const Fa=xa.data.get(Sa.dataId).values,La=xa.data.get(Ta.dataId).values,el=wa,tl=Ea,nl=ka,rl=Aa,{selectedIndices:sl,selectedScores:ol}=nonMaxSuppressionV5Impl$3(Fa,La,el,tl,nl,rl);return[xa.makeTensorInfo([sl.length],"int32",new Int32Array(sl)),xa.makeTensorInfo([ol.length],"float32",new Float32Array(ol))]}const nonMaxSuppressionV5Config$2={kernelName:NonMaxSuppressionV5$1,backendName:"cpu",kernelFunc:nonMaxSuppressionV5$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function oneHot$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{indices:Sa}=aa,{dtype:Ta,depth:wa,onValue:Ea,offValue:ka}=ba;assertNotComplex$2(Sa,"oneHot");const Aa=sizeFromShape$1(Sa.shape),Fa=new Float32Array(Aa*wa);Fa.fill(ka);const La=xa.data.get(Sa.dataId).values;for(let el=0;el<Aa;++el)La[el]>=0&&La[el]<wa&&(Fa[el*wa+La[el]]=Ea);return xa.makeTensorInfo([...Sa.shape,wa],Ta,Fa)}const oneHotConfig$2={kernelName:OneHot$1,backendName:"cpu",kernelFunc:oneHot$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike$3(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(ba.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(ba.dtype==="complex64"){const Sa=real$2({inputs:{input:ba},backend:xa}),Ta=zerosLike$3({inputs:{x:Sa},backend:xa}),wa=imag$2({inputs:{input:ba},backend:xa}),Ea=zerosLike$3({inputs:{x:wa},backend:xa}),ka=complex$3({inputs:{real:Ta,imag:Ea},backend:xa});return xa.disposeIntermediateTensorInfo(Sa),xa.disposeIntermediateTensorInfo(Ta),xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(Ea),ka}else return fill$3({backend:xa,attrs:{shape:ba.shape,value:0,dtype:ba.dtype}})}const zerosLikeConfig$2={kernelName:ZerosLike$1,backendName:"cpu",kernelFunc:zerosLike$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(ba.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(ba.dtype==="complex64"){const Sa=real$2({inputs:{input:ba},backend:xa}),Ta=onesLike$2({inputs:{x:Sa},backend:xa}),wa=imag$2({inputs:{input:ba},backend:xa}),Ea=zerosLike$3({inputs:{x:wa},backend:xa}),ka=complex$3({inputs:{real:Ta,imag:Ea},backend:xa});return xa.disposeIntermediateTensorInfo(Sa),xa.disposeIntermediateTensorInfo(Ta),xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(Ea),ka}else return fill$3({backend:xa,attrs:{shape:ba.shape,value:1,dtype:ba.dtype}})}const onesLikeConfig$2={kernelName:OnesLike$1,backendName:"cpu",kernelFunc:onesLike$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{axis:Sa}=ba;if(aa.length===1)return expandDims$2({inputs:{input:aa[0]},backend:xa,attrs:{dim:Sa}});const Ta=aa[0].shape,wa=aa[0].dtype;aa.forEach(Fa=>{assertShapesMatch$1(Ta,Fa.shape,"All tensors passed to stack must have matching shapes"),assert$2(wa===Fa.dtype,()=>"All tensors passed to stack must have matching dtypes")});const Ea=[],ka=aa.map(Fa=>{const La=expandDims$2({inputs:{input:Fa},backend:xa,attrs:{dim:Sa}});return Ea.push(La),La}),Aa=concat$2({inputs:ka,backend:xa,attrs:{axis:Sa}});return Ea.forEach(Fa=>xa.disposeIntermediateTensorInfo(Fa)),Aa}const packConfig$2={kernelName:Pack$1,backendName:"cpu",kernelFunc:pack$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function padV2$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{paddings:Ta,constantValue:wa}=ba;assertNotComplex$2(Sa,"pad");const Ea=Ta.map((al,ll)=>al[0]+Sa.shape[ll]+al[1]),ka=Ta.map(al=>al[0]),Aa=xa.data.get(Sa.dataId).values,Fa=sizeFromShape$1(Sa.shape),La=Sa.shape.length,el=computeStrides$1(Sa.shape),tl=sizeFromShape$1(Ea),nl=Ea.length,rl=computeStrides$1(Ea),sl=getTypedArrayFromDType$1(Sa.dtype,tl);wa!==0&&sl.fill(wa);for(let al=0;al<Fa;al++){const il=indexToLoc$1(al,La,el).map((ul,dl)=>ul+ka[dl]),cl=locToIndex$1(il,nl,rl);sl[cl]=Aa[al]}return{dataId:xa.write(sl,Ea,Sa.dtype),shape:Ea,dtype:Sa.dtype}}const padV2Config$2={kernelName:PadV2$1,backendName:"cpu",kernelFunc:padV2$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const powImpl=createSimpleBinaryKernelImpl$1((ha,aa)=>Math.pow(ha,aa)),pow$3=binaryKernelFunc$2(Pow$1,powImpl),powConfig$2={kernelName:Pow$1,backendName:"cpu",kernelFunc:pow$3};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{paramsNestedSplits:Sa,paramsDenseValues:Ta,indices:wa}=aa,Ea=Sa.map(sl=>xa.data.get(sl.dataId).values),ka=Sa.map(sl=>sl.shape),Aa=xa.data.get(Ta.dataId).values,Fa=xa.data.get(wa.dataId).values,[La,el,tl]=raggedGatherImpl$1(Ea,ka,Aa,Ta.shape,Ta.dtype,Fa,wa.shape),nl=La.map(sl=>xa.makeTensorInfo([sl.length],"int32",sl)),rl=xa.makeTensorInfo(tl,Ta.dtype,el);return nl.concat([rl])}const raggedGatherConfig$2={kernelName:RaggedGather$1,backendName:"cpu",kernelFunc:raggedGather$2};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange$2(ha){const{inputs:aa,backend:xa}=ha,{starts:ba,limits:Sa,deltas:Ta}=aa,wa=xa.data.get(ba.dataId).values,Ea=xa.data.get(Sa.dataId).values,ka=xa.data.get(Ta.dataId).values,[Aa,Fa]=raggedRangeImpl$1(wa,ba.shape,ba.dtype,Ea,Sa.shape,ka,Ta.shape),La=xa.makeTensorInfo([Aa.length],"int32",Aa),el=xa.makeTensorInfo([Fa.length],ba.dtype,Fa);return[La,el]}const raggedRangeConfig$2={kernelName:RaggedRange$1,backendName:"cpu",kernelFunc:raggedRange$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{shape:Sa,values:Ta,defaultValue:wa,rowPartitionTensors:Ea}=aa,{rowPartitionTypes:ka}=ba,Aa=xa.data.get(Sa.dataId).values,Fa=xa.data.get(Ta.dataId).values,La=xa.data.get(wa.dataId).values,el=Ea.map(sl=>xa.data.get(sl.dataId).values),tl=Ea.map(sl=>sl.shape),[nl,rl]=raggedTensorToTensorImpl$1(Aa,Sa.shape,Fa,Ta.shape,Ta.dtype,La,wa.shape,el,tl,ka);return xa.makeTensorInfo(nl,Ta.dtype,rl)}const raggedTensorToTensorConfig$2={kernelName:RaggedTensorToTensor$1,backendName:"cpu",kernelFunc:raggedTensorToTensor$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function range$2(ha){const{backend:aa,attrs:xa}=ha,{start:ba,stop:Sa,dtype:Ta,step:wa}=xa,Ea=rangeImpl$1(ba,Sa,wa,Ta);return aa.makeTensorInfo([Ea.length],Ta,Ea)}const rangeConfig$2={kernelName:Range$1,backendName:"cpu",kernelFunc:range$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const reciprocal$2=unaryKernelFunc$2(Reciprocal$1,ha=>1/ha),reciprocalConfig$2={kernelName:Reciprocal$1,backendName:"cpu",kernelFunc:reciprocal$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa}=aa,{alignCorners:Ta,halfPixelCenters:wa,size:Ea}=ba;assertNotComplex$2(Sa,"resizeBilinear");const ka=computeStrides$1(Sa.shape),[Aa,Fa]=Ea,[La,el,tl,nl]=Sa.shape,rl=xa.data.get(Sa.dataId).values,sl=new Float32Array(sizeFromShape$1([La,Aa,Fa,nl])),ol=[Ta&&Aa>1?el-1:el,Ta&&Fa>1?tl-1:tl],al=[Ta&&Aa>1?Aa-1:Aa,Ta&&Fa>1?Fa-1:Fa];let ll=0;const il=ol[0]/al[0],cl=ol[1]/al[1];for(let ul=0;ul<La;ul++)for(let dl=0;dl<Aa;dl++){let hl;wa?hl=il*(dl+.5)-.5:hl=il*dl;const pl=Math.max(0,Math.floor(hl)),fl=hl-pl,ml=Math.min(el-1,Math.ceil(hl)),gl=ul*ka[0]+pl*ka[1],$l=ul*ka[0]+ml*ka[1];for(let xl=0;xl<Fa;xl++){let yl;wa?yl=cl*(xl+.5)-.5:yl=cl*xl;const bl=Math.max(0,Math.floor(yl)),Sl=yl-bl,Cl=Math.min(tl-1,Math.ceil(yl)),Tl=gl+bl*ka[2],Il=$l+bl*ka[2],wl=gl+Cl*ka[2],Nl=$l+Cl*ka[2];for(let vl=0;vl<nl;vl++){const kl=rl[Tl+vl],El=rl[Il+vl],Al=rl[wl+vl],Rl=rl[Nl+vl],Pl=kl+(Al-kl)*Sl,Dl=El+(Rl-El)*Sl,_l=Pl+(Dl-Pl)*fl;sl[ll++]=_l}}}return xa.makeTensorInfo([La,Aa,Fa,nl],"float32",sl)}const resizeBilinearConfig$2={kernelName:ResizeBilinear$1,backendName:"cpu",kernelFunc:resizeBilinear$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa,dy:Ta}=aa,{alignCorners:wa}=ba;assertNotComplex$2([Ta,Sa],"resizeBilinearGrad");const Ea=computeStrides$1(Sa.shape),[ka,Aa,Fa,La]=Sa.shape,[,el,tl]=Ta.shape,nl=new Float32Array(ka*Aa*Fa*La),rl=[wa&&el>1?Aa-1:Aa,wa&&tl>1?Fa-1:Fa],sl=[wa&&el>1?el-1:el,wa&&tl>1?tl-1:tl],ol=rl[0]/sl[0],al=rl[1]/sl[1],ll=xa.data.get(Ta.dataId).values;let il=0;for(let cl=0;cl<ka;cl++){const ul=cl*Ea[0];for(let dl=0;dl<el;dl++){const hl=dl*ol,pl=Math.floor(hl),fl=Math.min(Math.ceil(hl),Aa-1),ml=ul+pl*Ea[1],gl=ul+fl*Ea[1],$l=hl-pl,xl=1-$l;for(let yl=0;yl<tl;yl++){const bl=yl*al,Sl=Math.floor(bl),Cl=Math.min(Math.ceil(bl),Fa-1),Tl=bl-Sl,Il=1-Tl,wl=ml+Sl*Ea[2],Nl=ml+Cl*Ea[2],vl=gl+Sl*Ea[2],kl=gl+Cl*Ea[2],El=xl*Il,Al=xl*Tl,Rl=$l*Il,Pl=$l*Tl;for(let Dl=0;Dl<La;Dl++){const _l=ll[il++];nl[wl+Dl]+=_l*El,nl[Nl+Dl]+=_l*Al,nl[vl+Dl]+=_l*Rl,nl[kl+Dl]+=_l*Pl}}}}return xa.makeTensorInfo([ka,Fa,Aa,La],"float32",nl)}const resizeBilinearGradConfig$2={kernelName:ResizeBilinearGrad$1,backendName:"cpu",kernelFunc:resizeBilinearGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa}=aa,{alignCorners:Ta,halfPixelCenters:wa,size:Ea}=ba;assertNotComplex$2(Sa,"resizeNearestNeighbor");const ka=computeStrides$1(Sa.shape),[Aa,Fa]=Ea,[La,el,tl,nl]=Sa.shape,rl=xa.data.get(Sa.dataId).values,sl=new Float32Array(La*Aa*Fa*nl),ol=[Ta&&Aa>1?el-1:el,Ta&&Fa>1?tl-1:tl],al=[Ta&&Aa>1?Aa-1:Aa,Ta&&Fa>1?Fa-1:Fa],ll=ol[0]/al[0],il=ol[1]/al[1];let cl=0;for(let ul=0;ul<La;ul++){const dl=ul*ka[0];for(let hl=0;hl<Aa;hl++){const pl=wa?ll*(hl+.5):ll*hl;let fl=Math.min(el-1,Ta?Math.round(pl):Math.floor(pl));wa&&(fl=Math.max(0,fl));const ml=dl+fl*ka[1];for(let gl=0;gl<Fa;gl++){const $l=wa?il*(gl+.5):il*gl;let xl=Math.min(tl-1,Ta?Math.round($l):Math.floor($l));wa&&(xl=Math.max(0,xl));const yl=ml+xl*ka[2];for(let bl=0;bl<nl;bl++){const Sl=rl[yl+bl];sl[cl++]=Sl}}}}return xa.makeTensorInfo([La,Aa,Fa,nl],Sa.dtype,sl)}const resizeNearestNeighborConfig$2={kernelName:ResizeNearestNeighbor$1,backendName:"cpu",kernelFunc:resizeNearestNeighbor$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa,dy:Ta}=aa,{alignCorners:wa}=ba;assertNotComplex$2([Ta,Sa],"resizeNearestNeighborGrad");const Ea=computeStrides$1(Sa.shape),ka=computeStrides$1(Ta.shape),[Aa,Fa,La,el]=Sa.shape,[,tl,nl]=Ta.shape,rl=new Float32Array(Aa*Fa*La*el),sl=xa.data.get(Ta.dataId).values,ol=[wa&&tl>1?Fa-1:Fa,wa&&nl>1?La-1:La],al=[wa&&tl>1?tl-1:tl,wa&&nl>1?nl-1:nl],ll=ol[0]/al[0],il=ol[1]/al[1],cl=1/ll,ul=1/il,dl=Math.ceil(cl)*2+2,hl=Math.ceil(ul)*2+2;for(let pl=0;pl<Aa;pl++){const fl=pl*Ea[0];for(let ml=0;ml<Fa;ml++){const gl=fl+ml*Ea[1],$l=Math.floor(ml*cl),xl=Math.floor($l-dl/2);for(let yl=0;yl<La;yl++){const bl=gl+yl*Ea[2],Sl=Math.floor(yl*ul),Cl=Math.floor(Sl-hl/2);for(let Tl=0;Tl<el;Tl++){let Il=0;for(let wl=0;wl<dl;wl++){const Nl=wl+xl;if(Nl<0||Nl>=tl)continue;const vl=fl+Nl*ka[1],kl=Nl*ll,El=Math.min(Fa-1,wa?Math.round(kl):Math.floor(kl));if(ml===El)for(let Al=0;Al<hl;Al++){const Rl=Al+Cl;if(Rl<0||Rl>=nl)continue;const Pl=vl+Rl*ka[2],Dl=Rl*il,_l=Math.min(La-1,wa?Math.round(Dl):Math.floor(Dl));yl===_l&&(Il+=sl[Pl+Tl])}}rl[bl+Tl]=Il}}}}return xa.makeTensorInfo(Sa.shape,Sa.dtype,rl)}const resizeNearestNeighborGradConfig$2={kernelName:ResizeNearestNeighborGrad$1,backendName:"cpu",kernelFunc:resizeNearestNeighborGrad$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{dims:Ta}=ba;assertNotComplex$2(Sa,"reverse");const wa=Sa.shape.length,Ea=parseAxisParam$1(Ta,Sa.shape);if(wa===0)return identity$2({inputs:{x:Sa},backend:xa});const ka=new TensorBuffer$1(Sa.shape,Sa.dtype),Aa=xa.bufferSync(Sa);for(let Fa=0;Fa<ka.size;Fa++){const La=ka.indexToLoc(Fa),el=La.slice();Ea.forEach(tl=>el[tl]=Sa.shape[tl]-1-el[tl]),ka.set(Aa.get(...el),...La)}return xa.makeTensorInfo(ka.shape,ka.dtype,ka.values)}const reverseConfig$2={kernelName:Reverse$1,backendName:"cpu",kernelFunc:reverse$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig$2={kernelName:RotateWithOffset$1,backendName:"cpu",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{image:ba}=ha,{radians:Sa,fillValue:Ta,center:wa}=aa,Ea=xa,ka=getTypedArrayFromDType$1(ba.dtype,sizeFromShape$1(ba.shape)),[Aa,Fa,La,el]=ba.shape,[tl,nl]=getImageCenter$1(wa,Fa,La),rl=255,sl=Math.sin(Sa),ol=Math.cos(Sa),al=Ea.data.get(ba.dataId).values;for(let il=0;il<Aa;il++){const cl=il*La*Fa*el;for(let ul=0;ul<Fa;ul++){const dl=ul*(La*el);for(let hl=0;hl<La;hl++){const pl=hl*el;for(let fl=0;fl<el;fl++){const ml=[Aa,ul,hl,fl],gl=ml[2],$l=ml[1];let xl=(gl-tl)*ol-($l-nl)*sl,yl=(gl-tl)*sl+($l-nl)*ol;xl=Math.round(xl+tl),yl=Math.round(yl+nl);let bl=Ta;if(typeof Ta!="number"&&(fl===3?bl=rl:bl=Ta[fl]),xl>=0&&xl<La&&yl>=0&&yl<Fa){const Cl=yl*(La*el),Tl=xl*el,Il=cl+Cl+Tl+fl;bl=al[Il]}const Sl=cl+dl+pl+fl;ka[Sl]=bl}}}}return{dataId:Ea.write(ka,ba.shape,ba.dtype),shape:ba.shape,dtype:ba.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const round$3=unaryKernelFunc$2(Round$1,ha=>{const aa=Math.floor(ha);return ha-aa<.5?Math.floor(ha):ha-aa>.5?Math.ceil(ha):aa%2===0?aa:aa+1}),roundConfig$2={kernelName:Round$1,backendName:"cpu",kernelFunc:round$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{indices:Sa,updates:Ta}=aa,{shape:wa}=ba,{sliceRank:Ea,numUpdates:ka,sliceSize:Aa,strides:Fa,outputSize:La}=calculateShapes$1(Ta,Sa,wa),el=!0,tl=xa.bufferSync(Sa),nl=xa.bufferSync(Ta),rl=scatterImpl$1(tl,nl,wa,La,Aa,ka,Ea,Fa,0,el);return xa.makeTensorInfo(wa,rl.dtype,rl.values)}const scatterNdConfig$2={kernelName:ScatterNd$1,backendName:"cpu",kernelFunc:scatterNd$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lowerBound(ha,aa){let xa=0,ba=ha.length,Sa=0;for(;xa<ba;)Sa=Math.floor((xa+ba)/2),ha[Sa]<aa?xa=Sa+1:ba=Sa;return ba}function upperBound(ha,aa){let xa=0,ba=ha.length,Sa=0;for(;xa<ba;)Sa=Math.floor((xa+ba)/2),ha[Sa]<=aa?xa=Sa+1:ba=Sa;return ba}function searchSortedImpl(ha,aa,xa,ba,Sa,Ta){const wa=getArrayFromDType$1("int32",xa*Sa);for(let Ea=0;Ea<xa;++Ea){const ka=ha.slice(Ea*ba,(Ea+1)*ba),Aa=Ea*Sa;for(let Fa=0;Fa<Sa;++Fa)wa[Aa+Fa]=Ta==="left"?lowerBound(ka,aa[Fa+Aa]):upperBound(ka,aa[Fa+Aa])}return wa}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{sortedSequence:Sa,values:Ta}=aa,{side:wa}=ba,Ea=xa.data.get(Sa.dataId).values,ka=xa.data.get(Ta.dataId).values,Aa=searchSortedImpl(Ea,ka,Sa.shape[0],Sa.shape[1],Ta.shape[1],wa);return xa.makeTensorInfo(Ta.shape,"int32",Aa)}const searchSortedConfig$2={kernelName:SearchSorted$1,backendName:"cpu",kernelFunc:searchSorted$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select$3(ha){const{inputs:aa,backend:xa}=ha,{condition:ba,t:Sa,e:Ta}=aa;assertNotComplex$2([ba,Sa,Ta],"select");const wa=ba.shape.length,Ea=xa.data.get(ba.dataId).values,ka=xa.data.get(Sa.dataId).values,Aa=xa.data.get(Ta.dataId).values,Fa=upcastType$1(Sa.dtype,Ta.dtype),La=makeZerosTypedArray$1(sizeFromShape$1(Sa.shape),Fa);let el=0;const tl=wa===0||wa>1||Sa.shape.length===1?1:sizeFromShape$1(Sa.shape.slice(1));for(let nl=0;nl<Ea.length;nl++)for(let rl=0;rl<tl;rl++)Ea[nl]===1?La[el++]=ka[nl]:La[el++]=Aa[nl];return xa.makeTensorInfo(Sa.shape,Fa,La)}const selectConfig$2={kernelName:Select$1,backendName:"cpu",kernelFunc:select$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const scaleAlpha=SELU_SCALEALPHA$1,scale=SELU_SCALE$1,selu$2=unaryKernelFunc$2(Selu$2,ha=>ha>=0?scale*ha:scaleAlpha*(Math.exp(ha)-1)),seluConfig$2={kernelName:Selu$2,backendName:"cpu",kernelFunc:selu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sign$2=unaryKernelFunc$2(Sign$1,ha=>ha<0?-1:ha>0?1:0),signConfig$2={kernelName:Sign$1,backendName:"cpu",kernelFunc:sign$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sin$2=unaryKernelFunc$2(Sin$1,ha=>Math.sin(ha)),sinConfig$2={kernelName:Sin$1,backendName:"cpu",kernelFunc:sin$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sinh$2=unaryKernelFunc$2(Sinh$1,ha=>Math.sinh(ha)),sinhConfig$2={kernelName:Sinh$1,backendName:"cpu",kernelFunc:sinh$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const epsilon=11920928955078125e-23,threshold=Math.log(epsilon)+2,softplus$2=unaryKernelFunc$2(Softplus$2,ha=>{const aa=ha>-threshold,xa=ha<threshold,ba=Math.exp(ha);let Sa;return xa?Sa=ba:aa?Sa=ha:Sa=Math.log(1+ba),Sa}),softplusConfig$2={kernelName:Softplus$2,backendName:"cpu",kernelFunc:softplus$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function spaceToBatchND$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockShape:Ta,paddings:wa}=ba;assertNotComplex$2([Sa],"spaceToBatchND");const Ea=sizeFromShape$1(Ta),ka=[[0,0]];ka.push(...wa);for(let ul=1+Ta.length;ul<Sa.shape.length;++ul)ka.push([0,0]);const Aa=padV2Config$2.kernelFunc({inputs:{x:Sa},backend:xa,attrs:{paddings:ka,constantValue:0}}),Fa=getReshaped$1(Aa.shape,Ta,Ea,!1),La=getPermuted$1(Fa.length,Ta.length,!1),el=getReshapedPermuted$1(Aa.shape,Ta,Ea,!1),rl=reshape$3({inputs:{x:Aa},backend:xa,attrs:{shape:Fa}}),al=transpose$2({inputs:{x:rl},backend:xa,attrs:{perm:La}}),cl=reshape$3({inputs:{x:al},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(Aa),xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(al),cl}const spaceToBatchNDConfig$2={kernelName:SpaceToBatchND$1,backendName:"cpu",kernelFunc:spaceToBatchND$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows$2(ha){const{inputs:aa,backend:xa}=ha,{indices:ba,values:Sa,denseShape:Ta,defaultValue:wa}=aa;if(Ta.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${Ta.shape}`);if(ba.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${ba.shape}`);if(Sa.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${Sa.shape}`);if(wa.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${wa.shape}`);const Ea=xa.data.get(ba.dataId).values,ka=xa.data.get(Sa.dataId).values,Aa=xa.data.get(Ta.dataId).values,Fa=xa.data.get(wa.dataId).values[0],[La,el,tl,nl,rl]=sparseFillEmptyRowsImpl$1(Ea,ba.shape,ba.dtype,ka,Sa.dtype,Aa,Fa);return[xa.makeTensorInfo(el,ba.dtype,La),xa.makeTensorInfo([el[0]],Sa.dtype,tl),xa.makeTensorInfo([nl.length],"bool",new Uint8Array(nl.map(sl=>Number(sl)))),xa.makeTensorInfo([rl.length],ba.dtype,new Int32Array(rl))]}const sparseFillEmptyRowsConfig$2={kernelName:SparseFillEmptyRows$1,backendName:"cpu",kernelFunc:sparseFillEmptyRows$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape$2(ha){const{inputs:aa,backend:xa}=ha,{inputIndices:ba,inputShape:Sa,newShape:Ta}=aa;if(ba.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${ba.shape}`);if(Sa.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${Ta.shape}`);const wa=Array.from(xa.data.get(Sa.dataId).values),Ea=xa.data.get(ba.dataId).values,ka=Array.from(xa.data.get(Ta.dataId).values),[Aa,Fa,La]=sparseReshapeImpl$1(Ea,ba.shape,ba.dtype,wa,ka);return[xa.makeTensorInfo(Fa,ba.dtype,Aa),xa.makeTensorInfo([La.length],Ta.dtype,new Int32Array(La))]}const sparseReshapeConfig$2={kernelName:SparseReshape$1,backendName:"cpu",kernelFunc:sparseReshape$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean$2(ha){const{inputs:aa,backend:xa}=ha,{data:ba,indices:Sa,segmentIds:Ta}=aa;if(ba.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${Ta.shape}`);if(Sa.shape[0]!==Ta.shape[0])throw new Error("segmentIds and indices should have same size.");const wa=xa.data.get(ba.dataId).values,Ea=xa.data.get(Sa.dataId).values,ka=xa.data.get(Ta.dataId).values,[Aa,Fa]=sparseSegmentReductionImpl$1(wa,ba.shape,ba.dtype,Ea,ka,!0);return xa.makeTensorInfo(Fa,ba.dtype,Aa)}const sparseSegmentMeanConfig$2={kernelName:SparseSegmentMean$1,backendName:"cpu",kernelFunc:sparseSegmentMean$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum$2(ha){const{inputs:aa,backend:xa}=ha,{data:ba,indices:Sa,segmentIds:Ta}=aa;if(ba.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${Ta.shape}`);if(Sa.shape[0]!==Ta.shape[0])throw new Error("segmentIds and indices should have same size.");const wa=xa.data.get(ba.dataId).values,Ea=xa.data.get(Sa.dataId).values,ka=xa.data.get(Ta.dataId).values,[Aa,Fa]=sparseSegmentReductionImpl$1(wa,ba.shape,ba.dtype,Ea,ka);return xa.makeTensorInfo(Fa,ba.dtype,Aa)}const sparseSegmentSumConfig$2={kernelName:SparseSegmentSum$1,backendName:"cpu",kernelFunc:sparseSegmentSum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{sparseIndices:Sa,sparseValues:Ta,defaultValue:wa}=aa,{outputShape:Ea}=ba,{sliceRank:ka,numUpdates:Aa,sliceSize:Fa,strides:La,outputSize:el}=calculateShapes$1(Ta,Sa,Ea),tl=!1,nl=xa.bufferSync(Sa);let rl;switch(Ta.dtype){case"bool":{const sl=xa.bufferSync(Ta),ol=!!xa.data.get(wa.dataId).values[0];rl=scatterImpl$1(nl,sl,Ea,el,Fa,Aa,ka,La,ol,tl);break}case"float32":{const sl=xa.bufferSync(Ta),ol=xa.data.get(wa.dataId).values[0];rl=scatterImpl$1(nl,sl,Ea,el,Fa,Aa,ka,La,ol,tl);break}case"int32":{const sl=xa.bufferSync(Ta),ol=xa.data.get(wa.dataId).values[0];rl=scatterImpl$1(nl,sl,Ea,el,Fa,Aa,ka,La,ol,tl);break}case"string":{const sl=xa.bufferSync(Ta),ol=decodeString$1(xa.data.get(wa.dataId).values[0]);rl=scatterImpl$1(nl,sl,Ea,el,Fa,Aa,ka,La,ol,tl);break}default:throw new Error(`Unsupported type ${Ta.dtype}`)}return xa.makeTensorInfo(Ea,rl.dtype,rl.values)}const sparseToDenseConfig$2={kernelName:SparseToDense$1,backendName:"cpu",kernelFunc:sparseToDense$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{numOrSizeSplits:Ta,axis:wa}=ba,Ea=parseAxisParam$1(wa,Sa.shape)[0],ka=prepareSplitSize$1(Sa,Ta,Ea),Aa=new Array(Sa.shape.length).fill(0),Fa=Sa.shape.slice();return ka.map(La=>{const el=[...Fa];el[Ea]=La;const tl=slice$2({inputs:{x:Sa},backend:xa,attrs:{begin:Aa,size:el}});return Aa[Ea]+=La,tl})}const splitVConfig$2={kernelName:SplitV$1,backendName:"cpu",kernelFunc:splitV$2};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squareConfig$2={kernelName:Square$1,backendName:"cpu",kernelFunc:({inputs:ha,backend:aa})=>{const{x:xa}=ha,ba=aa;assertNotComplex$2(xa,"square");const Sa=ba.data.get(xa.dataId).values,Ta=new Float32Array(Sa.length);for(let Ea=0;Ea<Sa.length;++Ea){const ka=Sa[Ea];Ta[Ea]=ka*ka}return{dataId:ba.write(Ta,xa.shape,xa.dtype),shape:xa.shape,dtype:xa.dtype}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const step$3=unaryKernelFunc$2(Step$1,(ha,aa)=>{const xa=aa;return isNaN(ha)?NaN:ha>0?1:xa.alpha}),stepConfig$2={kernelName:Step$1,backendName:"cpu",kernelFunc:step$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{begin:Ta,end:wa,strides:Ea,beginMask:ka,endMask:Aa,ellipsisMask:Fa,newAxisMask:La,shrinkAxisMask:el}=ba;assertNotComplex$2(Sa,"stridedSlice");const{finalShapeSparse:tl,finalShape:nl,isIdentity:rl,sliceDim0:sl,isSimpleSlice:ol,begin:al,end:ll,strides:il}=sliceInfo$1(Sa.shape,Ta,wa,Ea,ka,Aa,Fa,La,el);let cl;if(rl)cl=reshape$3({inputs:{x:Sa},backend:xa,attrs:{shape:nl}});else if(sl||ol){assert$2(Sa.shape.length>=1,()=>`Input must have rank at least 1, got: ${Sa.shape.length}`);const ul=computeOutShape$5(al,ll,il),dl=slice$2({inputs:{x:Sa},backend:xa,attrs:{begin:al,size:ul}});cl=reshape$3({inputs:{x:dl},backend:xa,attrs:{shape:nl}}),xa.disposeIntermediateTensorInfo(dl)}else{const ul=xa.bufferSync(Sa),dl=stridedSliceImpl$1(tl,ul,il,al);cl=xa.makeTensorInfo(nl,dl.dtype,dl.values)}return cl}const stridedSliceConfig$2={kernelName:StridedSlice$1,backendName:"cpu",kernelFunc:stridedSlice$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{separator:Sa,nGramWidths:Ta,leftPad:wa,rightPad:Ea,padWidth:ka,preserveShortSequences:Aa}=ba,{data:Fa,dataSplits:La}=aa,el=xa.data.get(Fa.dataId).values,tl=xa.data.get(La.dataId).values,[nl,rl]=stringNGramsImpl$1(el,tl,Sa,Ta,wa,Ea,ka,Aa);return[xa.makeTensorInfo([nl.length],"string",nl),xa.makeTensorInfo(La.shape,"int32",rl)]}const stringNGramsConfig$2={kernelName:StringNGrams$1,backendName:"cpu",kernelFunc:stringNGrams$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{skipEmpty:Sa}=ba,{input:Ta,delimiter:wa}=aa;if(Ta.dtype!=="string")throw new Error("Input must be of datatype string");if(Ta.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${Ta.shape}`);if(wa.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${wa.shape}`);const Ea=xa.data.get(Ta.dataId).values,ka=xa.data.get(wa.dataId).values[0],[Aa,Fa,La]=stringSplitImpl$1(Ea,ka,Sa),el=Fa.length;return[xa.makeTensorInfo([el,2],"int32",Aa),xa.makeTensorInfo([el],"string",Fa),xa.makeTensorInfo([2],"int32",new Int32Array(La))]}const stringSplitConfig$2={kernelName:StringSplit$1,backendName:"cpu",kernelFunc:stringSplit$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{numBuckets:Sa}=ba,{input:Ta}=aa;if(Ta.dtype!=="string")throw new Error("Input must be of datatype string");if(Sa<=0)throw new Error("Number of buckets must be at least 1");const wa=xa.data.get(Ta.dataId).values,Ea=stringToHashBucketFastImpl$1(wa,Sa);return xa.makeTensorInfo(Ta.shape,"int32",Ea)}const stringToHashBucketFastConfig$2={kernelName:StringToHashBucketFast$1,backendName:"cpu",kernelFunc:stringToHashBucketFast$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tan$2=unaryKernelFunc$2(Tan$1,ha=>Math.tan(ha)),tanConfig$2={kernelName:Tan$1,backendName:"cpu",kernelFunc:tan$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const tanh$2=unaryKernelFunc$2(Tanh$2,ha=>Math.tanh(ha)),tanhConfig$2={kernelName:Tanh$2,backendName:"cpu",kernelFunc:tanh$2};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate$2(ha){const{inputs:aa,backend:xa}=ha,{tensor:ba,indices:Sa,updates:Ta}=aa,{sliceRank:wa,numUpdates:Ea,sliceSize:ka,strides:Aa,outputSize:Fa}=calculateShapes$1(Ta,Sa,ba.shape),La=!1,el=xa.bufferSync(Sa),tl=xa.bufferSync(Ta),nl=xa.bufferSync(ba),rl=scatterImpl$1(el,tl,ba.shape,Fa,ka,Ea,wa,Aa,nl,La);return xa.makeTensorInfo(ba.shape,rl.dtype,rl.values)}const tensorScatterUpdateConfig$2={kernelName:TensorScatterUpdate$1,backendName:"cpu",kernelFunc:tensorScatterUpdate$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{reps:Ta}=ba;assertNotComplex$2(Sa,"tile");const wa=tileImpl$1(xa.bufferSync(Sa),Ta);return xa.makeTensorInfo(wa.shape,wa.dtype,wa.values)}const tileConfig$2={kernelName:Tile$1,backendName:"cpu",kernelFunc:tile$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function topK$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{k:Ta,sorted:wa}=ba;assertNotComplex$2(Sa,"topk");const Ea=xa.data.get(Sa.dataId).values,[ka,Aa]=topKImpl$1(Ea,Sa.shape,Sa.dtype,Ta,wa);return[xa.makeTensorInfo(ka.shape,ka.dtype,ka.values),xa.makeTensorInfo(Aa.shape,Aa.dtype,Aa.values)]}const topKConfig$2={kernelName:TopK$1,backendName:"cpu",kernelFunc:topK$2};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform$2(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{image:Sa,transforms:Ta}=aa,{interpolation:wa,fillMode:Ea,fillValue:ka,outputShape:Aa}=xa,[Fa,La,el,tl]=Sa.shape,[nl,rl]=Aa??[La,el],sl=[Fa,nl,rl,tl],ol=computeStrides$1(Sa.shape),al=ol[0],ll=ol[1],il=ol[2],cl=computeStrides$1(sl),ul=cl[0],dl=cl[1],hl=cl[2],pl=getTypedArrayFromDType$1(Sa.dtype,sizeFromShape$1(sl));pl.fill(ka);const fl=ba.data.get(Sa.dataId).values,ml=ba.data.get(Ta.dataId).values;for(let $l=0;$l<Fa;++$l){const xl=Ta.shape[0]===1?ml:ml.subarray($l*8,$l*8+8);for(let yl=0;yl<nl;++yl)for(let bl=0;bl<rl;++bl)for(let Sl=0;Sl<tl;++Sl){let Cl;const Tl=xl[6]*bl+xl[7]*yl+1;if(Tl===0)continue;const Il=(xl[0]*bl+xl[1]*yl+xl[2])/Tl,wl=(xl[3]*bl+xl[4]*yl+xl[5])/Tl,Nl=mapCoord(Il,el,Ea),vl=mapCoord(wl,La,Ea);switch(wa){case"nearest":Cl=nearestInterpolation(fl,La,el,al,ll,il,$l,vl,Nl,Sl,ka);break;case"bilinear":Cl=bilinearInterpolation(fl,La,el,al,ll,il,$l,vl,Nl,Sl,ka);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${wa}`)}const kl=$l*ul+yl*dl+bl*hl+Sl;pl[kl]=Cl}return ba.makeTensorInfo(sl,Sa.dtype,pl)}return{dataId:ba.write(pl,sl,Sa.dtype),shape:Sa.shape,dtype:Sa.dtype}}const transformConfig$2={kernelName:Transform$1,backendName:"cpu",kernelFunc:transform$2};function mapCoord(ha,aa,xa){switch(xa){case"reflect":return mapCoordReflect(ha,aa);case"wrap":return mapCoordWrap(ha,aa);case"nearest":return mapCoordNearest(ha,aa);case"constant":default:return mapCoordConstant(ha)}}function mapCoordReflect(ha,aa){let xa=ha;if(xa<0)if(aa<=1)xa=0;else{const ba=2*aa;xa<ba&&(xa=ba*Math.trunc(-xa/ba)+xa),xa=xa<-aa?xa+ba:-xa-1}else if(xa>aa-1)if(aa<=1)xa=0;else{const ba=2*aa;xa-=ba*Math.trunc(xa/ba),xa>=aa&&(xa=ba-xa-1)}return clamp$1(0,xa,aa-1)}function mapCoordWrap(ha,aa){let xa=ha;if(xa<0)if(aa<=1)xa=0;else{const ba=aa-1;xa+=aa*(Math.trunc(-xa/ba)+1)}else if(xa>aa-1)if(aa<=1)xa=0;else{const ba=aa-1;xa-=aa*Math.trunc(xa/ba)}return clamp$1(0,xa,aa-1)}function mapCoordConstant(ha,aa){return ha}function mapCoordNearest(ha,aa){return clamp$1(0,ha,aa-1)}function readWithFillValue(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){const La=wa*ba+Ea*Sa+ka*Ta+Aa;return 0<=Ea&&Ea<aa&&0<=ka&&ka<xa?ha[La]:Fa}function nearestInterpolation(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){const La=Math.round(Ea),el=Math.round(ka);return readWithFillValue(ha,aa,xa,ba,Sa,Ta,wa,La,el,Aa,Fa)}function bilinearInterpolation(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){const La=Math.floor(Ea),el=Math.floor(ka),tl=La+1,nl=el+1,rl=(nl-ka)*readWithFillValue(ha,aa,xa,ba,Sa,Ta,wa,La,el,Aa,Fa)+(ka-el)*readWithFillValue(ha,aa,xa,ba,Sa,Ta,wa,La,nl,Aa,Fa),sl=(nl-ka)*readWithFillValue(ha,aa,xa,ba,Sa,Ta,wa,tl,el,Aa,Fa)+(ka-el)*readWithFillValue(ha,aa,xa,ba,Sa,Ta,wa,tl,nl,Aa,Fa);return(tl-Ea)*rl+(Ea-La)*sl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique$2(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{axis:Sa}=xa,{x:Ta}=aa;assertNotComplex$2(Ta,"unique");const wa=ba.data.get(Ta.dataId).values,{outputValues:Ea,outputShape:ka,indices:Aa}=uniqueImpl$1(wa,Sa,Ta.shape,Ta.dtype);return[ba.makeTensorInfo(ka,Ta.dtype,Ea),ba.makeTensorInfo([Aa.length],"int32",Aa)]}const uniqueConfig$2={kernelName:Unique$1,backendName:"cpu",kernelFunc:unique$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{value:Sa}=aa;let{axis:Ta}=ba;Ta<0&&(Ta+=Sa.shape.length);const wa=Sa.shape.length,Ea=Sa.shape[Ta],ka=new Array(wa-1);let Aa=0;for(let tl=0;tl<wa;tl++)tl!==Ta&&(ka[Aa++]=Sa.shape[tl]);const Fa=new Array(wa).fill(0),La=Sa.shape.slice();La[Ta]=1;const el=new Array(Ea);for(let tl=0;tl<el.length;tl++){Fa[Ta]=tl;const nl=slice$2({inputs:{x:Sa},backend:xa,attrs:{begin:Fa,size:La}});el[tl]=reshape$3({inputs:{x:nl},backend:xa,attrs:{shape:ka}}),xa.disposeIntermediateTensorInfo(nl)}return el}const unpackConfig$2={kernelName:Unpack$1,backendName:"cpu",kernelFunc:unpack$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,segmentIds:Ta}=aa,{numSegments:wa}=ba;assertNotComplex$2(Sa,"unsortedSegmentSum");const Ea=Sa.shape.length,ka=Ta.shape.length,Aa=[],Fa=[],La=Ea-ka;let el=Ta;for(let nl=0;nl<La;++nl){const rl=expandDims$2({inputs:{input:el},backend:xa,attrs:{dim:nl+1}});el=rl,Fa.push(rl)}for(let nl=0;nl<wa;++nl){const rl=createScalarValue$1(nl,"int32"),sl=xa.makeTensorInfo([],"int32",rl),ol=equal$2({inputs:{a:sl,b:el},backend:xa}),al=cast$3({inputs:{x:ol},backend:xa,attrs:{dtype:"float32"}}),ll=multiply$2({inputs:{a:al,b:Sa},backend:xa}),il=sum$4({inputs:{x:ll},backend:xa,attrs:{axis:0,keepDims:!1}});Aa.push(il),Fa.push(sl),Fa.push(ol),Fa.push(al),Fa.push(ll),Fa.push(il)}const tl=pack$2({inputs:Aa,backend:xa,attrs:{axis:0}});return Fa.forEach(nl=>xa.disposeIntermediateTensorInfo(nl)),tl}const unsortedSegmentSumConfig$2={kernelName:UnsortedSegmentSum$1,backendName:"cpu",kernelFunc:unsortedSegmentSum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs$2=[_fusedMatMulConfig$2,absConfig$2,acosConfig$2,acoshConfig$2,addConfig$2,addNConfig$2,allConfig$2,anyConfig$2,argMaxConfig$2,argMinConfig$2,asinConfig$2,asinhConfig$2,atanConfig$2,atan2Config$2,atanhConfig$2,avgPoolConfig$2,avgPool3DConfig$2,avgPool3DGradConfig$2,avgPoolGradConfig$2,batchMatMulConfig$2,batchNormConfig$2,batchToSpaceNDConfig$2,bincountConfig$2,bitwiseAndConfig$2,broadcastArgsConfig$2,castConfig$2,ceilConfig$2,clipByValueConfig$2,complexConfig$2,complexAbsConfig$2,concatConfig$2,conv2DConfig$2,conv2DBackpropFilterConfig$2,conv2DBackpropInputConfig$2,conv3DConfig$2,conv3DBackpropFilterV2Config$2,conv3DBackpropInputV2Config,cosConfig$2,coshConfig$2,cropAndResizeConfig$2,cumprodConfig$2,cumsumConfig$2,denseBincountConfig$2,depthToSpaceConfig$2,depthwiseConv2dNativeConfig$2,depthwiseConv2dNativeBackpropFilterConfig$2,depthwiseConv2dNativeBackpropInputConfig$2,diagConfig$2,dilation2DConfig$2,dilation2DBackpropFilterConfig,dilation2DBackpropInputConfig,drawConfig,einsumConfig$2,eluConfig$2,eluGradConfig$2,equalConfig$2,erfConfig$2,expConfig$2,expandDimsConfig$2,expm1Config$2,fftConfig$2,fillConfig$2,flipLeftRightConfig$2,floorConfig$2,floorDivConfig$2,fusedConv2DConfig$2,fusedDepthwiseConv2DConfig$2,gatherNdConfig$2,gatherV2Config$2,greaterConfig$2,greaterEqualConfig$2,identityConfig$2,ifftConfig$2,imagConfig$2,isFiniteConfig$2,isInfConfig$2,isNaNConfig$2,leakyReluConfig$2,lessConfig$2,lessEqualConfig$2,linSpaceConfig$2,logConfig$2,log1pConfig$2,logicalAndConfig$2,logicalNotConfig$2,logicalOrConfig$2,LRNConfig$2,LRNGradConfig$2,maxConfig$2,maximumConfig$2,maxPoolConfig$2,maxPool3DConfig$2,maxPool3DGradConfig$2,maxPoolGradConfig$2,maxPoolWithArgmaxConfig$2,meanConfig$2,minConfig$2,minimumConfig$2,mirrorPadConfig$2,modConfig$2,multinomialConfig$2,multiplyConfig$2,negConfig$2,nonMaxSuppressionV3Config$2,nonMaxSuppressionV4Config$2,nonMaxSuppressionV5Config$2,notEqualConfig$2,oneHotConfig$2,onesLikeConfig$2,packConfig$2,padV2Config$2,powConfig$2,preluConfig$2,prodConfig$2,raggedGatherConfig$2,raggedRangeConfig$2,raggedTensorToTensorConfig$2,rangeConfig$2,realConfig$2,realDivConfig$2,reciprocalConfig$2,reluConfig$2,relu6Config$2,reshapeConfig$2,resizeBilinearConfig$2,resizeBilinearGradConfig$2,resizeNearestNeighborConfig$2,resizeNearestNeighborGradConfig$2,reverseConfig$2,rotateWithOffsetConfig$2,roundConfig$2,rsqrtConfig$2,scatterNdConfig$2,searchSortedConfig$2,selectConfig$2,seluConfig$2,sigmoidConfig$2,signConfig$2,sinConfig$2,sinhConfig$2,sliceConfig$2,softmaxConfig$2,softplusConfig$2,spaceToBatchNDConfig$2,sparseFillEmptyRowsConfig$2,sparseReshapeConfig$2,sparseSegmentMeanConfig$2,sparseSegmentSumConfig$2,sparseToDenseConfig$2,splitVConfig$2,sqrtConfig$2,squareConfig$2,squaredDifferenceConfig$2,staticRegexReplaceConfig$2,stepConfig$2,stridedSliceConfig$2,stringNGramsConfig$2,stringSplitConfig$2,stringToHashBucketFastConfig$2,subConfig$2,sumConfig$2,tanConfig$2,tanhConfig$2,tensorScatterUpdateConfig$2,tileConfig$2,topKConfig$2,transformConfig$2,transposeConfig$2,uniqueConfig$2,unpackConfig$2,unsortedSegmentSumConfig$2,zerosLikeConfig$2];for(const ha of kernelConfigs$2)registerKernel$1(ha);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const contexts$1={},WEBGL_ATTRIBUTES$1={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function setWebGLContext$1(ha,aa){contexts$1[ha]=aa}function getWebGLContext$1(ha,aa){if(!(ha in contexts$1)||aa!=null){const ba=getWebGLRenderingContext$1(ha,aa);if(ba!==null)contexts$1[ha]=ba;else return console.log("Could not get context for WebGL version",ha),null}const xa=contexts$1[ha];return xa==null||xa.isContextLost()?(delete contexts$1[ha],getWebGLContext$1(ha)):(xa.disable(xa.DEPTH_TEST),xa.disable(xa.STENCIL_TEST),xa.disable(xa.BLEND),xa.disable(xa.DITHER),xa.disable(xa.POLYGON_OFFSET_FILL),xa.disable(xa.SAMPLE_COVERAGE),xa.enable(xa.SCISSOR_TEST),xa.enable(xa.CULL_FACE),xa.cullFace(xa.BACK),contexts$1[ha])}function createCanvas$1(ha){if(!env$1().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&ha===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function getWebGLRenderingContext$1(ha,aa){if(ha!==1&&ha!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const xa=aa??createCanvas$1(ha);return xa.addEventListener("webglcontextlost",ba=>{ba.preventDefault(),delete contexts$1[ha]},!1),env$1().getBool("SOFTWARE_WEBGL_ENABLED")&&(WEBGL_ATTRIBUTES$1.failIfMajorPerformanceCaveat=!1),ha===1?xa.getContext("webgl",WEBGL_ATTRIBUTES$1)||xa.getContext("experimental-webgl",WEBGL_ATTRIBUTES$1):xa.getContext("webgl2",WEBGL_ATTRIBUTES$1)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var PackingScheme$1;(function(ha){ha[ha.DENSE=0]="DENSE",ha[ha.SHARED_BATCH=1]="SHARED_BATCH"})(PackingScheme$1||(PackingScheme$1={}));var TextureUsage$1;(function(ha){ha[ha.RENDER=0]="RENDER",ha[ha.UPLOAD=1]="UPLOAD",ha[ha.PIXELS=2]="PIXELS",ha[ha.DOWNLOAD=3]="DOWNLOAD"})(TextureUsage$1||(TextureUsage$1={}));var PhysicalTextureType$1;(function(ha){ha[ha.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",ha[ha.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",ha[ha.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",ha[ha.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",ha[ha.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(PhysicalTextureType$1||(PhysicalTextureType$1={}));function getUnpackedMatrixTextureShapeWidthHeight$1(ha,aa){return[aa,ha]}function getUnpackedArraySizeFromMatrixSize$1(ha,aa){return ha*aa}function getDenseTexShape$1(ha){const aa=sizeFromShape$1(ha),xa=Math.ceil(aa/4);return sizeToSquarishShape$1(xa)}function getPackedMatrixTextureShapeWidthHeight$1(ha,aa){return[Math.max(1,Math.ceil(aa/2)),Math.max(1,Math.ceil(ha/2))]}function getPackedRGBAArraySizeFromMatrixShape$1(ha,aa){const[xa,ba]=getPackedMatrixTextureShapeWidthHeight$1(ha,aa);return xa*ba*4}function getTextureConfig$1(ha,aa){const xa=ha;let ba,Sa,Ta,wa,Ea,ka,Aa,Fa,La,el;return env$1().getNumber("WEBGL_VERSION")===2?(ba=xa.R32F,Sa=xa.R16F,Ta=xa.RGBA16F,wa=xa.RGBA32F,Ea=xa.RED,Aa=4,Fa=1,La=xa.HALF_FLOAT,el=xa.FLOAT,ka=xa.RGBA8):(ba=ha.RGBA,Sa=ha.RGBA,Ta=ha.RGBA,wa=xa.RGBA,Ea=ha.RGBA,Aa=4,Fa=4,La=aa!=null?aa.HALF_FLOAT_OES:null,el=ha.FLOAT,ka=ha.RGBA),{internalFormatFloat:ba,internalFormatHalfFloat:Sa,internalFormatPackedHalfFloat:Ta,internalFormatPackedFloat:wa,textureFormatFloat:Ea,downloadTextureFormat:ka,downloadUnpackNumChannels:Aa,defaultNumChannels:Fa,textureTypeHalfFloat:La,textureTypeFloat:el}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function callAndCheck$1(ha,aa){const xa=aa();return env$1().getBool("DEBUG")&&checkWebGLError$1(ha),xa}function checkWebGLError$1(ha){const aa=ha.getError();if(aa!==ha.NO_ERROR)throw new Error("WebGL Error: "+getWebGLErrorMessage$1(ha,aa))}const MIN_FLOAT16$1=596e-10,MAX_FLOAT16$1=65504;function canBeRepresented$1(ha){return!!(env$1().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||ha===0||MIN_FLOAT16$1<Math.abs(ha)&&Math.abs(ha)<MAX_FLOAT16$1)}function getWebGLErrorMessage$1(ha,aa){switch(aa){case ha.NO_ERROR:return"NO_ERROR";case ha.INVALID_ENUM:return"INVALID_ENUM";case ha.INVALID_VALUE:return"INVALID_VALUE";case ha.INVALID_OPERATION:return"INVALID_OPERATION";case ha.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case ha.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case ha.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${aa}`}}function getExtensionOrThrow$1(ha,aa){return throwIfNull$1(ha,()=>ha.getExtension(aa),'Extension "'+aa+'" not supported on this browser.')}function createVertexShader$3(ha,aa){const xa=throwIfNull$1(ha,()=>ha.createShader(ha.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(callAndCheck$1(ha,()=>ha.shaderSource(xa,aa)),callAndCheck$1(ha,()=>ha.compileShader(xa)),ha.getShaderParameter(xa,ha.COMPILE_STATUS)===!1)throw console.log(ha.getShaderInfoLog(xa)),new Error("Failed to compile vertex shader.");return xa}function createFragmentShader$1(ha,aa){const xa=throwIfNull$1(ha,()=>ha.createShader(ha.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(callAndCheck$1(ha,()=>ha.shaderSource(xa,aa)),callAndCheck$1(ha,()=>ha.compileShader(xa)),env$1().get("ENGINE_COMPILE_ONLY"))return xa;if(ha.getShaderParameter(xa,ha.COMPILE_STATUS)===!1)throw logShaderSourceAndInfoLog$1(aa,ha.getShaderInfoLog(xa)),new Error("Failed to compile fragment shader.");return xa}const lineNumberRegex$1=/ERROR: [0-9]+:([0-9]+):/g;function logShaderSourceAndInfoLog$1(ha,aa){const xa=lineNumberRegex$1.exec(aa);if(xa==null){console.log(`Couldn't parse line number in error: ${aa}`),console.log(ha);return}const ba=+xa[1],Sa=ha.split(`
`),Ta=Sa.length.toString().length+2,wa=Sa.map((La,el)=>rightPad$1((el+1).toString(),Ta)+La);let Ea=0;for(let La=0;La<wa.length;La++)Ea=Math.max(wa[La].length,Ea);const ka=wa.slice(0,ba-1),Aa=wa.slice(ba-1,ba),Fa=wa.slice(ba);console.log(ka.join(`
`)),console.log(aa.split(`
`)[0]),console.log(`%c ${rightPad$1(Aa[0],Ea)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(Fa.join(`
`))}function createProgram$1(ha){return throwIfNull$1(ha,()=>ha.createProgram(),"Unable to create WebGLProgram.")}function linkProgram$1(ha,aa){if(callAndCheck$1(ha,()=>ha.linkProgram(aa)),!env$1().get("ENGINE_COMPILE_ONLY")&&ha.getProgramParameter(aa,ha.LINK_STATUS)===!1)throw console.log(ha.getProgramInfoLog(aa)),new Error("Failed to link vertex and fragment shaders.")}function validateProgram$1(ha,aa){if(callAndCheck$1(ha,()=>ha.validateProgram(aa)),ha.getProgramParameter(aa,ha.VALIDATE_STATUS)===!1)throw console.log(ha.getProgramInfoLog(aa)),new Error("Shader program validation failed.")}function createStaticVertexBuffer$1(ha,aa){const xa=throwIfNull$1(ha,()=>ha.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck$1(ha,()=>ha.bindBuffer(ha.ARRAY_BUFFER,xa)),callAndCheck$1(ha,()=>ha.bufferData(ha.ARRAY_BUFFER,aa,ha.STATIC_DRAW)),xa}function createStaticIndexBuffer$1(ha,aa){const xa=throwIfNull$1(ha,()=>ha.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck$1(ha,()=>ha.bindBuffer(ha.ELEMENT_ARRAY_BUFFER,xa)),callAndCheck$1(ha,()=>ha.bufferData(ha.ELEMENT_ARRAY_BUFFER,aa,ha.STATIC_DRAW)),xa}function createTexture$1(ha){return throwIfNull$1(ha,()=>ha.createTexture(),"Unable to create WebGLTexture.")}function validateTextureSize$1(ha,aa){const xa=env$1().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(ha<=0||aa<=0){const ba=`[${ha}x${aa}]`;throw new Error("Requested texture size "+ba+" is invalid.")}if(ha>xa||aa>xa){const ba=`[${ha}x${aa}]`,Sa=`[${xa}x${xa}]`;throw new Error("Requested texture size "+ba+" greater than WebGL maximum on this browser / GPU "+Sa+".")}}function createFramebuffer$1(ha){return throwIfNull$1(ha,()=>ha.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function bindVertexBufferToProgramAttribute$1(ha,aa,xa,ba,Sa,Ta,wa){const Ea=ha.getAttribLocation(aa,xa);return Ea===-1?!1:(callAndCheck$1(ha,()=>ha.bindBuffer(ha.ARRAY_BUFFER,ba)),callAndCheck$1(ha,()=>ha.vertexAttribPointer(Ea,Sa,ha.FLOAT,!1,Ta,wa)),callAndCheck$1(ha,()=>ha.enableVertexAttribArray(Ea)),!0)}function bindTextureUnit$1(ha,aa,xa){validateTextureUnit$1(ha,xa),callAndCheck$1(ha,()=>ha.activeTexture(ha.TEXTURE0+xa)),callAndCheck$1(ha,()=>ha.bindTexture(ha.TEXTURE_2D,aa))}function getProgramUniformLocationOrThrow$1(ha,aa,xa){return throwIfNull$1(ha,()=>ha.getUniformLocation(aa,xa),'uniform "'+xa+'" not present in program.')}function getProgramUniformLocation$1(ha,aa,xa){return ha.getUniformLocation(aa,xa)}function bindTextureToProgramUniformSampler$1(ha,aa,xa,ba){callAndCheck$1(ha,()=>bindTextureUnit$1(ha,aa,ba)),callAndCheck$1(ha,()=>ha.uniform1i(xa,ba))}function bindColorTextureToFramebuffer$1(ha,aa,xa){callAndCheck$1(ha,()=>ha.bindFramebuffer(ha.FRAMEBUFFER,xa)),callAndCheck$1(ha,()=>ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,aa,0))}function unbindColorTextureFromFramebuffer$1(ha,aa){callAndCheck$1(ha,()=>ha.bindFramebuffer(ha.FRAMEBUFFER,aa)),callAndCheck$1(ha,()=>ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,null,0))}function validateFramebuffer$1(ha){const aa=ha.checkFramebufferStatus(ha.FRAMEBUFFER);if(aa!==ha.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+getFramebufferErrorMessage$1(ha,aa))}function getFramebufferErrorMessage$1(ha,aa){switch(aa){case ha.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case ha.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case ha.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case ha.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${aa}`}}function throwIfNull$1(ha,aa,xa){const ba=callAndCheck$1(ha,()=>aa());if(ba==null)throw new Error(xa);return ba}function validateTextureUnit$1(ha,aa){const xa=ha.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,ba=aa+ha.TEXTURE0;if(ba<ha.TEXTURE0||ba>xa){const Sa=`[gl.TEXTURE0, gl.TEXTURE${xa}]`;throw new Error(`textureUnit must be in ${Sa}.`)}}function getBatchDim$1(ha,aa=2){return sizeFromShape$1(ha.slice(0,ha.length-aa))}function getRowsCols$1(ha){if(ha.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[ha.length>1?ha[ha.length-2]:1,ha[ha.length-1]]}function getShapeAs3D$1(ha){let aa=[1,1,1];return ha.length===0||ha.length===1&&ha[0]===1||(aa=[getBatchDim$1(ha),...getRowsCols$1(ha)]),aa}function getTextureShapeFromLogicalShape$1(ha,aa=!1){let xa=env$1().getNumber("WEBGL_MAX_TEXTURE_SIZE"),ba=env$1().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");ba===1/0&&env$1().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(ba=xa/2),aa&&(xa=xa*2,ba=ba*2,ha=ha.map((Ea,ka)=>ka>=ha.length-2?nearestLargerEven$1(ha[ka]):ha[ka]),ha.length===1&&(ha=[2,ha[0]])),ha.length!==2&&(ha=squeezeShape$1(ha).newShape);let Sa=sizeFromShape$1(ha),Ta=null;ha.length<=1&&Sa<=xa?Ta=[1,Sa]:ha.length===2&&ha[0]<=xa&&ha[1]<=xa?Ta=ha:ha.length===3&&ha[0]*ha[1]<=xa&&ha[2]<=xa?Ta=[ha[0]*ha[1],ha[2]]:ha.length===3&&ha[0]<=xa&&ha[1]*ha[2]<=xa?Ta=[ha[0],ha[1]*ha[2]]:ha.length===4&&ha[0]*ha[1]*ha[2]<=xa&&ha[3]<=xa?Ta=[ha[0]*ha[1]*ha[2],ha[3]]:ha.length===4&&ha[0]<=xa&&ha[1]*ha[2]*ha[3]<=xa&&(Ta=[ha[0],ha[1]*ha[2]*ha[3]]);const wa=Ta!=null&&Math.max(...Ta)>ba&&Math.min(...Ta)<=(aa?2:1)&&Math.min(...Ta)>0;if(Ta==null||wa)if(aa){const Ea=getBatchDim$1(ha);let ka=2,Aa=2;ha.length&&([ka,Aa]=getRowsCols$1(ha)),Sa=Ea*(ka/2)*(Aa/2),Ta=sizeToSquarishShape$1(Sa).map(Fa=>Fa*2)}else Ta=sizeToSquarishShape$1(Sa);return Ta}function isEven$1(ha){return ha%2===0}function isReshapeFree$1(ha,aa){if(ha=ha.slice(-2),aa=aa.slice(-2),arraysEqual$1(ha,aa)||!ha.length||!aa.length||ha[0]===0||ha[1]===0||aa[0]===0||aa[1]===0)return!0;if(ha.length!==aa.length){const xa=ha[ha.length-1],ba=aa[aa.length-1];if(xa===ba||isEven$1(xa)&&isEven$1(ba)&&(ha[0]===1||aa[0]===1))return!0}return ha[1]===aa[1]&&isEven$1(ha[0])&&isEven$1(aa[0])}let MAX_TEXTURE_SIZE$1,MAX_TEXTURES_IN_SHADER$1;function getWebGLMaxTextureSize$1(ha){if(MAX_TEXTURE_SIZE$1==null){const aa=getWebGLContext$1(ha);MAX_TEXTURE_SIZE$1=aa.getParameter(aa.MAX_TEXTURE_SIZE)}return MAX_TEXTURE_SIZE$1}function getMaxTexturesInShader$1(ha){if(MAX_TEXTURES_IN_SHADER$1==null){const aa=getWebGLContext$1(ha);MAX_TEXTURES_IN_SHADER$1=aa.getParameter(aa.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MAX_TEXTURES_IN_SHADER$1)}function getWebGLDisjointQueryTimerVersion$1(ha){if(ha===0)return 0;let aa;const xa=getWebGLContext$1(ha);return hasExtension$1(xa,"EXT_disjoint_timer_query_webgl2")&&ha===2?aa=2:hasExtension$1(xa,"EXT_disjoint_timer_query")?aa=1:aa=0,aa}function hasExtension$1(ha,aa){return ha.getExtension(aa)!=null}function isWebGLVersionEnabled$1(ha){try{if(getWebGLContext$1(ha)!=null)return!0}catch(aa){return console.log("Error when getting WebGL context: ",aa),!1}return!1}function isCapableOfRenderingToFloatTexture$1(ha){if(ha===0)return!1;const aa=getWebGLContext$1(ha);if(ha===1){if(!hasExtension$1(aa,"OES_texture_float"))return!1}else if(!hasExtension$1(aa,"EXT_color_buffer_float"))return!1;return createFloatTextureAndBindToFramebuffer$1(aa)}function isDownloadFloatTextureEnabled$1(ha){if(ha===0)return!1;const aa=getWebGLContext$1(ha);if(ha===1){if(!hasExtension$1(aa,"OES_texture_float")||!hasExtension$1(aa,"WEBGL_color_buffer_float"))return!1}else{if(hasExtension$1(aa,"EXT_color_buffer_float"))return createFloatTextureAndBindToFramebuffer$1(aa);const ba="EXT_color_buffer_half_float";if(hasExtension$1(aa,ba)){const Sa=aa.getExtension(ba);return createHalfFloatTextureAndBindToFramebuffer$1(aa,Sa)}return!1}return createFloatTextureAndBindToFramebuffer$1(aa)}function createFloatTextureAndBindToFramebuffer$1(ha){const aa=getTextureConfig$1(ha),xa=ha.createTexture();ha.bindTexture(ha.TEXTURE_2D,xa),ha.texImage2D(ha.TEXTURE_2D,0,aa.internalFormatFloat,1,1,0,aa.textureFormatFloat,aa.textureTypeFloat,null);const Ta=ha.createFramebuffer();ha.bindFramebuffer(ha.FRAMEBUFFER,Ta),ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,xa,0);const wa=ha.checkFramebufferStatus(ha.FRAMEBUFFER)===ha.FRAMEBUFFER_COMPLETE;return ha.bindTexture(ha.TEXTURE_2D,null),ha.bindFramebuffer(ha.FRAMEBUFFER,null),ha.deleteTexture(xa),ha.deleteFramebuffer(Ta),wa}function createHalfFloatTextureAndBindToFramebuffer$1(ha,aa){const xa=getTextureConfig$1(ha,aa),ba=ha.createTexture();ha.bindTexture(ha.TEXTURE_2D,ba),ha.texImage2D(ha.TEXTURE_2D,0,xa.internalFormatHalfFloat,1,1,0,xa.textureFormatFloat,xa.textureTypeHalfFloat,null);const wa=ha.createFramebuffer();ha.bindFramebuffer(ha.FRAMEBUFFER,wa),ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,ba,0);const Ea=ha.checkFramebufferStatus(ha.FRAMEBUFFER)===ha.FRAMEBUFFER_COMPLETE;return ha.bindTexture(ha.TEXTURE_2D,null),ha.bindFramebuffer(ha.FRAMEBUFFER,null),ha.deleteTexture(ba),ha.deleteFramebuffer(wa),Ea}function isWebGLFenceEnabled$1(ha){return ha!==2?!1:getWebGLContext$1(ha).fenceSync!=null}function assertNotComplex$1(ha,aa){Array.isArray(ha)||(ha=[ha]),ha.forEach(xa=>{xa!=null&&assert$2(xa.dtype!=="complex64",()=>`${aa} does not support complex64 tensors in the WebGL backend.`)})}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$3=env$1();ENV$3.registerFlag("HAS_WEBGL",()=>ENV$3.getNumber("WEBGL_VERSION")>0),ENV$3.registerFlag("WEBGL_VERSION",()=>isWebGLVersionEnabled$1(2)?2:isWebGLVersionEnabled$1(1)?1:0),ENV$3.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ENV$3.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>ENV$3.get("WEBGL_VERSION")===2),ENV$3.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ENV$3.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ENV$3.registerFlag("WEBGL_PACK",()=>ENV$3.getBool("HAS_WEBGL")),ENV$3.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_CLIP",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_REDUCE",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_LAZILY_UNPACK",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_CONV_IM2COL",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>ENV$3.getBool("WEBGL_PACK")),ENV$3.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>getWebGLMaxTextureSize$1(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>getMaxTexturesInShader$1(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const ha=ENV$3.getNumber("WEBGL_VERSION");return ha===0?0:getWebGLDisjointQueryTimerVersion$1(ha)}),ENV$3.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ENV$3.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!isMobile$1()),ENV$3.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>isCapableOfRenderingToFloatTexture$1(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>ENV$3.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:ENV$3.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ENV$3.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>isDownloadFloatTextureEnabled$1(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_FENCE_API_ENABLED",()=>isWebGLFenceEnabled$1(ENV$3.getNumber("WEBGL_VERSION"))),ENV$3.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ENV$3.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ENV$3.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,ha=>{if(typeof ha!="number")throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${ha}.`);if(ha<0&&ha!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${ha}.`)}),ENV$3.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>isMobile$1()?1:-1,ha=>{if(typeof ha!="number")throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${ha}.`);if(ha<0&&ha!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${ha}.`)}),ENV$3.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),ENV$3.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),ENV$3.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),ENV$3.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),ENV$3.registerFlag("WEBGL_EXP_CONV",()=>!1),ENV$3.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>ENV$3.getBool("IS_TEST")),ENV$3.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),ENV$3.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),ENV$3.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),ENV$3.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getGlslDifferences$1(){let ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa;return env$1().getNumber("WEBGL_VERSION")===2?(ha="#version 300 es",aa="in",xa="out",ba="in",Sa="texture",Ta="outputColor",wa="out vec4 outputColor;",Ea=env$1().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",ka="",Aa=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(ha="",aa="attribute",xa="varying",ba="varying",Sa="texture2D",Ta="gl_FragColor",wa="",Ea=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,ka=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,Aa=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:ha,attribute:aa,varyingVs:xa,varyingFs:ba,texture2D:Sa,output:Ta,defineOutput:wa,defineSpecialNaN:Ea,defineSpecialInf:ka,defineRound:Aa}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getLogicalCoordinatesFromFlatIndex$1(ha,aa,xa="index"){const ba=computeStrides$1(aa);return ba.map((Sa,Ta)=>{const wa=`int ${ha[Ta]} = ${xa} / ${Sa}`,Ea=Ta===ba.length-1?`int ${ha[Ta+1]} = ${xa} - ${ha[Ta]} * ${Sa}`:`index -= ${ha[Ta]} * ${Sa}`;return`${wa}; ${Ea};`}).join("")}function getOutputLogicalCoordinatesFromFlatIndexByUniform$1(ha,aa,xa="index"){const ba=computeStrides$1(aa);return ba.map((Sa,Ta)=>{const wa=`int ${ha[Ta]} = ${xa} / outShapeStrides[${Ta}]`,Ea=Ta===ba.length-1?`int ${ha[Ta+1]} = ${xa} - ${ha[Ta]} * outShapeStrides[${Ta}]`:`index -= ${ha[Ta]} * outShapeStrides[${Ta}]`;return`${wa}; ${Ea};`}).join("")}function symbolicallyComputeStrides$1(ha,aa){const xa=ha.length,ba=ha.map(Ta=>`${aa}[${Ta}]`),Sa=new Array(xa-1);Sa[xa-2]=ba[xa-1];for(let Ta=xa-3;Ta>=0;--Ta)Sa[Ta]=`(${Sa[Ta+1]} * ${ba[Ta+1]})`;return Sa}function getLogicalCoordinatesFromFlatIndexByUniform$1(ha,aa,xa="index"){const ba=ha.map((Ta,wa)=>wa),Sa=symbolicallyComputeStrides$1(ba,aa);return Sa.map((Ta,wa)=>{const Ea=`int ${ha[wa]} = ${xa} / ${Sa[wa]}`,ka=wa===Sa.length-1?`int ${ha[wa+1]} = ${xa} - ${ha[wa]} * ${Sa[wa]}`:`index -= ${ha[wa]} * ${Sa[wa]}`;return`${Ea}; ${ka};`}).join("")}function getFlatIndexFrom3D$1(ha){const aa=computeStrides$1(ha).map(xa=>xa.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${aa[0]} + coords.y * ${aa[1]} + coords.z;
  }
`}function getFlatIndexFrom3DOutput$1(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}const ENCODE_FLOAT_SNIPPET$1=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{getBroadcastDims:getBroadcastDims$2}=backend_util$1;function makeShader$1(ha,aa,xa){const ba=[];if(ha.forEach(tl=>{const nl=sizeFromShape$1(tl.shapeInfo.logicalShape);if(tl.shapeInfo.isUniform?ba.push(`uniform float ${tl.name}${nl>1?`[${nl}]`:""};`):(ba.push(`uniform sampler2D ${tl.name};`),ba.push(`uniform int offset${tl.name};`)),xa.enableShapeUniforms){const{uniformShape:rl}=getUniformInfoFromShape$1(xa.packedInputs,tl.shapeInfo.logicalShape,tl.shapeInfo.texShape);switch(rl.length){case 1:ba.push(`uniform int ${tl.name}Shape;`);break;case 2:ba.push(`uniform ivec2 ${tl.name}Shape;`);break;case 3:ba.push(`uniform ivec3 ${tl.name}Shape;`);break;case 4:ba.push(`uniform ivec4 ${tl.name}Shape;`);break}ba.push(`uniform ivec2 ${tl.name}TexShape;`)}}),xa.enableShapeUniforms){switch(aa.logicalShape.length){case 1:ba.push("uniform int outShape;");break;case 2:ba.push("uniform ivec2 outShape;"),ba.push("uniform int outShapeStrides;");break;case 3:ba.push("uniform ivec3 outShape;"),ba.push("uniform ivec2 outShapeStrides;");break;case 4:ba.push("uniform ivec4 outShape;"),ba.push("uniform ivec3 outShapeStrides;");break}ba.push("uniform ivec2 outTexShape;")}xa.customUniforms&&xa.customUniforms.forEach(tl=>{ba.push(`uniform ${tl.type} ${tl.name}${tl.arrayIndex?`[${tl.arrayIndex}]`:""};`)});const Sa=ba.join(`
`),Ta=ha.map(tl=>getInputSamplingSnippet$1(tl,aa,xa.packedInputs,xa.enableShapeUniforms)).join(`
`),wa=aa.texShape,Ea=getGlslDifferences$1(),ka=getFloatTextureSampleSnippet$1(Ea);let Aa,Fa,La=getShaderPrefix$1(Ea);return aa.isPacked?(Aa=getPackedOutputSamplingSnippet$1(aa.logicalShape,wa,xa.enableShapeUniforms),Fa=getFloatTextureSetRGBASnippet$1(Ea)):(Aa=getOutputSamplingSnippet$1(aa.logicalShape,wa,xa.enableShapeUniforms),Fa=getFloatTextureSetRSnippet$1(Ea)),xa.packedInputs&&(La+=SHADER_PACKED_PREFIX$1),[La,ka,Fa,Sa,Aa,Ta,xa.userCode].join(`
`)}function getSamplerFromInInfo$1(ha,aa=!1){const xa=ha.shapeInfo.logicalShape;switch(xa.length){case 0:return getSamplerScalar$1(ha,aa);case 1:return getSampler1D$1(ha,aa);case 2:return getSampler2D$1(ha,aa);case 3:return getSampler3D$1(ha,aa);case 4:return getSampler4D$1(ha,aa);case 5:return getSampler5D$1(ha);case 6:return getSampler6D$1(ha);default:throw new Error(`${xa.length}-D input sampling is not yet supported`)}}function getPackedSamplerFromInInfo$1(ha,aa){switch(ha.shapeInfo.logicalShape.length){case 0:return getPackedSamplerScalar$1(ha);case 1:return getPackedSampler1D$1(ha,aa);case 2:return getPackedSampler2D$1(ha,aa);case 3:return getPackedSampler3D$1(ha,aa);default:return getPackedSamplerND$1(ha,aa)}}function getInputSamplingSnippet$1(ha,aa,xa=!1,ba){let Sa="";xa?Sa+=getPackedSamplerFromInInfo$1(ha,ba):Sa+=getSamplerFromInInfo$1(ha,ba);const Ta=ha.shapeInfo.logicalShape,wa=aa.logicalShape;return Ta.length<=wa.length&&(xa?Sa+=getPackedSamplerAtOutputCoords$1(ha,aa):Sa+=getSamplerAtOutputCoords$1(ha,aa)),Sa}function getPackedOutputSamplingSnippet$1(ha,aa,xa){switch(ha.length){case 0:return getOutputScalarCoords$1();case 1:return getOutputPacked1DCoords$1(ha,aa,xa);case 2:return getOutputPacked2DCoords$1(ha,aa,xa);case 3:return getOutputPacked3DCoords$1(ha,aa,xa);default:return getOutputPackedNDCoords$1(ha,aa,xa)}}function getOutputSamplingSnippet$1(ha,aa,xa){switch(ha.length){case 0:return getOutputScalarCoords$1();case 1:return getOutput1DCoords$1(ha,aa,xa);case 2:return getOutput2DCoords$1(ha,aa,xa);case 3:return getOutput3DCoords$1(ha,aa,xa);case 4:return getOutput4DCoords$1(ha,aa,xa);case 5:return getOutput5DCoords$1(ha,aa);case 6:return getOutput6DCoords$1(ha,aa);default:throw new Error(`${ha.length}-D output sampling is not yet supported`)}}function getFloatTextureSampleSnippet$1(ha){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${ha.texture2D}(textureSampler, uv).r;
    }
  `}function getFloatTextureSetRSnippet$1(ha){return`
    void setOutput(float val) {
      ${ha.output} = vec4(val, 0, 0, 0);
    }
  `}function getFloatTextureSetRGBASnippet$1(ha){return`
    void setOutput(vec4 val) {
      ${ha.output} = val;
    }
  `}function getShaderPrefix$1(ha){return`${ha.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${ha.varyingFs} vec2 resultUV;
    ${ha.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${ha.defineSpecialNaN}
    ${ha.defineSpecialInf}
    ${ha.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET$1}
    ${SAMPLE_2D_SNIPPET$1}
    ${SAMPLE_3D_SNIPPET$1}
  `}const SAMPLE_1D_SNIPPET$1=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_2D_SNIPPET$1=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_3D_SNIPPET$1=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SHADER_PACKED_PREFIX$1=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function getOutputScalarCoords$1(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function getOutputPacked1DCoords$1(ha,aa,xa){const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)];return ba[0]===1?xa?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${ba[1]}.0);
      }
    `:ba[1]===1?xa?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${ba[0]}.0);
      }
    `:xa?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));
      return 2 * (resTexRC.x * ${ba[1]} + resTexRC.y);
    }
  `}function getOutput1DCoords$1(ha,aa,xa){return aa[0]===1?xa?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${aa[1]}.0);
      }
    `:aa[1]===1?xa?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${aa[0]}.0);
      }
    `:xa?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${aa[0]}, ${aa[1]}));
      return resTexRC.x * ${aa[1]} + resTexRC.y;
    }
  `}function getOutputPacked3DCoords$1(ha,aa,xa){if(xa)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)],Sa=Math.ceil(ha[2]/2),Ta=Sa*Math.ceil(ha[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));
      int index = resTexRC.x * ${ba[1]} + resTexRC.y;

      int b = index / ${Ta};
      index -= b * ${Ta};

      int r = 2 * (index / ${Sa});
      int c = imod(index, ${Sa}) * 2;

      return ivec3(b, r, c);
    }
  `}function getOutput3DCoords$1(ha,aa,xa){if(xa)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${getOutputLogicalCoordinatesFromFlatIndexByUniform$1(["r","c","d"],ha)}
    return ivec3(r, c, d);
  }
`;const ba=getLogicalCoordinatesFromFlatIndex$1(["r","c","d"],ha);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;
      ${ba}
      return ivec3(r, c, d);
    }
  `}function getOutputPackedNDCoords$1(ha,aa,xa){if(xa)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)],Sa=Math.ceil(ha[ha.length-1]/2),Ta=Sa*Math.ceil(ha[ha.length-2]/2);let wa=Ta,Ea="",ka="b, r, c";for(let Aa=2;Aa<ha.length-1;Aa++)wa*=ha[ha.length-Aa-1],Ea=`
      int b${Aa} = index / ${wa};
      index -= b${Aa} * ${wa};
    `+Ea,ka=`b${Aa}, `+ka;return`
    ivec${ha.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));
      int index = resTexRC.x * ${ba[1]} + resTexRC.y;

      ${Ea}

      int b = index / ${Ta};
      index -= b * ${Ta};

      int r = 2 * (index / ${Sa});
      int c = imod(index, ${Sa}) * 2;

      return ivec${ha.length}(${ka});
    }
  `}function getOutput4DCoords$1(ha,aa,xa){if(xa)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${getOutputLogicalCoordinatesFromFlatIndexByUniform$1(["r","c","d","d2"],ha)}
      return ivec4(r, c, d, d2);
    }
  `;const ba=getLogicalCoordinatesFromFlatIndex$1(["r","c","d","d2"],ha);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;
      ${ba}
      return ivec4(r, c, d, d2);
    }
  `}function getOutput5DCoords$1(ha,aa){const xa=getLogicalCoordinatesFromFlatIndex$1(["r","c","d","d2","d3"],ha);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${aa[0]},
                             ${aa[1]}));

      int index = resTexRC.x * ${aa[1]} + resTexRC.y;

      ${xa}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function getOutput6DCoords$1(ha,aa){const xa=getLogicalCoordinatesFromFlatIndex$1(["r","c","d","d2","d3","d4"],ha);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;

      ${xa}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function getOutputPacked2DCoords$1(ha,aa,xa){const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)];if(arraysEqual$1(ha,aa))return xa?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${ba[0]}, ${ba[1]}));
      }
    `;const Sa=Math.ceil(ha[1]/2);return xa?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));

      int index = resTexRC.x * ${ba[1]} + resTexRC.y;
      int r = 2 * (index / ${Sa});
      int c = imod(index, ${Sa}) * 2;

      return ivec2(r, c);
    }
  `}function getOutput2DCoords$1(ha,aa,xa){return arraysEqual$1(ha,aa)?xa?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${aa[0]}, ${aa[1]}));
      }
    `:ha[1]===1?xa?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${aa[0]}, ${aa[1]}));
        int index = resTexRC.x * ${aa[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:ha[0]===1?xa?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${aa[0]}, ${aa[1]}));
        int index = resTexRC.x * ${aa[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:xa?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;
      int r = index / ${ha[1]};
      int c = index - r * ${ha[1]};
      return ivec2(r, c);
    }
  `}function getFlatOffsetUniformName$1(ha){return`offset${ha}`}function getPackedSamplerScalar$1(ha){const aa=ha.name,xa="get"+aa.charAt(0).toUpperCase()+aa.slice(1),ba=getGlslDifferences$1();return`
    vec4 ${xa}() {
      return ${ba.texture2D}(${aa}, halfCR);
    }
  `}function getSamplerScalar$1(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1);if(ha.shapeInfo.isUniform)return`float ${ba}() {return ${xa};}`;const[Sa,Ta]=ha.shapeInfo.texShape;if(Sa===1&&Ta===1)return`
      float ${ba}() {
        return sampleTexture(${xa}, halfCR);
      }
    `;const wa=getFlatOffsetUniformName$1(xa);if(aa)return`
    float ${ba}() {
      vec2 uv = uvFromFlat(${xa}TexShape[0], ${xa}TexShape[1], ${wa});
      return sampleTexture(${xa}, uv);
    }
  `;const[Ea,ka]=ha.shapeInfo.texShape;return`
    float ${ba}() {
      vec2 uv = uvFromFlat(${Ea}, ${ka}, ${wa});
      return sampleTexture(${xa}, uv);
    }
  `}function getPackedSampler1D$1(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),Sa=ha.shapeInfo.texShape,Ta=getGlslDifferences$1();if(aa)return`
    vec4 ${ba}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${xa}TexShape[0]) / 2.0), ceil(float(${xa}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${Ta.texture2D}(${xa}, uv);
    }
  `;const wa=[Math.ceil(Sa[0]/2),Math.ceil(Sa[1]/2)];return`
    vec4 ${ba}(int index) {
      vec2 uv = packedUVfrom1D(
        ${wa[0]}, ${wa[1]}, index);
      return ${Ta.texture2D}(${xa}, uv);
    }
  `}function getSampler1D$1(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1);if(ha.shapeInfo.isUniform)return`
      float ${ba}(int index) {
        ${getUniformSampler$1(ha)}
      }
    `;const Sa=ha.shapeInfo.texShape,Ta=Sa[0],wa=Sa[1];if(wa===1&&Ta===1)return`
      float ${ba}(int index) {
        return sampleTexture(${xa}, halfCR);
      }
    `;const Ea=getFlatOffsetUniformName$1(xa);return wa===1?aa?`
      float ${ba}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${Ea}) + 0.5) / float(${xa}TexShape[0]));
        return sampleTexture(${xa}, uv);
      }
    `:`
      float ${ba}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${Ea}) + 0.5) / ${Ta}.0);
        return sampleTexture(${xa}, uv);
      }
    `:Ta===1?aa?`
      float ${ba}(int index) {
        vec2 uv = vec2((float(index + ${Ea}) + 0.5) / float(${xa}TexShape[1]), 0.5);
        return sampleTexture(${xa}, uv);
      }
    `:`
      float ${ba}(int index) {
        vec2 uv = vec2((float(index + ${Ea}) + 0.5) / ${wa}.0, 0.5);
        return sampleTexture(${xa}, uv);
      }
    `:aa?`
    float ${ba}(int index) {
      vec2 uv = uvFromFlat(${xa}TexShape[0], ${xa}TexShape[1], index + ${Ea});
      return sampleTexture(${xa}, uv);
    }
  `:`
    float ${ba}(int index) {
      vec2 uv = uvFromFlat(${Ta}, ${wa}, index + ${Ea});
      return sampleTexture(${xa}, uv);
    }
  `}function getPackedSampler2D$1(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=ha.shapeInfo.texShape,wa=Ta[0],Ea=Ta[1],ka=getGlslDifferences$1();if(Ta!=null&&arraysEqual$1(xa,Ta))return aa?`
      vec4 ${Sa}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${ba}TexShape[1], ${ba}TexShape[0]);

        return ${ka.texture2D}(${ba}, uv);
      }
    `:`
      vec4 ${Sa}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${Ea}.0, ${wa}.0);

        return ${ka.texture2D}(${ba}, uv);
      }
    `;if(aa)return`
    vec4 ${Sa}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${ba}TexShape[0]) / 2.0), ceil(float(${ba}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${ba}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${ka.texture2D}(${ba}, uv);
    }
  `;const Aa=[Math.ceil(Ta[0]/2),Math.ceil(Ta[1]/2)],Fa=Math.ceil(xa[1]/2);return`
    vec4 ${Sa}(int row, int col) {
      vec2 uv = packedUVfrom2D(${Fa}, ${Aa[0]}, ${Aa[1]}, row, col);
      return ${ka.texture2D}(${ba}, uv);
    }
  `}function getSampler2D$1(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=ha.shapeInfo.texShape;if(Ta!=null&&arraysEqual$1(xa,Ta)){if(aa)return`
      float ${Sa}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `;const el=Ta[0],tl=Ta[1];return`
    float ${Sa}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${tl}.0, ${el}.0);
      return sampleTexture(${ba}, uv);
    }
  `}const{newShape:wa,keptDims:Ea}=squeezeShape$1(xa),ka=wa;if(ka.length<xa.length){const el=squeezeInputInfo$1(ha,ka),tl=["row","col"];return`
      ${getSamplerFromInInfo$1(el,aa)}
      float ${Sa}(int row, int col) {
        return ${Sa}(${getSqueezedParams$1(tl,Ea)});
      }
    `}if(ha.shapeInfo.isUniform)return`
      float ${Sa}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${xa[1]}, 1)));
        ${getUniformSampler$1(ha)}
      }
    `;const Aa=Ta[0],Fa=Ta[1],La=getFlatOffsetUniformName$1(ba);return Fa===1?aa?`
      float ${Sa}(int row, int col) {
        float index = dot(vec3(row, col, ${La}), vec3(${ba}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${ba}TexShape[0]));
        return sampleTexture(${ba}, uv);
      }
    `:`
    float ${Sa}(int row, int col) {
      float index = dot(vec3(row, col, ${La}), vec3(${xa[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${Aa}.0);
      return sampleTexture(${ba}, uv);
    }
  `:Aa===1?aa?`
      float ${Sa}(int row, int col) {
        float index = dot(vec3(row, col, ${La}), vec3(${ba}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${ba}TexShape[1]), 0.5);
        return sampleTexture(${ba}, uv);
      }
    `:`
    float ${Sa}(int row, int col) {
      float index = dot(vec3(row, col, ${La}), vec3(${xa[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${Fa}.0, 0.5);
      return sampleTexture(${ba}, uv);
    }
  `:aa?`
      float ${Sa}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${ba}Shape[1] + col + ${La};
        vec2 uv = uvFromFlat(${ba}TexShape[0], ${ba}TexShape[1], index);
        return sampleTexture(${ba}, uv);
      }
    `:`
  float ${Sa}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${xa[1]} + col + ${La};
    vec2 uv = uvFromFlat(${Aa}, ${Fa}, index);
    return sampleTexture(${ba}, uv);
  }
`}function getPackedSampler3D$1(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=ha.shapeInfo.texShape,wa=[Math.ceil(Ta[0]/2),Math.ceil(Ta[1]/2)];if(xa[0]===1){const el=xa.slice(1),tl=[1,2],nl=squeezeInputInfo$1(ha,el),rl=["b","row","col"];return`
        ${getPackedSamplerFromInInfo$1(nl,aa)}
        vec4 ${Sa}(int b, int row, int col) {
          return ${Sa}(${getSqueezedParams$1(rl,tl)});
        }
      `}const Ea=getGlslDifferences$1();if(aa)return`
    vec4 ${Sa}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${ba}TexShape[0]) / 2.0), ceil(float(${ba}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${ba}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${ba}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${Ea.texture2D}(${ba}, uv);
    }
  `;const ka=wa[0],Aa=wa[1],Fa=Math.ceil(xa[2]/2),La=Fa*Math.ceil(xa[1]/2);return`
    vec4 ${Sa}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${ka}, ${Aa}, ${La}, ${Fa}, b, row, col);
      return ${Ea.texture2D}(${ba}, uv);
    }
  `}function getSampler3D$1(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=xa[1]*xa[2],wa=xa[2],{newShape:Ea,keptDims:ka}=squeezeShape$1(xa),Aa=Ea;if(Aa.length<xa.length){const rl=squeezeInputInfo$1(ha,Aa),sl=["row","col","depth"];return`
        ${getSamplerFromInInfo$1(rl,aa)}
        float ${Sa}(int row, int col, int depth) {
          return ${Sa}(${getSqueezedParams$1(sl,ka)});
        }
      `}if(ha.shapeInfo.isUniform)return`
      float ${Sa}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${Ta}, ${wa}, 1)));
        ${getUniformSampler$1(ha)}
      }
    `;const Fa=ha.shapeInfo.texShape,La=Fa[0],el=Fa[1],tl=ha.shapeInfo.flatOffset;if(el===Ta&&tl==null)return aa?`
      float ${Sa}(int row, int col, int depth) {
        int stride1 = ${ba}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
        float ${Sa}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${wa}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${el}.0, ${La}.0);
          return sampleTexture(${ba}, uv);
        }
      `;if(el===wa&&tl==null)return aa?`
      float ${Sa}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${ba}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
    float ${Sa}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${xa[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${el}.0, ${La}.0);
      return sampleTexture(${ba}, uv);
    }
  `;const nl=getFlatOffsetUniformName$1(ba);return aa?`
    float ${Sa}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${ba}Shape[1] * ${ba}Shape[2];
      int stride1 = ${ba}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${nl};
      vec2 uv = uvFromFlat(${ba}TexShape[0], ${ba}TexShape[1], index);
      return sampleTexture(${ba}, uv);
    }
    `:`
      float ${Sa}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${Ta} + col * ${wa} + depth + ${nl};
        vec2 uv = uvFromFlat(${La}, ${el}, index);
        return sampleTexture(${ba}, uv);
      }
  `}function getPackedSamplerND$1(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),Sa=getGlslDifferences$1();if(aa)return`
    vec4 ${ba}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${xa}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${xa}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${xa}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${xa}TexShape[0]) / 2.0), ceil(float(${xa}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${Sa.texture2D}(${xa}, uv);
    }
  `;const Ta=ha.shapeInfo.logicalShape,wa=Ta.length,Ea=ha.shapeInfo.texShape,ka=[Math.ceil(Ea[0]/2),Math.ceil(Ea[1]/2)],Aa=ka[0],Fa=ka[1],La=Math.ceil(Ta[wa-1]/2);let el=La*Math.ceil(Ta[wa-2]/2),tl="int b, int row, int col",nl=`b * ${el} + (row / 2) * ${La} + (col / 2)`;for(let rl=2;rl<wa-1;rl++)tl=`int b${rl}, `+tl,el*=Ta[wa-rl-1],nl=`b${rl} * ${el} + `+nl;return`
    vec4 ${ba}(${tl}) {
      int index = ${nl};
      int texR = index / ${Fa};
      int texC = index - texR * ${Fa};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${Fa}, ${Aa});
      return ${Sa.texture2D}(${xa}, uv);
    }
  `}function getSampler4D$1(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=xa[3],wa=xa[2]*Ta,Ea=xa[1]*wa,{newShape:ka,keptDims:Aa}=squeezeShape$1(xa);if(ka.length<xa.length){const al=squeezeInputInfo$1(ha,ka),ll=["row","col","depth","depth2"];return`
      ${getSamplerFromInInfo$1(al,aa)}
      float ${Sa}(int row, int col, int depth, int depth2) {
        return ${Sa}(${getSqueezedParams$1(ll,Aa)});
      }
    `}if(ha.shapeInfo.isUniform)return`
      float ${Sa}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${Ea}, ${wa}, ${Ta}, 1)));
        ${getUniformSampler$1(ha)}
      }
    `;const Fa=ha.shapeInfo.flatOffset,La=ha.shapeInfo.texShape,el=La[0],tl=La[1],nl=`int stride2 = ${ba}Shape[3];`,rl=`int stride1 = ${ba}Shape[2] * stride2;`,sl=`int stride0 = ${ba}Shape[1] * stride1;`;if(tl===Ea&&Fa==null)return aa?`
      float ${Sa}(int row, int col, int depth, int depth2) {
        ${nl}
        ${rl}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
      float ${Sa}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${wa}, ${Ta}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${tl}.0, ${el}.0);
        return sampleTexture(${ba}, uv);
      }
    `;if(tl===Ta&&Fa==null)return aa?`
      float ${Sa}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${ba}Shape[1] * ${ba}Shape[2], ${ba}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
      float ${Sa}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${xa[1]*xa[2]}, ${xa[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${tl}.0, ${el}.0);
        return sampleTexture(${ba}, uv);
      }
    `;const ol=getFlatOffsetUniformName$1(ba);return aa?`
    float ${Sa}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${nl}
      ${rl}
      ${sl}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${ba}TexShape[0], ${ba}TexShape[1], index + ${ol});
      return sampleTexture(${ba}, uv);
    }
  `:`
    float ${Sa}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${Ea} + col * ${wa} +
          depth * ${Ta} + depth2;
      vec2 uv = uvFromFlat(${el}, ${tl}, index + ${ol});
      return sampleTexture(${ba}, uv);
    }
  `}function getSampler5D$1(ha){const aa=ha.shapeInfo.logicalShape,xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),Sa=aa[4],Ta=aa[3]*Sa,wa=aa[2]*Ta,Ea=aa[1]*wa,{newShape:ka,keptDims:Aa}=squeezeShape$1(aa);if(ka.length<aa.length){const rl=squeezeInputInfo$1(ha,ka),sl=["row","col","depth","depth2","depth3"];return`
      ${getSamplerFromInInfo$1(rl)}
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        return ${ba}(${getSqueezedParams$1(sl,Aa)});
      }
    `}if(ha.shapeInfo.isUniform)return`
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${Ea}, ${wa}, ${Ta}, ${Sa})) +
          depth3;
        ${getUniformSampler$1(ha)}
      }
    `;const Fa=ha.shapeInfo.flatOffset,La=ha.shapeInfo.texShape,el=La[0],tl=La[1];if(tl===Ea&&Fa==null)return`
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${wa}, ${Ta}, ${Sa}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${tl}.0, ${el}.0);
        return sampleTexture(${xa}, uv);
      }
    `;if(tl===Sa&&Fa==null)return`
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${aa[1]*aa[2]*aa[3]},
               ${aa[2]*aa[3]}, ${aa[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${tl}.0, ${el}.0);
        return sampleTexture(${xa}, uv);
      }
    `;const nl=getFlatOffsetUniformName$1(xa);return`
    float ${ba}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${Ea} + col * ${wa} + depth * ${Ta} +
          depth2 * ${Sa} + depth3 + ${nl};
      vec2 uv = uvFromFlat(${el}, ${tl}, index);
      return sampleTexture(${xa}, uv);
    }
  `}function getSampler6D$1(ha){const aa=ha.shapeInfo.logicalShape,xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),{newShape:Sa,keptDims:Ta}=squeezeShape$1(aa);if(Sa.length<aa.length){const sl=squeezeInputInfo$1(ha,Sa),ol=["row","col","depth","depth2","depth3","depth4"];return`
      ${getSamplerFromInInfo$1(sl)}
      float ${ba}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${ba}(${getSqueezedParams$1(ol,Ta)});
      }
    `}const wa=aa[5],Ea=aa[4]*wa,ka=aa[3]*Ea,Aa=aa[2]*ka,Fa=aa[1]*Aa;if(ha.shapeInfo.isUniform)return`
      float ${ba}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${Fa}, ${Aa}, ${ka}, ${Ea})) +
          dot(
            vec2(depth3, depth4),
            vec2(${wa}, 1)));
        ${getUniformSampler$1(ha)}
      }
    `;const La=ha.shapeInfo.flatOffset,el=ha.shapeInfo.texShape,tl=el[0],nl=el[1];if(nl===Fa&&La==null)return`
      float ${ba}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${Aa}, ${ka}, ${Ea}, ${wa})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${nl}.0, ${tl}.0);
        return sampleTexture(${xa}, uv);
      }
    `;if(nl===wa&&La==null)return`
      float ${ba}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${aa[1]*aa[2]*aa[3]*aa[4]},
               ${aa[2]*aa[3]*aa[4]},
               ${aa[3]*aa[4]},
               ${aa[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${nl}.0, ${tl}.0);
        return sampleTexture(${xa}, uv);
      }
    `;const rl=getFlatOffsetUniformName$1(xa);return`
    float ${ba}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${Fa} + col * ${Aa} + depth * ${ka} +
          depth2 * ${Ea} + depth3 * ${wa} + depth4 + ${rl};
      vec2 uv = uvFromFlat(${tl}, ${nl}, index);
      return sampleTexture(${xa}, uv);
    }
  `}function getUniformSampler$1(ha){const aa=ha.name,xa=sizeFromShape$1(ha.shapeInfo.logicalShape);return xa<2?`return ${aa};`:`
    for (int i = 0; i < ${xa}; i++) {
      if (i == index) {
        return ${aa}[i];
      }
    }
  `}function getPackedSamplerAtOutputCoords$1(ha,aa){const xa=ha.name,ba=xa.charAt(0).toUpperCase()+xa.slice(1),Sa="get"+ba+"AtOutCoords",Ta=ha.shapeInfo.logicalShape.length,wa=aa.logicalShape.length,Ea=getBroadcastDims$2(ha.shapeInfo.logicalShape,aa.logicalShape),ka=getCoordsDataType$1(wa),Aa=wa-Ta;let Fa;const La=["x","y","z","w","u","v"];Ta===0?Fa="":wa<2&&Ea.length>=1?Fa="coords = 0;":Fa=Ea.map(al=>`coords.${La[al+Aa]} = 0;`).join(`
`);let el="";wa<2&&Ta>0?el="coords":el=ha.shapeInfo.logicalShape.map((al,ll)=>`coords.${La[ll+Aa]}`).join(", ");let tl="return outputValue;";const rl=sizeFromShape$1(ha.shapeInfo.logicalShape)===1,ol=sizeFromShape$1(aa.logicalShape)===1;if(Ta===1&&!rl&&!ol)tl=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(rl&&!ol)wa===1?tl=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:tl=`
        return vec4(outputValue.x);
      `;else if(Ea.length){const al=Ta-2,ll=Ta-1;Ea.indexOf(al)>-1&&Ea.indexOf(ll)>-1?tl="return vec4(outputValue.x);":Ea.indexOf(al)>-1?tl="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":Ea.indexOf(ll)>-1&&(tl="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${Sa}() {
      ${ka} coords = getOutputCoords();
      ${Fa}
      vec4 outputValue = get${ba}(${el});
      ${tl}
    }
  `}function getSamplerAtOutputCoords$1(ha,aa){const xa=ha.name,ba=xa.charAt(0).toUpperCase()+xa.slice(1),Sa="get"+ba+"AtOutCoords",Ta=aa.texShape,wa=ha.shapeInfo.texShape,Ea=ha.shapeInfo.logicalShape.length,ka=aa.logicalShape.length;if(!ha.shapeInfo.isUniform&&Ea===ka&&ha.shapeInfo.flatOffset==null&&arraysEqual$1(wa,Ta))return`
      float ${Sa}() {
        return sampleTexture(${xa}, resultUV);
      }
    `;const Aa=getCoordsDataType$1(ka),Fa=getBroadcastDims$2(ha.shapeInfo.logicalShape,aa.logicalShape),La=ka-Ea;let el;const tl=["x","y","z","w","u","v"];Ea===0?el="":ka<2&&Fa.length>=1?el="coords = 0;":el=Fa.map(rl=>`coords.${tl[rl+La]} = 0;`).join(`
`);let nl="";return ka<2&&Ea>0?nl="coords":nl=ha.shapeInfo.logicalShape.map((rl,sl)=>`coords.${tl[sl+La]}`).join(", "),`
    float ${Sa}() {
      ${Aa} coords = getOutputCoords();
      ${el}
      return get${ba}(${nl});
    }
  `}function getCoordsDataType$1(ha){if(ha<=1)return"int";if(ha===2)return"ivec2";if(ha===3)return"ivec3";if(ha===4)return"ivec4";if(ha===5)return"ivec5";if(ha===6)return"ivec6";throw Error(`GPU for rank ${ha} is not yet supported`)}function getUniformInfoFromShape$1(ha,aa,xa){const{newShape:ba,keptDims:Sa}=squeezeShape$1(aa),Ta=aa.length,wa=ha&&Ta===3&&aa[0]===1,Ea=wa?aa.slice(1):ba,ka=!ha&&Ta>1&&!arraysEqual$1(aa,xa)&&ba.length<Ta||wa;return{useSqueezeShape:ka,uniformShape:ka?Ea:aa,keptDims:Sa}}function squeezeInputInfo$1(ha,aa){const xa=JSON.parse(JSON.stringify(ha));return xa.shapeInfo.logicalShape=aa,xa}function getSqueezedParams$1(ha,aa){return aa.map(xa=>ha[xa]).join(", ")}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function compileProgram$1(ha,aa,xa,ba){const Sa=xa.map((Fa,La)=>{const el={logicalShape:Fa.shape,texShape:Fa.isUniform?null:Fa.texData.texShape,isUniform:Fa.isUniform,isPacked:Fa.isUniform?!1:Fa.texData.isPacked,flatOffset:null};return Fa.texData!=null&&Fa.texData.slice!=null&&Fa.texData.slice.flatOffset>0&&(el.flatOffset=Fa.texData.slice.flatOffset),{name:aa.variableNames[La],shapeInfo:el}}),Ta=Sa.map(Fa=>Fa.shapeInfo),wa={logicalShape:ba.shape,texShape:ba.texData.texShape,isUniform:!1,isPacked:ba.texData.isPacked,flatOffset:null},Ea=makeShader$1(Sa,wa,aa),ka=createFragmentShader$1(ha.gl,Ea),Aa=ha.createProgram(ka);return env$1().get("ENGINE_COMPILE_ONLY")?{program:aa,fragmentShader:ka,source:Ea,webGLProgram:Aa,inShapeInfos:Ta,outShapeInfo:wa,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(ha.buildVao(Aa),Object.assign({program:aa,fragmentShader:ka,source:Ea,webGLProgram:Aa,inShapeInfos:Ta,outShapeInfo:wa},getUniformLocations$1(ha,aa,Aa)))}function getUniformLocations$1(ha,aa,xa){const ba=[],Sa=[];let Ta,wa,Ea,ka=null,Aa=null;Aa=ha.getUniformLocation(xa,"NAN",!1),env$1().getNumber("WEBGL_VERSION")===1&&(ka=ha.getUniformLocation(xa,"INFINITY",!1));const Fa=!1;for(const La of aa.variableNames){const el={name:La,uniform:ha.getUniformLocation(xa,La,Fa),offset:ha.getUniformLocation(xa,`offset${La}`,Fa)};aa.enableShapeUniforms&&(el.shape=ha.getUniformLocation(xa,`${La}Shape`,Fa),el.texShape=ha.getUniformLocation(xa,`${La}TexShape`,Fa)),ba.push(el)}if(aa.enableShapeUniforms&&(Ta=ha.getUniformLocation(xa,"outShape",Fa),Ea=ha.getUniformLocation(xa,"outShapeStrides",Fa),wa=ha.getUniformLocation(xa,"outTexShape",Fa)),aa.customUniforms)for(const La of aa.customUniforms)Sa.push(ha.getUniformLocation(xa,La.name,Fa));return{variablesLocations:ba,customUniformLocations:Sa,infLoc:ka,nanLoc:Aa,outShapeLocation:Ta,outShapeStridesLocation:Ea,outTexShapeLocation:wa}}function validateBinaryAndProgram$1(ha,aa){if(ha.length!==aa.length)throw Error(`Binary was compiled with ${ha.length} inputs, but was executed with ${aa.length} inputs`);ha.forEach((xa,ba)=>{const Sa=xa.logicalShape,Ta=aa[ba],wa=Ta.shape;if(!arraysEqual$1(Sa,wa))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${Sa} and ${wa} must match`);if(xa.isUniform&&Ta.isUniform)return;const Ea=xa.texShape,ka=Ta.isUniform?null:Ta.texData.texShape;if(!arraysEqual$1(Ea,ka))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${Ea} and ${ka} must match`)})}function runProgram$1(ha,aa,xa,ba,Sa){aa.program.enableShapeUniforms||(validateBinaryAndProgram$1(aa.inShapeInfos,xa),validateBinaryAndProgram$1([aa.outShapeInfo],[ba]));const Ta=ba.texData.texture,wa=ba.texData.texShape;ba.texData.isPacked?ha.setOutputPackedMatrixTexture(Ta.texture,wa[0],wa[1]):ha.setOutputMatrixTexture(Ta.texture,wa[0],wa[1]),ha.setProgram(aa.webGLProgram),ha.bindVertexArray(aa.webGLProgram.vao),env$1().getNumber("WEBGL_VERSION")===1&&aa.infLoc!==null&&ha.gl.uniform1f(aa.infLoc,1/0),aa.nanLoc!==null&&ha.gl.uniform1f(aa.nanLoc,NaN);for(let ka=0;ka<xa.length;++ka){const Aa=xa[ka],{uniform:Fa,offset:La,shape:el,texShape:tl}=aa.variablesLocations[ka];if(el){const{uniformShape:nl}=getUniformInfoFromShape$1(aa.program.packedInputs,Aa.shape,Aa.texData.texShape);switch(nl.length){case 1:ha.gl.uniform1iv(el,new Int32Array(nl));break;case 2:ha.gl.uniform2iv(el,new Int32Array(nl));break;case 3:ha.gl.uniform3iv(el,new Int32Array(nl));break;case 4:ha.gl.uniform4iv(el,new Int32Array(nl));break}}if(tl&&ha.gl.uniform2i(tl,Aa.texData.texShape[0],Aa.texData.texShape[1]),Fa!=null){if(Aa.isUniform){if(sizeFromShape$1(Aa.shape)<2)ha.gl.uniform1f(Fa,Aa.uniformValues[0]);else{let nl=Aa.uniformValues;nl instanceof Float32Array||(nl=new Float32Array(nl)),ha.gl.uniform1fv(Fa,nl)}continue}Aa.texData.slice!=null&&La!=null&&ha.gl.uniform1i(La,Aa.texData.slice.flatOffset),ha.setInputMatrixTexture(Aa.texData.texture.texture,Fa,ka)}}const Ea=aa.outShapeLocation;if(Ea)switch(ba.shape.length){case 1:ha.gl.uniform1iv(Ea,new Int32Array(ba.shape));break;case 2:ha.gl.uniform2iv(Ea,new Int32Array(ba.shape));break;case 3:ha.gl.uniform3iv(Ea,new Int32Array(ba.shape));break;case 4:ha.gl.uniform4iv(Ea,new Int32Array(ba.shape));break}if(aa.outShapeStridesLocation){const ka=computeStrides$1(ba.shape);switch(ba.shape.length){case 2:ha.gl.uniform1iv(aa.outShapeStridesLocation,new Int32Array(ka));break;case 3:ha.gl.uniform2iv(aa.outShapeStridesLocation,new Int32Array(ka));break;case 4:ha.gl.uniform3iv(aa.outShapeStridesLocation,new Int32Array(ka));break}}if(aa.outTexShapeLocation&&ha.gl.uniform2i(aa.outTexShapeLocation,ba.texData.texShape[0],ba.texData.texShape[1]),aa.program.customUniforms&&Sa)for(let ka=0;ka<aa.program.customUniforms.length;++ka){const Aa=aa.program.customUniforms[ka],Fa=aa.customUniformLocations[ka],La=Sa[ka];if(Aa.type==="float")ha.gl.uniform1fv(Fa,La);else if(Aa.type==="vec2")ha.gl.uniform2fv(Fa,La);else if(Aa.type==="vec3")ha.gl.uniform3fv(Fa,La);else if(Aa.type==="vec4")ha.gl.uniform4fv(Fa,La);else if(Aa.type==="int")ha.gl.uniform1iv(Fa,La);else if(Aa.type==="ivec2")ha.gl.uniform2iv(Fa,La);else if(Aa.type==="ivec3")ha.gl.uniform3iv(Fa,La);else if(Aa.type==="ivec4")ha.gl.uniform4iv(Fa,La);else throw Error(`uniform type ${Aa.type} is not supported yet.`)}ha.executeProgram()}function makeShaderKey$1(ha,aa,xa){let ba="";aa.concat(xa).forEach(wa=>{const Ea=wa.texData!=null&&wa.texData.slice!=null&&wa.texData.slice.flatOffset>0;if(ha.enableShapeUniforms&&!wa.isUniform){const ka=wa.texData.texShape,{useSqueezeShape:Aa,uniformShape:Fa,keptDims:La}=getUniformInfoFromShape$1(ha.packedInputs,wa.shape,ka);let el="",tl="",nl="";if(Fa.length===1&&ha.packedInputs){const cl=[Math.ceil(ka[0]/2),Math.ceil(ka[1]/2)];el=`${cl[0]>1}_${cl[1]>1}`}else if(Fa.length===2&&!ha.packedInputs)tl=`${Fa[0]>1}_${Fa[1]>1}`;else if(Fa.length>2&&!ha.packedInputs){const cl=computeStrides$1(Fa);nl=`${cl[0]===ka[1]}_${cl[cl.length-1]===ka[1]}`}const rl=wa.shape.length,sl=Fa.length===2&&arraysEqual$1(wa.shape,ka),ol=sizeFromShape$1(wa.shape)===1,al=getBroadcastDims$3(wa.shape,xa.shape),ll=!ha.packedInputs&&rl===xa.shape.length&&arraysEqual$1(ka,xa.texData.texShape),il=ha.packedInputs||Fa.length>2?"":`${ka[0]>1}_${ka[1]>1}`;ba+=`${rl}_${ll}_${Aa?La:""}_${Fa.length}_${ol}_${al}_${sl}_${el}_${tl}_${nl}_${il}_${Ea}`}else{const ka=wa.isUniform?"uniform":wa.texData.texShape;ba+=`${wa.shape}_${ka}_${Ea}`}});const Sa=ha.userCode;let Ta=ha.constructor.name;return Ta+="_"+ba+"_"+Sa+`${env$1().getNumber("WEBGL_VERSION")}`,Ta}function useShapeUniforms$1(ha){return env$1().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&ha<=4}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DecodeMatrixProgram$1=class{constructor(aa){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=PackingScheme$1.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const xa=getGlslDifferences$1();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform$1(["r","c","d"],aa):getLogicalCoordinatesFromFlatIndex$1(["r","c","d"],aa)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${xa.output} = result;
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DecodeMatrixPackedProgram$1=class{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=PackingScheme$1.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const xa=getGlslDifferences$1();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform$1(["r","c","d"],aa):getLogicalCoordinatesFromFlatIndex$1(["r","c","d"],aa)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${xa.output} = result;
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let EncodeFloatProgram$1=class{constructor(aa){this.variableNames=["A"],this.outTexUsage=TextureUsage$1.DOWNLOAD;const xa=getGlslDifferences$1();this.outputShape=aa,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET$1}

      void main() {
        float x = getAAtOutCoords();
        ${xa.output} = encode_float(x);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let EncodeFloatPackedProgram$1=class{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=TextureUsage$1.DOWNLOAD;const xa=getGlslDifferences$1();this.outputShape=aa,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET$1}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${xa.output} = encode_float(x);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHANNEL_CHAR_TO_INDEX_MAP$1={R:0,G:1,B:2,A:3};let EncodeMatrixProgram$1=class{constructor(aa,xa=!1,ba="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const Sa=getGlslDifferences$1();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);let Ta="result";xa&&(Ta="floor(result * 255. + 0.5)");let wa="";for(let Ea=0;Ea<ba.length;Ea++){const ka=ba[Ea];wa+=`
          if(offset == ${Ea}) {
            result = values[${CHANNEL_CHAR_TO_INDEX_MAP$1[ka]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput$1():getFlatIndexFrom3D$1(aa)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${ba.length});

        flatIndex = idiv(flatIndex, ${ba.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${Sa.texture2D}(A, uv);
          ${wa}
        }
        ${Sa.output} = vec4(${Ta}, 0., 0., 0.);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let EncodeMatrixPackedProgram$1=class{constructor(aa,xa=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const ba=getGlslDifferences$1();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);let Sa="",Ta="result";xa&&(Ta="floor(result * 255. + 0.5)");for(let wa=0;wa<=1;wa++)for(let Ea=0;Ea<=1;Ea++){const ka=wa*2+Ea;Sa+=`
          localCoords = coords;
          if(localCoords[2] + ${Ea} < ${this.enableShapeUniforms?"outShape[2]":`${aa[2]}`}) {
          localCoords[2] += ${Ea};
          if (localCoords[1] + ${wa} < ${this.enableShapeUniforms?"outShape[1]":`${aa[1]}`}) {
            localCoords[1] += ${wa};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${ba.texture2D}(A, uv);

            if (offset == 0) {
              result[${ka}] = values[0];
            } else if (offset == 1) {
              result[${ka}] = values[1];
            } else if (offset == 2) {
              result[${ka}] = values[2];
            } else {
              result[${ka}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?getFlatIndexFrom3DOutput$1():getFlatIndexFrom3D$1(aa)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${Sa}

          ${ba.output} = ${Ta};
        }
    `}};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createVertexShader$2(ha){const aa=getGlslDifferences$1(),xa=`${aa.version}
    precision highp float;
    ${aa.attribute} vec3 clipSpacePos;
    ${aa.attribute} vec2 uv;
    ${aa.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return createVertexShader$3(ha,xa)}function createVertexBuffer$1(ha){const aa=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return createStaticVertexBuffer$1(ha,aa)}function createIndexBuffer$1(ha){const aa=new Uint16Array([0,1,2,2,1,3]);return createStaticIndexBuffer$1(ha,aa)}function createAndConfigureTexture$1(ha,aa,xa,ba,Sa,Ta){validateTextureSize$1(aa,xa);const wa=createTexture$1(ha),Ea=ha.TEXTURE_2D;return callAndCheck$1(ha,()=>ha.bindTexture(Ea,wa)),callAndCheck$1(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_WRAP_S,ha.CLAMP_TO_EDGE)),callAndCheck$1(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_WRAP_T,ha.CLAMP_TO_EDGE)),callAndCheck$1(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_MIN_FILTER,ha.NEAREST)),callAndCheck$1(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_MAG_FILTER,ha.NEAREST)),env$1().getNumber("WEBGL_VERSION")===1?callAndCheck$1(ha,()=>ha.texImage2D(Ea,0,ba,aa,xa,0,Sa,Ta,null)):callAndCheck$1(ha,()=>ha.texStorage2D(Ea,1,ba,aa,xa)),callAndCheck$1(ha,()=>ha.bindTexture(ha.TEXTURE_2D,null)),{texture:wa,texShape:[xa,aa]}}function getInternalFormatForFloat32MatrixTexture$1(ha){return ha.internalFormatFloat}function createFloat32MatrixTexture$1(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight$1(aa,xa);return createAndConfigureTexture$1(ha,Sa,Ta,getInternalFormatForFloat32MatrixTexture$1(ba),ba.textureFormatFloat,ha.FLOAT)}function getInternalFormatForFloat16MatrixTexture$1(ha){return ha.internalFormatHalfFloat}function createFloat16MatrixTexture$1(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight$1(aa,xa);return createAndConfigureTexture$1(ha,Sa,Ta,getInternalFormatForFloat16MatrixTexture$1(ba),ba.textureFormatFloat,ba.textureTypeHalfFloat)}function getInternalFormatForUnsignedBytesMatrixTexture$1(ha){return ha.downloadTextureFormat}function createUnsignedBytesMatrixTexture$1(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight$1(aa,xa);return createAndConfigureTexture$1(ha,Sa,Ta,getInternalFormatForUnsignedBytesMatrixTexture$1(ba),ha.RGBA,ha.UNSIGNED_BYTE)}function getInternalFormatForPackedMatrixTexture$1(ha){return ha.internalFormatPackedFloat}function createPackedMatrixTexture$1(ha,aa,xa,ba){const[Sa,Ta]=getPackedMatrixTextureShapeWidthHeight$1(aa,xa);return createAndConfigureTexture$1(ha,Sa,Ta,getInternalFormatForPackedMatrixTexture$1(ba),ha.RGBA,ha.FLOAT)}function getInternalFormatForFloat16PackedMatrixTexture$1(ha){return ha.internalFormatPackedHalfFloat}function createFloat16PackedMatrixTexture$1(ha,aa,xa,ba){const[Sa,Ta]=getPackedMatrixTextureShapeWidthHeight$1(aa,xa);return createAndConfigureTexture$1(ha,Sa,Ta,getInternalFormatForFloat16PackedMatrixTexture$1(ba),ha.RGBA,ba.textureTypeHalfFloat)}function bindVertexProgramAttributeStreams$1(ha,aa,xa){return callAndCheck$1(ha,()=>ha.bindBuffer(ha.ARRAY_BUFFER,xa)),bindVertexBufferToProgramAttribute$1(ha,aa,"clipSpacePos",xa,3,20,0)&&bindVertexBufferToProgramAttribute$1(ha,aa,"uv",xa,2,20,12)}function uploadDenseMatrixToTexture$1(ha,aa,xa,ba,Sa,Ta){callAndCheck$1(ha,()=>ha.bindTexture(ha.TEXTURE_2D,aa));let wa,Ea,ka;Sa instanceof Uint8Array?(wa=new Uint8Array(xa*ba*4),Ea=ha.UNSIGNED_BYTE,ka=ha.RGBA):(wa=new Float32Array(xa*ba*4),Ea=ha.FLOAT,ka=Ta.internalFormatPackedFloat),wa.set(Sa),env$1().getNumber("WEBGL_VERSION")===2?callAndCheck$1(ha,()=>ha.texSubImage2D(ha.TEXTURE_2D,0,0,0,xa,ba,ha.RGBA,Ea,wa)):callAndCheck$1(ha,()=>ha.texImage2D(ha.TEXTURE_2D,0,ka,xa,ba,0,ha.RGBA,Ea,wa)),callAndCheck$1(ha,()=>ha.bindTexture(ha.TEXTURE_2D,null))}function uploadPixelDataToTexture$1(ha,aa,xa){callAndCheck$1(ha,()=>ha.bindTexture(ha.TEXTURE_2D,aa)),xa.data instanceof Uint8Array?env$1().getNumber("WEBGL_VERSION")===2?callAndCheck$1(ha,()=>ha.texSubImage2D(ha.TEXTURE_2D,0,0,0,xa.width,xa.height,ha.RGBA,ha.UNSIGNED_BYTE,xa.data)):callAndCheck$1(ha,()=>ha.texImage2D(ha.TEXTURE_2D,0,ha.RGBA,xa.width,xa.height,0,ha.RGBA,ha.UNSIGNED_BYTE,xa.data)):env$1().getNumber("WEBGL_VERSION")===2?callAndCheck$1(ha,()=>ha.texSubImage2D(ha.TEXTURE_2D,0,0,0,ha.RGBA,ha.UNSIGNED_BYTE,xa)):callAndCheck$1(ha,()=>ha.texImage2D(ha.TEXTURE_2D,0,ha.RGBA,ha.RGBA,ha.UNSIGNED_BYTE,xa)),callAndCheck$1(ha,()=>ha.bindTexture(ha.TEXTURE_2D,null))}function createBufferFromOutputTexture$1(ha,aa,xa,ba){const Sa=ha.createBuffer();callAndCheck$1(ha,()=>ha.bindBuffer(ha.PIXEL_PACK_BUFFER,Sa));const Ea=4*4*aa*xa;return callAndCheck$1(ha,()=>ha.bufferData(ha.PIXEL_PACK_BUFFER,Ea,ha.STREAM_READ)),callAndCheck$1(ha,()=>ha.readPixels(0,0,xa,aa,ha.RGBA,ha.FLOAT,0)),callAndCheck$1(ha,()=>ha.bindBuffer(ha.PIXEL_PACK_BUFFER,null)),Sa}function downloadFloat32MatrixFromBuffer$1(ha,aa,xa){const ba=ha,Sa=new Float32Array(xa);return ba.bindBuffer(ba.PIXEL_PACK_BUFFER,aa),ba.getBufferSubData(ba.PIXEL_PACK_BUFFER,0,Sa),ba.bindBuffer(ba.PIXEL_PACK_BUFFER,null),Sa}function downloadByteEncodedFloatMatrixFromOutputTexture$1(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight$1(aa,xa),wa=4,Ea=new Uint8Array(getUnpackedArraySizeFromMatrixSize$1(aa*xa,wa));return callAndCheck$1(ha,()=>ha.readPixels(0,0,Sa,Ta,ba.downloadTextureFormat,ha.UNSIGNED_BYTE,Ea)),new Float32Array(Ea.buffer)}function downloadPackedMatrixFromBuffer$1(ha,aa,xa,ba,Sa,Ta,wa,Ea){const ka=ha,Aa=new Float32Array(getPackedRGBAArraySizeFromMatrixShape$1(Ta,wa));return ka.bindBuffer(ka.PIXEL_PACK_BUFFER,aa),ka.getBufferSubData(ka.PIXEL_PACK_BUFFER,0,Aa),ka.bindBuffer(ka.PIXEL_PACK_BUFFER,null),Aa}function downloadMatrixFromPackedOutputTexture$1(ha,aa,xa){const ba=new Float32Array(aa*xa*4);return callAndCheck$1(ha,()=>ha.readPixels(0,0,xa,aa,ha.RGBA,ha.FLOAT,ba)),ba}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let GPGPUContext$1=class{constructor(aa){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const xa=env$1().getNumber("WEBGL_VERSION");if(aa!=null?(this.gl=aa,setWebGLContext$1(xa,aa)):this.gl=getWebGLContext$1(xa),aa=this.gl,env$1().getNumber("WEBGL_VERSION")===2){const Ta=aa;this.createVertexArray=()=>callAndCheck$1(Ta,()=>Ta.createVertexArray()),this.bindVertexArray=wa=>callAndCheck$1(Ta,()=>Ta.bindVertexArray(wa)),this.deleteVertexArray=wa=>callAndCheck$1(Ta,()=>Ta.deleteVertexArray(wa)),this.getVertexArray=()=>callAndCheck$1(Ta,()=>Ta.getParameter(Ta.VERTEX_ARRAY_BINDING))}else if(aa!=null){const Ta=aa.getExtension("OES_vertex_array_object");if(Ta==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>callAndCheck$1(aa,()=>Ta.createVertexArrayOES()),this.bindVertexArray=wa=>callAndCheck$1(aa,()=>Ta.bindVertexArrayOES(wa)),this.deleteVertexArray=wa=>callAndCheck$1(aa,()=>Ta.deleteVertexArrayOES(wa)),this.getVertexArray=()=>callAndCheck$1(aa,()=>aa.getParameter(Ta.VERTEX_ARRAY_BINDING_OES))}let ba="WEBGL_color_buffer_float";const Sa="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),env$1().getNumber("WEBGL_VERSION")===1){const Ta="OES_texture_float",wa="OES_texture_half_float";if(this.textureFloatExtension=getExtensionOrThrow$1(this.gl,Ta),hasExtension$1(this.gl,wa))this.textureHalfFloatExtension=getExtensionOrThrow$1(this.gl,wa);else if(env$1().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(ba),hasExtension$1(this.gl,Sa))this.colorBufferHalfFloatExtension=getExtensionOrThrow$1(this.gl,Sa);else if(env$1().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(ba="EXT_color_buffer_float",hasExtension$1(this.gl,ba))this.colorBufferFloatExtension=this.gl.getExtension(ba);else if(hasExtension$1(this.gl,Sa))this.colorBufferHalfFloatExtension=this.gl.getExtension(Sa);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=createVertexBuffer$1(this.gl),this.indexBuffer=createIndexBuffer$1(this.gl),this.framebuffer=createFramebuffer$1(this.gl),this.textureConfig=getTextureConfig$1(this.gl,this.textureHalfFloatExtension)}get debug(){return env$1().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const aa=this.gl;callAndCheck$1(aa,()=>aa.finish()),callAndCheck$1(aa,()=>aa.bindFramebuffer(aa.FRAMEBUFFER,null)),callAndCheck$1(aa,()=>aa.deleteFramebuffer(this.framebuffer)),callAndCheck$1(aa,()=>aa.bindBuffer(aa.ARRAY_BUFFER,null)),callAndCheck$1(aa,()=>aa.bindBuffer(aa.ELEMENT_ARRAY_BUFFER,null)),callAndCheck$1(aa,()=>aa.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(aa,xa){return this.throwIfDisposed(),createFloat32MatrixTexture$1(this.gl,aa,xa,this.textureConfig)}createFloat16MatrixTexture(aa,xa){return this.throwIfDisposed(),createFloat16MatrixTexture$1(this.gl,aa,xa,this.textureConfig)}createUnsignedBytesMatrixTexture(aa,xa){return this.throwIfDisposed(),createUnsignedBytesMatrixTexture$1(this.gl,aa,xa,this.textureConfig)}uploadPixelDataToTexture(aa,xa){this.throwIfDisposed(),uploadPixelDataToTexture$1(this.gl,aa,xa)}uploadDenseMatrixToTexture(aa,xa,ba,Sa){this.throwIfDisposed(),uploadDenseMatrixToTexture$1(this.gl,aa,xa,ba,Sa,this.textureConfig)}createFloat16PackedMatrixTexture(aa,xa){return this.throwIfDisposed(),createFloat16PackedMatrixTexture$1(this.gl,aa,xa,this.textureConfig)}createPackedMatrixTexture(aa,xa){return this.throwIfDisposed(),createPackedMatrixTexture$1(this.gl,aa,xa,this.textureConfig)}deleteMatrixTexture(aa){this.throwIfDisposed(),this.outputTexture===aa&&(unbindColorTextureFromFramebuffer$1(this.gl,this.framebuffer),this.outputTexture=null),callAndCheck$1(this.gl,()=>this.gl.deleteTexture(aa))}downloadByteEncodedFloatMatrixFromOutputTexture(aa,xa,ba){return this.downloadMatrixDriver(aa,()=>downloadByteEncodedFloatMatrixFromOutputTexture$1(this.gl,xa,ba,this.textureConfig))}downloadPackedMatrixFromBuffer(aa,xa,ba,Sa,Ta,wa){return downloadPackedMatrixFromBuffer$1(this.gl,aa,xa,ba,Sa,Ta,wa,this.textureConfig)}downloadFloat32MatrixFromBuffer(aa,xa){return downloadFloat32MatrixFromBuffer$1(this.gl,aa,xa)}createBufferFromTexture(aa,xa,ba){this.bindTextureToFrameBuffer(aa);const Sa=createBufferFromOutputTexture$1(this.gl,xa,ba,this.textureConfig);return this.unbindTextureToFrameBuffer(),Sa}createAndWaitForFence(){const aa=this.createFence(this.gl);return this.pollFence(aa)}createFence(aa){let xa,ba;if(env$1().getBool("WEBGL_FENCE_API_ENABLED")){const Sa=aa,Ta=Sa.fenceSync(Sa.SYNC_GPU_COMMANDS_COMPLETE,0);aa.flush(),ba=()=>{const wa=Sa.clientWaitSync(Ta,0,0);return wa===Sa.ALREADY_SIGNALED||wa===Sa.CONDITION_SATISFIED},xa=Ta}else env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(xa=this.beginQuery(),this.endQuery(),ba=()=>this.isQueryAvailable(xa,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):ba=()=>!0;return{query:xa,isFencePassed:ba}}downloadMatrixFromPackedTexture(aa,xa,ba){return this.downloadMatrixDriver(aa,()=>downloadMatrixFromPackedOutputTexture$1(this.gl,xa,ba))}createProgram(aa){this.throwIfDisposed();const xa=this.gl;this.vertexShader==null&&(this.vertexShader=createVertexShader$2(xa));const ba=createProgram$1(xa);callAndCheck$1(xa,()=>xa.attachShader(ba,this.vertexShader)),callAndCheck$1(xa,()=>xa.attachShader(ba,aa)),linkProgram$1(xa,ba);const Sa=Object.assign(ba,{vao:this.createVertexArray()});return this.debug&&validateProgram$1(xa,Sa),Sa}buildVao(aa){this.setProgram(aa),this.bindVertexArray(aa.vao);const xa=this.gl;callAndCheck$1(xa,()=>xa.bindBuffer(xa.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),bindVertexProgramAttributeStreams$1(xa,aa,this.vertexBuffer)}deleteProgram(aa){this.throwIfDisposed(),aa===this.program&&(this.program=null),aa!=null&&(callAndCheck$1(this.gl,()=>this.gl.deleteProgram(aa)),this.deleteVertexArray(aa.vao))}setProgram(aa){this.throwIfDisposed(),this.program=aa,this.program!=null&&this.debug&&validateProgram$1(this.gl,this.program),callAndCheck$1(this.gl,()=>this.gl.useProgram(aa))}getUniformLocation(aa,xa,ba=!0){return this.throwIfDisposed(),ba?getProgramUniformLocationOrThrow$1(this.gl,aa,xa):getProgramUniformLocation$1(this.gl,aa,xa)}getAttributeLocation(aa,xa){return this.throwIfDisposed(),callAndCheck$1(this.gl,()=>this.gl.getAttribLocation(aa,xa))}getUniformLocationNoThrow(aa,xa){return this.throwIfDisposed(),this.gl.getUniformLocation(aa,xa)}setInputMatrixTexture(aa,xa,ba){this.throwIfDisposed(),this.throwIfNoProgram(),bindTextureToProgramUniformSampler$1(this.gl,aa,xa,ba)}setOutputMatrixTexture(aa,xa,ba){this.setOutputMatrixTextureDriver(aa,ba,xa)}setOutputPackedMatrixTexture(aa,xa,ba){this.throwIfDisposed();const[Sa,Ta]=getPackedMatrixTextureShapeWidthHeight$1(xa,ba);this.setOutputMatrixTextureDriver(aa,Sa,Ta)}setOutputMatrixWriteRegion(aa,xa,ba,Sa){this.setOutputMatrixWriteRegionDriver(ba,aa,Sa,xa)}setOutputPackedMatrixWriteRegion(aa,xa,ba,Sa){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&validateProgram$1(this.gl,this.program),validateFramebuffer$1(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const aa=this.gl;if(this.debug){const xa=this.getVertexArray();console.assert(xa===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}callAndCheck$1(aa,()=>aa.drawElements(aa.TRIANGLES,6,aa.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),callAndCheck$1(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=getExtensionOrThrow$1(this.gl,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const ba=this.gl,Sa=this.getQueryTimerExtensionWebGL2(),Ta=ba.createQuery();return ba.beginQuery(Sa.TIME_ELAPSED_EXT,Ta),Ta}const aa=this.getQueryTimerExtensionWebGL1(),xa=aa.createQueryEXT();return aa.beginQueryEXT(aa.TIME_ELAPSED_EXT,xa),xa}endQuery(){if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const xa=this.gl,ba=this.getQueryTimerExtensionWebGL2();xa.endQuery(ba.TIME_ELAPSED_EXT);return}const aa=this.getQueryTimerExtensionWebGL1();aa.endQueryEXT(aa.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(aa){return await repeatedTry$1(()=>this.disposed||this.isQueryAvailable(aa,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(aa,env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(aa,xa){if(xa===0)return null;if(xa===2){const ba=this.gl;return ba.getQueryParameter(aa,ba.QUERY_RESULT)/1e6}else{const ba=this.getQueryTimerExtensionWebGL1();return ba.getQueryObjectEXT(aa,ba.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(aa,xa){if(xa===0)return!0;if(xa===2){const ba=this.gl,Sa=this.getQueryTimerExtensionWebGL2(),Ta=ba.getQueryParameter(aa,ba.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(Sa.GPU_DISJOINT_EXT)),Ta&&!this.disjoint}else{const ba=this.getQueryTimerExtensionWebGL1(),Sa=ba.getQueryObjectEXT(aa,ba.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(ba.GPU_DISJOINT_EXT)),Sa&&!this.disjoint}}pollFence(aa){return new Promise(xa=>{this.addItemToPoll(()=>aa.isFencePassed(),()=>xa())})}pollItems(){const aa=linearSearchLastTrue$1(this.itemsToPoll.map(xa=>xa.isDoneFn));for(let xa=0;xa<=aa;++xa){const{resolveFn:ba}=this.itemsToPoll[xa];ba()}this.itemsToPoll=this.itemsToPoll.slice(aa+1)}addItemToPoll(aa,xa){if(this.itemsToPoll.push({isDoneFn:aa,resolveFn:xa}),this.itemsToPoll.length>1)return;let ba;"setTimeoutCustom"in env$1().platform&&(ba=env$1().platform.setTimeoutCustom.bind(env$1().platform)),repeatedTry$1(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,ba)}bindTextureToFrameBuffer(aa){this.throwIfDisposed(),bindColorTextureToFramebuffer$1(this.gl,aa,this.framebuffer),this.debug&&validateFramebuffer$1(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(bindColorTextureToFramebuffer$1(this.gl,this.outputTexture,this.framebuffer),this.debug&&validateFramebuffer$1(this.gl)):unbindColorTextureFromFramebuffer$1(this.gl,this.framebuffer)}downloadMatrixDriver(aa,xa){this.bindTextureToFrameBuffer(aa);const ba=xa();return this.unbindTextureToFrameBuffer(),ba}setOutputMatrixTextureDriver(aa,xa,ba){this.throwIfDisposed();const Sa=this.gl;bindColorTextureToFramebuffer$1(Sa,aa,this.framebuffer),this.debug&&validateFramebuffer$1(Sa),this.outputTexture=aa,callAndCheck$1(Sa,()=>Sa.viewport(0,0,xa,ba)),callAndCheck$1(Sa,()=>Sa.scissor(0,0,xa,ba))}setOutputMatrixWriteRegionDriver(aa,xa,ba,Sa){this.throwIfDisposed(),callAndCheck$1(this.gl,()=>this.gl.scissor(aa,xa,ba,Sa))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function linearSearchLastTrue$1(ha){let aa=0;for(;aa<ha.length&&ha[aa]();++aa);return aa-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{addImpl:addImplCPU$1,bincountImpl:bincountImplCPU$1,bincountReduceImpl:bincountReduceImplCPU$1,bitwiseAndImpl:bitwiseAndImplCPU$1,castImpl:castImplCPU$1,ceilImpl:ceilImplCPU$1,concatImpl:concatImplCPU$1,equalImpl:equalImplCPU$1,expImpl:expImplCPU$1,expm1Impl:expm1ImplCPU$1,floorImpl:floorImplCPU$1,gatherNdImpl:gatherNdImplCPU$1,gatherV2Impl:gatherV2ImplCPU$1,greaterImpl:greaterImplCPU$1,greaterEqualImpl:greaterEqualImplCPU$1,lessImpl:lessImplCPU$1,lessEqualImpl:lessEqualImplCPU$1,linSpaceImpl:linSpaceImplCPU$1,logImpl:logImplCPU$1,maxImpl:maxImplCPU$1,maximumImpl:maximumImplCPU$1,minimumImpl:minimumImplCPU$1,multiplyImpl:multiplyImplCPU$1,negImpl:negImplCPU$1,notEqualImpl:notEqualImplCPU$1,prodImpl:prodImplCPU$1,raggedGatherImpl:raggedGatherImplCPU$1,raggedRangeImpl:raggedRangeImplCPU$1,raggedTensorToTensorImpl:raggedTensorToTensorImplCPU$1,rangeImpl:rangeImplCPU$1,rsqrtImpl:rsqrtImplCPU$1,scatterImpl:scatterImplCPU$1,sigmoidImpl:sigmoidImplCPU$1,simpleAbsImpl:simpleAbsImplCPU$1,sliceImpl:sliceImplCPU$1,sparseFillEmptyRowsImpl:sparseFillEmptyRowsImplCPU$1,sparseReshapeImpl:sparseReshapeImplCPU$1,sparseSegmentReductionImpl:sparseSegmentReductionImplCPU$1,sqrtImpl:sqrtImplCPU$1,staticRegexReplaceImpl:staticRegexReplaceImplCPU$1,stridedSliceImpl:stridedSliceImplCPU$1,stringNGramsImpl:stringNGramsImplCPU$1,stringSplitImpl:stringSplitImplCPU$1,stringToHashBucketFastImpl:stringToHashBucketFastImplCPU$1,subImpl:subImplCPU$1,tileImpl:tileImplCPU$1,topKImpl:topKImplCPU$1,transposeImpl:transposeImplCPU$1,uniqueImpl:uniqueImplCPU$1}=shared$1;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getVecChannels$1(ha,aa){return["x","y","z","w","u","v"].slice(0,aa).map(xa=>`${ha}.${xa}`)}function getChannels$1(ha,aa){return aa===1?[ha]:getVecChannels$1(ha,aa)}function getSourceCoords$5(ha,aa){if(ha===1)return"rc";let xa="";for(let ba=0;ba<ha;ba++)xa+=aa[ba],ba<ha-1&&(xa+=",");return xa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let PackProgram$1=class{constructor(aa){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=aa,this.rank=aa.length,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{const xa=getChannels$1("rc",this.rank),ba=getCoordsDataType$1(this.rank),Sa=this.getOutOfBoundsCondition(xa),Ta=this.getSetup(xa),wa=this.getOutput(xa);this.userCode=`
        void main() {
          ${ba} rc = getOutputCoords();

          if(${Sa}) {
            setOutput(vec4(0));
          } else {
            ${Ta}

            setOutput(vec4(${wa}));
          }
        }
      `}}getSourceCoordsArr(aa){const xa=[];for(let ba=0;ba<=1;ba++)for(let Sa=0;Sa<=1;Sa++){let Ta=`${ba===0?"r":"rp1"}, ${Sa===0?"c":"cp1"}`;for(let wa=2;wa<this.rank;wa++)Ta=`${aa[aa.length-1-wa]},`+Ta;xa.push(Ta)}return xa}getOutOfBoundsCondition(aa){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let xa="";for(let ba=this.rank-2;ba<this.rank;ba++)xa+=`${aa[ba]} >= ${this.enableShapeUniforms?`outShape[${ba}]`:this.outputShape[ba]}`,ba<this.rank-1&&(xa+="||");return xa}getSetup(aa){if(this.rank===1)return"";const xa=aa.slice(-2),ba=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],Sa=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${xa[0]};
      int c = ${xa[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${ba};
      bool rEdge = rp1 >= ${Sa};
    `}getOutput(aa){const xa=this.getSourceCoordsArr(aa);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${xa[0]}),
            cEdge ? 0. : getA(${xa[1]}),
            rEdge ? 0. : getA(${xa[2]}),
            rEdge || cEdge ? 0. : getA(${xa[3]})`}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ReshapePackedProgram$1=class{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);let ba="";for(let Sa=0;Sa<4;Sa++){let Ta="thisRC = rc;";Sa%2===1&&(Ta+="thisRC.z += 1;"),Sa>1&&(Ta+="thisRC.y += 1;"),ba+=`
        ${Ta}
        ${Sa>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${Sa}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${Sa>0?"}":""}
      `}this.userCode=`
      ${getReshapedInputCoords$1(xa,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput$1():getFlatIndexFrom3D$1(aa)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":aa[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":aa[2]};

        ${ba}

        setOutput(result);
      }
    `}};function getReshapedInputCoords$1(ha,aa){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${aa?getLogicalCoordinatesFromFlatIndexByUniform$1(["r","c","d"],"inputShape"):getLogicalCoordinatesFromFlatIndex$1(["r","c","d"],ha)}
      return ivec3(r, c, d);
    }
  `}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TextureManager$1=class{constructor(aa){this.gpgpu=aa,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(aa,xa,ba){const Sa=getPhysicalFromLogicalTextureType$1(xa,ba),Ta=getKeyFromTextureShape$1(aa,Sa,ba);Ta in this.freeTextures||(this.freeTextures[Ta]=[]),Ta in this.usedTextures||(this.usedTextures[Ta]=[]);const wa=computeBytes$1(aa,Sa,this.gpgpu.gl,this.gpgpu.textureConfig,ba);if(this.freeTextures[Ta].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=wa,this.log();const ka=this.freeTextures[Ta].pop();return this.usedTextures[Ta].push(ka),ka}let Ea;return Sa===PhysicalTextureType$1.PACKED_2X2_FLOAT32?Ea=this.gpgpu.createPackedMatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType$1.PACKED_2X2_FLOAT16?Ea=this.gpgpu.createFloat16PackedMatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType$1.UNPACKED_FLOAT32?Ea=this.gpgpu.createFloat32MatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType$1.UNPACKED_FLOAT16?Ea=this.gpgpu.createFloat16MatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType$1.PACKED_4X1_UNSIGNED_BYTE&&(Ea=this.gpgpu.createUnsignedBytesMatrixTexture(aa[0],aa[1])),this.usedTextures[Ta].push(Ea),this.numUsedTextures++,this._numBytesAllocated+=wa,this.log(),Ea}releaseTexture(aa,xa,ba,Sa){if(this.freeTextures==null)return;const Ta=getPhysicalFromLogicalTextureType$1(ba,Sa),wa=getKeyFromTextureShape$1(xa,Ta,Sa);wa in this.freeTextures||(this.freeTextures[wa]=[]);const Ea=computeBytes$1(xa,Ta,this.gpgpu.gl,this.gpgpu.textureConfig,Sa),ka=env$1().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");ka!==-1&&this._numBytesAllocated>ka?(this.gpgpu.deleteMatrixTexture(aa.texture),this._numBytesAllocated-=Ea):(this.freeTextures[wa].push(aa),this.numFreeTextures++,this._numBytesFree+=Ea),this.numUsedTextures--;const Aa=this.usedTextures[wa],Fa=Aa&&Aa.indexOf(aa);if(Fa==null||Fa<0)throw new Error("Cannot release a texture that was never provided by this texture manager");Aa[Fa]=Aa[Aa.length-1],Aa.pop(),this.log()}log(){if(!this.logEnabled)return;const aa=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${aa})`);const xa=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*xa)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(const aa in this.freeTextures)this.freeTextures[aa].forEach(xa=>{this.gpgpu.deleteMatrixTexture(xa.texture)});for(const aa in this.usedTextures)this.usedTextures[aa].forEach(xa=>{this.gpgpu.deleteMatrixTexture(xa.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function numBytesForInternalFormat$1(ha,aa){const xa=ha;if(aa===xa.R32F)return 4;if(aa===xa.R16F)return 2;if(aa===xa.RGBA32F)return 16;if(aa===ha.RGBA)return 16;if(aa===xa.RGBA16F)return 8;if(aa===xa.RGBA8)return 4;throw new Error(`Unknown internal format ${aa}`)}function computeBytes$1(ha,aa,xa,ba,Sa){const Ta=internalFormatForPhysicalTexType$1(aa,ba);let wa;if(Sa){const[ka,Aa]=getPackedMatrixTextureShapeWidthHeight$1(ha[0],ha[1]);wa=ka*Aa}else{const[ka,Aa]=getUnpackedMatrixTextureShapeWidthHeight$1(ha[0],ha[1]);wa=ka*Aa}const Ea=numBytesForInternalFormat$1(xa,Ta);return wa*Ea}function internalFormatForPhysicalTexType$1(ha,aa){switch(ha){case PhysicalTextureType$1.PACKED_2X2_FLOAT32:return getInternalFormatForPackedMatrixTexture$1(aa);case PhysicalTextureType$1.PACKED_2X2_FLOAT16:return getInternalFormatForFloat16PackedMatrixTexture$1(aa);case PhysicalTextureType$1.UNPACKED_FLOAT32:return getInternalFormatForFloat32MatrixTexture$1(aa);case PhysicalTextureType$1.UNPACKED_FLOAT16:return getInternalFormatForFloat16MatrixTexture$1(aa);case PhysicalTextureType$1.PACKED_4X1_UNSIGNED_BYTE:return getInternalFormatForUnsignedBytesMatrixTexture$1(aa);default:throw new Error(`Unknown physical texture type ${ha}`)}}function getPhysicalTextureForRendering$1(ha){return env$1().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?ha?PhysicalTextureType$1.PACKED_2X2_FLOAT32:PhysicalTextureType$1.UNPACKED_FLOAT32:ha?PhysicalTextureType$1.PACKED_2X2_FLOAT16:PhysicalTextureType$1.UNPACKED_FLOAT16}function getPhysicalFromLogicalTextureType$1(ha,aa){if(ha===TextureUsage$1.UPLOAD)return PhysicalTextureType$1.PACKED_2X2_FLOAT32;if(ha===TextureUsage$1.RENDER||ha==null)return getPhysicalTextureForRendering$1(aa);if(ha===TextureUsage$1.DOWNLOAD||ha===TextureUsage$1.PIXELS)return PhysicalTextureType$1.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${ha}`)}function getKeyFromTextureShape$1(ha,aa,xa){return`${ha[0]}_${ha[1]}_${aa}_${xa}`}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let UnaryOpProgram$1=class{constructor(aa,xa){this.variableNames=["A"],this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${xa}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}};const CHECK_NAN_SNIPPET$3="if (isnan(x)) return x;",LINEAR$3="return x;",ABS$3="return abs(x);",ELU$5="return (x >= 0.0) ? x : (exp(x) - 1.0);",RELU$5=CHECK_NAN_SNIPPET$3+`
  return (x < 0.0) ? 0.0 : x;
`,RELU6$5=CHECK_NAN_SNIPPET$3+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,CLONE$1="return x;",SIGMOID$5="return 1.0 / (1.0 + exp(-1.0 * x));";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LINEAR$2="return x;",ELU$4=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,RELU$4=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,RELU6$4=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,SIGMOID$4="return 1.0 / (1.0 + exp(-1.0 * x));";let UnaryOpPackedProgram$1=class{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${xa}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let UnpackProgram$1=class{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const xa=aa.length,ba=getChannels$1("rc",xa),Sa=getCoordsDataType$1(xa),Ta=getSourceCoords$5(xa,ba),wa=ba.slice(-2),Ea=xa<=1?"rc":`vec2(${wa.join(",")})`;this.userCode=`
      void main() {
        ${Sa} rc = getOutputCoords();
        vec4 packedInput = getA(${Ta});

        setOutput(getChannel(packedInput, ${Ea}));
      }
    `}};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl$2=whereImpl$4,EPSILON_FLOAT32$2=1e-7,EPSILON_FLOAT16$2=1e-4,binaryCaches$1={};function getBinaryCache$1(ha){return ha in binaryCaches$1||(binaryCaches$1[ha]={}),binaryCaches$1[ha]}const CPU_HANDOFF_SIZE_THRESHOLD$1=env$1().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),BEFORE_PAGING_CONSTANT$1=600;function numMBBeforeWarning$1(){return env$1().global.screen==null?1024:env$1().global.screen.height*env$1().global.screen.width*window.devicePixelRatio*BEFORE_PAGING_CONSTANT$1/1024/1024}let MathBackendWebGL$1=class hc extends KernelBackend$1{nextDataId(){return hc.nextDataId++}constructor(aa){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!env$1().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let xa;if(aa!=null){if(aa instanceof GPGPUContext$1)xa=aa;else{const ba=getWebGLContext$1(env$1().getNumber("WEBGL_VERSION"),aa);xa=new GPGPUContext$1(ba)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const ba=getWebGLContext$1(env$1().getNumber("WEBGL_VERSION"));xa=new GPGPUContext$1(ba),this.binaryCache=getBinaryCache$1(env$1().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=xa,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new TextureManager$1(this.gpgpu),this.numMBBeforeWarning=numMBBeforeWarning$1(),this.texData=new DataStorage$1(this,engine$1())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(aa,xa,ba,Sa,Ta,wa){const Ea=this.makeTensorInfo(xa,ba),ka=this.texData.get(Ea.dataId);ka.isPacked=!1,ka.texture={texture:aa,texShape:[Sa,Ta]},ka.texShape=[Sa,Ta];const Aa=getShapeAs3D$1(xa),Fa=new EncodeMatrixProgram$1(Aa,!1,wa),La=this.runWebGLProgram(Fa,[Ea],ba,[[Sa,Ta]]);return La.shape=xa,ka.texture=null,this.disposeIntermediateTensorInfo(Ea),La.dataId}write(aa,xa,ba){if((env$1().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||env$1().getBool("DEBUG"))&&this.checkNumericalProblems(aa),ba==="complex64"&&aa!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const Sa={id:this.nextDataId()};return this.texData.set(Sa,{shape:xa,dtype:ba,values:aa,usage:TextureUsage$1.UPLOAD,refCount:1}),Sa}refCount(aa){return this.texData.has(aa)?this.texData.get(aa).refCount:0}incRef(aa){const xa=this.texData.get(aa);xa.refCount++}decRef(aa){if(this.texData.has(aa)){const xa=this.texData.get(aa);xa.refCount--}}move(aa,xa,ba,Sa,Ta){if(env$1().getBool("DEBUG")&&this.checkNumericalProblems(xa),Sa==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(aa,{shape:ba,dtype:Sa,values:xa,usage:TextureUsage$1.UPLOAD,refCount:Ta})}disposeIntermediateTensorInfo(aa){this.disposeData(aa.dataId)}readSync(aa){const xa=this.texData.get(aa),{values:ba,dtype:Sa,complexTensorInfos:Ta,slice:wa,shape:Ea,isPacked:ka}=xa;if(wa!=null){let el;ka?el=new UnaryOpPackedProgram$1(Ea,CLONE$1):el=new UnaryOpProgram$1(Ea,CLONE$1);const tl=this.runWebGLProgram(el,[{dataId:aa,shape:Ea,dtype:Sa}],Sa),nl=this.readSync(tl.dataId);return this.disposeIntermediateTensorInfo(tl),nl}if(ba!=null)return this.convertAndCacheOnCPU(aa);if(Sa==="string")return ba;const Aa=this.activeTimers!=null;let Fa;Aa&&(Fa=now$1());let La;if(Sa==="complex64"){const el=this.readSync(Ta.real.dataId),tl=this.readSync(Ta.imag.dataId);La=mergeRealAndImagArrays$1(el,tl)}else La=this.getValuesFromTexture(aa);return Aa&&(this.downloadWaitMs+=now$1()-Fa),this.convertAndCacheOnCPU(aa,La)}async read(aa){if(this.pendingRead.has(aa)){const nl=this.pendingRead.get(aa);return new Promise(rl=>nl.push(rl))}const xa=this.texData.get(aa),{values:ba,shape:Sa,slice:Ta,dtype:wa,complexTensorInfos:Ea,isPacked:ka}=xa;if(Ta!=null){let nl;ka?nl=new UnaryOpPackedProgram$1(Sa,CLONE$1):nl=new UnaryOpProgram$1(Sa,CLONE$1);const rl=this.runWebGLProgram(nl,[{dataId:aa,shape:Sa,dtype:wa}],wa),sl=this.read(rl.dataId);return this.disposeIntermediateTensorInfo(rl),sl}if(ba!=null)return this.convertAndCacheOnCPU(aa);if(env$1().getBool("DEBUG")&&!env$1().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&env$1().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let Aa=null,Fa;if(wa!=="complex64"&&env$1().get("WEBGL_BUFFER_SUPPORTED")){Fa=this.decode(aa);const nl=this.texData.get(Fa.dataId);Aa=this.gpgpu.createBufferFromTexture(nl.texture.texture,...getDenseTexShape$1(Sa))}this.pendingRead.set(aa,[]),wa!=="complex64"&&await this.gpgpu.createAndWaitForFence();let La;if(wa==="complex64"){const nl=await Promise.all([this.read(Ea.real.dataId),this.read(Ea.imag.dataId)]),rl=nl[0],sl=nl[1];La=mergeRealAndImagArrays$1(rl,sl)}else if(Aa==null)La=this.getValuesFromTexture(aa);else{const nl=sizeFromShape$1(Sa);La=this.gpgpu.downloadFloat32MatrixFromBuffer(Aa,nl)}if(Fa!=null&&this.disposeIntermediateTensorInfo(Fa),Aa!=null){const nl=this.gpgpu.gl;callAndCheck$1(nl,()=>nl.deleteBuffer(Aa))}const el=this.convertAndCacheOnCPU(aa,La),tl=this.pendingRead.get(aa);return this.pendingRead.delete(aa),tl.forEach(nl=>nl(el)),this.pendingDisposal.has(aa)&&(this.pendingDisposal.delete(aa),this.disposeData(aa)&&engine$1().removeDataId(aa,this),this.pendingDeletes--),el}readToGPU(aa,xa={}){const ba=this.texData.get(aa),{values:Sa,shape:Ta,slice:wa,dtype:Ea,isPacked:ka,texture:Aa}=ba;if(Ea==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(wa!=null){let tl;ka?tl=new UnaryOpPackedProgram$1(Ta,CLONE$1):tl=new UnaryOpProgram$1(Ta,CLONE$1);const nl=this.runWebGLProgram(tl,[{dataId:aa,shape:Ta,dtype:Ea}],Ea),rl=this.readToGPU(nl,xa);return this.disposeIntermediateTensorInfo(nl),rl}if(Aa==null)throw Sa!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const Fa=this.decode(aa,xa.customTexShape),La=engine$1().makeTensorFromTensorInfo(Fa),el=this.texData.get(Fa.dataId);return Object.assign({tensorRef:La},el.texture)}bufferSync(aa){const xa=this.readSync(aa.dataId);if(aa.dtype==="string")try{const ba=xa.map(Sa=>decodeString$1(Sa));return buffer$1(aa.shape,aa.dtype,ba)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer$1(aa.shape,aa.dtype,xa)}checkNumericalProblems(aa){if(aa!=null)for(let xa=0;xa<aa.length;xa++){const ba=aa[xa];if(!canBeRepresented$1(ba))throw env$1().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${ba} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${ba} cannot be represented on this device.`)}}getValuesFromTexture(aa){const{shape:xa,dtype:ba,isPacked:Sa}=this.texData.get(aa),Ta=sizeFromShape$1(xa);if(env$1().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const el=this.decode(aa),tl=this.texData.get(el.dataId),nl=this.gpgpu.downloadMatrixFromPackedTexture(tl.texture.texture,...getDenseTexShape$1(xa)).subarray(0,Ta);return this.disposeIntermediateTensorInfo(el),nl}const wa=env$1().getBool("WEBGL_PACK")&&Sa===!0,Ea=wa?getShapeAs3D$1(xa):xa,ka=wa?new EncodeFloatPackedProgram$1(Ea):new EncodeFloatProgram$1(Ea),Aa=this.runWebGLProgram(ka,[{shape:Ea,dtype:ba,dataId:aa}],"float32"),Fa=this.texData.get(Aa.dataId),La=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(Fa.texture.texture,Fa.texShape[0],Fa.texShape[1]).subarray(0,Ta);return this.disposeIntermediateTensorInfo(Aa),La}timerAvailable(){return env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(aa){const xa=this.activeTimers,ba=[];let Sa=!1;this.programTimersStack==null?(this.programTimersStack=ba,Sa=!0):this.activeTimers.push(ba),this.activeTimers=ba,aa();const Ta=flatten$2(this.activeTimers.map(ka=>ka.query)).filter(ka=>ka!=null),wa=flatten$2(this.activeTimers.map(ka=>ka.name)).filter(ka=>ka!=null);this.activeTimers=xa,Sa&&(this.programTimersStack=null);const Ea={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const ka=await Promise.all(Ta);Ea.kernelMs=sum$6(ka),Ea.getExtraProfileInfo=()=>ka.map((Aa,Fa)=>({name:wa[Fa],ms:Aa})).map(Aa=>`${Aa.name}: ${Aa.ms}`).join(", ")}else Ea.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,Ea})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:now$1(),endMs:null}}endTimer(aa){return env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),aa):(aa.endMs=now$1(),aa)}async getQueryTime(aa){if(env$1().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(aa);const xa=aa;return xa.endMs-xa.startMs}disposeData(aa,xa=!1){if(this.pendingDisposal.has(aa))return!1;if(!this.texData.has(aa))return!0;if(xa?this.texData.get(aa).refCount=0:this.texData.get(aa).refCount--,!xa&&this.texData.get(aa).refCount>0)return!1;if(this.pendingRead.has(aa))return this.pendingDisposal.add(aa),this.pendingDeletes++,!1;this.releaseGPUData(aa);const{complexTensorInfos:ba}=this.texData.get(aa);return ba!=null&&(this.disposeData(ba.real.dataId,xa),this.disposeData(ba.imag.dataId,xa)),this.texData.delete(aa),!0}releaseGPUData(aa){const{texture:xa,dtype:ba,texShape:Sa,usage:Ta,isPacked:wa,slice:Ea}=this.texData.get(aa),ka=Ea&&Ea.origDataId||aa,Aa=this.dataRefCount.get(ka);Aa>1?this.dataRefCount.set(ka,Aa-1):(this.dataRefCount.delete(ka),xa!=null&&(this.numBytesInGPU-=this.computeBytes(Sa,ba),this.textureManager.releaseTexture(xa,Sa,Ta,wa)));const Fa=this.texData.get(aa);Fa.texture=null,Fa.texShape=null,Fa.isPacked=!1,Fa.slice=null}getTexture(aa){return this.uploadToGPU(aa),this.texData.get(aa).texture.texture}getDataInfo(aa){return this.texData.get(aa)}shouldExecuteOnCPU(aa,xa=CPU_HANDOFF_SIZE_THRESHOLD$1){return env$1().getBool("WEBGL_CPU_FORWARD")&&aa.every(ba=>this.texData.get(ba.dataId).texture==null&&sizeFromShape$1(ba.shape)<xa)}getGPGPUContext(){return this.gpgpu}where(aa){warn$1("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const xa=aa.dataSync();return whereImpl$2(aa.shape,xa)}packedUnaryOp(aa,xa,ba){const Sa=new UnaryOpPackedProgram$1(aa.shape,xa),Ta=this.compileAndRun(Sa,[aa],ba);return engine$1().makeTensorFromTensorInfo(Ta)}abs(aa){if(this.shouldExecuteOnCPU([aa])&&aa.dtype!=="complex64"){const Sa=simpleAbsImplCPU$1(this.texData.get(aa.dataId).values);return this.makeOutput(aa.shape,aa.dtype,Sa)}if(env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(aa,ABS$3,aa.dtype);const xa=new UnaryOpProgram$1(aa.shape,ABS$3),ba=this.compileAndRun(xa,[aa]);return engine$1().makeTensorFromTensorInfo(ba)}makeTensorInfo(aa,xa,ba){let Sa;if(xa==="string"&&ba!=null&&ba.length>0&&isString$1(ba[0])){const Ta=ba.map(wa=>encodeString$1(wa));Sa=this.write(Ta,aa,xa)}else Sa=this.write(ba,aa,xa);return this.texData.get(Sa).usage=null,{dataId:Sa,shape:aa,dtype:xa}}makeOutput(aa,xa,ba){return engine$1().makeTensorFromTensorInfo(this.makeTensorInfo(aa,xa,ba),this)}unpackTensor(aa){const xa=new UnpackProgram$1(aa.shape);return this.runWebGLProgram(xa,[aa],aa.dtype)}packTensor(aa){const xa=new PackProgram$1(aa.shape);return this.runWebGLProgram(xa,[aa],aa.dtype,null,!0)}packedReshape(aa,xa){const ba=[getBatchDim$1(aa.shape),...getRowsCols$1(aa.shape)],Sa={dtype:aa.dtype,shape:ba,dataId:aa.dataId},Ta=[getBatchDim$1(xa),...getRowsCols$1(xa)],wa=new ReshapePackedProgram$1(Ta,ba),Ea=!0,ka=[ba],Aa=this.runWebGLProgram(wa,[Sa],aa.dtype,ka,Ea);return{dataId:Aa.dataId,shape:xa,dtype:Aa.dtype}}decode(aa,xa){const ba=this.texData.get(aa),{isPacked:Sa,shape:Ta,dtype:wa}=ba;if(xa!=null){const el=sizeFromShape$1(Ta),tl=xa[0]*xa[1]*4;assert$2(el<=tl,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const Ea=getShapeAs3D$1(Ta);let ka;Sa?ka=new DecodeMatrixPackedProgram$1(Ea):ka=new DecodeMatrixProgram$1(Ea);const Aa=!0,Fa=[xa??getDenseTexShape$1(Ea)],La=this.runWebGLProgram(ka,[{shape:Ea,dtype:wa,dataId:aa}],wa,Fa,Aa,xa);return{dtype:wa,shape:Ta,dataId:La.dataId}}runWebGLProgram(aa,xa,ba,Sa,Ta=!1,wa){const Ea=this.makeTensorInfo(aa.outputShape,ba),ka=this.texData.get(Ea.dataId);if(aa.packedOutput&&(ka.isPacked=!0),aa.outPackingScheme===PackingScheme$1.DENSE){const ol=wa??getDenseTexShape$1(aa.outputShape);ka.texShape=ol.map(al=>al*2)}if(aa.outTexUsage!=null&&(ka.usage=aa.outTexUsage),sizeFromShape$1(Ea.shape)===0)return ka.values=getTypedArrayFromDType$1(Ea.dtype,0),Ea;const Aa=[],Fa=xa.map(ol=>{if(ol.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let al=this.texData.get(ol.dataId);if(al.texture==null){if(!aa.packedInputs&&sizeFromShape$1(ol.shape)<=env$1().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:ol.shape,texData:null,isUniform:!0,uniformValues:al.values};aa.packedInputs&&(al.isPacked=!0,al.shape=ol.shape)}if(this.uploadToGPU(ol.dataId),!!al.isPacked!=!!aa.packedInputs)ol=al.isPacked?this.unpackTensor(ol):this.packTensor(ol),Aa.push(ol),al=this.texData.get(ol.dataId);else if(al.isPacked&&!isReshapeFree$1(al.shape,ol.shape)){const ll=ol,il=ol.shape;ol.shape=al.shape,ol=this.packedReshape(ol,il),Aa.push(ol),al=this.texData.get(ol.dataId),ll.shape=il}return{shape:ol.shape,texData:al,isUniform:!1}});this.uploadToGPU(Ea.dataId);const La={shape:Ea.shape,texData:ka,isUniform:!1},el=makeShaderKey$1(aa,Fa,La),tl=this.getAndSaveBinary(el,()=>compileProgram$1(this.gpgpu,aa,Fa,La)),nl=this.activeTimers!=null;let rl;nl&&(rl=this.startTimer()),env$1().get("ENGINE_COMPILE_ONLY")||runProgram$1(this.gpgpu,tl,Fa,La,Sa),Aa.forEach(ol=>this.disposeIntermediateTensorInfo(ol)),nl&&(rl=this.endTimer(rl),this.activeTimers.push({name:aa.constructor.name,query:this.getQueryTime(rl)}));const sl=env$1().getNumber("WEBGL_FLUSH_THRESHOLD");if(sl>0){const ol=now$1();ol-this.lastGlFlushTime>sl&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=ol)}if(!env$1().getBool("WEBGL_LAZILY_UNPACK")&&ka.isPacked&&Ta===!1){const ol=this.unpackTensor(Ea);return this.disposeIntermediateTensorInfo(Ea),ol}return Ea}compileAndRun(aa,xa,ba,Sa,Ta=!1){return ba=ba||xa[0].dtype,this.runWebGLProgram(aa,xa,ba,Sa,Ta)}getAndSaveBinary(aa,xa){return aa in this.binaryCache||(this.binaryCache[aa]=xa()),this.binaryCache[aa]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(env$1().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(xa=>{this.gpgpu.deleteProgram(this.binaryCache[xa].webGLProgram),delete this.binaryCache[xa]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=tidy$1(()=>{if(!env$1().get("WEBGL_RENDER_FLOAT32_ENABLED")){const aa=env$1().getBool("DEBUG");env$1().set("DEBUG",!1);const xa=this.abs(scalar$1(1e-8)).dataSync()[0];if(env$1().set("DEBUG",aa),xa>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32$2:EPSILON_FLOAT16$2}uploadToGPU(aa){const xa=this.texData.get(aa),{shape:ba,dtype:Sa,values:Ta,texture:wa,usage:Ea,isPacked:ka}=xa;if(wa!=null)return;const Aa=this.activeTimers!=null;let Fa;Aa&&(Fa=now$1());let La=xa.texShape;if(La==null&&(La=getTextureShapeFromLogicalShape$1(ba,ka),xa.texShape=La),Ta!=null){const el=getShapeAs3D$1(ba);let tl,nl=La[1],rl=La[0];const sl=Ta instanceof Uint8Array||Ta instanceof Uint8ClampedArray;(ka||!sl)&&([nl,rl]=getPackedMatrixTextureShapeWidthHeight$1(La[0],La[1])),ka?tl=new EncodeMatrixPackedProgram$1(el,sl):tl=new EncodeMatrixProgram$1(el,sl);const ol=sl?[rl,nl]:La,al=this.makeTensorInfo(ol,Sa),ll=this.texData.get(al.dataId);sl?ll.usage=TextureUsage$1.PIXELS:ll.usage=TextureUsage$1.UPLOAD,ll.texShape=ol,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(al.dataId),nl,rl,Ta);const il=[[rl,nl]],ul=this.runWebGLProgram(tl,[al],Sa,il,!0),dl=this.texData.get(ul.dataId);xa.texShape=dl.texShape,xa.isPacked=dl.isPacked,xa.usage=dl.usage,env$1().get("ENGINE_COMPILE_ONLY")?this.disposeData(ul.dataId):(xa.texture=dl.texture,xa.values=null,this.texData.delete(ul.dataId)),this.disposeIntermediateTensorInfo(al),Aa&&(this.uploadWaitMs+=now$1()-Fa)}else{const el=this.acquireTexture(La,Ea,Sa,ka);xa.texture=el}}convertAndCacheOnCPU(aa,xa){const ba=this.texData.get(aa),{dtype:Sa}=ba;return xa!=null&&(ba.values=float32ToTypedArray$1(xa,Sa)),ba.values}acquireTexture(aa,xa,ba,Sa){if(this.numBytesInGPU+=this.computeBytes(aa,ba),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){const Ta=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${Ta} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(aa,xa,Sa)}computeBytes(aa,xa){return aa[0]*aa[1]*bytesPerElement$1(xa)}checkCompileCompletion(){for(const[,aa]of Object.entries(this.binaryCache))this.checkCompletion_(aa)}async checkCompileCompletionAsync(){const aa=[];if(this.gpgpu.parallelCompilationExtension){for(const[,xa]of Object.entries(this.binaryCache))aa.push(this.checkCompletionAsync_(xa));return Promise.all(aa)}else{for(const[,xa]of Object.entries(this.binaryCache)){const ba=new Promise(Sa=>{try{this.checkCompletion_(xa),Sa(!0)}catch(Ta){throw Ta}});aa.push(ba)}return Promise.all(aa)}}async checkCompletionAsync_(aa){return this.gpgpu.gl.getProgramParameter(aa.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(aa):(await nextFrame$1(),this.checkCompletionAsync_(aa))}checkCompletion_(aa){if(this.gpgpu.gl.getProgramParameter(aa.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(aa.webGLProgram)),this.gpgpu.gl.getShaderParameter(aa.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(logShaderSourceAndInfoLog$1(aa.source,this.gpgpu.gl.getShaderInfoLog(aa.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const aa of Object.values(this.binaryCache)){this.gpgpu.buildVao(aa.webGLProgram);const{variablesLocations:xa,customUniformLocations:ba,infLoc:Sa,nanLoc:Ta,outShapeLocation:wa,outShapeStridesLocation:Ea,outTexShapeLocation:ka}=getUniformLocations$1(this.gpgpu,aa.program,aa.webGLProgram);aa.variablesLocations=xa,aa.customUniformLocations=ba,aa.infLoc=Sa,aa.nanLoc=Ta,aa.outShapeLocation=wa,aa.outShapeStridesLocation=Ea,aa.outTexShapeLocation=ka}}createTensorFromGPUData(aa,xa,ba){aa.channels=aa.channels||"RGBA";const{texture:Sa,height:Ta,width:wa,channels:Ea}=aa,ka=engine$1().backend;if(!ka.gpgpu.gl.isTexture(Sa))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const Aa=ka.writeTexture(Sa,xa,ba,Ta,wa,Ea);return engine$1().makeTensorFromDataId(Aa,xa,ba,ka)}};MathBackendWebGL$1.nextDataId=0;function float32ToTypedArray$1(ha,aa){if(aa==="float32"||aa==="complex64")return ha;if(aa==="int32"||aa==="bool"){const xa=aa==="int32"?new Int32Array(ha.length):new Uint8Array(ha.length);for(let ba=0;ba<xa.length;++ba)xa[ba]=Math.round(ha[ba]);return xa}else throw new Error(`Unknown dtype ${aa}`)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */isBrowser$1()&&registerBackend$1("webgl",()=>new MathBackendWebGL$1,2);/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET$2=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;let BinaryOpProgram$1=class{constructor(aa,xa,ba){this.variableNames=["A","B"],this.outputShape=assertAndGetBroadcastShape$1(xa,ba),this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${aa}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_PACKED$1=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;let BinaryOpPackedProgram$1=class{constructor(aa,xa,ba,Sa=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=assertAndGetBroadcastShape$1(xa,ba);const Ta=this.outputShape.length;this.enableShapeUniforms=useShapeUniforms$1(Ta);let wa="";if(Sa)if(Ta===0||sizeFromShape$1(this.outputShape)===1)wa=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(wa=`
          ${getCoordsDataType$1(Ta)} coords = getOutputCoords();
        `,Ta===1)this.enableShapeUniforms?wa+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:wa+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{const ka=getChannels$1("coords",Ta);this.enableShapeUniforms?wa+=`
            bool nextRowOutOfBounds =
              (${ka[Ta-2]} + 1) >= outShape[${Ta} - 2];
            bool nextColOutOfBounds =
              (${ka[Ta-1]} + 1) >= outShape[${Ta} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:wa+=`
            bool nextRowOutOfBounds =
              (${ka[Ta-2]} + 1) >= ${this.outputShape[Ta-2]};
            bool nextColOutOfBounds =
              (${ka[Ta-1]} + 1) >= ${this.outputShape[Ta-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${aa}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${wa}

        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity$1(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;return xa.incRef(ba.dataId),{dataId:ba.dataId,shape:ba.shape,dtype:ba.dtype}}const identityConfig$1={kernelName:Identity$2,backendName:"webgl",kernelFunc:identity$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex$2(ha){const{inputs:aa,backend:xa}=ha,{real:ba,imag:Sa}=aa,Ta=xa.makeTensorInfo(ba.shape,"complex64"),wa=xa.texData.get(Ta.dataId),Ea=identity$1({inputs:{x:ba},backend:xa}),ka=identity$1({inputs:{x:Sa},backend:xa});return wa.complexTensorInfos={real:Ea,imag:ka},Ta}const complexConfig$1={kernelName:Complex$1,backendName:"webgl",kernelFunc:complex$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LEAKYRELU$1="return (a < 0.) ? b * a : a;",LEAKYRELU_PACKED$1=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function leakyRelu$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{alpha:Ta}=ba,wa=xa.makeTensorInfo([],"float32",createScalarValue$1(Ta,"float32")),Ea=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram$1(LEAKYRELU_PACKED$1,Sa.shape,wa.shape):new BinaryOpProgram$1(LEAKYRELU$1,Sa.shape,wa.shape),ka=xa.runWebGLProgram(Ea,[Sa,wa],"float32");return xa.disposeIntermediateTensorInfo(wa),ka}const leakyReluConfig$1={kernelName:LeakyRelu$1,backendName:"webgl",kernelFunc:leakyRelu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PRELU$1="return (a < 0.) ? b * a : a;",PRELU_PACKED$1=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function prelu$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba,alpha:Sa}=aa,Ta=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram$1(PRELU_PACKED$1,ba.shape,Sa.shape):new BinaryOpProgram$1(PRELU$1,ba.shape,Sa.shape);return xa.runWebGLProgram(Ta,[ba,Sa],"float32")}const preluConfig$1={kernelName:Prelu$1,backendName:"webgl",kernelFunc:prelu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_UNARY$1="if (isnan(x)) return x;";function unaryKernelFunc$1({opSnippet:ha,packedOpSnippet:aa,cpuKernelImpl:xa,dtype:ba}){return({inputs:Sa,backend:Ta})=>{const{x:wa}=Sa,Ea=Ta,ka=ba||wa.dtype;if(Ea.shouldExecuteOnCPU([wa])&&xa!=null){const La=Ea.texData.get(wa.dataId),el=xa(La.values,ka);return Ea.makeTensorInfo(wa.shape,ka,el)}const Aa=env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&aa!=null;let Fa;return Aa?Fa=new UnaryOpPackedProgram$1(wa.shape,aa):Fa=new UnaryOpProgram$1(wa.shape,ha),Ea.runWebGLProgram(Fa,[wa],ka)}}function binaryKernelFunc$1({opSnippet:ha,packedOpSnippet:aa,checkOutOfBounds:xa=!1,supportsComplex:ba=!1,cpuKernelImpl:Sa,dtype:Ta}){return({inputs:wa,backend:Ea})=>{const{a:ka,b:Aa}=wa,Fa=Ea;if(ba&&ka.dtype==="complex64"){const nl=Fa.texData.get(ka.dataId),rl=Fa.texData.get(Aa.dataId),[sl,ol]=[[nl.complexTensorInfos.real,rl.complexTensorInfos.real],[nl.complexTensorInfos.imag,rl.complexTensorInfos.imag]].map(ll=>{const[il,cl]=ll,ul={dataId:il.dataId,dtype:il.dtype,shape:ka.shape},dl={dataId:cl.dataId,dtype:cl.dtype,shape:Aa.shape},hl=new BinaryOpProgram$1(ha,ka.shape,Aa.shape);return Fa.runWebGLProgram(hl,[ul,dl],upcastType$1(il.dtype,cl.dtype))}),al=complex$2({inputs:{real:sl,imag:ol},backend:Fa});return Fa.disposeIntermediateTensorInfo(sl),Fa.disposeIntermediateTensorInfo(ol),al}const La=Ta||upcastType$1(ka.dtype,Aa.dtype);if((ka.dtype==="string"||Aa.dtype==="string"||Fa.shouldExecuteOnCPU([ka,Aa]))&&Sa!=null){const nl=Fa.texData.get(ka.dataId).values,rl=Fa.texData.get(Aa.dataId).values,sl=ka.dtype==="string"?fromUint8ToStringArray$1(nl):nl,ol=ka.dtype==="string"?fromUint8ToStringArray$1(rl):rl,[al,ll]=Sa(ka.shape,Aa.shape,sl,ol,La),il=Fa.makeTensorInfo(ll,La),cl=Fa.texData.get(il.dataId);return cl.values=al,il}const el=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&aa!=null;let tl;return el?tl=new BinaryOpPackedProgram$1(aa,ka.shape,Aa.shape,xa):tl=new BinaryOpProgram$1(ha,ka.shape,Aa.shape),Fa.runWebGLProgram(tl,[ka,Aa],La)}}function mapActivationToShaderProgram$1(ha,aa=!1){if(ha==="linear")return aa?LINEAR$2:LINEAR$3;if(ha==="relu")return aa?RELU$4:RELU$5;if(ha==="elu")return aa?ELU$4:ELU$5;if(ha==="relu6")return aa?RELU6$4:RELU6$5;if(ha==="prelu")return aa?PRELU_PACKED$1:PRELU$1;if(ha==="leakyrelu")return aa?LEAKYRELU_PACKED$1:LEAKYRELU$1;if(ha==="sigmoid")return aa?SIGMOID$4:SIGMOID$5;throw new Error(`Activation ${ha} has not been implemented for the WebGL backend.`)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MatMulPackedProgram$1=class{constructor(aa,xa,ba,Sa=!1,Ta=!1,wa=!1,Ea=null,ka=!1,Aa=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=ba,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const Fa=Sa?aa[1]:aa[2],La=Math.ceil(Fa/2),el=Sa?"i * 2, rc.y":"rc.y, i * 2",tl=Ta?"rc.z, i * 2":"i * 2, rc.z",nl=Sa?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],rl=Ta?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let sl="",ol="";Ea&&(ka?sl=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${Ea}
        }`:Aa?sl=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${Ea}
        }`:sl=`vec4 activation(vec4 x) {
          ${Ea}
        }`,ol="result = activation(result);");const al=wa?"result += getBiasAtOutCoords();":"";wa&&this.variableNames.push("bias"),ka&&this.variableNames.push("preluActivationWeights"),Aa&&this.variableNames.push("leakyreluAlpha");let ll="rc.x",il="rc.x";aa[0]<xa[0]?ll=`imod(rc.x, ${aa[0]})`:xa[0]<aa[0]&&(il=`imod(rc.x, ${xa[0]})`),this.userCode=`
      ${sl}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${La}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${ll};
        int batchB = ${il};
        for (int i = 0; i < ${La}; i++) {
          vec4 a = getMatrixA(batchA, ${el});
          vec4 b = getMatrixB(batchB, ${tl});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${nl[0]} * ${rl[0]});
          result += (${nl[1]} * ${rl[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${al}

        ${ol}

        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COMPLEX_MULTIPLY$1={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};let BinaryOpComplexProgram$1=class{constructor(aa,xa,ba){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=assertAndGetBroadcastShape$1(xa,ba),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${aa}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MUL$1="return a * b;";function multiply$1(ha){const{inputs:aa,backend:xa}=ha,{a:ba,b:Sa}=aa,Ta=upcastType$1(ba.dtype,Sa.dtype);if(ba.dtype==="complex64"){const Ea=xa.texData.get(ba.dataId),ka=xa.texData.get(Sa.dataId),Aa=new BinaryOpComplexProgram$1(COMPLEX_MULTIPLY$1.REAL,ba.shape,Sa.shape),Fa=new BinaryOpComplexProgram$1(COMPLEX_MULTIPLY$1.IMAG,ba.shape,Sa.shape),La=[{dataId:Ea.complexTensorInfos.real.dataId,dtype:Ea.complexTensorInfos.real.dtype,shape:ba.shape},{dataId:Ea.complexTensorInfos.imag.dataId,dtype:Ea.complexTensorInfos.imag.dtype,shape:ba.shape},{dataId:ka.complexTensorInfos.real.dataId,dtype:ka.complexTensorInfos.real.dtype,shape:Sa.shape},{dataId:ka.complexTensorInfos.imag.dataId,dtype:ka.complexTensorInfos.imag.dtype,shape:Sa.shape}],el=xa.runWebGLProgram(Aa,La,"float32"),tl=xa.runWebGLProgram(Fa,La,"float32"),nl=complex$2({inputs:{real:el,imag:tl},backend:xa});return xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),nl}if(xa.shouldExecuteOnCPU([ba,Sa])){const Ea=xa.texData.get(ba.dataId),ka=xa.texData.get(Sa.dataId),[Aa,Fa]=multiplyImplCPU$1(ba.shape,Sa.shape,Ea.values,ka.values,Ta),La=xa.makeTensorInfo(Fa,Ta),el=xa.texData.get(La.dataId);return el.values=Aa,La}let wa;return env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?wa=new BinaryOpPackedProgram$1(MUL$1,ba.shape,Sa.shape):wa=new BinaryOpProgram$1(MUL$1,ba.shape,Sa.shape),xa.runWebGLProgram(wa,[ba,Sa],Ta)}const multiplyConfig$1={kernelName:Multiply$2,backendName:"webgl",kernelFunc:multiply$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function packedReshape$1(ha,aa,xa){const ba=[getBatchDim$1(ha.shape),...getRowsCols$1(ha.shape)],Sa={dtype:ha.dtype,shape:ba,dataId:ha.dataId},Ta=[getBatchDim$1(aa),...getRowsCols$1(aa)],wa=new ReshapePackedProgram$1(Ta,ba),Ea=!0,ka=[ba],Aa=xa.runWebGLProgram(wa,[Sa],ha.dtype,ka,Ea);return{dataId:Aa.dataId,shape:aa,dtype:Aa.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{shape:Ta}=ba,wa=xa,Ea=sizeFromShape$1(Sa.shape),ka=inferFromImplicitShape$1(Ta,Ea),Aa=sizeFromShape$1(ka);assert$2(Ea===Aa,()=>`The new shape (${ka}) has ${Aa} elements and the old shape (${Sa.shape}) has ${Ea} elements. The new shape and old shape must have the same number of elements.`);const Fa=wa.texData.get(Sa.dataId);return Fa.isPacked&&!isReshapeFree$1(Sa.shape,ka)&&!(Fa.texture!==null&&isReshapeFree$1(Fa.shape,ka))?packedReshape$1(Sa,ka,wa):(wa.incRef(Sa.dataId),{dataId:Sa.dataId,shape:ka,dtype:Sa.dtype})}const reshapeConfig$1={kernelName:Reshape$2,backendName:"webgl",kernelFunc:reshape$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MeanProgram$1=class{constructor(aa,xa){this.variableNames=["x"];const{windowSize:ba,batchSize:Sa,inSize:Ta,outSize:wa}=aa;this.outputShape=[Sa,wa];const Ea=Math.floor(ba/4)*4,ka=ba%4;let Aa="sumValue += dot(values, ones);";if(xa!=null){const La=1/xa;Aa=`sumValue += dot(values * ${isInt$1(La)?La.toPrecision(2):La}, ones);`}let Fa="";Ta%ba>0&&(Fa=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${Fa}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${ba};

        float sumValue = 0.0;

        for (int i = 0; i < ${Ea}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${Aa}
        }

        int inIdx = inOffset + ${Ea};
        if (${ka===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${Aa}
        } else if (${ka===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${Aa}
        } else if (${ka===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${Aa}
        }
        setOutput(sumValue);
      }
    `}};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ReduceProgram$1=class{constructor(aa,xa){this.variableNames=["x"];const{windowSize:ba,batchSize:Sa,inSize:Ta,outSize:wa}=aa;this.outputShape=[Sa,wa];let Ea="0.0",ka="";xa==="prod"?Ea="1.0":xa==="min"?(Ea="1.0 / 1e-20",ka="min"):xa==="max"&&(Ea="-1.0 / 1e-20",ka="max");let Aa=`${xa}(${xa}(${xa}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;xa==="sum"?Aa="sumValue":xa==="prod"?Aa="prodValue":xa==="all"?Aa="allValue":xa==="any"&&(Aa="anyValue");const Fa=Math.floor(ba/4)*4,La=ba%4;let el=`
      if (${xa==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${xa==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${ka}(values, minMaxValue);
        if (${xa==="min"} || ${xa==="max"}) {
          minMaxValue = ${ka}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,tl="vec4";xa==="all"?(Ea="1.0",el=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,tl="bvec4"):xa==="any"&&(Ea="0.0",el=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,tl="bvec4");let nl="";Ta%ba>0&&(nl=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${Ea};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${nl}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${ba};

        vec4 minMaxValue = vec4(${Ea});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${Fa}; i += 4) {
          int inIdx = inOffset + i;
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${el}
        }

        int inIdx = inOffset + ${Fa};
        if (${La===1}) {
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${el}
        } else if (${La===2}) {
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${el}
        } else if (${La===3}) {
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${el}
        }
        setOutput(${Aa});
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReductionStages$1(ha){const aa=[];for(;aa.length===0||aa[aa.length-1].outSize!==1;){const xa=aa.length?aa[aa.length-1].outSize:ha[1],ba=computeOptimalWindowSize$1(xa);aa.push({inSize:xa,windowSize:ba,outSize:Math.ceil(xa/ba)})}return aa}function reduce$1(ha,aa,xa,ba){const Sa=getReductionStages$1(ha.shape);let Ta=ha;for(let wa=0;wa<Sa.length;wa++){const{inSize:Ea,windowSize:ka,outSize:Aa}=Sa[wa];let Fa,La;xa==="mean"?Fa=wa===0?new MeanProgram$1({windowSize:ka,inSize:Ea,batchSize:ha.shape[0],outSize:Aa},Ea):new MeanProgram$1({windowSize:ka,inSize:Ea,batchSize:ha.shape[0],outSize:Aa}):Fa=new ReduceProgram$1({windowSize:ka,inSize:Ea,batchSize:ha.shape[0],outSize:Aa},xa),La=Ta,Ta=ba.runWebGLProgram(Fa,[Ta],aa),La.dataId!==ha.dataId&&ba.disposeIntermediateTensorInfo(La)}return Ta}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TransposeProgram$1=class{constructor(aa,xa){this.variableNames=["A"];const ba=new Array(aa.length);for(let wa=0;wa<ba.length;wa++)ba[wa]=aa[xa[wa]];this.outputShape=ba,this.rank=ba.length;const Sa=getCoordsDataType$1(this.rank),Ta=getSwitchedCoords$1(xa);this.userCode=`
    void main() {
      ${Sa} resRC = getOutputCoords();
      setOutput(getA(${Ta}));
    }
    `}};function getSwitchedCoords$1(ha){const aa=ha.length;if(aa>6)throw Error(`Transpose for rank ${aa} is not yet supported`);const xa=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],ba=new Array(aa);for(let Sa=0;Sa<ha.length;Sa++)ba[ha[Sa]]=xa[Sa];return ba.join()}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TransposePackedProgram$1=class{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const ba=new Array(aa.length);for(let Fa=0;Fa<ba.length;Fa++)ba[Fa]=aa[xa[Fa]];if(this.outputShape=ba,this.rank=ba.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const Sa=getCoordsDataType$1(this.rank),Ta=getVecChannels$1("rc",this.rank),wa=new Array(this.rank);for(let Fa=0;Fa<xa.length;Fa++)wa[xa[Fa]]=Ta[Fa];const Ea=`vec2(${wa.slice(-2).join()})`,ka=`++${Ta[this.rank-1]} < ${ba[this.rank-1]}`,Aa=`getChannel(getA(${wa.join()}), ${Ea})`;this.userCode=`
    void main() {
      ${Sa} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${Aa};
      if(${ka}) {
        result[1] = ${Aa};
      }
      --${Ta[this.rank-1]};
      if(++${Ta[this.rank-2]} < ${ba[this.rank-2]}) {
        result[2] = ${Aa};
        if(${ka}) {
          result[3] = ${Aa};
        }
      }
      setOutput(result);
    }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl$2(ha,aa,xa){const ba=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TransposePackedProgram$1(ha.shape,aa):new TransposeProgram$1(ha.shape,aa);return xa.runWebGLProgram(ba,[ha],ha.dtype)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sumImpl$1(ha,aa,xa,ba){const Sa=aa,Ta=ha.shape.length,wa=parseAxisParam$1(Sa,ha.shape);let Ea=wa;const ka=getAxesPermutation$1(Ea,Ta),Aa=ka!=null;let Fa=ha;Aa&&(Fa=transposeImpl$2(ha,ka,ba),Ea=getInnerMostAxes$1(Ea.length,Ta)),assertAxesAreInnerMostDims$1("sum",Ea,Ta);const[La,el]=computeOutAndReduceShapes$1(Fa.shape,Ea);let tl=La;xa&&(tl=expandShapeToKeepDim$1(La,wa));const nl=sizeFromShape$1(el),sl=sizeFromShape$1(ha.shape)/nl,ol=reshape$2({inputs:{x:Fa},attrs:{shape:[sl,nl]},backend:ba}),al=sumOutType$1(ha.dtype),ll=reduce$1(ol,al,"sum",ba),il=reshape$2({inputs:{x:ll},attrs:{shape:tl},backend:ba});return ba.disposeIntermediateTensorInfo(ol),ba.disposeIntermediateTensorInfo(ll),Aa&&ba.disposeIntermediateTensorInfo(Fa),il}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum$3(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;return sumImpl$1(Sa,Ta,wa,xa)}const sumConfig$1={kernelName:Sum$1,backendName:"webgl",kernelFunc:sum$3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{perm:Ta}=ba,wa=xa,Ea=Sa.shape.length,ka=new Array(Ea);for(let Fa=0;Fa<ka.length;Fa++)ka[Fa]=Sa.shape[Ta[Fa]];let Aa;if(wa.shouldExecuteOnCPU([Sa])){const La=wa.texData.get(Sa.dataId).values,el=transposeImplCPU$1(La,Sa.shape,Sa.dtype,Ta,ka);Aa=wa.makeTensorInfo(ka,Sa.dtype);const tl=wa.texData.get(Aa.dataId);tl.values=el}else Aa=transposeImpl$2(Sa,Ta,wa);return Aa}const transposeConfig$1={kernelName:Transpose$1,backendName:"webgl",kernelFunc:transpose$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MATMUL_SHARED_DIM_THRESHOLD$1=1e3;function batchMatMulImpl$1({a:ha,b:aa,transposeA:xa,transposeB:ba,backend:Sa,bias:Ta=null,preluActivationWeights:wa=null,leakyreluAlpha:Ea=0,activation:ka=null}){const Aa=ha.shape.length,Fa=aa.shape.length,La=xa?ha.shape[Aa-2]:ha.shape[Aa-1],el=ba?aa.shape[Fa-1]:aa.shape[Fa-2],tl=xa?ha.shape[Aa-1]:ha.shape[Aa-2],nl=ba?aa.shape[Fa-2]:aa.shape[Fa-1],rl=ha.shape.slice(0,-2),sl=aa.shape.slice(0,-2),ol=sizeFromShape$1(rl),al=sizeFromShape$1(sl),il=assertAndGetBroadcastShape$1(ha.shape.slice(0,-2),aa.shape.slice(0,-2)).concat([tl,nl]);assert$2(La===el,()=>`Error in matMul: inner shapes (${La}) and (${el}) of Tensors with shapes ${ha.shape} and ${aa.shape} and transposeA=${xa} and transposeB=${ba} must match.`);const cl=xa?[ol,La,tl]:[ol,tl,La],ul=ba?[al,nl,el]:[al,el,nl],dl=reshape$2({inputs:{x:ha},backend:Sa,attrs:{shape:cl}}),hl=reshape$2({inputs:{x:aa},backend:Sa,attrs:{shape:ul}}),pl=[dl,hl],fl=Math.max(ol,al),ml=xa?dl.shape[1]:dl.shape[2],gl=Ta!=null,$l=wa!=null,xl=ka==="leakyrelu",yl=ka!=null?mapActivationToShaderProgram$1(ka,!0):null,bl=gl||$l||xl||yl!=null;let Sl;if((tl===1||nl===1)&&ml>MATMUL_SHARED_DIM_THRESHOLD$1&&bl===!1){let Tl=dl,Il=hl;xa&&(Tl=transpose$1({inputs:{x:dl},backend:Sa,attrs:{perm:[0,2,1]}}),pl.push(Tl)),ba&&(Il=transpose$1({inputs:{x:hl},backend:Sa,attrs:{perm:[0,2,1]}}),pl.push(Il));const wl=nl!==1,Nl=nl===1;let vl=Tl;wl&&(vl=reshape$2({inputs:{x:Tl},backend:Sa,attrs:{shape:[fl,ml,1]}}),pl.push(vl));const kl=nl===1?2:1;let El=Il;Nl&&(El=reshape$2({inputs:{x:Il},backend:Sa,attrs:{shape:[fl,1,ml]}}),pl.push(El));const Al=multiply$1({inputs:{a:vl,b:El},backend:Sa});Sl=sum$3({inputs:{x:Al},backend:Sa,attrs:{axis:kl,keepDims:!0}}),pl.push(Al)}else{const Tl=upcastType$1(ha.dtype,aa.dtype),Il=new MatMulPackedProgram$1(cl,ul,[fl,tl,nl],xa,ba,gl,yl,$l,xl),wl=[dl,hl];if(Ta!=null&&wl.push(Ta),$l&&wl.push(wa),xl){const Nl=Sa.makeTensorInfo([],"float32",createScalarValue$1(Ea,"float32"));wl.push(Nl),pl.push(Nl)}Sl=Sa.runWebGLProgram(Il,wl,Tl)}const Cl=reshape$2({inputs:{x:Sl},backend:Sa,attrs:{shape:il}});pl.push(Sl);for(const Tl of pl)Sa.disposeIntermediateTensorInfo(Tl);return Cl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{a:Sa,b:Ta,bias:wa,preluActivationWeights:Ea}=aa,{transposeA:ka,transposeB:Aa,activation:Fa,leakyreluAlpha:La}=ba;return batchMatMulImpl$1({a:Sa,b:Ta,transposeA:ka,transposeB:Aa,backend:xa,bias:wa,preluActivationWeights:Ea,leakyreluAlpha:La,activation:Fa})}const _fusedMatMulConfig$1={kernelName:_FusedMatMul$1,backendName:"webgl",kernelFunc:_fusedMatMul$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ABS$2="return abs(x);";function abs$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(xa.shouldExecuteOnCPU([ba])&&ba.dtype!=="complex64"){const Ta=xa.texData.get(ba.dataId),wa=simpleAbsImplCPU$1(Ta.values);return xa.makeTensorInfo(ba.shape,ba.dtype,wa)}let Sa;return env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS")?Sa=new UnaryOpPackedProgram$1(ba.shape,ABS$2):Sa=new UnaryOpProgram$1(ba.shape,ABS$2),xa.runWebGLProgram(Sa,[ba],ba.dtype)}const absConfig$1={kernelName:Abs$1,backendName:"webgl",kernelFunc:abs$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOS$1=CHECK_NAN_SNIPPET$3+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,acos$1=unaryKernelFunc$1({opSnippet:ACOS$1}),acosConfig$1={kernelName:Acos$1,backendName:"webgl",kernelFunc:acos$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOSH$1=CHECK_NAN_SNIPPET$3+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,acosh$1=unaryKernelFunc$1({opSnippet:ACOSH$1}),acoshConfig$1={kernelName:Acosh$1,backendName:"webgl",kernelFunc:acosh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ADD$1="return a + b;",addKernelFunc$1=binaryKernelFunc$1({opSnippet:ADD$1,packedOpSnippet:ADD$1,supportsComplex:!0,cpuKernelImpl:addImplCPU$1}),addConfig$1={kernelName:Add$2,backendName:"webgl",kernelFunc:addKernelFunc$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AddNProgram$1=class{constructor(aa,xa){this.outputShape=[],this.outputShape=aa,this.variableNames=xa.map((Ta,wa)=>`T${wa}`);const ba=[];this.variableNames.forEach(Ta=>{ba.push(`float v${Ta} = get${Ta}AtOutCoords();`)});const Sa=this.variableNames.map(Ta=>`v${Ta}`).join(" + ");this.userCode=`
      void main() {
        ${ba.join(`
        `)}

        float result = ${Sa};
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AddNPackedProgram$1=class{constructor(aa,xa){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=aa,this.variableNames=xa.map((Ta,wa)=>`T${wa}`);const ba=[];this.variableNames.forEach(Ta=>{ba.push(`vec4 v${Ta} = get${Ta}AtOutCoords();`)});const Sa=this.variableNames.map(Ta=>`v${Ta}`).join(" + ");this.userCode=`
      void main() {
        ${ba.join(`
        `)}

        vec4 result = ${Sa};
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN$1(ha){const{inputs:aa,backend:xa}=ha,ba=aa;if(ba.length===1)return identity$1({inputs:{x:ba[0]},backend:xa});if(ba.length>env$1().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const ka=Math.floor(ba.length/2),Aa=addN$1({inputs:ba.slice(0,ka),backend:xa}),Fa=addN$1({inputs:ba.slice(ka),backend:xa});return addN$1({inputs:[Aa,Fa],backend:xa})}const Sa=ba.map(ka=>ka.dtype).reduce((ka,Aa)=>upcastType$1(ka,Aa)),Ta=ba.map(ka=>ka.shape),Ea=env$1().getBool("WEBGL_PACK")?new AddNPackedProgram$1(ba[0].shape,Ta):new AddNProgram$1(ba[0].shape,Ta);return xa.runWebGLProgram(Ea,ba,Sa)}const addNConfig$1={kernelName:AddN$1,backendName:"webgl",kernelFunc:addN$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam$1(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation$1(Aa,Ea);let La=Sa;Fa!=null&&(La=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),Aa=getInnerMostAxes$1(Aa.length,Ea)),assertAxesAreInnerMostDims$1("all",Aa,Ea);const[el,tl]=computeOutAndReduceShapes$1(La.shape,Aa),nl=sizeFromShape$1(tl),rl=reshape$2({inputs:{x:La},backend:xa,attrs:{shape:[-1,nl]}}),sl=reduce$1(rl,rl.dtype,"all",xa);let ol;if(wa){const al=expandShapeToKeepDim$1(el,ka);ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:al}})}else ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),Fa!=null&&xa.disposeIntermediateTensorInfo(La),ol}const allConfig$1={kernelName:All$1,backendName:"webgl",kernelFunc:all$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam$1(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation$1(Aa,Ea);let La=Sa;Fa!=null&&(La=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),Aa=getInnerMostAxes$1(Aa.length,Ea)),assertAxesAreInnerMostDims$1("any",Aa,Ea);const[el,tl]=computeOutAndReduceShapes$1(La.shape,Aa),nl=sizeFromShape$1(tl),rl=reshape$2({inputs:{x:La},backend:xa,attrs:{shape:[-1,nl]}}),sl=reduce$1(rl,rl.dtype,"any",xa);let ol;if(wa){const al=expandShapeToKeepDim$1(el,ka);ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:al}})}else ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),Fa!=null&&xa.disposeIntermediateTensorInfo(La),ol}const anyConfig$1={kernelName:Any$1,backendName:"webgl",kernelFunc:any$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ArgMinMaxProgram$1=class{constructor(aa,xa,ba){this.variableNames=["A"];const{windowSize:Sa,batchSize:Ta,outSize:wa}=aa;ba||this.variableNames.push("bestIndicesA"),this.outputShape=[Ta,wa];const Ea=xa==="max"?">":"<",ka=ba?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${Sa};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${Sa}; i++) {
          int inIdx = ${ka};
          float candidate = getA(batch, inIdx);
          if (candidate ${Ea} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ArgMinMaxPackedProgram$1=class{constructor(aa,xa,ba,Sa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,assert$2(aa.length>2,()=>`Packed arg${ba.charAt(0).toUpperCase()+ba.slice(1)} supports only inputs with rank above 2.`);const Ta=aa[aa.length-1],wa=Math.ceil(Ta/xa);this.outputShape=aa.slice(0,-1),wa>1&&this.outputShape.push(wa),Sa||this.variableNames.push("bestIndicesA");const Ea=this.outputShape,ka=Ea.length,Aa=getCoordsDataType$1(ka),Fa=getChannels$1("coords",ka);let La,el;if(wa===1){el=ka+1;const hl=getCoordsDataType$1(el);La=`
        ${hl} sourceLocR = ${hl}(${Fa.join()}, 0);
        ++${Fa[ka-1]};
        ${hl} sourceLocG = ${hl}(${Fa.join()}, 0);
        ++${Fa[ka-2]};
        ${hl} sourceLocA = ${hl}(${Fa.join()}, 0);
        --${Fa[ka-1]};
        ${hl} sourceLocB = ${hl}(${Fa.join()}, 0);
        --${Fa[ka-2]};`}else el=ka,La=`
        ${Aa} sourceLocR = coords;
        ++${Fa[ka-1]};
        ${Aa} sourceLocG = coords;
        ++${Fa[ka-2]};
        ${Aa} sourceLocA = coords;
        --${Fa[ka-1]};
        ${Aa} sourceLocB = coords;
        --${Fa[ka-2]};`;const tl=["x","y","z","w","u","v"].slice(0,el),nl="."+tl[el-1],rl=tl.map(hl=>"int "+hl),sl=getChannels$1("sourceLocR",el-1).concat("inIdx.r"),ol=getChannels$1("sourceLocG",el-1).concat("inIdx.g"),al=getChannels$1("sourceLocB",el-1).concat("inIdx.b"),ll=getChannels$1("sourceLocA",el-1).concat("inIdx.a"),il=ba==="max"?"greaterThan":"lessThan",cl=Sa?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${sl.join()}),
                             getBestIndicesAChannel(${ol.join()}),
                             getBestIndicesAChannel(${al.join()}),
                             getBestIndicesAChannel(${ll.join()})));`,ul=`vec4(
            getAChannel(${sl.join()}),
            hasNextCol ? getAChannel(${ol.join()}) : 0.,
            hasNextRow ? getAChannel(${al.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${ll.join()}) : 0.)`,dl=Sa?"":`
      float getBestIndicesAChannel(${rl.join()}) {
        return getChannel(getBestIndicesA(${tl.join()}),
                                          vec2(${tl.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${rl.join()}) {
        return getChannel(getA(${tl.join()}),
                               vec2(${tl.slice(-2).join()}));
      }
      ${dl}
      void main() {
        ${Aa} coords = getOutputCoords();
        bool hasNextCol = ${Fa[ka-1]} < ${Ea[ka-1]-1};
        bool hasNextRow = ${Fa[ka-2]} < ${Ea[ka-2]-1};
        ${La}
        ivec4 srcIdx = ivec4(sourceLocR${nl}, sourceLocG${nl},
          sourceLocB${nl}, sourceLocA${nl}) * ${xa};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${ul};

        for (int i = 0; i < ${xa}; i++) {
          inIdx = srcIdx;
          ${cl}
          vec4 candidate = ${ul};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${il}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argReduce$1(ha,aa,xa,ba=null){let Sa=aa.shape[0],Ta=aa.shape[1];ba!=null&&(Sa=ba.shape[0],Ta=ba.shape[1]);const wa=computeOptimalWindowSize$1(Ta),Ea={windowSize:wa,inSize:Ta,batchSize:Sa,outSize:Math.ceil(Ta/wa)},ka=new ArgMinMaxProgram$1(Ea,xa,ba==null),Aa=[aa];ba!=null&&Aa.push(ba);const Fa=ha.runWebGLProgram(ka,Aa,"int32");if(Fa.shape[1]===1)return Fa;const La=argReduce$1(ha,aa,xa,Fa);return ha.disposeIntermediateTensorInfo(Fa),La}function argReducePacked$1(ha,aa,xa,ba=null){const Sa=ba!=null?ba.shape:aa.shape,Ta=Sa[Sa.length-1],wa=computeOptimalWindowSize$1(Ta),Ea=new ArgMinMaxPackedProgram$1(Sa,wa,xa,ba==null),ka=ba==null?[aa]:[aa,ba],Aa=ha.runWebGLProgram(Ea,ka,"int32");if(Aa.shape.length===aa.shape.length){const Fa=argReducePacked$1(ha,aa,xa,Aa);return ha.disposeIntermediateTensorInfo(Aa),Fa}return Aa}function argMinMaxReduce$1(ha,aa,xa,ba){const Sa=[xa];if(assertAxesAreInnerMostDims$1("arg"+ba.charAt(0).toUpperCase()+ba.slice(1),Sa,aa.shape.length),!env$1().getBool("WEBGL_PACK_REDUCE")||aa.shape.length<=2){const Ta=[],wa=ha.texData.get(aa.dataId),Ea=wa!==null&&wa.isPacked;let ka=aa;Ea&&(ka=ha.unpackTensor(aa),Ta.push(ka));const[Aa,Fa]=computeOutAndReduceShapes$1(ka.shape,Sa),La=sizeFromShape$1(Fa),el=reshape$2({inputs:{x:ka},backend:ha,attrs:{shape:[-1,La]}});Ta.push(el);const tl=argReduce$1(ha,el,ba);Ta.push(tl);const nl=reshape$2({inputs:{x:tl},backend:ha,attrs:{shape:Aa}});return Ta.forEach(rl=>ha.disposeIntermediateTensorInfo(rl)),nl}return argReducePacked$1(ha,aa,ba)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta}=ba;let wa=parseAxisParam$1(Ta,Sa.shape);const Ea=getAxesPermutation$1(wa,Sa.shape.length);let ka=Sa;const Aa=[];Ea!=null&&(ka=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:Ea}}),Aa.push(ka),wa=getInnerMostAxes$1(wa.length,ka.shape.length)),assertAxesAreInnerMostDims$1("argMax",[wa[0]],ka.shape.length);const Fa=argMinMaxReduce$1(xa,ka,wa[0],"max");return Aa.forEach(La=>xa.disposeIntermediateTensorInfo(La)),Fa}const argMaxConfig$1={kernelName:ArgMax$1,backendName:"webgl",kernelFunc:argMax$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta}=ba;let wa=parseAxisParam$1(Ta,Sa.shape);const Ea=getAxesPermutation$1(wa,Sa.shape.length);let ka=Sa;const Aa=[];Ea!=null&&(ka=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:Ea}}),Aa.push(ka),wa=getInnerMostAxes$1(wa.length,ka.shape.length)),assertAxesAreInnerMostDims$1("argMin",[wa[0]],ka.shape.length);const Fa=argMinMaxReduce$1(xa,ka,wa[0],"min");return Aa.forEach(La=>xa.disposeIntermediateTensorInfo(La)),Fa}const argMinConfig$1={kernelName:ArgMin$1,backendName:"webgl",kernelFunc:argMin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASIN$1=CHECK_NAN_SNIPPET$3+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,asin$1=unaryKernelFunc$1({opSnippet:ASIN$1}),asinConfig$1={kernelName:Asin$1,backendName:"webgl",kernelFunc:asin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASINH$1=CHECK_NAN_SNIPPET$3+"return log(x + sqrt(x * x + 1.0));",asinh$1=unaryKernelFunc$1({opSnippet:ASINH$1}),asinhConfig$1={kernelName:Asinh$1,backendName:"webgl",kernelFunc:asinh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN$1=CHECK_NAN_SNIPPET$3+`
  return atan(x);
`,atan$1=unaryKernelFunc$1({opSnippet:ATAN$1}),atanConfig$1={kernelName:Atan$1,backendName:"webgl",kernelFunc:atan$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN2$1=CHECK_NAN_SNIPPET$2+`
  return atan(a, b);
`,ATAN2_PACKED$1=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED$1+`
  return result;
`,atan2$1=binaryKernelFunc$1({opSnippet:ATAN2$1,packedOpSnippet:ATAN2_PACKED$1}),atan2Config$1={kernelName:Atan2$1,backendName:"webgl",kernelFunc:atan2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATANH$1=CHECK_NAN_SNIPPET$3+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,atanh$1=unaryKernelFunc$1({opSnippet:ATANH$1}),atanhConfig$1={kernelName:Atanh$1,backendName:"webgl",kernelFunc:atanh$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Pool2DProgram$1=class{constructor(aa,xa,ba,Sa=!1,Ta=!1){if(this.variableNames=["x"],xa==="avg"&&ba)throw new Error("Cannot compute positions for average pool.");const wa=aa.filterWidth,Ea=aa.strideHeight,ka=aa.strideWidth,Aa=aa.dilationHeight,Fa=aa.dilationWidth,La=aa.effectiveFilterHeight,el=aa.effectiveFilterWidth,tl=aa.padInfo.top,nl=aa.padInfo.left;this.outputShape=aa.outShape;const rl=xa==="avg",sl=`((batch  * ${aa.inHeight} + xR) * ${aa.inWidth} + xC) * ${aa.inChannels} + d`,ol=`(xR * ${aa.inWidth} + xC) * ${aa.inChannels} + d`;let al="0.0";if(rl||(al="-1.0 / 1e-20"),ba){const hl=">=";this.userCode=`
        const ivec2 strides = ivec2(${Ea}, ${ka});
        const ivec2 pads = ivec2(${tl}, ${nl});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${La};
              wR += ${Aa}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${el};
                wC += ${Fa}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${hl} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${Sa?Ta?sl:ol:`wR * ${el} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const ll="max";let il=`${xa}(${xa}(${xa}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;xa==="avg"&&(il="avgValue / max(count, 1.0)");const cl=Math.floor(wa/4)*4,ul=wa%4,dl=`
      if (${rl}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${ll}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${Ea}, ${ka});
      const ivec2 pads = ivec2(${tl}, ${nl});
      const float initializationValue = ${al};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${aa.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${al});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${La};
            wR += ${Aa}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${aa.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${cl}; wC += 4) {
            int xC = xCCorner + wC * ${Fa};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${Fa}, d),
              getValue(batch, xR, xC + 2 * ${Fa}, d),
              getValue(batch, xR, xC + 3 * ${Fa}, d)
            );

            ${dl}
          }

          int xC = xCCorner + ${cl};
          if (${ul===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${dl}
          } else if (${ul===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${Fa}, d),
              initializationValue,
              initializationValue
            );

            ${dl}
          } else if (${ul===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${Fa}, d),
              getValue(batch, xR, xC + 2 * ${Fa}, d),
              initializationValue
            );

            ${dl}
          }
        }
        setOutput(${il});
      }
    `}},Pool3DProgram$1=class{constructor(aa,xa,ba,Sa=!1,Ta=!1){if(this.variableNames=["x"],xa==="avg"&&ba)throw new Error("Cannot compute positions for average pool.");const wa=aa.filterWidth,Ea=aa.strideDepth,ka=aa.strideHeight,Aa=aa.strideWidth,Fa=aa.dilationDepth,La=aa.dilationHeight,el=aa.dilationWidth,tl=aa.effectiveFilterDepth,nl=aa.effectiveFilterHeight,rl=aa.effectiveFilterWidth,sl=aa.padInfo.front,ol=aa.padInfo.top,al=aa.padInfo.left;this.outputShape=aa.outShape;const ll=xa==="avg";let il="0.0";if(ll||(il="-1.0 / 1e-20"),ba){const fl=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${Ea}, ${ka}, ${Aa});
        const ivec3 pads = ivec3(${sl}, ${ol}, ${al});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${tl};
              wD += ${Fa}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${aa.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${nl};
                wR += ${La}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${aa.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${rl};
                  wC += ${el}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${aa.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${fl} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${Sa?Ta?`(((batch * ${aa.inDepth} + xD) * ${aa.inHeight} + xR) * ${aa.inWidth} + xC) * ${aa.inChannels} + ch`:`((xD * ${aa.inHeight} + xR) * ${aa.inWidth} + xC) * ${aa.inChannels} + ch`:`wD * ${nl} * ${rl} +
                      wR * ${rl} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const cl="max";let ul=`${xa}(${xa}(${xa}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;xa==="avg"&&(ul="avgValue / max(count, 1.0)");const dl=Math.floor(wa/4)*4,hl=wa%4,pl=`
      if (${ll}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${cl}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${Ea}, ${ka}, ${Aa});
      const ivec3 pads = ivec3(${sl}, ${ol}, ${al});
      const float initializationValue = ${il};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${aa.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${il});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${tl};
            wD += ${Fa}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${aa.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${nl};
            wR += ${La}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${dl}; wC += 4) {
              int xC = xCCorner + wC * ${el};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${el}, ch),
                getValue(batch, xD, xR, xC + 2 * ${el}, ch),
                getValue(batch, xD, xR, xC + 3 * ${el}, ch)
              );

              ${pl}
            }

            int xC = xCCorner + ${dl};
            if (${hl===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${pl}
            } else if (${hl===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${el}, ch),
                initializationValue,
                initializationValue
              );

              ${pl}
            } else if (${hl===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${el}, ch),
                getValue(batch, xD, xR, xC + 2 * ${el}, ch),
                initializationValue
              );

              ${pl}
            }
          }
        }
        setOutput(${ul});
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;assertNotComplex$1(Sa,"avgPool");const{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=ba,Aa=1;assert$2(eitherStridesOrDilationsAreOne$1(wa,Aa),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Aa}'`);const Fa=computePool2DInfo$1(Sa.shape,Ta,wa,Aa,Ea,ka);if(Fa.filterWidth===1&&Fa.filterHeight===1&&arraysEqual$1(Fa.inShape,Fa.outShape))return identity$1({inputs:{x:Sa},backend:xa});const La=new Pool2DProgram$1(Fa,"avg",!1);return xa.runWebGLProgram(La,[Sa],"float32")}const avgPoolConfig$1={kernelName:AvgPool$1,backendName:"webgl",kernelFunc:avgPool$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka,dataFormat:Aa}=ba,Fa=[1,1,1],La=computePool3DInfo$1(Sa.shape,Ta,wa,Fa,Ea,ka,Aa),el=new Pool3DProgram$1(La,"avg",!1);return xa.runWebGLProgram(el,[Sa],"float32")}const avgPool3DConfig$1={kernelName:AvgPool3D$1,backendName:"webgl",kernelFunc:avgPool3D$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let AvgPool2DBackpropProgram$1=class{constructor(aa){this.variableNames=["dy"],this.outputShape=aa.inShape;const xa=aa.filterHeight,ba=aa.filterWidth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=aa.dilationHeight,Ea=aa.dilationWidth,ka=aa.effectiveFilterHeight,Aa=aa.effectiveFilterWidth,Fa=ka-1-aa.padInfo.top,La=Aa-1-aa.padInfo.left,el=1/(xa*ba);this.userCode=`
      const ivec2 pads = ivec2(${Fa}, ${La});
      const float avgMultiplier = float(${el});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${ka};
            wR += ${wa}) {
          float dyR = float(dyRCorner + wR) / ${Sa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${Aa};
            wC+= ${Ea}) {
            float dyC = float(dyCCorner + wC) / ${Ta}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},AvgPool3DBackpropProgram$1=class{constructor(aa){this.variableNames=["dy"],this.outputShape=aa.inShape;const xa=aa.filterDepth,ba=aa.filterHeight,Sa=aa.filterWidth,Ta=aa.strideDepth,wa=aa.strideHeight,Ea=aa.strideWidth,ka=aa.dilationDepth,Aa=aa.dilationHeight,Fa=aa.dilationWidth,La=aa.effectiveFilterDepth,el=aa.effectiveFilterHeight,tl=aa.effectiveFilterWidth,nl=La-1-aa.padInfo.front,rl=el-1-aa.padInfo.top,sl=tl-1-aa.padInfo.left,ol=1/(xa*ba*Sa);this.userCode=`
      const ivec3 pads = ivec3(${nl}, ${rl}, ${sl});
      const float avgMultiplier = float(${ol});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${La};
            wD += ${ka}) {
          float dyD = float(dyDCorner + wD) / ${Ta}.0;

          if (dyD < 0.0 || dyD >= ${aa.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${el};
              wR += ${Aa}) {
            float dyR = float(dyRCorner + wR) / ${wa}.0;

            if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${tl};
                wC += ${Fa}) {
              float dyC = float(dyCCorner + wC) / ${Ea}.0;

              if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta,{filterSize:Ea,strides:ka,pad:Aa,dimRoundingMode:Fa}=ba,La=[1,1,1],el=computePool3DInfo$1(wa.shape,Ea,ka,La,Aa,Fa),tl=new AvgPool3DBackpropProgram$1(el);return xa.runWebGLProgram(tl,[Sa],wa.dtype)}const avgPool3DGradConfig$1={kernelName:AvgPool3DGrad$1,backendName:"webgl",kernelFunc:avgPool3DGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta;assertNotComplex$1([Sa,Ta],"avgPoolGrad");const{filterSize:Ea,strides:ka,pad:Aa}=ba,Fa=computePool2DInfo$1(wa.shape,Ea,ka,1,Aa),La=new AvgPool2DBackpropProgram$1(Fa);return xa.runWebGLProgram(La,[Sa],wa.dtype)}const avgPoolGradConfig$1={kernelName:AvgPoolGrad$1,backendName:"webgl",kernelFunc:avgPoolGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{a:Sa,b:Ta}=aa,{transposeA:wa,transposeB:Ea}=ba;return batchMatMulImpl$1({a:Sa,b:Ta,transposeA:wa,transposeB:Ea,backend:xa})}const batchMatMulConfig$1={kernelName:BatchMatMul$1,backendName:"webgl",kernelFunc:batchMatMul$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let BatchNormProgram$1=class{constructor(aa,xa,ba,Sa,Ta,wa){this.outputShape=[],this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape$1(aa,xa),assertAndGetBroadcastShape$1(aa,ba);let Ea="0.0";Sa!=null&&(assertAndGetBroadcastShape$1(aa,Sa),this.variableNames.push("offset"),Ea="getOffsetAtOutCoords()");let ka="1.0";Ta!=null&&(assertAndGetBroadcastShape$1(aa,Ta),this.variableNames.push("scale"),ka="getScaleAtOutCoords()"),this.outputShape=aa,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${Ea};
        float scale = ${ka};
        float inv = scale * inversesqrt(variance + float(${wa}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let BatchNormPackedProgram$1=class{constructor(aa,xa,ba,Sa,Ta,wa){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape$1(aa,xa),assertAndGetBroadcastShape$1(aa,ba);let Ea="vec4(0.0)";Sa!=null&&(assertAndGetBroadcastShape$1(aa,Sa),this.variableNames.push("offset"),Ea="getOffsetAtOutCoords()");let ka="vec4(1.0)";Ta!=null&&(assertAndGetBroadcastShape$1(aa,Ta),this.variableNames.push("scale"),ka="getScaleAtOutCoords()"),this.outputShape=aa,this.userCode=`
      void main() {
        vec4 offset = ${Ea};
        vec4 scale = ${ka};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${wa}));

        setOutput((x - mean) * inv + offset);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchNorm$1=({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba,mean:Sa,variance:Ta,offset:wa,scale:Ea}=ha;assert$2(Sa.shape.length===Ta.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert$2(wa==null||Sa.shape.length===wa.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert$2(Ea==null||Sa.shape.length===Ea.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:ka}=xa;ka==null&&(ka=.001);const Aa=[ba,Sa,Ta];let Fa=null;wa!=null&&(Fa=wa.shape,Aa.push(wa));let La=null;Ea!=null&&(La=Ea.shape,Aa.push(Ea));const el=env$1().getBool("WEBGL_PACK_NORMALIZATION")?new BatchNormPackedProgram$1(ba.shape,Sa.shape,Ta.shape,Fa,La,ka):new BatchNormProgram$1(ba.shape,Sa.shape,Ta.shape,Fa,La,ka);return aa.runWebGLProgram(el,Aa,Aa[0].dtype)},batchNormConfig$1={kernelName:FusedBatchNorm$1,backendName:"webgl",kernelFunc:batchNorm$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SliceProgram$1=class{constructor(aa){this.variableNames=["source"],this.outputShape=aa,this.rank=aa.length;const xa=getCoordsDataType$1(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const ba=getCoords$3(this.rank);let Sa;const Ta=aa.map((wa,Ea)=>`sourceLoc.${coords$1[Ea]} = start[${Ea}] + coords.${coords$1[Ea]};`);Sa=`
        ${xa} sourceLoc;
        ${xa} coords = getOutputCoords();
        ${Ta.join(`
`)}
      `,this.userCode=`
      void main() {
        ${Sa}
        setOutput(getSource(${ba}));
      }
    `}};const coords$1=["x","y","z","w","u","v"];function getCoords$3(ha){if(ha===1)return"sourceLoc";if(ha<=6)return coords$1.slice(0,ha).map(aa=>"sourceLoc."+aa).join(",");throw Error(`Slicing for rank ${ha} is not yet supported`)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SlicePackedProgram$1=class{constructor(aa){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=aa,this.rank=aa.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const xa=getCoordsDataType$1(this.rank),ba=getChannels$1("coords",this.rank),Sa=getChannels$1("sourceLoc",this.rank),Ta=this.rank===1?"sourceLoc":`vec2(${Sa.slice(-2).join()})`,wa=`getChannel(getSource(${Sa.join()}), ${Ta})`,Ea=`
      result.x = ${wa};
      if (++${ba[this.rank-1]} < ${aa[this.rank-1]}) {
        ++${Sa[this.rank-1]};
        result.y = ${wa};
        --${Sa[this.rank-1]};
      }
    `,ka=this.rank===1?"":`
      --${ba[this.rank-1]};
      if (++${ba[this.rank-2]} < ${aa[this.rank-2]}) {
        ++${Sa[this.rank-2]};
        result.z = ${wa};
        if (++${ba[this.rank-1]} < ${aa[this.rank-1]}) {
          ++${Sa[this.rank-1]};
          result.w = ${wa};
        }
      }
    `,Aa=this.rank<=4?`sourceLoc = coords +
            ${xa}(${aa.map((Fa,La)=>`start[${La}]`).join()});`:aa.map((Fa,La)=>`${Sa[La]} = ${ba[La]} + start[${La}];`).join(`
`);this.userCode=`
      void main() {
        ${xa} coords = getOutputCoords();
        ${xa} sourceLoc;
        ${Aa}
        vec4 result = vec4(0.);
        ${Ea}
        ${ka}
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shallowSlice$1(ha,aa,xa,ba){const Sa=ba.texData.get(ha.dataId),Ta=ba.makeTensorInfo(xa,ha.dtype),wa=ba.texData.get(Ta.dataId);Object.assign(wa,Sa),wa.refCount=1,wa.shape=xa,wa.dtype=ha.dtype;let Ea=computeFlatOffset$1(aa,computeStrides$1(ha.shape));Sa.slice&&(Ea+=Sa.slice.flatOffset),wa.slice={flatOffset:Ea,origDataId:Sa.slice&&Sa.slice.origDataId||ha.dataId};const ka=ba.dataRefCount.get(wa.slice.origDataId)||1;return ba.dataRefCount.set(wa.slice.origDataId,ka+1),Ta}function slice$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{begin:Ta,size:wa}=ba,[Ea,ka]=parseSliceParams$1(Sa,Ta,wa);if(assertParamsValid$1(Sa,Ea,ka),sizeFromShape$1(ka)===0)return xa.makeTensorInfo(ka,Sa.dtype,[]);if(xa.shouldExecuteOnCPU([Sa])||Sa.dtype==="string"){const La=xa.texData.get(Sa.dataId),el=sliceImplCPU$1(La.values,Ea,ka,Sa.shape,Sa.dtype);return xa.makeTensorInfo(ka,Sa.dtype,el)}const{isPacked:Aa}=xa.texData.get(Sa.dataId),Fa=isSliceContinous$1(Sa.shape,Ea,ka);if(Aa||!Fa){const La=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SlicePackedProgram$1(ka):new SliceProgram$1(ka),el=[Ea];return xa.runWebGLProgram(La,[Sa],Sa.dtype,el)}return xa.uploadToGPU(Sa.dataId),shallowSlice$1(Sa,Ea,ka,xa)}const sliceConfig$1={kernelName:Slice$1,backendName:"webgl",kernelFunc:slice$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceND$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockShape:Ta,crops:wa}=ba;assert$2(Sa.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const Ea=Ta.reduce((al,ll)=>al*ll),ka=getReshaped$1(Sa.shape,Ta,Ea),Aa=getPermuted$1(ka.length,Ta.length),Fa=getReshapedPermuted$1(Sa.shape,Ta,Ea),La=getSliceBeginCoords$1(wa,Ta.length),el=getSliceSize$1(Fa,wa,Ta.length),tl=[],nl=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:ka}}),rl=transpose$1({inputs:{x:nl},backend:xa,attrs:{perm:Aa}}),sl=reshape$2({inputs:{x:rl},backend:xa,attrs:{shape:Fa}}),ol=slice$1({inputs:{x:sl},backend:xa,attrs:{begin:La,size:el}});return tl.push(nl),tl.push(rl),tl.push(sl),tl.forEach(al=>xa.disposeIntermediateTensorInfo(al)),ol},batchToSpaceNDConfig$1={kernelName:BatchToSpaceND$1,backendName:"webgl",kernelFunc:batchToSpaceND$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,weights:Ta}=aa,{size:wa}=ba,Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),Aa=bincountImplCPU$1(Ea,ka,Ta.dtype,Ta.shape,wa);return xa.makeTensorInfo([wa],Ta.dtype,Aa)}const bincountConfig$1={kernelName:Bincount$1,backendName:"webgl",kernelFunc:bincount$1};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const BITWISEAND$1=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,BITWISEAND_UNPACKED$1=`
  return float(int(a.r) & int(b.r));
`;function bitwiseAnd$1(ha){const{inputs:aa,backend:xa}=ha,{a:ba,b:Sa}=aa,Ta=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS"),wa=env$1().getNumber("WEBGL_VERSION");if(xa.shouldExecuteOnCPU([ba,Sa])||wa===1){const ka=xa.texData.get(ba.dataId).values,Aa=xa.texData.get(Sa.dataId).values,[Fa,La]=bitwiseAndImplCPU$1(ba.shape,Sa.shape,ka,Aa,ba.dtype),el=xa.makeTensorInfo(La,ba.dtype),tl=xa.texData.get(el.dataId);return tl.values=Fa,el}let Ea;return Ta?Ea=new BinaryOpPackedProgram$1(BITWISEAND$1,ba.shape,Sa.shape,!1):Ea=new BinaryOpProgram$1(BITWISEAND_UNPACKED$1,ba.shape,Sa.shape),xa.runWebGLProgram(Ea,[ba,Sa],ba.dtype)}const bitwiseAndConfig$1={kernelName:BitwiseAnd$1,backendName:"webgl",kernelFunc:bitwiseAnd$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs$1(ha){const{inputs:aa,backend:xa}=ha,{s0:ba,s1:Sa}=aa,Ta=xa.readSync(ba.dataId),wa=xa.readSync(Sa.dataId),Ea=assertAndGetBroadcastShape$1(Array.from(Ta),Array.from(wa));return xa.makeTensorInfo([Ea.length],"int32",Int32Array.from(Ea))}const broadcastArgsConfig$1={kernelName:BroadcastArgs$1,backendName:"webgl",kernelFunc:broadcastArgs$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NOT_EQUAL$1="return float(a != b);",notEqual$1=binaryKernelFunc$1({opSnippet:NOT_EQUAL$1,cpuKernelImpl:notEqualImplCPU$1,dtype:"bool"}),notEqualConfig$1={kernelName:NotEqual$1,backendName:"webgl",kernelFunc:notEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real$1(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=xa.texData.get(ba.dataId);return identity$1({inputs:{x:Sa.complexTensorInfos.real},backend:xa})}const realConfig$1={kernelName:Real$1,backendName:"webgl",kernelFunc:real$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TO_INT$1="return float(int(x));";function int$1(ha,aa){const xa=new UnaryOpProgram$1(ha.shape,TO_INT$1),ba=aa.runWebGLProgram(xa,[ha],"int32");return{dataId:ba.dataId,shape:ba.shape,dtype:ba.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast$2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{dtype:Ta}=ba;if(Ta==="complex64"){if(Sa.dtype==="complex64")return identity$1({inputs:{x:Sa},backend:xa});const wa=zeros$2(Sa.shape),Ea=cast$2({inputs:{x:Sa},backend:xa,attrs:{dtype:"float32"}}),ka=complex$2({inputs:{real:Ea,imag:wa},backend:xa});return wa.dispose(),xa.disposeIntermediateTensorInfo(Ea),ka}if(Sa.dtype==="complex64"){const wa=real$1({inputs:{input:Sa},backend:xa}),Ea=cast$2({inputs:{x:wa},backend:xa,attrs:{dtype:Ta}});return xa.disposeIntermediateTensorInfo(wa),Ea}if(!hasEncodingLoss$1(Sa.dtype,Ta)){const wa=identity$1({inputs:{x:Sa},backend:xa});return{dataId:wa.dataId,shape:wa.shape,dtype:Ta}}if(xa.shouldExecuteOnCPU([Sa])){const wa=xa.texData.get(Sa.dataId).values,[Ea,ka,Aa]=castImplCPU$1(wa,Sa.shape,Sa.dtype,Ta);return xa.makeTensorInfo(Ea,ka,Aa)}if(Ta==="int32")return int$1(Sa,xa);if(Ta==="bool"){const wa=xa.makeTensorInfo([],"bool",getTypedArrayFromDType$1("bool",1)),ka=notEqual$1({inputs:{a:Sa,b:wa},backend:xa});return xa.disposeIntermediateTensorInfo(wa),ka}throw new Error(`Error in Cast: failed to cast ${Sa.dtype} to ${Ta}`)}const castConfig$1={kernelName:Cast$1,backendName:"webgl",kernelFunc:cast$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CEIL$1="return ceil(x);",ceil$1=unaryKernelFunc$1({opSnippet:CEIL$1,packedOpSnippet:CEIL$1,cpuKernelImpl:ceilImplCPU$1}),ceilConfig$1={kernelName:Ceil$1,backendName:"webgl",kernelFunc:ceil$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ClipProgram$1=class{constructor(aa){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=aa,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ClipPackedProgram$1=class{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=aa,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{clipValueMin:Ta,clipValueMax:wa}=ba;let Ea;env$1().getBool("WEBGL_PACK_CLIP")?Ea=new ClipPackedProgram$1(Sa.shape):Ea=new ClipProgram$1(Sa.shape);const ka=[[Ta],[wa]];return xa.runWebGLProgram(Ea,[Sa],Sa.dtype,ka)}const clipByValueConfig$1={kernelName:ClipByValue$1,backendName:"webgl",kernelFunc:clipByValue$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ComplexAbsProgram$1=class{constructor(aa){this.variableNames=["real","imag"],this.outputShape=aa,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeComplexComponentTensorInfo$1(ha,aa){return{dataId:aa.dataId,dtype:aa.dtype,shape:ha.shape}}function complexAbs$1(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa,Sa=xa.texData.get(ba.dataId),Ta=new ComplexAbsProgram$1(ba.shape),wa=[makeComplexComponentTensorInfo$1(ba,Sa.complexTensorInfos.real),makeComplexComponentTensorInfo$1(ba,Sa.complexTensorInfos.imag)];return xa.runWebGLProgram(Ta,wa,wa[0].dtype)}const complexAbsConfig$1={kernelName:ComplexAbs$1,backendName:"webgl",kernelFunc:complexAbs$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ConcatProgram$1=class{constructor(aa){this.outputShape=[],this.outputShape=computeOutShape$4(aa,1),this.variableNames=aa.map((wa,Ea)=>`T${Ea}`);const xa=new Array(aa.length-1);xa[0]=aa[0][1];for(let wa=1;wa<xa.length;wa++)xa[wa]=xa[wa-1]+aa[wa][1];const ba=[`if (yC < ${xa[0]}) setOutput(getT0(yR, yC));`];for(let wa=1;wa<xa.length;wa++){const Ea=xa[wa-1];ba.push(`else if (yC < ${xa[wa]}) setOutput(getT${wa}(yR, yC-${Ea}));`)}const Sa=xa.length,Ta=xa[xa.length-1];ba.push(`else setOutput(getT${Sa}(yR, yC-${Ta}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${ba.join(`
        `)}
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ConcatPackedProgram$1=class{constructor(aa,xa){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=computeOutShape$4(aa,xa);const ba=this.outputShape,Sa=ba.length,Ta=getCoordsDataType$1(Sa),wa=getChannels$1("coords",Sa),Ea=["x","y","z","w","u","v"].slice(0,Sa);this.variableNames=aa.map((rl,sl)=>`T${sl}`);const ka=new Array(aa.length-1);ka[0]=aa[0][xa];for(let rl=1;rl<ka.length;rl++)ka[rl]=ka[rl-1]+aa[rl][xa];const Aa=Ea[xa],Fa=Ea.slice(-2),La=Ea.join();let el=`if (${Aa} < ${ka[0]}) {
        return getChannel(
            getT0(${La}), vec2(${Fa.join()}));
        }`;for(let rl=1;rl<ka.length;rl++){const sl=ka[rl-1];el+=`
        if (${Aa} < ${ka[rl]}  && ${Aa} >= ${ka[rl-1]}) {
          return getChannel(
            getT${rl}(${shiftedChannels$1(Ea,Aa,sl)}),
            vec2(${shiftedChannels$1(Fa,Aa,sl)}));
        }`}const tl=ka.length,nl=ka[ka.length-1];el+=`
        return getChannel(
          getT${tl}(${shiftedChannels$1(Ea,Aa,nl)}),
          vec2(${shiftedChannels$1(Fa,Aa,nl)}));`,this.userCode=`
      float getValue(${Ea.map(rl=>"int "+rl)}) {
        ${el}
      }

      void main() {
        ${Ta} coords = getOutputCoords();
        vec4 result = vec4(getValue(${wa}), 0., 0., 0.);

        ${wa[Sa-1]} = ${wa[Sa-1]} + 1;
        if (${wa[Sa-1]} < ${ba[Sa-1]}) {
          result.g = getValue(${wa});
        }

        ${wa[Sa-2]} = ${wa[Sa-2]} + 1;
        if (${wa[Sa-2]} < ${ba[Sa-2]}) {
          result.a = getValue(${wa});
        }

        ${wa[Sa-1]} = ${wa[Sa-1]} - 1;
        if (${wa[Sa-2]} < ${ba[Sa-2]} &&
            ${wa[Sa-1]} < ${ba[Sa-1]}) {
          result.b = getValue(${wa});
        }
        setOutput(result);
      }
    `}};function shiftedChannels$1(ha,aa,xa){const ba=ha.indexOf(aa);return ha.map((Ta,wa)=>wa===ba?`${Ta} - ${xa}`:Ta).join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag$1(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=xa.texData.get(ba.dataId);return identity$1({inputs:{x:Sa.complexTensorInfos.imag},backend:xa})}const imagConfig$1={kernelName:Imag$1,backendName:"webgl",kernelFunc:imag$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$2(ha,aa,xa){const ba=ha[0].dtype;if(ba==="complex64"){const tl=ha.map(al=>real$1({inputs:{input:al},backend:xa})),nl=ha.map(al=>imag$1({inputs:{input:al},backend:xa})),rl=concatImpl$2(tl,aa,xa),sl=concatImpl$2(nl,aa,xa),ol=complex$2({inputs:{real:rl,imag:sl},backend:xa});return tl.forEach(al=>xa.disposeIntermediateTensorInfo(al)),nl.forEach(al=>xa.disposeIntermediateTensorInfo(al)),xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),ol}let Sa=xa.shouldExecuteOnCPU(ha);if(ba==="string"&&(Sa=!0),Sa){const tl=ha.map(il=>{const ul=[-1,sizeFromShape$1(il.shape.slice(aa))];return reshape$2({inputs:{x:il},backend:xa,attrs:{shape:ul}})}),nl=tl.map(il=>({vals:xa.readSync(il.dataId),shape:il.shape})),rl=computeOutShape$4(tl.map(il=>il.shape),1),sl=tl[0].shape[0]===1,ol=concatImplCPU$1(nl,rl,ba,sl),al=computeOutShape$4(ha.map(il=>il.shape),aa),ll=xa.makeTensorInfo(al,ba,ol);return tl.forEach(il=>xa.disposeIntermediateTensorInfo(il)),ll}const Ta=ha.filter(tl=>sizeFromShape$1(tl.shape)>0),wa=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&Ta[0].shape.length>1;if(Ta.length===1){const tl=wa?new UnaryOpProgram$1(ha[0].shape,CLONE$1):new UnaryOpPackedProgram$1(ha[0].shape,CLONE$1);return xa.runWebGLProgram(tl,ha,ba)}const Ea=env$1().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(Ta.length>Ea){const tl=[];for(let rl=0;rl<Ta.length;rl+=Ea){const sl=Ta.slice(rl,rl+Ea);tl.push(concatImpl$2(sl,aa,xa))}const nl=concatImpl$2(tl,aa,xa);for(const rl of tl)xa.disposeIntermediateTensorInfo(rl);return nl}if(wa){const tl=new ConcatPackedProgram$1(Ta.map(nl=>nl.shape),aa);return xa.runWebGLProgram(tl,Ta,ba)}const{tensors2D:ka,outShape:Aa}=computeTensors2D$1(Ta,aa,xa),Fa=new ConcatProgram$1(ka.map(tl=>tl.shape)),La=xa.runWebGLProgram(Fa,ka,ba);ka.forEach(tl=>xa.disposeIntermediateTensorInfo(tl));const el=reshape$2({inputs:{x:La},attrs:{shape:Aa},backend:xa});return xa.disposeIntermediateTensorInfo(La),el}function computeTensors2D$1(ha,aa,xa){const ba=computeOutShape$4(ha.map(Ta=>Ta.shape),aa);return{tensors2D:ha.map(Ta=>reshape$2({inputs:{x:Ta},attrs:{shape:[-1,sizeFromShape$1(Ta.shape.slice(aa))]},backend:xa})),outShape:ba}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{axis:Sa}=ba,Ta=parseAxisParam$1(Sa,aa[0].shape)[0],wa=aa.map(Aa=>Aa.shape);assertParamsConsistent$1(wa,Ta);const Ea=computeOutShape$4(aa.map(Aa=>Aa.shape),Ta);if(sizeFromShape$1(Ea)===0)return xa.makeTensorInfo(Ea,aa[0].dtype,[]);const ka=aa.filter(Aa=>sizeFromShape$1(Aa.shape)>0);return ka.length===1?identity$1({inputs:{x:ka[0]},backend:xa}):concatImpl$2(ka,Ta,xa)}const concatConfig$1={kernelName:Concat$1,backendName:"webgl",kernelFunc:concat$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Conv2DProgram$1=class{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.outputShape=aa.outShape;const wa=aa.padInfo.top,Ea=aa.padInfo.left,ka=aa.strideHeight,Aa=aa.strideWidth,Fa=aa.dilationHeight,La=aa.dilationWidth,el=aa.filterHeight,tl=aa.filterWidth,nl=Math.floor(aa.inChannels/4)*4,rl=aa.inChannels%4,sl=aa.dataFormat==="channelsLast",ol=sl?1:2,al=sl?2:3,ll=sl?3:1;let il="",cl="";ba&&(Sa?il=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${ba}
        }`:Ta?il=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${ba}
        }`:il=`
          float activation(float x) {
            ${ba}
          }
        `,cl="result = activation(result);");const ul=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${il}

      const ivec2 strides = ivec2(${ka}, ${Aa});
      const ivec2 pads = ivec2(${wa}, ${Ea});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${ll}];

        ivec2 xRCCorner =
            ivec2(coords[${ol}], coords[${al}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${el}; wR++) {
          int xR = xRCorner + wR * ${Fa};

          if (xR < 0 || xR >= ${aa.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${tl}; wC++) {
            int xC = xCCorner + wC * ${La};

            if (xC < 0 || xC >= ${aa.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${nl}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${sl}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${rl===1}) {

              if (${sl}) {
                dotProd +=
                    getX(batch, xR, xC, ${nl}) *
                    getW(wR, wC, ${nl}, d2);
              } else {
                dotProd +=
                    getX(batch, ${nl}, xR, xC) *
                    getW(wR, wC, ${nl}, d2);
              }

            } else if (${rl===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${nl}, d2),
                getW(wR, wC, ${nl} + 1, d2)
              );

              if (${sl}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${nl}),
                  getX(batch, xR, xC, ${nl} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${nl}, xR, xC),
                  getX(batch, ${nl} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${rl===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${nl}, d2),
                getW(wR, wC, ${nl} + 1, d2),
                getW(wR, wC, ${nl} + 2, d2)
              );

              if (${sl}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${nl}),
                  getX(batch, xR, xC, ${nl} + 1),
                  getX(batch, xR, xC, ${nl} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${nl}, xR, xC),
                  getX(batch, ${nl} + 1, xR, xC),
                  getX(batch, ${nl} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${ul}
        ${cl}
        setOutput(result);
      }
    `}},Conv3DProgram$1=class{constructor(aa){this.variableNames=["x","W"],this.outputShape=aa.outShape;const xa=aa.padInfo.front,ba=aa.padInfo.top,Sa=aa.padInfo.left,Ta=aa.strideDepth,wa=aa.strideHeight,Ea=aa.strideWidth,ka=aa.dilationDepth,Aa=aa.dilationHeight,Fa=aa.dilationWidth,La=aa.filterDepth,el=aa.filterHeight,tl=aa.filterWidth,nl=Math.floor(aa.inChannels/4)*4,rl=aa.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${Ta}, ${wa}, ${Ea});
      const ivec3 pads = ivec3(${xa}, ${ba}, ${Sa});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${La}; wF++) {
          int xF = xFCorner + wF * ${ka};

          if (xF < 0 || xF >= ${aa.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${el}; wR++) {
            int xR = xRCorner + wR * ${Aa};

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${tl}; wC++) {
              int xC = xCCorner + wC * ${Fa};

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${nl}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${rl===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${nl}) *
                  getW(wF, wR, wC, ${nl}, d2);
              } else if (${rl===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${nl}),
                  getX(batch, xF, xR, xC, ${nl} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${nl}, d2),
                  getW(wF, wR, wC, ${nl} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${rl===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${nl}),
                  getX(batch, xF, xR, xC, ${nl} + 1),
                  getX(batch, xF, xR, xC, ${nl} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${nl}, d2),
                  getW(wF, wR, wC, ${nl} + 1, d2),
                  getW(wF, wR, wC, ${nl} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Conv2DPackedProgram$1=class{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=aa.outShape,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const wa=aa.padInfo.left,Ea=aa.strideWidth,ka=aa.dilationWidth,Aa=aa.filterHeight,Fa=aa.filterWidth,La=Fa;let el=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let sl=0;sl<Fa;sl++)el+=`
           vec4 xTexelC${sl*2};
           int xTexelC${sl*2}Ready;
           vec4 xTexelC${sl*2+1};
           int xTexelC${sl*2+1}Ready;
           vec4 xC${sl};`;el+=`
     for (int r = 0; r < ${Aa}; r++) {
      for (int d1 = 0; d1 < ${aa.inChannels}; d1 += 2) {
       `;for(let sl=0;sl<Fa;sl++)el+=`
           xTexelC${sl*2} = vec4(0.0);
           xTexelC${sl*2}Ready = 0;
           xTexelC${sl*2+1} = vec4(0.0);
           xTexelC${sl*2+1}Ready = 0;
           xC${sl} = vec4(0.0);`;el+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let sl=0;sl<(La+1)/2;sl++){const ol=sl*2;if(el+=`
           xC = xCCorner + ${ol*ka};
           `,Ea===1){if(ol<Fa&&(wa%2===1?(el+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }
               `,ka===1&&ol>0?el+=`
                 xC${ol} = vec4(xTexelC${ol-2}.zw, xTexelC${ol}.xy);
                 `:el+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${ol} = vec4(previous.zw, xTexelC${ol}.xy);
                   } else {
                     xC${ol} = vec4(0.0, 0.0, xTexelC${ol}.xy);
                   }
                   `):el+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }

                 xC${ol} = xTexelC${ol};
                 `,ol+1<Fa)){const al=wa%2===0?nearestLargerEven$1(ka):ka;ka%2===0&&wa%2===1||ka%2!==0&&wa%2!==1?(el+=`
                   xCOffset = xC + imod(pads[1], 2) + ${al};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol+1}Ready == 0) {
                     xTexelC${ol+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${ol+1}.zw = vec2(0.0);
                     }
                     xTexelC${ol+1}Ready = 1;
                   }
                   `,ka>1?el+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${ol+1} = vec4(previous.zw, xTexelC${ol+1}.xy);
                     } else {
                      xC${ol+1} = vec4(0.0, 0.0, xTexelC${ol+1}.xy);
                     }
                     `:el+=`
                     xC${ol+1} = vec4(xTexelC${ol}.zw, xTexelC${ol+1}.xy);
                     `):al===1?el+=`
                     xC${ol+1} = xTexelC${ol};
                     `:el+=`
                     xCOffset = xC + ${al};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol+1}Ready == 0) {
                       xTexelC${ol+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${ol+1}.zw = vec2(0.0);
                       }
                       xTexelC${ol+1}Ready = 1;
                     }

                     xC${ol+1} = xTexelC${ol+1};
                     `}}else ol<Fa&&(wa%2===1?(el+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${ol+1}Ready == 0) {
                   xTexelC${ol+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${ol+1}.zw = vec2(0.0);
                   }
                   xTexelC${ol+1}Ready = 1;
                 }

                 xC${ol} = vec4(xTexelC${ol}.zw, xTexelC${ol+1}.zw);
               `,ol+1<Fa&&(el+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${ol+1} = vec4(xTexelC${ol+1}.xy, final.xy);
                 `)):(el+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol+1}Ready == 0) {
                   xTexelC${ol+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${ol+1}.zw = vec2(0.);
                   }
                   xTexelC${ol+1}Ready = 1;
                 }

                 xC${ol} = vec4(
                   xTexelC${ol}.xy, xTexelC${ol+1}.xy);
               `,ol+1<Fa&&(el+=`
                   xC${ol+1} = vec4(xTexelC${ol}.zw, xTexelC${ol+1}.zw);
                 `)));ol<Fa&&(el+=`
             wTexel = getW(r, ${ol}, d1, d2);
             dotProd += xC${ol}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${aa.inChannels}) {
               dotProd += xC${ol}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,ol+1<Fa&&(el+=`
               wTexel = getW(r, ${ol+1}, d1, d2);
               dotProd += xC${ol+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${aa.inChannels}) {
                 dotProd += xC${ol+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}el+=`
     }
   `,el+=`
     }
   `,el+=`
     }
   `;let tl="",nl="";ba&&(Sa?tl=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${ba}
         }`:Ta?tl=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${ba}
         }`:tl=`vec4 activation(vec4 x) {
           ${ba}
         }`,nl="result = activation(result);");const rl=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${tl}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${el}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${rl}
         ${nl}
         setOutput(result);
       }
     `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Im2ColPackedProgram$1=class{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const{dataFormat:ba}=xa,Sa=getGlslDifferences$1(),Ta=ba==="channelsLast",wa=Ta?1:2,Ea=Ta?2:3,ka=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${aa[2]} && pos < ${aa[1]}) {`;let Aa="";for(let Fa=0;Fa<=1;Fa++)for(let La=0;La<=1;La++)Aa+=`
          blockIndex = rc.z + ${La};
          pos = rc.y + ${Fa};

          ${ka}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${wa}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${Ea}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${Ta}) {
                  innerDims = vec2(d1, ch);
                  result[${Fa*2+La}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${Fa*2+La}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${Aa}

        ${Sa.output} = result;
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getShapeForBatchMatMul$1(ha,aa){const xa=ha.length;return xa>=3?aa?[...ha.slice(0,-3),ha[xa-3]*ha[xa-2],ha[xa-1]]:[...ha.slice(0,-3),ha[xa-3],ha[xa-2]*ha[xa-1]]:!aa&&xa===1&&ha[0]>1?[ha[0],1]:null}function conv2dByMatMul$1({x:ha,filter:aa,convInfo:xa,backend:ba,bias:Sa=null,preluActivationWeights:Ta=null,leakyreluAlpha:wa=0,activation:Ea=null}){const ka=ha.shape,Aa=ba.texData.get(ha.dataId),Fa=xa.inChannels,La=ka[0]*ka[1]*ka[2],el=xa.outChannels,tl=xa.dataFormat==="channelsLast",nl=!1,rl=!1;let sl;const ol=[];if(Ta!=null){const il=getShapeForBatchMatMul$1(Ta.shape,tl);il!=null&&(Ta=reshape$2({inputs:{x:Ta},backend:ba,attrs:{shape:il}}),ol.push(Ta))}if(Sa!=null){const il=getShapeForBatchMatMul$1(Sa.shape,tl);il!=null&&(Sa=reshape$2({inputs:{x:Sa},backend:ba,attrs:{shape:il}}),ol.push(Sa))}if(!((La===1||el===1)&&Fa>MATMUL_SHARED_DIM_THRESHOLD$1)&&Aa.isPacked&&tl&&Aa.texture!=null&&ka[2]%2!==0&&arraysEqual$1(Aa.shape.slice(-3),ka.slice(-3))){const il=ka[0]*ka[1]*(ka[2]+1),cl={dataId:ha.dataId,shape:[1,il,xa.inChannels],dtype:ha.dtype},ul=Aa.shape;Aa.shape=Aa.shape.slice(),Aa.shape[Aa.shape.length-2]++,assert$2(isReshapeFree$1(Aa.shape,cl.shape),()=>`packed reshape ${Aa.shape} to ${cl.shape} isn't free`);const dl=reshape$2({inputs:{x:aa},backend:ba,attrs:{shape:[1,xa.inChannels,xa.outChannels]}});ol.push(dl);const hl=batchMatMulImpl$1({a:cl,b:dl,backend:ba,transposeA:nl,transposeB:rl,bias:Sa,activation:Ea,preluActivationWeights:Ta,leakyreluAlpha:wa}),pl=ba.texData.get(hl.dataId);assert$2(pl.isPacked,()=>"batchMatMul result is expected to be packed"),Aa.shape=ul,pl.shape=xa.outShape,sl=identity$1({inputs:{x:hl},backend:ba}),sl.shape=xa.outShape,ol.push(hl)}else{const il=xa.outHeight*xa.outWidth,cl=reshape$2({inputs:{x:ha},backend:ba,attrs:{shape:tl?[xa.batchSize,il,xa.inChannels]:[xa.batchSize,xa.inChannels,il]}}),ul=reshape$2({inputs:{x:aa},backend:ba,attrs:{shape:[1,xa.inChannels,xa.outChannels]}}),dl=batchMatMulImpl$1({a:tl?cl:ul,b:tl?ul:cl,transposeA:!tl,transposeB:rl,backend:ba,bias:Sa,activation:Ea,preluActivationWeights:Ta,leakyreluAlpha:wa});sl=reshape$2({inputs:{x:dl},backend:ba,attrs:{shape:xa.outShape}}),ol.push(cl),ol.push(ul),ol.push(dl)}for(const il of ol)ba.disposeIntermediateTensorInfo(il);return sl}function conv2dWithIm2Row$1({x:ha,filter:aa,convInfo:xa,backend:ba,bias:Sa=null,preluActivationWeights:Ta=null,leakyreluAlpha:wa=0,activation:Ea=null}){const{filterWidth:ka,filterHeight:Aa,inChannels:Fa,outWidth:La,outHeight:el,dataFormat:tl}=xa,nl=tl==="channelsLast",rl=ka*Aa*Fa,sl=el*La,ol=[xa.batchSize,rl,sl],al=!0,ll=!1,il=[];if(Ta!=null){const Cl=getShapeForBatchMatMul$1(Ta.shape,nl);Cl!=null&&(Ta=reshape$2({inputs:{x:Ta},backend:ba,attrs:{shape:Cl}}),il.push(Ta))}if(Sa!=null){const Cl=getShapeForBatchMatMul$1(Sa.shape,nl);Cl!=null&&(Sa=reshape$2({inputs:{x:Sa},backend:ba,attrs:{shape:Cl}}),il.push(Sa))}const cl=reshape$2({inputs:{x:aa},backend:ba,attrs:{shape:[1,rl,sizeFromShape$1(aa.shape)/rl]}});il.push(cl);const ul=new Im2ColPackedProgram$1(ol,xa),dl=[ha.shape,[xa.padInfo.top,xa.padInfo.left],[xa.strideHeight,xa.strideWidth],[xa.dilationHeight,xa.dilationWidth],[xa.inChannels],[xa.filterWidth*xa.inChannels],[xa.outWidth]],hl=ba.runWebGLProgram(ul,[ha],"float32",dl),pl=reshape$2({inputs:{x:hl},backend:ba,attrs:{shape:ol}});il.push(hl),il.push(pl);const fl=Sa!=null,ml=Ta!=null,gl=Ea==="leakyrelu",$l=Ea?mapActivationToShaderProgram$1(Ea,!0):null,xl=new MatMulPackedProgram$1(nl?pl.shape:cl.shape,nl?cl.shape:pl.shape,nl?[xa.batchSize,sl,xa.outChannels]:[xa.batchSize,xa.outChannels,sl],al,ll,fl,$l,ml,gl),yl=nl?[pl,cl]:[cl,pl];if(Sa&&yl.push(Sa),ml&&yl.push(Ta),gl){const Cl=ba.makeTensorInfo([],"float32",createScalarValue$1(wa,"float32"));yl.push(Cl),il.push(Cl)}const bl=ba.runWebGLProgram(xl,yl,"float32"),Sl=reshape$2({inputs:{x:bl},backend:ba,attrs:{shape:xa.outShape}});il.push(bl);for(const Cl of il)ba.disposeIntermediateTensorInfo(Cl);return Sl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dataFormat:ka,dilations:Aa,dimRoundingMode:Fa}=ba,La=convertConv2DDataFormat$1(ka),el=computeConv2DInfo$1(Sa.shape,Ta.shape,wa,Aa,Ea,Fa,!1,La);let tl;if(el.filterHeight===1&&el.filterWidth===1&&el.dilationHeight===1&&el.dilationWidth===1&&el.strideHeight===1&&el.strideWidth===1&&(el.padInfo.type==="SAME"||el.padInfo.type==="VALID"))tl=conv2dByMatMul$1({x:Sa,filter:Ta,convInfo:el,backend:xa});else if(el.strideWidth<=2&&La==="channelsLast"&&env$1().getBool("WEBGL_EXP_CONV")){const rl=new Conv2DPackedProgram$1(el),sl=[[el.padInfo.top,el.padInfo.left],[el.strideHeight,el.strideWidth],[el.dilationHeight,el.dilationWidth],[el.inHeight,el.inWidth]];tl=xa.runWebGLProgram(rl,[Sa,Ta],"float32",sl)}else if(env$1().getBool("WEBGL_CONV_IM2COL"))tl=conv2dWithIm2Row$1({x:Sa,filter:Ta,convInfo:el,backend:xa});else{const rl=new Conv2DProgram$1(el);tl=xa.runWebGLProgram(rl,[Sa,Ta],"float32")}const nl=reshape$2({inputs:{x:tl},backend:xa,attrs:{shape:el.outShape}});return xa.disposeIntermediateTensorInfo(tl),nl}const conv2DConfig$1={kernelName:Conv2D$2,backendName:"webgl",kernelFunc:conv2d$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Conv2DDerFilterProgram$1=class{constructor(aa){this.variableNames=["x","dy"],this.outputShape=aa.filterShape;const xa=aa.strideHeight,ba=aa.strideWidth,Sa=aa.padInfo.top,Ta=aa.padInfo.left,wa=aa.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${aa.batchSize}; b++) {
          for (int yR = 0; yR < ${aa.outHeight}; yR++) {
            int xR = wR + yR * ${xa} - ${Sa};

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${aa.outWidth}; yC++) {
              int xC = wC + yC * ${ba} - ${Ta};

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              ${wa?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Conv2DDerInputProgram$1=class{constructor(aa){this.variableNames=["dy","W"],this.outputShape=aa.inShape;const xa=aa.filterHeight,ba=aa.filterWidth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=aa.dataFormat==="channelsLast",Ea=xa-1-aa.padInfo.top,ka=ba-1-aa.padInfo.left,Aa=wa?1:2,Fa=wa?2:3,La=wa?3:1;this.userCode=`
      const ivec2 pads = ivec2(${Ea}, ${ka});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${La}];

        ivec2 dyCorner = ivec2(coords[${Aa}], coords[${Fa}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${xa}; wR++) {
          float dyR = float(dyRCorner + wR) / ${Sa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${xa} - 1 - wR;

          for (int wC = 0; wC < ${ba}; wC++) {
            float dyC = float(dyCCorner + wC) / ${Ta}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${ba} - 1 - wC;

            for (int d2 = 0; d2 < ${aa.outChannels}; d2++) {

              if (${wa}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Conv3DDerFilterProgram$1=class{constructor(aa){this.variableNames=["x","dy"],this.outputShape=aa.filterShape;const xa=aa.strideDepth,ba=aa.strideHeight,Sa=aa.strideWidth,Ta=aa.padInfo.front,wa=aa.padInfo.top,Ea=aa.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${aa.batchSize}; b++) {
          for (int yF = 0; yF < ${aa.outDepth}; yF++) {
            int xF = wF + yF * ${xa} - ${Ta};

            if (xF < 0 || xF >= ${aa.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${aa.outHeight}; yR++) {
              int xR = wR + yR * ${ba} - ${wa};

              if (xR < 0 || xR >= ${aa.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${aa.outWidth}; yC++) {
                int xC = wC + yC * ${Sa} - ${Ea};

                if (xC < 0 || xC >= ${aa.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Conv3DDerInputProgram$1=class{constructor(aa){this.variableNames=["dy","W"],this.outputShape=aa.inShape;const xa=aa.filterDepth,ba=aa.filterHeight,Sa=aa.filterWidth,Ta=aa.strideDepth,wa=aa.strideHeight,Ea=aa.strideWidth,ka=xa-1-aa.padInfo.front,Aa=ba-1-aa.padInfo.top,Fa=Sa-1-aa.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${ka}, ${Aa}, ${Fa});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${xa}; wF++) {
          float dyF = float(dyFCorner + wF) / ${Ta}.0;

          if (dyF < 0.0 || dyF >= ${aa.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${xa} - 1 - wF;

          for (int wR = 0; wR < ${ba}; wR++) {
            float dyR = float(dyRCorner + wR) / ${wa}.0;

            if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${ba} - 1 - wR;

            for (int wC = 0; wC < ${Sa}; wC++) {
              float dyC = float(dyCCorner + wC) / ${Ea}.0;

              if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${Sa} - 1 - wC;

              for (int d2 = 0; d2 < ${aa.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,pad:Ea,dataFormat:ka,dimRoundingMode:Aa,filterShape:Fa}=ba,La=convertConv2DDataFormat$1(ka),el=computeConv2DInfo$1(Sa.shape,Fa,wa,1,Ea,Aa,!1,La),tl=new Conv2DDerFilterProgram$1(el);return xa.runWebGLProgram(tl,[Sa,Ta],"float32")}const conv2DBackpropFilterConfig$1={kernelName:Conv2DBackpropFilter$1,backendName:"webgl",kernelFunc:conv2DBackpropFilter$1};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Conv2DDerInputPackedProgram$1=class{constructor(aa){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=aa.inShape,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const xa=aa.filterHeight,ba=aa.filterWidth,Sa=xa-1-aa.padInfo.top,Ta=ba-1-aa.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${Sa}, ${Ta});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${xa}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${xa} - 1 - wR;

          for (int wC = 0; wC < ${ba}; wC++) {
            int wCPerm = ${ba} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${aa.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${aa.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${aa.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${aa.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${aa.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{inputShape:wa,strides:Ea,pad:ka,dataFormat:Aa,dimRoundingMode:Fa}=ba,La=convertConv2DDataFormat$1(Aa),el=computeConv2DInfo$1(wa,Ta.shape,Ea,1,ka,Fa,!1,La);if(env$1().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&La==="channelsLast"){const tl=[[el.strideHeight,el.strideWidth]],nl=new Conv2DDerInputPackedProgram$1(el);return xa.runWebGLProgram(nl,[Sa,Ta],"float32",tl)}else{const tl=new Conv2DDerInputProgram$1(el);return xa.runWebGLProgram(tl,[Sa,Ta],"float32")}}const conv2DBackpropInputConfig$1={kernelName:Conv2DBackpropInput$1,backendName:"webgl",kernelFunc:conv2DBackpropInput$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka}=ba,Aa=computeConv3DInfo$1(Sa.shape,Ta.shape,wa,ka,Ea),Fa=new Conv3DProgram$1(Aa);return xa.runWebGLProgram(Fa,[Sa,Ta],"float32")}const conv3DConfig$1={kernelName:Conv3D$2,backendName:"webgl",kernelFunc:conv3D$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,pad:Ea,filterShape:ka}=ba,Aa=computeConv3DInfo$1(Sa.shape,ka,wa,1,Ea),Fa=new Conv3DDerFilterProgram$1(Aa);return xa.runWebGLProgram(Fa,[Sa,Ta],"float32")}const conv3DBackpropFilterV2Config$1={kernelName:Conv3DBackpropFilterV2$1,backendName:"webgl",kernelFunc:conv3DBackpropFilterV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{pad:wa,strides:Ea,inputShape:ka}=ba,Aa=computeConv3DInfo$1(ka,Ta.shape,Ea,1,wa),Fa=new Conv3DDerInputProgram$1(Aa);return xa.runWebGLProgram(Fa,[Sa,Ta],"float32")}const conv3DBackpropInputConfig$1={kernelName:Conv3DBackpropInputV2$1,backendName:"webgl",kernelFunc:conv3DBackpropInput$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COS$1=CHECK_NAN_SNIPPET_UNARY$1+`
  return cos(x);
`,COS_PACKED$1=`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED$1}
  return result;
`,cos$1=unaryKernelFunc$1({opSnippet:COS$1,packedOpSnippet:COS_PACKED$1}),cosConfig$1={kernelName:Cos$1,backendName:"webgl",kernelFunc:cos$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COSH$1=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,cosh$1=unaryKernelFunc$1({opSnippet:COSH$1}),coshConfig$1={kernelName:Cosh$1,backendName:"webgl",kernelFunc:cosh$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let CropAndResizeProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[wa,Ea,ka,Aa]=aa,[Fa]=xa,[La,el]=ba;this.outputShape=[Fa,La,el,Aa];const tl=Sa==="bilinear"?1:0,[nl,rl]=[`${Ea-1}.0`,`${ka-1}.0`],[sl,ol,al]=La>1?[`${(Ea-1)/(La-1)}`,"(y2-y1) * height_ratio",`y1*${nl} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${nl}`],[ll,il,cl]=el>1?[`${(ka-1)/(el-1)}`,"(x2-x1) * width_ratio",`x1*${rl} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${rl}`];this.userCode=`
      const float height_ratio = float(${sl});
      const float width_ratio = float(${ll});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${wa}) {
          return;
        }

        float height_scale = ${ol};
        float width_scale = ${il};

        float in_y = ${al};
        if( in_y < 0.0 || in_y > ${nl} ) {
          setOutput(float(${Ta}));
          return;
        }
        float in_x = ${cl};
        if( in_x < 0.0 || in_x > ${rl} ) {
          setOutput(float(${Ta}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${tl} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cropAndResize$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{image:Sa,boxes:Ta,boxInd:wa}=aa,{cropSize:Ea,method:ka,extrapolationValue:Aa}=ba,Fa=new CropAndResizeProgram$1(Sa.shape,Ta.shape,Ea,ka,Aa);return xa.runWebGLProgram(Fa,[Sa,Ta,wa],"float32")},cropAndResizeConfig$1={kernelName:CropAndResize$1,backendName:"webgl",kernelFunc:cropAndResize$1};var CumOpType$1;(function(ha){ha.Prod="*",ha.Sum="+"})(CumOpType$1||(CumOpType$1={}));let CumProgram$1=class{constructor(aa,xa,ba,Sa){this.op=aa,this.outputShape=xa,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const Ta=this.outputShape.length,wa=this.op===CumOpType$1.Prod?"1.0":"0.0",Ea=ba?wa:`getX(${getCoords$2(Ta,"coords",this.op)})`,ka=this.outputShape[this.outputShape.length-1];let Aa="",Fa="";ba?(Aa=Sa?`end != ${ka-1}`:"end != 0",Fa=Sa?"end + 1":"end - 1"):(Aa=Sa?`end + pow2 < ${ka}`:"end >= pow2",Fa=Sa?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${getCoordsDataType$1(Ta)} coords = getOutputCoords();
        int end = ${getFinalCoord$1(Ta,"coords",this.op)};
        float val = ${Ea};
        int pow2 = int(pow(2.0, index));
        if (${Aa}) {
          int idx = ${Fa};
          ${getFinalCoord$1(Ta,"coords",this.op)} = idx;
          val ${this.op}= getX(${getCoords$2(Ta,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function getCoords$2(ha,aa,xa){if(ha===1)return`${aa}`;if(ha===2)return`${aa}.x, ${aa}.y`;if(ha===3)return`${aa}.x, ${aa}.y, ${aa}.z`;if(ha===4)return`${aa}.x, ${aa}.y, ${aa}.z, ${aa}.w`;throw new Error(`Cumulative ${xa} for rank ${ha} is not yet supported`)}function getFinalCoord$1(ha,aa,xa){if(ha===1)return`${aa}`;if(ha===2)return`${aa}.y`;if(ha===3)return`${aa}.z`;if(ha===4)return`${aa}.w`;throw new Error(`Cumulative ${xa} for rank ${ha} is not yet supported`)}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumImpl$1(ha,aa,xa,ba,Sa,Ta){const wa=aa.shape.length,Ea=getAxesPermutation$1([ba],wa);let ka=aa;Ea!=null&&(ka=transpose$1({inputs:{x:aa},backend:xa,attrs:{perm:Ea}}));const Aa=getInnerMostAxes$1(1,wa)[0];if(Aa!==wa-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${aa.shape.length-1} but got axis=${ba}`);const Fa=ka.shape[Aa];let La=identity$1({inputs:{x:ka},backend:xa});for(let el=0;el<=Math.ceil(Math.log2(Fa))-1;el++){const tl=new CumProgram$1(ha,ka.shape,!1,Ta),nl=[[el]],rl=La;La=xa.runWebGLProgram(tl,[La],La.dtype,nl),xa.disposeIntermediateTensorInfo(rl)}if(Sa){const el=new CumProgram$1(ha,ka.shape,Sa,Ta),tl=La;La=xa.runWebGLProgram(el,[La],La.dtype),xa.disposeIntermediateTensorInfo(tl)}if(Ea!=null){const el=getUndoAxesPermutation$1(Ea),tl=transpose$1({inputs:{x:La},backend:xa,attrs:{perm:el}});return xa.disposeIntermediateTensorInfo(La),xa.disposeIntermediateTensorInfo(ka),tl}return La}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,exclusive:wa,reverse:Ea}=ba;return cumImpl$1(CumOpType$1.Prod,Sa,xa,Ta,wa,Ea)}const cumprodConfig$1={kernelName:Cumprod$1,backendName:"webgl",kernelFunc:cumprod$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,exclusive:wa,reverse:Ea}=ba;return cumImpl$1(CumOpType$1.Sum,Sa,xa,Ta,wa,Ea)}const cumsumConfig$1={kernelName:Cumsum$1,backendName:"webgl",kernelFunc:cumsum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,weights:Ta}=aa,{size:wa,binaryOutput:Ea}=ba;if(Sa.shape.length===1){const ka=xa.readSync(Sa.dataId),Aa=xa.readSync(Ta.dataId),Fa=bincountImplCPU$1(ka,Aa,Ta.dtype,Ta.shape,wa);return xa.makeTensorInfo([wa],Ta.dtype,Fa)}else if(Sa.shape.length===2){const ka=xa.bufferSync(Sa),Aa=xa.bufferSync(Ta),Fa=bincountReduceImplCPU$1(ka,Aa,wa,Ea);return xa.makeTensorInfo(Fa.shape,Ta.dtype,Fa.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${Sa.shape.length}.`)}const denseBincountConfig$1={kernelName:DenseBincount$1,backendName:"webgl",kernelFunc:denseBincount$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthToSpaceProgram$1=class{constructor(aa,xa,ba){this.variableNames=["x"],this.outputShape=[],this.outputShape=aa,this.blockSize=xa,this.dataFormat=ba,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${xa};
      int offset_h = imod(h, ${xa});
      int in_w = w / ${xa};
      int offset_w = imod(w, ${xa});
      int offset_d = (offset_h * ${xa} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockSize:Ta,dataFormat:wa}=ba,Ea=Sa.shape[0],ka=wa==="NHWC"?Sa.shape[1]:Sa.shape[2],Aa=wa==="NHWC"?Sa.shape[2]:Sa.shape[3],Fa=wa==="NHWC"?Sa.shape[3]:Sa.shape[1],La=ka*Ta,el=Aa*Ta,tl=Fa/(Ta*Ta),nl=wa==="NHWC"?[Ea,La,el,tl]:[Ea,tl,La,el],rl=new DepthToSpaceProgram$1(nl,Ta,wa);return xa.runWebGLProgram(rl,[Sa],Sa.dtype)}const depthToSpaceConfig$1={kernelName:DepthToSpace$1,backendName:"webgl",kernelFunc:depthToSpace$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthwiseConv2DProgram$1=class{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=aa.outShape,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const wa=aa.filterHeight,Ea=aa.filterWidth,ka=aa.outChannels/aa.inChannels;let Aa="",Fa="";ba&&(Sa?Aa=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${ba}
        }`:Ta?Aa=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${ba}
        }`:Aa=`
          float activation(float x) {
            ${ba}
          }
        `,Fa="result = activation(result);");const La=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${Aa}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${ka};
        int q = d2 - d1 * ${ka};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${wa}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${Ea}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${La}
        ${Fa}
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthwiseConvPacked2DProgram$1=class{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=aa.outShape,this.enableShapeUniforms=useShapeUniforms$1(this.outputShape.length);const wa=aa.outChannels/aa.inChannels,Ea=aa.padInfo.left,ka=aa.strideWidth,Aa=aa.dilationWidth,Fa=aa.filterHeight,La=aa.filterWidth,el=La;let tl=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let ol=0;ol<La;ol++)tl+=`
          vec4 xTexelC${ol*2};
          int xTexelC${ol*2}Ready;
          vec4 xTexelC${ol*2+1};
          int xTexelC${ol*2+1}Ready;
          vec4 xC${ol};`;tl+=`
    for (int r = 0; r < ${Fa}; r++) {
      `;for(let ol=0;ol<La;ol++)tl+=`
          xTexelC${ol*2} = vec4(0.0);
          xTexelC${ol*2}Ready = 0;
          xTexelC${ol*2+1} = vec4(0.0);
          xTexelC${ol*2+1}Ready = 0;
          xC${ol} = vec4(0.0);`;tl+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let ol=0;ol<(el+1)/2;ol++){const al=ol*2;if(tl+=`
          xC = xCCorner + ${al*Aa};
          `,ka===1){if(al<La&&(Ea%2===1?(tl+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }
              `,Aa===1&&al>0?tl+=`
                xC${al} = vec4(xTexelC${al-2}.zw, xTexelC${al}.xy);
                `:tl+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${al} = vec4(previous.zw, xTexelC${al}.xy);
                  } else {
                    xC${al} = vec4(0.0, 0.0, xTexelC${al}.xy);
                  }
                  `):tl+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }

                xC${al} = xTexelC${al};
                `,al+1<La)){const ll=Ea%2===0?nearestLargerEven$1(Aa):Aa;Aa%2===0&&Ea%2===1||Aa%2!==0&&Ea%2!==1?(tl+=`
                  xCOffset = xC + imod(pads[1], 2) + ${ll};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al+1}Ready == 0) {
                    xTexelC${al+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${al+1}.zw = vec2(0.0);
                    }
                    xTexelC${al+1}Ready = 1;
                  }
                  `,Aa>1?tl+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${al+1} = vec4(previous.zw, xTexelC${al+1}.xy);
                    } else {
                     xC${al+1} = vec4(0.0, 0.0, xTexelC${al+1}.xy);
                    }
                    `:tl+=`
                    xC${al+1} = vec4(xTexelC${al}.zw, xTexelC${al+1}.xy);
                    `):ll===1?tl+=`
                    xC${al+1} = xTexelC${al};
                    `:tl+=`
                    xCOffset = xC + ${ll};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al+1}Ready == 0) {
                      xTexelC${al+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${al+1}.zw = vec2(0.0);
                      }
                      xTexelC${al+1}Ready = 1;
                    }

                    xC${al+1} = xTexelC${al+1};
                    `}}else al<La&&(Ea%2===1?(tl+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${al+1}Ready == 0) {
                  xTexelC${al+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${al+1}.zw = vec2(0.0);
                  }
                  xTexelC${al+1}Ready = 1;
                }

                xC${al} = vec4(xTexelC${al}.zw, xTexelC${al+1}.zw);
              `,al+1<La&&(tl+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${al+1} = vec4(xTexelC${al+1}.xy, final.xy);
                `)):(tl+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al+1}Ready == 0) {
                  xTexelC${al+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${al+1}.zw = vec2(0.);
                  }
                  xTexelC${al+1}Ready = 1;
                }

                xC${al} = vec4(
                  xTexelC${al}.xy, xTexelC${al+1}.xy);
              `,al+1<La&&(tl+=`
                  xC${al+1} = vec4(xTexelC${al}.zw, xTexelC${al+1}.zw);
                `)));al<La&&(tl+=`
            wTexel = getW(r, ${al}, d1, q);
            dotProd += xC${al} * vec4(wTexel.xz, wTexel.xz);
          `,al+1<La&&(tl+=`
              wTexel = getW(r, ${al+1}, d1, q);
              dotProd += xC${al+1} * vec4(wTexel.xz, wTexel.xz);
            `))}tl+=`
    }
  `,tl+=`
      }
    `;let nl="",rl="";ba&&(Sa?nl=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${ba}
        }`:Ta?nl=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${ba}
        }`:nl=`vec4 activation(vec4 x) {
          ${ba}
        }`,rl="result = activation(result);");const sl=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${nl}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${wa};
        int q = d2 - d1 * ${wa};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${tl}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${sl}
        ${rl}
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka,dimRoundingMode:Aa}=ba;let Fa=ka;Fa==null&&(Fa=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(wa,Fa),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Fa}'`);const La=computeConv2DInfo$1(Sa.shape,Ta.shape,wa,Fa,Ea,Aa,!0);let el;env$1().getBool("WEBGL_PACK_DEPTHWISECONV")&&La.strideWidth<=2&&La.outChannels/La.inChannels===1?el=new DepthwiseConvPacked2DProgram$1(La):el=new DepthwiseConv2DProgram$1(La);const tl=[[La.padInfo.top,La.padInfo.left],[La.strideHeight,La.strideWidth],[La.dilationHeight,La.dilationWidth],[La.inHeight,La.inWidth]];return xa.runWebGLProgram(el,[Sa,Ta],"float32",tl)}const depthwiseConv2dNativeConfig$1={kernelName:DepthwiseConv2dNative$1,backendName:"webgl",kernelFunc:depthwiseConv2dNative$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DepthwiseConv2DDerFilterProgram$1=class{constructor(aa){this.variableNames=["x","dy"],this.outputShape=aa.filterShape;const xa=aa.strideHeight,ba=aa.strideWidth,Sa=aa.padInfo.top,Ta=aa.padInfo.left,wa=aa.outChannels/aa.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${wa} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${aa.batchSize}; b++) {
          for (int yR = 0; yR < ${aa.outHeight}; yR++) {
            int xR = wR + yR * ${xa} - ${Sa};

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${aa.outWidth}; yC++) {
              int xC = wC + yC * ${ba} - ${Ta};

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},DepthwiseConv2DDerInputProgram$1=class{constructor(aa){this.variableNames=["dy","W"],this.outputShape=aa.inShape;const xa=aa.filterHeight,ba=aa.filterWidth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=xa-1-aa.padInfo.top,Ea=ba-1-aa.padInfo.left,ka=aa.outChannels/aa.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${wa}, ${Ea});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${xa}; wR++) {
          float dyR = float(dyRCorner + wR) / ${Sa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${xa} - 1 - wR;

          for (int wC = 0; wC < ${ba}; wC++) {
            float dyC = float(dyCCorner + wC) / ${Ta}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${ba} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${ka}; dm++) {
              int d2 = d1 * ${ka} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,dilations:Ea,pad:ka,dimRoundingMode:Aa,filterShape:Fa}=ba,La=computeConv2DInfo$1(Sa.shape,Fa,wa,Ea,ka,Aa,!0),el=new DepthwiseConv2DDerFilterProgram$1(La);return xa.runWebGLProgram(el,[Sa,Ta],"float32")}const depthwiseConv2dNativeBackpropFilterConfig$1={kernelName:DepthwiseConv2dNativeBackpropFilter$1,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropFilter$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{strides:wa,dilations:Ea,pad:ka,dimRoundingMode:Aa,inputShape:Fa}=ba,La=computeConv2DInfo$1(Fa,Ta.shape,wa,Ea,ka,Aa,!0),el=new DepthwiseConv2DDerInputProgram$1(La);return xa.runWebGLProgram(el,[Sa,Ta],"float32")}const depthwiseConv2dNativeBackpropInputConfig$1={kernelName:DepthwiseConv2dNativeBackpropInput$1,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropInput$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let DiagProgram$1=class{constructor(aa){this.variableNames=["X"],this.outputShape=[aa,aa],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag$1(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa,Sa=[...ba.shape,...ba.shape],Ta=sizeFromShape$1(ba.shape),wa=reshape$2({inputs:{x:ba},backend:xa,attrs:{shape:[Ta]}}),Ea=new DiagProgram$1(Ta),ka=xa.runWebGLProgram(Ea,[wa],wa.dtype),Aa=reshape$2({inputs:{x:ka},backend:xa,attrs:{shape:Sa}});return xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(ka),Aa}const diagConfig$1={kernelName:Diag$1,backendName:"webgl",kernelFunc:diag$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let Dilation2DProgram$1=class{constructor(aa){this.variableNames=["x","W"],this.outputShape=aa.outShape;const{inHeight:xa,inWidth:ba,padInfo:Sa,strideHeight:Ta,strideWidth:wa,filterHeight:Ea,filterWidth:ka,dilationHeight:Aa,dilationWidth:Fa}=aa,{top:La,left:el}=Sa;this.userCode=`
      const ivec2 strides = ivec2(${Ta}, ${wa});
      const ivec2 pads = ivec2(${La}, ${el});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${Ea}; h++) {
          int hIn = hBeg + h * ${Aa};

          if (hIn >= 0 && hIn < ${xa}) {
            for (int w = 0; w < ${ka}; w++) {
              int wIn = wBeg + w * ${Fa};

              if (wIn >= 0 && wIn < ${ba}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2D$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka}=ba,Aa=computeDilation2DInfo$1(Sa.shape,Ta.shape,wa,Ea,"NHWC",ka);let Fa;const La=new Dilation2DProgram$1(Aa);Fa=xa.runWebGLProgram(La,[Sa,Ta],"float32");const el=reshape$2({inputs:{x:Fa},backend:xa,attrs:{shape:Aa.outShape}});return xa.disposeIntermediateTensorInfo(Fa),el}const dilation2DConfig$1={kernelName:Dilation2D$1,backendName:"webgl",kernelFunc:dilation2D$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{equation:Sa}=ba,Ta=aa,{allDims:wa,summedDims:Ea,idDims:ka}=decodeEinsumEquation$1(Sa,Ta.length);checkEinsumDimSizes$1(wa.length,ka,Ta);const{path:Aa,steps:Fa}=getEinsumComputePath$1(Ea,ka),La=Fa.length;let el=null,tl=wa.length;const nl=[];for(let rl=0;rl<La;++rl){for(const sl of Fa[rl]){const{permutationIndices:ol,expandDims:al}=getEinsumPermutation$1(tl,ka[sl]);let ll;isIdentityPermutation$1(ol)?ll=Ta[sl]:(ll=transpose$1({inputs:{x:Ta[sl]},backend:xa,attrs:{perm:ol}}),nl.push(ll));const il=ll.shape.slice();for(let cl=0;cl<al.length;++cl)il.splice(al[cl],0,1);arraysEqual$1(ll.shape,il)||(ll=reshape$2({inputs:{x:ll},backend:xa,attrs:{shape:il}}),nl.push(ll)),el===null?el=ll:(el=multiply$1({inputs:{a:ll,b:el},backend:xa}),nl.push(el))}rl<La-1&&(Aa[rl]>=0&&(el=sum$3({inputs:{x:el},backend:xa,attrs:{axis:Aa[rl]-(wa.length-tl),keepDims:!1}}),nl.push(el)),tl--)}for(const rl of nl)rl!==el&&xa.disposeIntermediateTensorInfo(rl);return el}const einsumConfig$1={kernelName:Einsum$1,backendName:"webgl",kernelFunc:einsum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU$3="return (x >= 0.0) ? x : (exp(x) - 1.0);",ELU_PACKED$1=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,elu$2=unaryKernelFunc$1({opSnippet:ELU$3,packedOpSnippet:ELU_PACKED$1}),eluConfig$1={kernelName:Elu$2,backendName:"webgl",kernelFunc:elu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU_DER$1="return (b >= 0.0) ? a : a * (b + 1.0);",ELU_DER_PACKED$1=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,eluGrad$1=ha=>{const{inputs:aa,backend:xa}=ha,{dy:ba,y:Sa}=aa,Ta=env$1().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram$1(ELU_DER_PACKED$1,ba.shape,Sa.shape):new BinaryOpProgram$1(ELU_DER$1,ba.shape,Sa.shape);return xa.runWebGLProgram(Ta,[ba,Sa],ba.dtype)},eluGradConfig$1={kernelName:EluGrad$1,backendName:"webgl",kernelFunc:eluGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PACKED_EQUAL$1=`
  return vec4(equal(a, b));
`,EQUAL$1="return float(a == b);",equal$1=binaryKernelFunc$1({opSnippet:EQUAL$1,packedOpSnippet:PACKED_EQUAL$1,dtype:"bool",cpuKernelImpl:equalImplCPU$1}),equalConfig$1={kernelName:Equal$1,backendName:"webgl",kernelFunc:equal$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF$1=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ERF_P$1};
  float a1 = ${ERF_A1$1};
  float a2 = ${ERF_A2$1};
  float a3 = ${ERF_A3$1};
  float a4 = ${ERF_A4$1};
  float a5 = ${ERF_A5$1};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,erf$1=unaryKernelFunc$1({opSnippet:ERF$1}),erfConfig$1={kernelName:Erf$1,backendName:"webgl",kernelFunc:erf$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXP$1=CHECK_NAN_SNIPPET_UNARY$1+`
  return exp(x);
`,EXP_PACKED$1=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,exp$1=unaryKernelFunc$1({opSnippet:EXP$1,packedOpSnippet:EXP_PACKED$1,cpuKernelImpl:expImplCPU$1,dtype:"float32"}),expConfig$1={kernelName:Exp$1,backendName:"webgl",kernelFunc:exp$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims$1(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{dim:Sa}=xa,{input:Ta}=aa,wa=Ta.shape.length,Ea=Ta.shape.slice();let ka=Sa;return Sa<0&&(assert$2(-(wa+1)<=Sa,()=>`Axis must be in the interval [${-(wa+1)}, ${wa}]`),ka=wa+Sa+1),Ea.splice(ka,0,1),reshape$2({inputs:{x:Ta},backend:ba,attrs:{shape:Ea}})}const expandDimsConfig$1={kernelName:ExpandDims$1,backendName:"webgl",kernelFunc:expandDims$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXPM1$1="return exp(x) - 1.0;",expm1$1=unaryKernelFunc$1({opSnippet:EXPM1$1,packedOpSnippet:EXPM1$1,cpuKernelImpl:expm1ImplCPU$1}),expm1Config$1={kernelName:Expm1$1,backendName:"webgl",kernelFunc:expm1$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FFTProgram$1=class{constructor(aa,xa,ba){this.variableNames=["real","imag"];const Sa=xa[1];this.outputShape=xa;const Ta=ba?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,wa=ba?`${Sa}.0`:"1.0";let Ea;if(aa==="real")Ea="return real * expR - imag * expI;";else if(aa==="imag")Ea="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${aa}.`);this.userCode=`
      const float exponentMultiplier = ${Ta};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${Ea}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${Sa});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${Sa}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${wa};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftImpl$1(ha,aa,xa){const ba=xa.texData.get(ha.dataId),Sa=sizeFromShape$1(ha.shape),Ta=ha.shape[ha.shape.length-1],wa=Sa/Ta,Ea=reshape$2({inputs:{x:ha},backend:xa,attrs:{shape:[wa,Ta]}}),ka=Ea.shape,Aa=new FFTProgram$1("real",ka,aa),Fa=new FFTProgram$1("imag",ka,aa),La=[{dataId:ba.complexTensorInfos.real.dataId,dtype:ba.complexTensorInfos.real.dtype,shape:ka},{dataId:ba.complexTensorInfos.imag.dataId,dtype:ba.complexTensorInfos.imag.dtype,shape:ka}],el=xa.runWebGLProgram(Aa,La,"float32"),tl=xa.runWebGLProgram(Fa,La,"float32"),nl=complex$2({inputs:{real:el,imag:tl},backend:xa});xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl);const rl=reshape$2({inputs:{x:nl},backend:xa,attrs:{shape:ha.shape}});return xa.disposeIntermediateTensorInfo(Ea),xa.disposeIntermediateTensorInfo(nl),rl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft$1(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa;return fftImpl$1(ba,!1,xa)}const fftConfig$1={kernelName:FFT$1,backendName:"webgl",kernelFunc:fft$1};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FillProgram$1=class{constructor(aa,xa){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=aa,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$2(ha){const{backend:aa,attrs:xa}=ha,{shape:ba,value:Sa}=xa;let{dtype:Ta}=xa;if(Ta=Ta||inferDtype$1(Sa),Ta==="string"){const wa=getArrayFromDType$1(Ta,sizeFromShape$1(ba));return wa.fill(Sa),aa.makeTensorInfo(ba,Ta,wa)}else{const wa=new FillProgram$1(ba,Sa),Ea=[[Sa]];return aa.runWebGLProgram(wa,[],Ta,Ea)}}const fillConfig$1={kernelName:Fill$1,backendName:"webgl",kernelFunc:fill$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FlipLeftRightProgram$1=class{constructor(aa){this.variableNames=["Image"],this.outputShape=[];const xa=aa[2];this.outputShape=aa,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${xa} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${xa}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig$1={kernelName:FlipLeftRight$1,backendName:"webgl",kernelFunc:({inputs:ha,backend:aa})=>{const{image:xa}=ha,ba=aa,Sa=new FlipLeftRightProgram$1(xa.shape);return ba.runWebGLProgram(Sa,[xa],xa.dtype)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FLOOR$1="return floor(x);",floor$1=unaryKernelFunc$1({opSnippet:FLOOR$1,packedOpSnippet:FLOOR$1,cpuKernelImpl:floorImplCPU$1}),floorConfig$1={kernelName:Floor$1,backendName:"webgl",kernelFunc:floor$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT_DIV$1=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,INT_DIV_PACKED$1=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,floorDiv$2=binaryKernelFunc$1({opSnippet:INT_DIV$1,packedOpSnippet:INT_DIV_PACKED$1,dtype:"int32"}),floorDivConfig$1={kernelName:FloorDiv$1,backendName:"webgl",kernelFunc:floorDiv$2};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FromPixelsProgram$1=class{constructor(aa){this.variableNames=["A"];const xa=getGlslDifferences$1(),[ba,Sa]=aa;this.outputShape=aa,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${Sa}.0, ${ba}.0);

        vec4 values = ${xa.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let FromPixelsPackedProgram$1=class{constructor(aa){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const xa=getGlslDifferences$1(),[ba,Sa]=aa;this.outputShape=aa,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${Sa}.0, ${ba}.0);
            vec4 values = ${xa.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${xa.output} = result;
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fromPixelsConfig$1={kernelName:FromPixels$1,backendName:"webgl",kernelFunc:fromPixels$1};let fromPixels2DContext$1,willReadFrequently$1=env$1().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function fromPixels$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha;let{pixels:Sa}=aa;const{numChannels:Ta}=ba,wa=typeof HTMLVideoElement<"u"&&Sa instanceof HTMLVideoElement,Ea=typeof HTMLImageElement<"u"&&Sa instanceof HTMLImageElement,[ka,Aa]=wa?[Sa.videoWidth,Sa.videoHeight]:[Sa.width,Sa.height],Fa=[Aa,ka],La=[Aa,ka,Ta];if(Ea||wa){const rl=env$1().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(fromPixels2DContext$1==null||rl!==willReadFrequently$1)&&(willReadFrequently$1=rl,fromPixels2DContext$1=document.createElement("canvas").getContext("2d",{willReadFrequently:willReadFrequently$1})),fromPixels2DContext$1.canvas.width=ka,fromPixels2DContext$1.canvas.height=Aa,fromPixels2DContext$1.drawImage(Sa,0,0,ka,Aa),Sa=fromPixels2DContext$1.canvas}const el=xa.makeTensorInfo(Fa,"int32");xa.texData.get(el.dataId).usage=TextureUsage$1.PIXELS,xa.gpgpu.uploadPixelDataToTexture(xa.getTexture(el.dataId),Sa);const tl=env$1().getBool("WEBGL_PACK")?new FromPixelsPackedProgram$1(La):new FromPixelsProgram$1(La),nl=xa.runWebGLProgram(tl,[el],"int32");return xa.disposeData(el.dataId),nl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta,bias:wa,preluActivationWeights:Ea}=aa,{strides:ka,pad:Aa,dataFormat:Fa,dilations:La,dimRoundingMode:el,activation:tl,leakyreluAlpha:nl}=ba,rl=convertConv2DDataFormat$1(Fa),sl=computeConv2DInfo$1(Sa.shape,Ta.shape,ka,La,Aa,el,!1,rl);let ol;const al=[],ll=wa!=null,il=Ea!=null,cl=tl==="leakyrelu",ul=()=>{const hl=[Sa,Ta],pl=(fl,ml)=>{if(ml==="NCHW"&&fl.shape.length===1&&fl.shape[0]!==1){const gl=reshape$2({inputs:{x:fl},backend:xa,attrs:{shape:[fl.shape[0],1,1]}});return al.push(gl),gl}return fl};if(ll&&hl.push(pl(wa,Fa)),il&&hl.push(pl(Ea,Fa)),cl){const fl=xa.makeTensorInfo([],"float32",createScalarValue$1(nl,"float32"));hl.push(fl),al.push(fl)}return hl};if(sl.filterHeight===1&&sl.filterWidth===1&&sl.dilationHeight===1&&sl.dilationWidth===1&&sl.strideHeight===1&&sl.strideWidth===1&&(sl.padInfo.type==="SAME"||sl.padInfo.type==="VALID"))ol=conv2dByMatMul$1({x:Sa,filter:Ta,convInfo:sl,backend:xa,bias:wa,activation:tl,preluActivationWeights:Ea,leakyreluAlpha:nl});else if(sl.strideWidth<=2&&rl==="channelsLast"&&env$1().getBool("WEBGL_EXP_CONV")){const hl=tl?mapActivationToShaderProgram$1(tl,!0):null,pl=new Conv2DPackedProgram$1(sl,ll,hl,il,cl),fl=[[sl.padInfo.top,sl.padInfo.left],[sl.strideHeight,sl.strideWidth],[sl.dilationHeight,sl.dilationWidth],[sl.inHeight,sl.inWidth]],ml=ul();ol=xa.runWebGLProgram(pl,ml,"float32",fl)}else if(env$1().getBool("WEBGL_CONV_IM2COL"))ol=conv2dWithIm2Row$1({x:Sa,filter:Ta,convInfo:sl,backend:xa,bias:wa,activation:tl,preluActivationWeights:Ea,leakyreluAlpha:nl});else{const hl=tl?mapActivationToShaderProgram$1(tl,!1):null,pl=new Conv2DProgram$1(sl,ll,hl,il,cl),fl=ul();ol=xa.runWebGLProgram(pl,fl,"float32")}const dl=reshape$2({inputs:{x:ol},backend:xa,attrs:{shape:sl.outShape}});return al.push(ol),al.forEach(hl=>xa.disposeIntermediateTensorInfo(hl)),dl}const fusedConv2DConfig$1={kernelName:FusedConv2D$1,backendName:"webgl",kernelFunc:fusedConv2d$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta,bias:wa,preluActivationWeights:Ea}=aa,{strides:ka,pad:Aa,dilations:Fa,dimRoundingMode:La,activation:el,leakyreluAlpha:tl}=ba,nl=[];let rl=Fa;rl==null&&(rl=[1,1]),assert$2(eitherStridesOrDilationsAreOne$1(ka,rl),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${ka} and dilations '${rl}'`);const sl=computeConv2DInfo$1(Sa.shape,Ta.shape,ka,rl,Aa,La,!0),ol=env$1().getBool("WEBGL_PACK_DEPTHWISECONV")&&sl.strideWidth<=2&&sl.outChannels/sl.inChannels===1,al=el?mapActivationToShaderProgram$1(el,ol):null,ll=[Sa,Ta],il=wa!=null,cl=Ea!=null,ul=el==="leakyrelu";if(il&&ll.push(wa),cl&&ll.push(Ea),ul){const fl=xa.makeTensorInfo([],"float32",createScalarValue$1(tl,"float32"));ll.push(fl),nl.push(fl)}let dl;ol?dl=new DepthwiseConvPacked2DProgram$1(sl,il,al,cl,ul):dl=new DepthwiseConv2DProgram$1(sl,il,al,cl,ul);const hl=[[sl.padInfo.top,sl.padInfo.left],[sl.strideHeight,sl.strideWidth],[sl.dilationHeight,sl.dilationWidth],[sl.inHeight,sl.inWidth]],pl=xa.runWebGLProgram(dl,ll,"float32",hl);return nl.forEach(fl=>xa.disposeIntermediateTensorInfo(fl)),pl}const fusedDepthwiseConv2DConfig$1={kernelName:FusedDepthwiseConv2D$1,backendName:"webgl",kernelFunc:fusedDepthwiseConv2D$1};let GatherNDProgram$1=class{constructor(aa,xa,ba,Sa){this.sliceDim=aa,this.strides=xa,this.paramsShape=Sa,this.variableNames=["x","indices"],this.outputShape=ba;const Ta=getCoordsDataType$1(ba.length);let wa=`
    int index;`;for(let Ea=0;Ea<this.sliceDim;Ea++)wa+=`
          index = round(getIndices(coords[0], ${Ea}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[Ea]};
          flattenIndex += index * ${this.strides[Ea]};`;this.userCode=`
         void main() {
          ${Ta} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${wa}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd$1(ha){const{inputs:aa,backend:xa}=ha,{params:ba,indices:Sa}=aa,Ta=Sa.shape,wa=Ta[Ta.length-1],Ea=sizeFromShape$1(ba.shape),[ka,Aa,Fa,La]=prepareAndValidate$1(ba,Sa),el=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:[Aa,wa]}}),tl=reshape$2({inputs:{x:ba},backend:xa,attrs:{shape:[sizeFromShape$1(ba.shape)/Fa,Fa]}});if(xa.shouldExecuteOnCPU([ba,Sa])||ba.dtype==="string"){const ol=xa.readSync(Sa.dataId),al=xa.bufferSync(ba),ll=gatherNdImplCPU$1(ol,al,ba.dtype,Aa,wa,Fa,La,ba.shape,Ea);return xa.makeTensorInfo(ka,ba.dtype,ll.values)}const nl=new GatherNDProgram$1(wa,La,[Aa,Fa],ba.shape),rl=xa.runWebGLProgram(nl,[tl,el],tl.dtype),sl=reshape$2({inputs:{x:rl},backend:xa,attrs:{shape:ka}});return xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(rl),sl}const gatherNdConfig$1={kernelName:GatherNd$1,backendName:"webgl",kernelFunc:gatherNd$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let GatherProgram$1=class{constructor(aa,xa){this.variableNames=["A","indices"],this.outputShape=xa,this.rank=xa.length;const ba=getCoordsDataType$1(this.rank),Sa=getSourceCoords$4(aa);this.userCode=`
      void main() {
        ${ba} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${aa[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${Sa}));
      }
    `}};function getSourceCoords$4(ha,aa){const xa=["resRC.x","resRC.y","resRC.z","resRC.w"],ba=[];for(let Sa=0;Sa<ha.length;Sa++)Sa===2?ba.push("index"):ba.push(`${xa[Sa]}`);return ba.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,indices:Ta}=aa,{axis:wa,batchDims:Ea}=ba,ka=parseAxisParam$1(wa,Sa.shape)[0];if(env$1().get("DEBUG")){const al=xa.readSync(Ta.dataId),ll=Sa.shape[ka];for(let il=0;il<al.length;++il){const cl=al[il];assert$2(cl<=ll-1&&cl>=0,()=>`GatherV2: the index value ${cl} is not in [0, ${ll-1}]`)}}const Aa=collectGatherOpShapeInfo$1(Sa,Ta,ka,Ea),Fa=sizeFromShape$1(Ta.shape),La=[],el=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:[Aa.batchSize,Aa.outerSize,Aa.dimSize,Aa.sliceSize]}}),tl=reshape$2({inputs:{x:Ta},backend:xa,attrs:{shape:[Aa.batchSize,Fa/Aa.batchSize]}});La.push(el),La.push(tl);const nl=[Aa.batchSize,Aa.outerSize,Fa/Aa.batchSize,Aa.sliceSize];if(xa.shouldExecuteOnCPU([Sa,Ta])||Sa.dtype==="string"){const al=xa.bufferSync(tl),ll=xa.bufferSync(el),il=gatherV2ImplCPU$1(ll,al,nl);return La.forEach(cl=>xa.disposeIntermediateTensorInfo(cl)),xa.makeTensorInfo(Aa.outputShape,il.dtype,il.values)}const rl=new GatherProgram$1(el.shape,nl),sl=xa.runWebGLProgram(rl,[el,tl],el.dtype);La.push(sl);const ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:Aa.outputShape}});return La.forEach(al=>xa.disposeIntermediateTensorInfo(al)),ol}const gatherV2Config$1={kernelName:GatherV2$1,backendName:"webgl",kernelFunc:gatherV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER$1="return float(a > b);",GREATER_PACKED$1=`
  return vec4(greaterThan(a, b));
`,greater$1=binaryKernelFunc$1({opSnippet:GREATER$1,packedOpSnippet:GREATER_PACKED$1,cpuKernelImpl:greaterImplCPU$1,dtype:"bool"}),greaterConfig$1={kernelName:Greater$1,backendName:"webgl",kernelFunc:greater$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER_EQUAL$1="return float(a >= b);",GREATER_EQUAL_PACKED$1=`
  return vec4(greaterThanEqual(a, b));
`,greaterEqual$1=binaryKernelFunc$1({opSnippet:GREATER_EQUAL$1,packedOpSnippet:GREATER_EQUAL_PACKED$1,dtype:"bool",cpuKernelImpl:greaterEqualImplCPU$1}),greaterEqualConfig$1={kernelName:GreaterEqual$1,backendName:"webgl",kernelFunc:greaterEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft$1(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa;return fftImpl$1(ba,!0,xa)}const ifftConfig$1={kernelName:IFFT$1,backendName:"webgl",kernelFunc:ifft$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_FINITE$1="return float(!isnan(x) && !isinf(x));",isFinite$2=unaryKernelFunc$1({opSnippet:IS_FINITE$1,dtype:"bool"}),isFiniteConfig$1={kernelName:IsFinite$1,backendName:"webgl",kernelFunc:isFinite$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_INF$1="return float(isinf(x));",isInf$1=unaryKernelFunc$1({opSnippet:IS_INF$1,dtype:"bool"}),isInfConfig$1={kernelName:IsInf$1,backendName:"webgl",kernelFunc:isInf$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_NAN$1="return float(isnan(x));",isNaN$2=unaryKernelFunc$1({opSnippet:IS_NAN$1,dtype:"bool"}),isNaNConfig$1={kernelName:IsNan$1,backendName:"webgl",kernelFunc:isNaN$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS$1="return float(a < b);",LESS_PACKED$1=`
  return vec4(lessThan(a, b));
`,less$1=binaryKernelFunc$1({opSnippet:LESS$1,packedOpSnippet:LESS_PACKED$1,cpuKernelImpl:lessImplCPU$1,dtype:"bool"}),lessConfig$1={kernelName:Less$1,backendName:"webgl",kernelFunc:less$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS_EQUAL$1="return float(a <= b);",LESS_EQUAL_PACKED$1=`
  return vec4(lessThanEqual(a, b));
`,lessEqual$1=binaryKernelFunc$1({opSnippet:LESS_EQUAL$1,packedOpSnippet:LESS_EQUAL_PACKED$1,cpuKernelImpl:lessEqualImplCPU$1,dtype:"bool"}),lessEqualConfig$1={kernelName:LessEqual$1,backendName:"webgl",kernelFunc:lessEqual$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace$1(ha){const{backend:aa,attrs:xa}=ha,{start:ba,stop:Sa,num:Ta}=xa,wa=linSpaceImplCPU$1(ba,Sa,Ta);return aa.makeTensorInfo([wa.length],"float32",wa)}const linSpaceConfig$1={kernelName:LinSpace$1,backendName:"webgl",kernelFunc:linSpace$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG$1=CHECK_NAN_SNIPPET_UNARY$1+`
  return x < 0.0 ? 0./0. : log(x);
`,LOG_PACKED$1=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,log$2=unaryKernelFunc$1({opSnippet:LOG$1,packedOpSnippet:LOG_PACKED$1,cpuKernelImpl:logImplCPU$1}),logConfig$1={kernelName:Log$1,backendName:"webgl",kernelFunc:log$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG1P$1=CHECK_NAN_SNIPPET_UNARY$1+`
  return log(1.0 + x);
`,log1p$1=unaryKernelFunc$1({opSnippet:LOG1P$1}),log1pConfig$1={kernelName:Log1p$1,backendName:"webgl",kernelFunc:log1p$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_AND$1="return float(a >= 1.0 && b >= 1.0);",LOGICAL_AND_PACKED$1=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,logicalAnd$1=binaryKernelFunc$1({opSnippet:LOGICAL_AND$1,packedOpSnippet:LOGICAL_AND_PACKED$1,dtype:"bool"}),logicalAndConfig$1={kernelName:LogicalAnd$1,backendName:"webgl",kernelFunc:logicalAnd$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_NOT$1="return float(!(x >= 1.0));",logicalNot$1=unaryKernelFunc$1({opSnippet:LOGICAL_NOT$1}),logicalNotConfig$1={kernelName:LogicalNot$1,backendName:"webgl",kernelFunc:logicalNot$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_OR$1="return float(a >= 1.0 || b >= 1.0);",LOGICAL_OR_PACKED$1=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,logicalOr$1=binaryKernelFunc$1({opSnippet:LOGICAL_OR$1,packedOpSnippet:LOGICAL_OR_PACKED$1,dtype:"bool"}),logicalOrConfig$1={kernelName:LogicalOr$1,backendName:"webgl",kernelFunc:logicalOr$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let LRNProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["x"],this.outputShape=[];const wa=xa,Ea=aa[3]-1;this.outputShape=aa;let ka;const Aa=`float(${ba}) + float(${Sa}) * sum`;Ta===.5?ka=`inversesqrt(${Aa})`:Ta===1?ka=`1.0/(${Aa})`:ka=`exp(log(${Aa}) * float(-${Ta}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${wa}; j <= ${wa}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${Ea}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${ka};
        setOutput(val);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let LRNPackedProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const wa=xa,Ea=aa[3]-1;this.outputShape=aa;let ka;const Aa=`float(${ba}) + float(${Sa}) * sum`;Ta===.5?ka=`inversesqrt(${Aa})`:Ta===1?ka=`1.0/(${Aa})`:ka=`exp(log(${Aa}) * float(-${Ta}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${wa};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${wa}; j <= ${wa}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${Ea}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${ka};
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrn$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{depthRadius:Ta,bias:wa,alpha:Ea,beta:ka}=ba,Aa=env$1().getBool("WEBGL_PACK_NORMALIZATION")?new LRNPackedProgram$1(Sa.shape,Ta,wa,Ea,ka):new LRNProgram$1(Sa.shape,Ta,wa,Ea,ka);return xa.runWebGLProgram(Aa,[Sa],Sa.dtype)},LRNConfig$1={kernelName:LRN$1,backendName:"webgl",kernelFunc:lrn$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let LRNGradProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=aa,this.depth=aa[3],this.depthRadius=xa,this.bias=ba,this.alpha=Sa,this.beta=Ta,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${xa})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${xa} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${Sa}) * norm + float(${ba});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${Sa})
                * float(${Ta})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${Ta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGrad$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,y:Ta,dy:wa}=aa,{depthRadius:Ea,bias:ka,alpha:Aa,beta:Fa}=ba,La=new LRNGradProgram$1(Sa.shape,Ea,ka,Aa,Fa);return xa.runWebGLProgram(La,[Sa,Ta,wa],Sa.dtype)},LRNGradConfig$1={kernelName:LRNGrad$1,backendName:"webgl",kernelFunc:lrnGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl$2(ha,aa,xa,ba){const Sa=sizeFromShape$1(aa),wa=sizeFromShape$1(ha.shape)/Sa,Ea=reshape$2({inputs:{x:ha},attrs:{shape:[wa,Sa]},backend:ba}),ka=reduce$1(Ea,ha.dtype,"max",ba),Aa=reshape$2({inputs:{x:ka},attrs:{shape:xa},backend:ba});return ba.disposeIntermediateTensorInfo(Ea),ba.disposeIntermediateTensorInfo(ka),Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{reductionIndices:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam$1(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation$1(Aa,Ea),La=Fa!=null,el=xa.shouldExecuteOnCPU([Sa]);let tl=Sa;if(La){if(el){const ll=xa.texData.get(tl.dataId).values,il=new Array(Ea);for(let dl=0;dl<il.length;dl++)il[dl]=Sa.shape[Fa[dl]];const cl=transposeImplCPU$1(ll,Sa.shape,Sa.dtype,Fa,il);tl=xa.makeTensorInfo(il,Sa.dtype);const ul=xa.texData.get(tl.dataId);ul.values=cl}else tl=transposeImpl$2(Sa,Fa,xa);Aa=getInnerMostAxes$1(Aa.length,Ea)}assertAxesAreInnerMostDims$1("max",Aa,Ea);const[nl,rl]=computeOutAndReduceShapes$1(tl.shape,Aa);let sl=nl;wa&&(sl=expandShapeToKeepDim$1(nl,ka));let ol;if(el){const ll=xa.texData.get(tl.dataId).values,il=maxImplCPU$1(ll,sizeFromShape$1(rl),sl,Sa.dtype);ol=xa.makeTensorInfo(sl,Sa.dtype);const cl=xa.texData.get(ol.dataId);cl.values=il}else ol=maxImpl$2(tl,rl,sl,xa);return La&&xa.disposeIntermediateTensorInfo(tl),ol}const maxConfig$1={kernelName:Max$1,backendName:"webgl",kernelFunc:max$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MAXIMUM$1=CHECK_NAN_SNIPPET$2+`
  return max(a, b);
`,MAXIMUM_PACKED$1=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED$1+`
  return result;
`,maximum$2=binaryKernelFunc$1({opSnippet:MAXIMUM$1,packedOpSnippet:MAXIMUM_PACKED$1,cpuKernelImpl:maximumImplCPU$1}),maximumConfig$1={kernelName:Maximum$2,backendName:"webgl",kernelFunc:maximum$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;assertNotComplex$1(Sa,"maxPool");const{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=ba,Aa=1;assert$2(eitherStridesOrDilationsAreOne$1(wa,Aa),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Aa}'`);const Fa=computePool2DInfo$1(Sa.shape,Ta,wa,Aa,Ea,ka);if(Fa.filterWidth===1&&Fa.filterHeight===1&&arraysEqual$1(Fa.inShape,Fa.outShape))return identity$1({inputs:{x:Sa},backend:xa});const La=new Pool2DProgram$1(Fa,"max",!1);return xa.runWebGLProgram(La,[Sa],Sa.dtype)}const maxPoolConfig$1={kernelName:MaxPool$1,backendName:"webgl",kernelFunc:maxPool$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{filterSize:Ta,strides:wa,pad:Ea,dataFormat:ka,dimRoundingMode:Aa}=ba,Fa=[1,1,1],La=computePool3DInfo$1(Sa.shape,Ta,wa,Fa,Ea,Aa,ka),el=new Pool3DProgram$1(La,"max",!1);return xa.runWebGLProgram(el,[Sa],Sa.dtype)}const maxPool3DConfig$1={kernelName:MaxPool3D$1,backendName:"webgl",kernelFunc:maxPool3d$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MaxPool2DBackpropProgram$1=class{constructor(aa){this.variableNames=["dy","maxPos"],this.outputShape=aa.inShape;const xa=aa.strideHeight,ba=aa.strideWidth,Sa=aa.dilationHeight,Ta=aa.effectiveFilterHeight,wa=aa.effectiveFilterWidth,Ea=Ta-1-aa.padInfo.top,ka=wa-1-aa.padInfo.left,Aa=Ta*wa-1;this.userCode=`
      const ivec2 pads = ivec2(${Ea}, ${ka});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${Ta};
          wR += ${Sa}) {
          float dyR = float(dyRCorner + wR) / ${xa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${wa}; wC++) {
            float dyC = float(dyCCorner + wC) / ${ba}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${Aa} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${wa} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},MaxPool3DBackpropProgram$1=class{constructor(aa){this.variableNames=["dy","maxPos"],this.outputShape=aa.inShape;const xa=aa.strideDepth,ba=aa.strideHeight,Sa=aa.strideWidth,Ta=aa.dilationDepth,wa=aa.dilationHeight,Ea=aa.dilationWidth,ka=aa.effectiveFilterDepth,Aa=aa.effectiveFilterHeight,Fa=aa.effectiveFilterWidth,La=ka-1-aa.padInfo.front,el=Aa-1-aa.padInfo.top,tl=Fa-1-aa.padInfo.left,nl=ka*Aa*Fa-1;this.userCode=`
      const ivec3 pads = ivec3(${La}, ${el}, ${tl});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${ka};
           wD += ${Ta}) {
          float dyD = float(dyDCorner + wD) / ${xa}.0;

          if (dyD < 0.0 || dyD >= ${aa.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${Aa};
              wR += ${wa}) {
            float dyR = float(dyRCorner + wR) / ${ba}.0;

            if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${Fa};
                wC += ${Ea}) {
              float dyC = float(dyCCorner + wC) / ${Sa}.0;

              if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${nl} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${Aa} * ${Fa} +
                  wR * ${Fa} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta,{filterSize:Ea,strides:ka,pad:Aa,dimRoundingMode:Fa}=ba,La=[1,1,1],el=computePool3DInfo$1(wa.shape,Ea,ka,La,Aa,Fa),tl=new Pool3DProgram$1(el,"max",!0),nl=xa.runWebGLProgram(tl,[wa],wa.dtype),rl=new MaxPool3DBackpropProgram$1(el),sl=xa.runWebGLProgram(rl,[Sa,nl],wa.dtype);return xa.disposeIntermediateTensorInfo(nl),sl}const maxPool3DGradConfig$1={kernelName:MaxPool3DGrad$1,backendName:"webgl",kernelFunc:maxPool3DGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta,output:wa}=aa,Ea=Ta;assertNotComplex$1([Ta,wa],"maxPoolGrad");const{filterSize:ka,strides:Aa,pad:Fa,dimRoundingMode:La}=ba,el=computePool2DInfo$1(Ea.shape,ka,Aa,1,Fa,La),tl=!0,nl=new Pool2DProgram$1(el,"max",tl),rl=xa.runWebGLProgram(nl,[Ea],Ea.dtype),sl=new MaxPool2DBackpropProgram$1(el),ol=xa.runWebGLProgram(sl,[Sa,rl],Ea.dtype);return xa.disposeIntermediateTensorInfo(rl),ol}const maxPoolGradConfig$1={kernelName:MaxPoolGrad$1,backendName:"webgl",kernelFunc:maxPoolGrad$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl$1(ha,aa,xa,ba){let Sa=new Pool2DProgram$1(xa,"max",!1);const Ta=ba.runWebGLProgram(Sa,[ha],"float32");Sa=new Pool2DProgram$1(xa,"max",!0,!0,aa);const wa=ba.runWebGLProgram(Sa,[ha],"float32");return[Ta,wa]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig$1={kernelName:MaxPoolWithArgmax$1,backendName:"webgl",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{x:ba}=ha,{filterSize:Sa,strides:Ta,pad:wa,includeBatchInIndex:Ea}=aa,ka=xa;assert$2(ba.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${ba.shape.length}.`);const Aa=[1,1];assert$2(eitherStridesOrDilationsAreOne$1(Ta,Aa),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${Ta} and dilations '${Aa}'`);const Fa=computePool2DInfo$1(ba.shape,Sa,Ta,Aa,wa),[La,el]=maxPoolWithArgmaxImpl$1(ba,Ea,Fa,ka);return[La,el]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meanImpl$1(ha,aa,xa,ba){const Sa=sizeFromShape$1(aa),wa=sizeFromShape$1(ha.shape)/Sa,Ea=reshape$2({inputs:{x:ha},attrs:{shape:[wa,Sa]},backend:ba}),ka=reduce$1(Ea,"float32","mean",ba),Aa=reshape$2({inputs:{x:ka},attrs:{shape:xa},backend:ba});return ba.disposeIntermediateTensorInfo(Ea),ba.disposeIntermediateTensorInfo(ka),Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanConfig$1={kernelName:Mean$1,backendName:"webgl",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{x:ba}=ha,{keepDims:Sa,axis:Ta}=aa,wa=xa,Ea=ba.shape.length,ka=parseAxisParam$1(Ta,ba.shape);let Aa=ka;const Fa=getAxesPermutation$1(Aa,Ea),La=Fa!=null,el=wa.shouldExecuteOnCPU([ba]),tl=[];let nl=ba;if(La){if(el){const il=wa.texData.get(nl.dataId).values,cl=new Array(Ea);for(let hl=0;hl<cl.length;hl++)cl[hl]=ba.shape[Fa[hl]];const ul=transposeImplCPU$1(il,ba.shape,ba.dtype,Fa,cl);nl=wa.makeTensorInfo(cl,ba.dtype);const dl=wa.texData.get(nl.dataId);dl.values=ul}else nl=transposeImpl$2(ba,Fa,wa);tl.push(nl),Aa=getInnerMostAxes$1(Aa.length,Ea)}assertAxesAreInnerMostDims$1("sum",Aa,Ea);const[rl,sl]=computeOutAndReduceShapes$1(nl.shape,Aa);let ol=rl;Sa&&(ol=expandShapeToKeepDim$1(rl,ka));const al=meanImpl$1(nl,sl,ol,wa);for(const ll of tl)wa.disposeIntermediateTensorInfo(ll);return al}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam$1(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation$1(Aa,Ea);let La=Sa;Fa!=null&&(La=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),Aa=getInnerMostAxes$1(Aa.length,Sa.shape.length)),assertAxesAreInnerMostDims$1("min",Aa,Ea);const[el,tl]=computeOutAndReduceShapes$1(La.shape,Aa),nl=sizeFromShape$1(tl),rl=reshape$2({inputs:{x:La},backend:xa,attrs:{shape:[-1,nl]}}),sl=reduce$1(rl,rl.dtype,"min",xa);let ol;if(wa){const al=expandShapeToKeepDim$1(el,ka);ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:al}})}else ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),Fa!=null&&xa.disposeIntermediateTensorInfo(La),ol}const minConfig$1={kernelName:Min$1,backendName:"webgl",kernelFunc:min$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MINIMUM$1=CHECK_NAN_SNIPPET$2+`
  return min(a, b);
`,MINIMUM_PACKED$1=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED$1+`
  return result;
`,minimum$1=binaryKernelFunc$1({opSnippet:MINIMUM$1,packedOpSnippet:MINIMUM_PACKED$1,cpuKernelImpl:minimumImplCPU$1}),minimumConfig$1={kernelName:Minimum$2,backendName:"webgl",kernelFunc:minimum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MirrorPadProgram$1=class{constructor(aa,xa,ba){this.variableNames=["x"],this.outputShape=xa.map((Fa,La)=>Fa[0]+aa[La]+Fa[1]);const Sa=aa.length,Ta=getCoordsDataType$1(Sa),wa=xa.map(Fa=>Fa[0]).join(","),Ea=xa.map((Fa,La)=>Fa[0]+aa[La]).join(","),ka=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,Sa),Aa=ba==="reflect"?0:1;if(Sa===1){this.userCode=`
        int start = ${wa};
        int end = ${Ea};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${Aa};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${Aa};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${Ta} start = ${Ta}(${wa});
      ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outC = getOutputCoords();
        for (int i = 0; i < ${Sa}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${Aa};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${Aa};
          }
        }
        ${Ta} coords = outC - start;
        setOutput(getX(${ka}));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MirrorPadPackedProgram$1=class{constructor(aa,xa,ba){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=xa.map((nl,rl)=>nl[0]+aa[rl]+nl[1]);const Sa=aa.length,Ta=getCoordsDataType$1(Sa),wa=xa.map(nl=>nl[0]).join(","),Ea=xa.map((nl,rl)=>nl[0]+aa[rl]).join(","),ka=getChannels$1("rc",Sa),Aa=getChannels$1("source",Sa),Fa=`${ka[Sa-1]} < ${this.outputShape[Sa-1]}`,La=Sa===1?"source":`vec2(${Aa.slice(-2).join()})`,el=ba==="reflect"?0:1;let tl="";if(Sa===1){const nl=`
        ${Ta} source = rc;
        if (source < start) {
          source = start * 2 - source - ${el};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${el};
        }
        source -= start;
      `;tl=`
        ${Ta} rc = outputLoc;
        ${nl}
        result[0] = getChannel(getX(${Aa.join()}), ${La});
        ${ka[Sa-1]} += 1;
        if(${Fa}) {
          ${nl}
          result[1] = getChannel(getX(${Aa.join()}), ${La});
        }
      `}else{const nl=`
        ${Ta} source = rc;
        ${Ta} lt = ${Ta}(lessThan(source, start));
        ${Ta} gte = ${Ta}(greaterThanEqual(source, end));
        ${Ta} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${el}) +
                gte * ((end - 1) * 2 - source + ${el});
        source -= start;
      `;tl=`
        ${Ta} rc = outputLoc;
        ${nl}
        result[0] = getChannel(getX(${Aa.join()}), ${La});
        ${ka[Sa-1]} += 1;
        if(${Fa}) {
          ${nl}
          result[1] = getChannel(getX(${Aa.join()}), ${La});
        }
        rc = outputLoc;
        ${ka[Sa-2]} += 1;
        if(${ka[Sa-2]} < ${this.outputShape[Sa-2]}) {
          ${nl}
          result[2] = getChannel(getX(${Aa.join()}), ${La});
          ${ka[Sa-1]} += 1;
          if(${Fa}) {
            ${nl}
            result[3] = getChannel(getX(${Aa.join()}), ${La});
          }
        }
      `}this.userCode=`
      const ${Ta} start = ${Ta}(${wa});
      const ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${tl}
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadKernelFunc$1=({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba}=ha,{paddings:Sa,mode:Ta}=xa,wa=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new MirrorPadPackedProgram$1(ba.shape,Sa,Ta):new MirrorPadProgram$1(ba.shape,Sa,Ta);return aa.runWebGLProgram(wa,[ba],ba.dtype)},mirrorPadConfig$1={kernelName:MirrorPad$1,backendName:"webgl",kernelFunc:mirrorPadKernelFunc$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MOD$1=`if (b == 0.0) return NAN;
  return mod(a, b);`,MOD_PACKED$1=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+CHECK_NAN_SNIPPET_PACKED$1+`
  return result;
`,mod$1=binaryKernelFunc$1({opSnippet:MOD$1,packedOpSnippet:MOD_PACKED$1}),modConfig$1={kernelName:Mod$1,backendName:"webgl",kernelFunc:mod$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let MultinomialProgram$1=class{constructor(aa,xa,ba){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[aa,ba],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${xa-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${xa-1}));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DIV$1=`
if (a == b) {
  return 1.0;
};
return a / b;`,DIV_PACKED$1=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,realDiv$1=binaryKernelFunc$1({opSnippet:DIV$1,packedOpSnippet:DIV_PACKED$1,checkOutOfBounds:!0}),realDivConfig$1={kernelName:RealDiv$1,backendName:"webgl",kernelFunc:realDiv$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SUB$1="return a - b;",sub$2=binaryKernelFunc$1({opSnippet:SUB$1,packedOpSnippet:SUB$1,supportsComplex:!0,cpuKernelImpl:subImplCPU$1}),subConfig$1={kernelName:Sub$1,backendName:"webgl",kernelFunc:sub$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{logits:Sa}=aa,{dim:Ta}=ba,wa=parseAxisParam$1([Ta],Sa.shape),Ea=max$1({inputs:{x:Sa},backend:xa,attrs:{reductionIndices:wa,keepDims:!1}}),ka=expandShapeToKeepDim$1(Ea.shape,wa),Aa=reshape$2({inputs:{x:Ea},backend:xa,attrs:{shape:ka}}),Fa=sub$2({inputs:{a:Sa,b:Aa},backend:xa}),La=exp$1({inputs:{x:Fa},backend:xa}),el=sum$3({inputs:{x:La},backend:xa,attrs:{axis:wa,keepDims:!1}}),tl=reshape$2({inputs:{x:el},backend:xa,attrs:{shape:ka}}),nl=realDiv$1({inputs:{a:La,b:tl},backend:xa});return xa.disposeIntermediateTensorInfo(Ea),xa.disposeIntermediateTensorInfo(Aa),xa.disposeIntermediateTensorInfo(Fa),xa.disposeIntermediateTensorInfo(La),xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),nl}const softmaxConfig$1={kernelName:Softmax$3,backendName:"webgl",kernelFunc:softmax$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{logits:Sa}=aa,{numSamples:Ta,seed:wa,normalized:Ea}=ba,ka=Ea?Sa:softmax$1({inputs:{logits:Sa},backend:xa,attrs:{dim:Sa.shape.length-1}}),Aa=ka.shape[0],Fa=ka.shape[1],La=new MultinomialProgram$1(Aa,Fa,Ta),el=[[wa]],tl=xa.runWebGLProgram(La,[ka],"int32",el);return Ea||xa.disposeIntermediateTensorInfo(ka),tl}const multinomialConfig$1={kernelName:Multinomial$1,backendName:"webgl",kernelFunc:multinomial$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEG$1=CHECK_NAN_SNIPPET$3+`
  return -x;
`,NEG_PACKED$1=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function neg$1(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(xa.shouldExecuteOnCPU([ba])){const Ta=xa.texData.get(ba.dataId),[wa,Ea]=negImplCPU$1(Ta.values,ba.shape,ba.dtype);return xa.makeTensorInfo(Ea,ba.dtype,wa)}let Sa;return env$1().getBool("WEBGL_PACK_UNARY_OPERATIONS")?Sa=new UnaryOpPackedProgram$1(ba.shape,NEG_PACKED$1):Sa=new UnaryOpProgram$1(ba.shape,NEG$1),xa.runWebGLProgram(Sa,[ba],ba.dtype)}const negConfig$1={kernelName:Neg$1,backendName:"webgl",kernelFunc:neg$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl$2=nonMaxSuppressionV3Impl$4;function nonMaxSuppressionV3$1(ha){warn$1("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka}=ba,Aa=xa.readSync(Sa.dataId),Fa=xa.readSync(Ta.dataId),{selectedIndices:La}=nonMaxSuppressionV3Impl$2(Aa,Fa,wa,Ea,ka);return xa.makeTensorInfo([La.length],"int32",new Int32Array(La))}const nonMaxSuppressionV3Config$1={kernelName:NonMaxSuppressionV3$1,backendName:"webgl",kernelFunc:nonMaxSuppressionV3$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl$2=nonMaxSuppressionV4Impl$4;function nonMaxSuppressionV4$1(ha){warn$1("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka,padToMaxOutputSize:Aa}=ba,Fa=xa.readSync(Sa.dataId),La=xa.readSync(Ta.dataId),{selectedIndices:el,validOutputs:tl}=nonMaxSuppressionV4Impl$2(Fa,La,wa,Ea,ka,Aa);return[xa.makeTensorInfo([el.length],"int32",new Int32Array(el)),xa.makeTensorInfo([],"int32",new Int32Array([tl]))]}const nonMaxSuppressionV4Config$1={kernelName:NonMaxSuppressionV4$1,backendName:"webgl",kernelFunc:nonMaxSuppressionV4$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl$2=nonMaxSuppressionV5Impl$4;function nonMaxSuppressionV5$1(ha){warn$1("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka,softNmsSigma:Aa}=ba,Fa=xa.readSync(Sa.dataId),La=xa.readSync(Ta.dataId),el=wa,tl=Ea,nl=ka,rl=Aa,{selectedIndices:sl,selectedScores:ol}=nonMaxSuppressionV5Impl$2(Fa,La,el,tl,nl,rl);return[xa.makeTensorInfo([sl.length],"int32",new Int32Array(sl)),xa.makeTensorInfo([ol.length],"float32",new Float32Array(ol))]}const nonMaxSuppressionV5Config$1={kernelName:NonMaxSuppressionV5$1,backendName:"webgl",kernelFunc:nonMaxSuppressionV5$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let OneHotProgram$1=class{constructor(aa,xa,ba,Sa){this.variableNames=["indices"],this.outputShape=[aa,xa],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${Sa}), float(${ba}),
                      float(index == coords.y)));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHot$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{indices:Sa}=aa,{dtype:Ta,depth:wa,onValue:Ea,offValue:ka}=ba,Aa=sizeFromShape$1(Sa.shape),Fa=new OneHotProgram$1(Aa,wa,Ea,ka),La=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:[Aa]}}),el=xa.runWebGLProgram(Fa,[La],Ta);xa.disposeIntermediateTensorInfo(La);const tl=[...Sa.shape,wa],nl=reshape$2({inputs:{x:el},backend:xa,attrs:{shape:tl}});return xa.disposeIntermediateTensorInfo(el),nl},oneHotConfig$1={kernelName:OneHot$1,backendName:"webgl",kernelFunc:oneHot$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike$2(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(ba.dtype==="complex64"){const Sa=real$1({inputs:{input:ba},backend:xa}),Ta=zerosLike$2({inputs:{x:Sa},backend:xa}),wa=imag$1({inputs:{input:ba},backend:xa}),Ea=zerosLike$2({inputs:{x:wa},backend:xa}),ka=complex$2({inputs:{real:Ta,imag:Ea},backend:xa});return xa.disposeIntermediateTensorInfo(Sa),xa.disposeIntermediateTensorInfo(Ta),xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(Ea),ka}else return fill$2({attrs:{shape:ba.shape,dtype:ba.dtype,value:ba.dtype==="string"?"":0},backend:xa})}const zerosLikeConfig$1={kernelName:ZerosLike$1,backendName:"webgl",kernelFunc:zerosLike$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike$1(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(ba.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(ba.dtype==="complex64"){const Sa=real$1({inputs:{input:ba},backend:xa}),Ta=onesLike$1({inputs:{x:Sa},backend:xa}),wa=imag$1({inputs:{input:ba},backend:xa}),Ea=zerosLike$2({inputs:{x:wa},backend:xa}),ka=complex$2({inputs:{real:Ta,imag:Ea},backend:xa});return xa.disposeIntermediateTensorInfo(Sa),xa.disposeIntermediateTensorInfo(Ta),xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(Ea),ka}else return fill$2({attrs:{shape:ba.shape,dtype:ba.dtype,value:1},backend:xa})}const onesLikeConfig$1={kernelName:OnesLike$1,backendName:"webgl",kernelFunc:onesLike$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{axis:Sa}=ba;if(aa.length===1)return expandDims$1({inputs:{input:aa[0]},backend:xa,attrs:{dim:Sa}});const Ta=aa[0].shape,wa=aa[0].dtype;aa.forEach(Fa=>{assertShapesMatch$1(Ta,Fa.shape,"All tensors passed to stack must have matching shapes"),assert$2(wa===Fa.dtype,()=>"All tensors passed to stack must have matching dtypes")});const Ea=[],ka=aa.map(Fa=>{const La=expandDims$1({inputs:{input:Fa},backend:xa,attrs:{dim:Sa}});return Ea.push(La),La}),Aa=concat$1({inputs:ka,backend:xa,attrs:{axis:Sa}});return Ea.forEach(Fa=>xa.disposeIntermediateTensorInfo(Fa)),Aa}const packConfig$1={kernelName:Pack$1,backendName:"webgl",kernelFunc:pack$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let PadProgram$1=class{constructor(aa,xa,ba){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=xa.map((Aa,Fa)=>Aa[0]+aa[Fa]+Aa[1]);const Sa=aa.length,Ta=getCoordsDataType$1(Sa),wa=xa.map(Aa=>Aa[0]).join(","),Ea=xa.map((Aa,Fa)=>Aa[0]+aa[Fa]).join(","),ka=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,Sa);if(Sa===1){this.userCode=`
        int start = ${wa};
        int end = ${Ea};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${Ta} start = ${Ta}(${wa});
      ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${Ta} coords = outC - start;
          setOutput(getX(${ka}));
        }
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let PadPackedProgram$1=class{constructor(aa,xa,ba){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=xa.map((rl,sl)=>rl[0]+aa[sl]+rl[1]);const Sa=aa.length,Ta=getCoordsDataType$1(Sa),wa=xa.map(rl=>rl[0]).join(","),Ea=xa.map((rl,sl)=>rl[0]+aa[sl]).join(","),ka=getChannels$1("rc",Sa),Aa=getChannels$1("source",Sa),Fa=`${ka[Sa-1]} < ${this.outputShape[Sa-1]}`,La=Sa===1?"source":`vec2(${Aa.slice(-2).join()})`,el=[`${Ta} rc = outputLoc;`,`${ka[Sa-1]} += 1;
       if(${Fa}) {
      `,Sa===1?"":`}
       rc = outputLoc;
       ${ka[Sa-2]} += 1;
       if(${ka[Sa-2]} < ${this.outputShape[Sa-2]}) {`,Sa===1?"":`  ${ka[Sa-1]} += 1;
         if(${Fa}) {`],tl=Sa===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let nl="";for(let rl=0,sl=Sa===1?2:4;rl<sl;rl++)nl+=`
        ${el[rl]}
        if (${tl}) {
          result[${rl}] = float(value);
        } else {
          ${Ta} source = rc - start;
          result[${rl}] = getChannel(getX(${Aa.join()}), ${La});
        }
      `;nl+=Sa===1?"} ":"}}",this.userCode=`
      const ${Ta} start = ${Ta}(${wa});
      const ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${nl}
        setOutput(result);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{paddings:Ta,constantValue:wa}=ba;if(sizeFromShape$1(Sa.shape)===0){const Aa=Ta.map((Fa,La)=>Fa[0]+Sa.shape[La]+Fa[1]);return fill$2({backend:xa,attrs:{shape:Aa,value:wa,dtype:Sa.dtype}})}const Ea=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PadPackedProgram$1(Sa.shape,Ta,wa):new PadProgram$1(Sa.shape,Ta,wa),ka=[[wa]];return xa.runWebGLProgram(Ea,[Sa],Sa.dtype,ka)},padV2Config$1={kernelName:PadV2$1,backendName:"webgl",kernelFunc:padV2$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const POW$1=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,POW_PACKED$1=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+CHECK_NAN_SNIPPET_PACKED$1+`
  return result;
`,pow$2=binaryKernelFunc$1({opSnippet:POW$1,packedOpSnippet:POW_PACKED$1}),powConfig$1={kernelName:Pow$1,backendName:"webgl",kernelFunc:pow$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=[],Aa=parseAxisParam$1(Ta,Sa.shape);let Fa=Aa;const La=getAxesPermutation$1(Fa,Ea);let el=Sa;La!=null&&(el=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:La}}),Fa=getInnerMostAxes$1(Fa.length,Ea),ka.push(el)),assertAxesAreInnerMostDims$1("prod",Fa,Ea);let tl;if(xa.shouldExecuteOnCPU([el])){const nl=xa.texData.get(el.dataId).values,{outVals:rl,outShape:sl,outDtype:ol}=prodImplCPU$1(el.shape,el.dtype,nl,Fa);tl=xa.makeTensorInfo(sl,ol,rl)}else{const[nl,rl]=computeOutAndReduceShapes$1(el.shape,Fa),sl=sizeFromShape$1(rl),ol=reshape$2({inputs:{x:el},backend:xa,attrs:{shape:[-1,sl]}}),al=sumOutType$1(Sa.dtype),ll=reduce$1(ol,al,"prod",xa);tl=reshape$2({inputs:{x:ll},backend:xa,attrs:{shape:nl}}),ka.push(ol),ka.push(ll)}if(wa){ka.push(tl);const nl=expandShapeToKeepDim$1(tl.shape,Aa);tl=reshape$2({inputs:{x:tl},backend:xa,attrs:{shape:nl}})}return ka.forEach(nl=>xa.disposeIntermediateTensorInfo(nl)),tl}const prodConfig$1={kernelName:Prod$1,backendName:"webgl",kernelFunc:prod$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{paramsNestedSplits:Sa,paramsDenseValues:Ta,indices:wa}=aa,{outputRaggedRank:Ea}=ba,ka=Sa.map(ol=>xa.readSync(ol.dataId)),Aa=Sa.map(ol=>ol.shape),Fa=xa.readSync(Ta.dataId),La=xa.readSync(wa.dataId),[el,tl,nl]=raggedGatherImplCPU$1(ka,Aa,Fa,Ta.shape,Ta.dtype,La,wa.shape,Ea),rl=el.map(ol=>xa.makeTensorInfo([ol.length],"int32",ol)),sl=xa.makeTensorInfo(nl,Ta.dtype,tl);return rl.concat([sl])}const raggedGatherConfig$1={kernelName:RaggedGather$1,backendName:"webgl",kernelFunc:raggedGather$1};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange$1(ha){const{inputs:aa,backend:xa}=ha,{starts:ba,limits:Sa,deltas:Ta}=aa,wa=xa.readSync(ba.dataId),Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),[Aa,Fa]=raggedRangeImplCPU$1(wa,ba.shape,ba.dtype,Ea,Sa.shape,ka,Ta.shape),La=xa.makeTensorInfo([Aa.length],"int32",Aa),el=xa.makeTensorInfo([Fa.length],ba.dtype,Fa);return[La,el]}const raggedRangeConfig$1={kernelName:RaggedRange$1,backendName:"webgl",kernelFunc:raggedRange$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{shape:Sa,values:Ta,defaultValue:wa,rowPartitionTensors:Ea}=aa,{rowPartitionTypes:ka}=ba,Aa=xa.readSync(Sa.dataId),Fa=xa.readSync(Ta.dataId),La=xa.readSync(wa.dataId),el=Ea.map(sl=>xa.readSync(sl.dataId)),tl=Ea.map(sl=>sl.shape),[nl,rl]=raggedTensorToTensorImplCPU$1(Aa,Sa.shape,Fa,Ta.shape,Ta.dtype,La,wa.shape,el,tl,ka);return xa.makeTensorInfo(nl,Ta.dtype,rl)}const raggedTensorToTensorConfig$1={kernelName:RaggedTensorToTensor$1,backendName:"webgl",kernelFunc:raggedTensorToTensor$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const range$1=ha=>{const{backend:aa,attrs:xa}=ha,{start:ba,stop:Sa,step:Ta,dtype:wa}=xa,Ea=rangeImplCPU$1(ba,Sa,Ta,wa);return aa.makeTensorInfo([Ea.length],wa,Ea)},rangeConfig$1={kernelName:Range$1,backendName:"webgl",kernelFunc:range$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RECIPROCAL$1="return 1.0 / x;",reciprocal$1=unaryKernelFunc$1({opSnippet:RECIPROCAL$1}),reciprocalConfig$1={kernelName:Reciprocal$1,backendName:"webgl",kernelFunc:reciprocal$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU$3=CHECK_NAN_SNIPPET$3+`
  return (x < 0.0) ? 0.0 : x;
`,RELU_PACKED$1=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu$2=unaryKernelFunc$1({opSnippet:RELU$3,packedOpSnippet:RELU_PACKED$1}),reluConfig$1={kernelName:Relu$2,backendName:"webgl",kernelFunc:relu$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU6$3=CHECK_NAN_SNIPPET$3+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,RELU6_PACKED$1=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu6$2=unaryKernelFunc$1({opSnippet:RELU6$3,packedOpSnippet:RELU6_PACKED$1}),relu6Config$1={kernelName:Relu6$2,backendName:"webgl",kernelFunc:relu6$2};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeBilinearProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba];let el;Ta?el="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":el="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]});
      const vec2 inputShapeRC = vec2(${Ea}.0, ${ka}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${el};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeBilinearPackedProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba];let el;Ta?el="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":el="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]},
          ${Fa[1]/La[1]});
      const vec3 inputShapeRC = vec3(${Ea}.0, ${ka}.0,
                                     ${ka}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${el};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${Aa-1};
        bool hasNextRow = coords.z < ${ba-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa}=aa,{alignCorners:Ta,halfPixelCenters:wa,size:Ea}=ba,[ka,Aa]=Ea,Fa=env$1().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeBilinearPackedProgram$1(Sa.shape,ka,Aa,Ta,wa):new ResizeBilinearProgram$1(Sa.shape,ka,Aa,Ta,wa);return xa.runWebGLProgram(Fa,[Sa],"float32")}const resizeBilinearConfig$1={kernelName:ResizeBilinear$1,backendName:"webgl",kernelFunc:resizeBilinear$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeBilinearBackpropProgram$1=class{constructor(aa,xa,ba){this.variableNames=["dy"],this.outputShape=[],this.outputShape=xa;const[,Sa,Ta]=xa,[,wa,Ea]=aa,ka=[ba&&wa>1?Sa-1:Sa,ba&&Ea>1?Ta-1:Ta],Aa=[ba&&wa>1?wa-1:wa,ba&&Ea>1?Ea-1:Ea],Fa=ka[0]/Aa[0],La=ka[1]/Aa[1],el=1/Fa,tl=1/La,nl=Math.ceil(el)*2+2,rl=Math.ceil(tl)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${Fa});
        const float widthScale = float(${La});

        const float invHeightScale = float(${el});
        const float invWidthScale = float(${tl});

        const int winHeight = int(${nl});
        const int winWidth = int(${rl});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${wa}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${Ea}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${Sa-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${Ta-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa,dy:Ta}=aa,{alignCorners:wa}=ba,Ea=new ResizeBilinearBackpropProgram$1(Ta.shape,Sa.shape,wa);return xa.runWebGLProgram(Ea,[Ta],Ta.dtype)}const resizeBilinearGradConfig$1={kernelName:ResizeBilinearGrad$1,backendName:"webgl",kernelFunc:resizeBilinearGrad$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeNearestNeighborProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba],el=Sa?"0.5":"0.0";let tl;Ta?tl="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":tl="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]});
      const vec2 inputShapeRC = vec2(${Ea}.0, ${ka}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${tl};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${el})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeNearestNeighborPackedProgram$1=class{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba],el=Sa?"0.5":"0.0";let tl;Ta?tl="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":tl="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]},
          ${Fa[1]/La[1]});
      const vec3 inputShapeRC = vec3(${Ea}.0, ${ka}.0,
                                     ${ka}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${tl};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${el})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${Aa-1};
        bool hasNextRow = coords.z < ${ba-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa}=aa,{alignCorners:Ta,halfPixelCenters:wa,size:Ea}=ba,[ka,Aa]=Ea,Fa=env$1().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeNearestNeighborPackedProgram$1(Sa.shape,ka,Aa,Ta,wa):new ResizeNearestNeighborProgram$1(Sa.shape,ka,Aa,Ta,wa);return xa.runWebGLProgram(Fa,[Sa],Sa.dtype)}const resizeNearestNeighborConfig$1={kernelName:ResizeNearestNeighbor$1,backendName:"webgl",kernelFunc:resizeNearestNeighbor$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ResizeNearestNeigborBackpropProgram$1=class{constructor(aa,xa,ba){this.variableNames=["dy"],this.outputShape=[],this.outputShape=xa;const[,Sa,Ta]=xa,[,wa,Ea]=aa,ka=[ba&&wa>1?Sa-1:Sa,ba&&Ea>1?Ta-1:Ta],Aa=[ba&&wa>1?wa-1:wa,ba&&Ea>1?Ea-1:Ea],Fa=ka[0]/Aa[0],La=ka[1]/Aa[1],el=1/Fa,tl=1/La,nl=Math.ceil(el)*2+2,rl=Math.ceil(tl)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${Fa});
        const float widthScale = float(${La});

        const float invHeightScale = float(${el});
        const float invWidthScale = float(${tl});

        const int winHeight = int(${nl});
        const int winWidth = int(${rl});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${wa}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${Ea}) {
              continue;
            }

            float sourceFracRow =
              float(${ka[0]}) *
                (float(dyR) / float(${Aa[0]}));

            float sourceFracCol =
                float(${ka[1]}) *
                  (float(dyC) / float(${Aa[1]}));

            int sourceNearestRow = int(min(
                float(int(${Sa}) - 1),
                ${ba} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${Ta}) - 1),
                ${ba} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa,dy:Ta}=aa,{alignCorners:wa}=ba,Ea=new ResizeNearestNeigborBackpropProgram$1(Ta.shape,Sa.shape,wa);return xa.runWebGLProgram(Ea,[Ta],Ta.dtype)}const resizeNearestNeighborGradConfig$1={kernelName:ResizeNearestNeighborGrad$1,backendName:"webgl",kernelFunc:resizeNearestNeighborGrad$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ReverseProgram$1=class{constructor(aa,xa){this.variableNames=["x"];const ba=aa.length;if(ba>4)throw new Error(`WebGL backend: Reverse of rank-${ba} tensor is not yet supported`);if(this.outputShape=aa,ba===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${aa[0]} - coord - 1));
        }
      `;return}const Sa=Ea=>xa.indexOf(Ea)!==-1&&aa[Ea]!==1?`${aa[Ea]} - coords[${Ea}] - 1`:`coords[${Ea}]`,Ta=aa.map((Ea,ka)=>Sa(ka)).join(","),wa=getCoordsDataType$1(ba);this.userCode=`
      void main() {
        ${wa} coords = getOutputCoords();
        setOutput(getX(${Ta}));
      }
    `}};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ReversePackedProgram$1=class{constructor(aa,xa){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const ba=aa.length;if(ba>4)throw new Error(`WebGL backend: Reverse of rank-${ba} tensor is not yet supported`);this.outputShape=aa;const Sa=getChannels$1("rc",ba),Ta=`${Sa[ba-1]} + 1 < ${this.outputShape[ba-1]}`,wa=`${Sa[ba-2]} + 1 < ${this.outputShape[ba-2]}`,Ea=getCoordsDataType$1(ba);ba===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${aa[0]} - rc - 1),
            ${aa[0]} - rc - 1);
          if(${Ta}){
              result.g = getChannel(getX(${aa[0]} - (rc  + 1) - 1),
                ${aa[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${Ea} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${ka(Sa.slice())};
          if(${Ta}){
            result.g = ${Aa(Sa.slice())};
          }
          if(${wa}) {
            result.b = ${Fa(Sa.slice())};
            if(${Ta}) {
              result.a = ${La(Sa.slice())};
            }
          }
          setOutput(result);
        }
    `;function ka(nl){return el(nl)}function Aa(nl){return nl[ba-1]="("+nl[ba-1]+" + 1)",el(nl)}function Fa(nl){return nl[ba-2]="("+nl[ba-2]+" + 1)",el(nl)}function La(nl){return nl[ba-1]="("+nl[ba-1]+" + 1)",nl[ba-2]="("+nl[ba-2]+" + 1)",el(nl)}function el(nl){const rl=aa.map((al,ll)=>tl(ll,nl)),sl=rl.join(","),ol=rl.slice(-2).join(",");return`getChannel(getX(${sl}), vec2(${ol}))`}function tl(nl,rl){return xa.indexOf(nl)!==-1&&aa[nl]!==1?`${aa[nl]} - ${rl[nl]} - 1`:`${rl[nl]}`}}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{dims:Ta}=ba,wa=Sa.shape.length,Ea=parseAxisParam$1(Ta,Sa.shape);if(wa===0)return identity$1({inputs:{x:Sa},backend:xa});const ka=env$1().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ReversePackedProgram$1(Sa.shape,Ea):new ReverseProgram$1(Sa.shape,Ea);return xa.runWebGLProgram(ka,[Sa],Sa.dtype)}const reverseConfig$1={kernelName:Reverse$1,backendName:"webgl",kernelFunc:reverse$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let RotateProgram$1=class{constructor(aa,xa){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const ba=aa[1],Sa=aa[2];this.outputShape=aa;let Ta="";typeof xa=="number"?Ta=`float outputValue = ${xa.toFixed(2)};`:Ta=`
        vec3 fill = vec3(${xa.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${Ta}
          if(coordX >= 0 && coordX < ${Sa} && coordY >= 0 && coordY < ${ba}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig$1={kernelName:RotateWithOffset$1,backendName:"webgl",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{image:ba}=ha,{radians:Sa,fillValue:Ta,center:wa}=aa,Ea=xa,ka=new RotateProgram$1(ba.shape,Ta),[Aa,Fa]=getImageCenter$1(wa,ba.shape[1],ba.shape[2]),La=[[Aa,Fa,Math.sin(Sa),Math.cos(Sa)]];return Ea.runWebGLProgram(ka,[ba],ba.dtype,La)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ROUND$1=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,round$2=unaryKernelFunc$1({opSnippet:ROUND$1}),roundConfig$1={kernelName:Round$1,backendName:"webgl",kernelFunc:round$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RSQRT$1="return inversesqrt(x);",rsqrt$1=unaryKernelFunc$1({opSnippet:RSQRT$1,cpuKernelImpl:rsqrtImplCPU$1}),rsqrtConfig$1={kernelName:Rsqrt$1,backendName:"webgl",kernelFunc:rsqrt$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ScatterProgram$1=class{constructor(aa,xa,ba,Sa,Ta,wa,Ea=!0,ka=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=wa;const Aa=getCoordsDataType$1(Ta.length),Fa=getCoordsDataType$1(wa.length);let La="";ba===1?La="i":ba===2&&(La="i, j");const el=`getIndices(${La})`;let tl="";Sa===1?tl="i":Sa===2&&(tl="i, coords[1]");const nl=`getUpdates(${tl})`;let rl="";ka&&(rl="coords[0], coords[1]");const sl=`getDefaultValue(${rl})`,ol=xa>1?"strides[j]":"strides";this.userCode=`
        ${Aa} strides = ${Aa}(${Ta});

        void main() {
          ${Fa} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${aa}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${xa}; j++) {
              int index = round(${el});
              flattenedIndex += index * ${ol};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${nl};
              found = true;
            }
          }
          setOutput(mix(${sl}, sum, float(found)));
        }
      `}};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let ScatterPackedProgram$1=class{constructor(aa,xa,ba,Sa,Ta,wa,Ea=!0,ka=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=wa;const Aa=getCoordsDataType$1(Ta.length),Fa=getCoordsDataType$1(wa.length);let La="";ba===1?La="i":ba===2&&(La="i, j");const el=`getIndices(${La})`;let tl="";Sa===1?tl="i":Sa===2&&(tl="i, coords[1]");const nl=`getUpdates(${tl})`;let rl="";ka&&(rl="coords[0], coords[1]");const sl=`getDefaultValue(${rl})`,ol=xa>1?"strides[j]":"strides",al=xa>1?"strides[j + 1]":"strides";this.userCode=`
        ${Aa} strides = ${Aa}(${Ta});

        void main() {
          ${Fa} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${aa}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${xa}; j+=2) {
              ivec4 index = round(${el});
              flattenedIndex += index.xz * ${ol};
              if (j + 1 < ${xa}) {
                flattenedIndex += index.yw * ${al};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${nl};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${sl}, sum, found));
        }
      `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{indices:Sa,updates:Ta}=aa,{shape:wa}=ba,{sliceRank:Ea,numUpdates:ka,sliceSize:Aa,strides:Fa,outputSize:La}=calculateShapes$1(Ta,Sa,wa),el=[La/Aa,Aa];if(La===0)return xa.makeTensorInfo(wa,Sa.dtype);const tl=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:[ka,Ea]}}),nl=reshape$2({inputs:{x:Ta},backend:xa,attrs:{shape:[ka,Aa]}}),rl=xa.makeTensorInfo([],"float32",new Float32Array([0]));let sl;env$1().getBool("WEBGL_PACK")?sl=new ScatterPackedProgram$1(ka,Ea,tl.shape.length,nl.shape.length,Fa,el):sl=new ScatterProgram$1(ka,Ea,tl.shape.length,nl.shape.length,Fa,el);const ol=xa.runWebGLProgram(sl,[nl,tl,rl],nl.dtype),al=reshape$2({inputs:{x:ol},backend:xa,attrs:{shape:wa}});return xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(ol),xa.disposeIntermediateTensorInfo(rl),al}const scatterNdConfig$1={kernelName:ScatterNd$1,backendName:"webgl",kernelFunc:scatterNd$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SearchSortedProgram$1=class{constructor(aa,xa,ba,Sa){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[aa,ba];const Ta="while (left < right) {",wa=`for (int i = 0; i < ${Math.ceil(Math.log2(xa+1))}; ++i) { if (left >= right) break;`,Ea=env$1().getNumber("WEBGL_VERSION")===2?Ta:wa,ka=Sa==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${Ea}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${ka} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{sortedSequence:Sa,values:Ta}=aa,{side:wa}=ba,Ea=new SearchSortedProgram$1(Sa.shape[0],Sa.shape[1],Ta.shape[1],wa),ka=[[Sa.shape[1]]];return xa.runWebGLProgram(Ea,[Sa,Ta],"int32",ka)}const searchSortedConfig$1={kernelName:SearchSorted$1,backendName:"webgl",kernelFunc:searchSorted$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SelectProgram$1=class{constructor(aa,xa,ba){this.variableNames=["c","a","b"],this.outputShape=xa;let Sa,Ta;if(ba>4)throw Error(`Where for rank ${ba} is not yet supported`);if(ba===1)Ta="resRC",Sa="resRC";else{const Ea=["resRC.x","resRC.y","resRC.z","resRC.w"],ka=[],Aa=[];for(let Fa=0;Fa<xa.length;Fa++)Aa.push(`${Ea[Fa]}`),Fa<aa&&ka.push(`${Ea[Fa]}`);Sa=ka.join(),Ta=Aa.join()}const wa=getCoordsDataType$1(ba);this.userCode=`
      void main() {
        ${wa} resRC = getOutputCoords();
        float cVal = getC(${Sa});
        if (cVal >= 1.0) {
          setOutput(getA(${Ta}));
        } else {
          setOutput(getB(${Ta}));
        }
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select$2(ha){const{inputs:aa,backend:xa}=ha,{condition:ba,t:Sa,e:Ta}=aa,wa=new SelectProgram$1(ba.shape.length,Sa.shape,Sa.shape.length);return xa.runWebGLProgram(wa,[ba,Sa,Ta],upcastType$1(Sa.dtype,Ta.dtype))}const selectConfig$1={kernelName:Select$1,backendName:"webgl",kernelFunc:select$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU$1=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${SELU_SCALEALPHA$1};
  float scale = ${SELU_SCALE$1};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,selu$1=unaryKernelFunc$1({opSnippet:SELU$1}),seluConfig$1={kernelName:Selu$2,backendName:"webgl",kernelFunc:selu$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGMOID$3=CHECK_NAN_SNIPPET_UNARY$1+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,SIGMOID_PACKED$1=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,sigmoid$2=unaryKernelFunc$1({opSnippet:SIGMOID$3,packedOpSnippet:SIGMOID_PACKED$1,cpuKernelImpl:sigmoidImplCPU$1}),sigmoidConfig$1={kernelName:Sigmoid$2,backendName:"webgl",kernelFunc:sigmoid$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGN$1=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,sign$1=unaryKernelFunc$1({opSnippet:SIGN$1}),signConfig$1={kernelName:Sign$1,backendName:"webgl",kernelFunc:sign$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIN$1=CHECK_NAN_SNIPPET_UNARY$1+`
  return sin(x);
`,SIN_PACKED$1=`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED$1}
  return result;
`,sin$1=unaryKernelFunc$1({opSnippet:SIN$1,packedOpSnippet:SIN_PACKED$1}),sinConfig$1={kernelName:Sin$1,backendName:"webgl",kernelFunc:sin$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SINH$1=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,sinh$1=unaryKernelFunc$1({opSnippet:SINH$1}),sinhConfig$1={kernelName:Sinh$1,backendName:"webgl",kernelFunc:sinh$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SOFTPLUS$1=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,softplus$1=unaryKernelFunc$1({opSnippet:SOFTPLUS$1}),softplusConfig$1={kernelName:Softplus$2,backendName:"webgl",kernelFunc:softplus$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchND$1=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockShape:Ta,paddings:wa}=ba;assert$2(Sa.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const Ea=Ta.reduce((ol,al)=>ol*al),ka=[[0,0]];ka.push(...wa);for(let ol=1+Ta.length;ol<Sa.shape.length;++ol)ka.push([0,0]);const Aa=[],Fa=padV2$1({inputs:{x:Sa},backend:xa,attrs:{paddings:ka,constantValue:0}}),La=getReshaped$1(Fa.shape,Ta,Ea,!1),el=getPermuted$1(La.length,Ta.length,!1),tl=getReshapedPermuted$1(Fa.shape,Ta,Ea,!1),nl=reshape$2({inputs:{x:Fa},backend:xa,attrs:{shape:La}}),rl=transpose$1({inputs:{x:nl},backend:xa,attrs:{perm:el}}),sl=reshape$2({inputs:{x:rl},backend:xa,attrs:{shape:tl}});return Aa.push(Fa),Aa.push(nl),Aa.push(rl),Aa.forEach(ol=>xa.disposeIntermediateTensorInfo(ol)),sl},spaceToBatchNDConfig$1={kernelName:SpaceToBatchND$1,backendName:"webgl",kernelFunc:spaceToBatchND$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows$1(ha){const{inputs:aa,backend:xa}=ha,{indices:ba,values:Sa,denseShape:Ta,defaultValue:wa}=aa;if(Ta.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${Ta.shape}`);if(ba.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${ba.shape}`);if(Sa.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${Sa.shape}`);if(wa.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${wa.shape}`);const Ea=xa.readSync(ba.dataId),ka=xa.readSync(Sa.dataId),Aa=xa.readSync(Ta.dataId),Fa=xa.readSync(wa.dataId)[0],[La,el,tl,nl,rl]=sparseFillEmptyRowsImplCPU$1(Ea,ba.shape,ba.dtype,ka,Sa.dtype,Aa,Fa);return[xa.makeTensorInfo(el,ba.dtype,La),xa.makeTensorInfo([el[0]],Sa.dtype,tl),xa.makeTensorInfo([nl.length],"bool",new Uint8Array(nl.map(sl=>Number(sl)))),xa.makeTensorInfo([rl.length],ba.dtype,new Int32Array(rl))]}const sparseFillEmptyRowsConfig$1={kernelName:SparseFillEmptyRows$1,backendName:"webgl",kernelFunc:sparseFillEmptyRows$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape$1(ha){const{inputs:aa,backend:xa}=ha,{inputIndices:ba,inputShape:Sa,newShape:Ta}=aa;if(ba.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${ba.shape}`);if(Sa.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${Ta.shape}`);const wa=Array.from(xa.readSync(Sa.dataId)),Ea=xa.readSync(ba.dataId),ka=Array.from(xa.readSync(Ta.dataId)),[Aa,Fa,La]=sparseReshapeImplCPU$1(Ea,ba.shape,ba.dtype,wa,ka);return[xa.makeTensorInfo(Fa,ba.dtype,Aa),xa.makeTensorInfo([La.length],Ta.dtype,new Int32Array(La))]}const sparseReshapeConfig$1={kernelName:SparseReshape$1,backendName:"webgl",kernelFunc:sparseReshape$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean$1(ha){const{inputs:aa,backend:xa}=ha,{data:ba,indices:Sa,segmentIds:Ta}=aa;if(ba.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${Ta.shape}`);const wa=xa.readSync(ba.dataId),Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),[Aa,Fa]=sparseSegmentReductionImplCPU$1(wa,ba.shape,ba.dtype,Ea,ka,!0);return xa.makeTensorInfo(Fa,ba.dtype,Aa)}const sparseSegmentMeanConfig$1={kernelName:SparseSegmentMean$1,backendName:"webgl",kernelFunc:sparseSegmentMean$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum$1(ha){const{inputs:aa,backend:xa}=ha,{data:ba,indices:Sa,segmentIds:Ta}=aa;if(ba.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${Ta.shape}`);const wa=xa.readSync(ba.dataId),Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),[Aa,Fa]=sparseSegmentReductionImplCPU$1(wa,ba.shape,ba.dtype,Ea,ka);return xa.makeTensorInfo(Fa,ba.dtype,Aa)}const sparseSegmentSumConfig$1={kernelName:SparseSegmentSum$1,backendName:"webgl",kernelFunc:sparseSegmentSum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{sparseIndices:Sa,sparseValues:Ta,defaultValue:wa}=aa,{outputShape:Ea}=ba,{sliceRank:ka,numUpdates:Aa,sliceSize:Fa,strides:La,outputSize:el}=calculateShapes$1(Ta,Sa,Ea),tl=!1;if(Ta.dtype==="string"){const ol=xa.bufferSync(Sa),al=xa.bufferSync(Ta),ll=decodeString$1(xa.readSync(wa.dataId)[0]),il=scatterImplCPU$1(ol,al,Ea,el,Fa,Aa,ka,La,ll,tl);return xa.makeTensorInfo(Ea,il.dtype,il.values)}const nl=new ScatterProgram$1(Aa,ka,Sa.shape.length,Ta.shape.length,La,[el,1],tl),rl=xa.runWebGLProgram(nl,[Ta,Sa,wa],Ta.dtype),sl=reshape$2({inputs:{x:rl},backend:xa,attrs:{shape:Ea}});return xa.disposeIntermediateTensorInfo(rl),sl}const sparseToDenseConfig$1={kernelName:SparseToDense$1,backendName:"webgl",kernelFunc:sparseToDense$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{numOrSizeSplits:Ta,axis:wa}=ba,Ea=parseAxisParam$1(wa,Sa.shape)[0],ka=prepareSplitSize$1(Sa,Ta,Ea),Aa=Sa.shape.length,Fa=new Array(Aa).fill(0),La=Sa.shape.slice();return ka.map(el=>{const tl=[...La];tl[Ea]=el;const nl=slice$1({inputs:{x:Sa},backend:xa,attrs:{begin:Fa,size:tl}});return Fa[Ea]+=el,nl})}const splitVConfig$1={kernelName:SplitV$1,backendName:"webgl",kernelFunc:splitV$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQRT$1="return sqrt(x);",sqrt$2=unaryKernelFunc$1({opSnippet:SQRT$1,packedOpSnippet:SQRT$1,cpuKernelImpl:sqrtImplCPU$1}),sqrtConfig$1={kernelName:Sqrt$1,backendName:"webgl",kernelFunc:sqrt$2};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARE$1="return x * x;",square$2=unaryKernelFunc$1({opSnippet:SQUARE$1}),squareConfig$1={kernelName:Square$1,backendName:"webgl",kernelFunc:square$2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARED_DIFFERENCE$1="return (a - b) * (a - b);",squaredDifference$1=binaryKernelFunc$1({opSnippet:SQUARED_DIFFERENCE$1,packedOpSnippet:SQUARED_DIFFERENCE$1}),squaredDifferenceConfig$1={kernelName:SquaredDifference$1,backendName:"webgl",kernelFunc:squaredDifference$1};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function staticRegexReplace$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;if(Sa.dtype!=="string")throw new Error("Input must be of datatype string");const Ta=xa.readSync(Sa.dataId),wa=fromUint8ToStringArray$1(Ta),Ea=staticRegexReplaceImplCPU$1(wa,"string",ba);return xa.makeTensorInfo(Sa.shape,"string",Ea)}const staticRegexReplaceConfig$1={kernelName:StaticRegexReplace$1,backendName:"webgl",kernelFunc:staticRegexReplace$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step$2({inputs:ha,attrs:aa,backend:xa}){const{x:ba}=ha,Sa=CHECK_NAN_SNIPPET$3+`
    return x > 0.0 ? 1.0 : float(${aa.alpha});
  `,Ta=new UnaryOpProgram$1(ba.shape,Sa);return xa.runWebGLProgram(Ta,[ba],ba.dtype)}const stepConfig$1={kernelName:Step$1,backendName:"webgl",kernelFunc:step$2};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let StridedSliceProgram$1=class{constructor(aa,xa,ba){this.variableNames=["x"],this.outputShape=ba;const Sa=ba.length,Ta=getCoordsDataType$1(ba.length),wa=getCoordsDataType$1(ba.length);let Ea="";if(Sa===1)Ea="coords * strides + begin";else{let ka=0;Ea=ba.map((Aa,Fa)=>(ka++,ba.length===1?`coords * strides[${Fa}] + begin[${Fa}]`:`coords[${ka-1}] * strides[${Fa}] + begin[${Fa}]`)).join(",")}this.userCode=`
      ${Ta} begin = ${Ta}(${aa});
      ${Ta} strides = ${Ta}(${xa});

      void main() {
        ${wa} coords = getOutputCoords();
        setOutput(getX(${Ea}));
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{begin:Ta,end:wa,strides:Ea,beginMask:ka,endMask:Aa,ellipsisMask:Fa,newAxisMask:La,shrinkAxisMask:el}=ba,{finalShapeSparse:tl,finalShape:nl,isIdentity:rl,sliceDim0:sl,isSimpleSlice:ol,begin:al,end:ll,strides:il}=sliceInfo$1(Sa.shape,Ta,wa,Ea,ka,Aa,Fa,La,el);let cl;if(rl)cl=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:nl}});else if(sl||ol){assert$2(Sa.shape.length>=1,()=>`Input must have rank at least 1, got: ${Sa.shape.length}`);const dl=computeOutShape$5(al,ll,il),hl=slice$1({inputs:{x:Sa},backend:xa,attrs:{begin:al,size:dl}});cl=reshape$2({inputs:{x:hl},backend:xa,attrs:{shape:nl}}),xa.disposeIntermediateTensorInfo(hl)}else if(xa.shouldExecuteOnCPU([Sa])){const hl=xa.readSync(Sa.dataId),pl=buffer$1(Sa.shape,Sa.dtype,hl),fl=stridedSliceImplCPU$1(tl,pl,il,al);cl=xa.makeTensorInfo(nl,Sa.dtype,fl.values)}else{const hl=new StridedSliceProgram$1(al,il,tl);cl=xa.runWebGLProgram(hl,[Sa],Sa.dtype)}const ul=reshape$2({inputs:{x:cl},backend:xa,attrs:{shape:nl}});return xa.disposeIntermediateTensorInfo(cl),ul}const stridedSliceConfig$1={kernelName:StridedSlice$1,backendName:"webgl",kernelFunc:stridedSlice$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{separator:Sa,nGramWidths:Ta,leftPad:wa,rightPad:Ea,padWidth:ka,preserveShortSequences:Aa}=ba,{data:Fa,dataSplits:La}=aa,el=xa.readSync(Fa.dataId),tl=xa.readSync(La.dataId),[nl,rl]=stringNGramsImplCPU$1(el,tl,Sa,Ta,wa,Ea,ka,Aa);return[xa.makeTensorInfo([nl.length],"string",nl),xa.makeTensorInfo(La.shape,"int32",rl)]}const stringNGramsConfig$1={kernelName:StringNGrams$1,backendName:"webgl",kernelFunc:stringNGrams$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{skipEmpty:Sa}=ba,{input:Ta,delimiter:wa}=aa;if(Ta.dtype!=="string")throw new Error("Input must be of datatype string");if(Ta.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${Ta.shape}`);if(wa.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${wa.shape}`);const Ea=xa.readSync(Ta.dataId),ka=xa.readSync(wa.dataId)[0],[Aa,Fa,La]=stringSplitImplCPU$1(Ea,ka,Sa),el=Fa.length;return[xa.makeTensorInfo([el,2],"int32",Aa),xa.makeTensorInfo([el],"string",Fa),xa.makeTensorInfo([2],"int32",new Int32Array(La))]}const stringSplitConfig$1={kernelName:StringSplit$1,backendName:"webgl",kernelFunc:stringSplit$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{numBuckets:Sa}=ba,{input:Ta}=aa;if(Ta.dtype!=="string")throw new Error("Input must be of datatype string");if(Sa<=0)throw new Error("Number of buckets must be at least 1");const wa=xa.readSync(Ta.dataId),Ea=stringToHashBucketFastImplCPU$1(wa,Sa);return xa.makeTensorInfo(Ta.shape,"int32",Ea)}const stringToHashBucketFastConfig$1={kernelName:StringToHashBucketFast$1,backendName:"webgl",kernelFunc:stringToHashBucketFast$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TAN$1="return tan(x);",tan$1=unaryKernelFunc$1({opSnippet:TAN$1}),tanConfig$1={kernelName:Tan$1,backendName:"webgl",kernelFunc:tan$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TANH$1=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,tanh$1=unaryKernelFunc$1({opSnippet:TANH$1}),tanhConfig$1={kernelName:Tanh$2,backendName:"webgl",kernelFunc:tanh$1};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{tensor:Sa,indices:Ta,updates:wa}=aa,{sliceRank:Ea,numUpdates:ka,sliceSize:Aa,strides:Fa,outputSize:La}=calculateShapes$1(wa,Ta,Sa.shape),el=[La/Aa,Aa];if(La===0)return xa.makeTensorInfo(Sa.shape,Ta.dtype);const tl=reshape$2({inputs:{x:Ta},backend:xa,attrs:{shape:[ka,Ea]}}),nl=reshape$2({inputs:{x:wa},backend:xa,attrs:{shape:[ka,Aa]}}),rl=reshape$2({inputs:{x:Sa},backend:xa,attrs:{shape:el}}),sl=new ScatterProgram$1(ka,Ea,tl.shape.length,nl.shape.length,Fa,el,!1,!0),ol=xa.runWebGLProgram(sl,[nl,tl,rl],rl.dtype),al=reshape$2({inputs:{x:ol},backend:xa,attrs:{shape:Sa.shape}});return xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(ol),al}const tensorScatterUpdateConfig$1={kernelName:TensorScatterUpdate$1,backendName:"webgl",kernelFunc:tensorScatterUpdate$1};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TileProgram$1=class{constructor(aa,xa){this.variableNames=["A"];const ba=new Array(aa.length);for(let wa=0;wa<ba.length;wa++)ba[wa]=aa[wa]*xa[wa];this.outputShape=ba,this.rank=ba.length;const Sa=getCoordsDataType$1(this.rank),Ta=getSourceCoords$3(aa);this.userCode=`
      void main() {
        ${Sa} resRC = getOutputCoords();
        setOutput(getA(${Ta}));
      }
    `}};function getSourceCoords$3(ha){const aa=ha.length;if(aa>5)throw Error(`Tile for rank ${aa} is not yet supported`);if(aa===1)return`imod(resRC, ${ha[0]})`;const xa=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],ba=[];for(let Sa=0;Sa<ha.length;Sa++)ba.push(`imod(${xa[Sa]}, ${ha[Sa]})`);return ba.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{reps:Ta}=ba;if(Sa.dtype==="string"||Sa.shape.length>5){const ka=xa.readSync(Sa.dataId),Aa=Sa.dtype==="string"?ka.map(el=>decodeString$1(el)):ka,Fa=buffer$1(Sa.shape,Sa.dtype,Aa),La=tileImplCPU$1(Fa,Ta);return xa.makeTensorInfo(La.shape,La.dtype,La.values)}const wa=new TileProgram$1(Sa.shape,Ta);return xa.runWebGLProgram(wa,[Sa],Sa.dtype)}const tileConfig$1={kernelName:Tile$1,backendName:"webgl",kernelFunc:tile$1};let SwapProgram$1=class{constructor(aa){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=aa,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},MergeProgram$1=class{constructor(aa){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=aa,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function disposeIntermediateTensorInfoOrNull$1(ha,aa){aa!==null&&ha.disposeIntermediateTensorInfo(aa)}function roundUpToPow2$1(ha){let aa=1;for(;aa<ha;)aa*=2;return aa}function topK$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{k:Ta,sorted:wa}=ba,Ea=env$1().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),ka=env$1().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),Aa=Sa.shape,Fa=Aa[Aa.length-1];if(xa.shouldExecuteOnCPU([Sa])||Fa<Ea||Ta>ka){const fl=xa.readSync(Sa.dataId),[ml,gl]=topKImplCPU$1(fl,Aa,Sa.dtype,Ta,wa);return[xa.makeTensorInfo(ml.shape,ml.dtype,ml.values),xa.makeTensorInfo(gl.shape,gl.dtype,gl.values)]}if(Ta===0)return Aa[Aa.length-1]=0,[xa.makeTensorInfo(Aa,Sa.dtype,[]),xa.makeTensorInfo(Aa,"int32",[])];if(Fa===1)return[Sa,fill$2({attrs:{shape:Aa,dtype:"int32",value:0},backend:xa})];const La=xa.texData.get(Sa.dataId),el=La!==null&&La.isPacked,tl=el?xa.unpackTensor(Sa):Sa,rl=sizeFromShape$1(Aa)/Fa,sl=reshape$2({inputs:{x:tl},attrs:{shape:[rl,Fa]},backend:xa});el&&disposeIntermediateTensorInfoOrNull$1(xa,tl);const ol=roundUpToPow2$1(Ta),al=roundUpToPow2$1(Fa);let ll=null;const il=()=>ll===null?[sl,sl]:[sl,ll],cl=(fl,ml,gl)=>{const $l=il(),xl=new SwapProgram$1(gl),bl=[[Fa],[ll===null?1:0],[Number.NEGATIVE_INFINITY],[fl],[ml]],Sl=ll;ll=xa.runWebGLProgram(xl,$l,"int32",bl),disposeIntermediateTensorInfoOrNull$1(xa,Sl)};for(let fl=1;fl<ol;fl*=2){const ml=fl*2;for(let gl=fl;gl>=1;gl/=2)cl(ml,gl,[rl,al])}for(let fl=al;fl>ol;fl/=2){const ml=il(),gl=new MergeProgram$1([rl,fl/2]),xl=[[Fa],[ll===null?1:0],[ol]],yl=ll;ll=xa.runWebGLProgram(gl,ml,"int32",xl),disposeIntermediateTensorInfoOrNull$1(xa,yl);const bl=ol/2,Sl=bl*2;for(let Cl=bl;Cl>=1;Cl/=2)cl(Sl,Cl,ll.shape)}let ul=ll;ll=slice$1({inputs:{x:ll},backend:xa,attrs:{begin:0,size:[rl,Ta]}}),disposeIntermediateTensorInfoOrNull$1(xa,ul);let dl=gatherV2$1({inputs:{x:sl,indices:ll},backend:xa,attrs:{axis:1,batchDims:1}});disposeIntermediateTensorInfoOrNull$1(xa,sl);const hl=Aa.slice(0,-1);hl.push(Ta),ul=ll,ll=reshape$2({inputs:{x:ll},attrs:{shape:hl},backend:xa}),disposeIntermediateTensorInfoOrNull$1(xa,ul);const pl=dl;return dl=reshape$2({inputs:{x:dl},attrs:{shape:hl},backend:xa}),disposeIntermediateTensorInfoOrNull$1(xa,pl),[dl,ll]}const topKConfig$1={kernelName:TopK$1,backendName:"webgl",kernelFunc:topK$1};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let TransformProgram$1=class{constructor(aa,xa,ba,Sa,Ta,wa){this.variableNames=["Image","Transforms"],this.outputShape=wa;const Ea=ba==="nearest"?1:2;let ka;switch(Sa){case"constant":ka=1;break;case"reflect":ka=2;break;case"wrap":ka=3;break;case"nearest":ka=4;break;default:ka=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${ka} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${ka} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${ka} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${aa} && 0 <= coordX && coordX < ${xa}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${Ta});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${Ta});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${xa}));
                float mapY = mapCoord(inY, float(${aa}));

                if (${Ea} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{image:Sa,transforms:Ta}=aa,{interpolation:wa,fillMode:Ea,fillValue:ka,outputShape:Aa}=ba,[Fa,La,el,tl]=Sa.shape,[nl,rl]=Aa??[La,el],sl=[Fa,nl,rl,tl],ol=new TransformProgram$1(La,el,wa,Ea,ka,sl);return xa.runWebGLProgram(ol,[Sa,Ta],"float32")}const transformConfig$1={kernelName:Transform$1,backendName:"webgl",kernelFunc:transform$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique$1(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{axis:Sa}=xa,{x:Ta}=aa;assertNotComplex$1(Ta,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const wa=ba.readSync(Ta.dataId),{outputValues:Ea,outputShape:ka,indices:Aa}=uniqueImplCPU$1(wa,Sa,Ta.shape,Ta.dtype);return[ba.makeTensorInfo(ka,Ta.dtype,Ea),ba.makeTensorInfo([Aa.length],"int32",Aa)]}const uniqueConfig$1={kernelName:Unique$1,backendName:"webgl",kernelFunc:unique$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{value:Sa}=aa;let{axis:Ta}=ba;Ta<0&&(Ta+=Sa.shape.length);const wa=Sa,Ea=wa.shape.length,ka=Sa.shape[Ta],Aa=new Array(Ea-1);let Fa=0;for(let rl=0;rl<Ea;rl++)rl!==Ta&&(Aa[Fa++]=wa.shape[rl]);const La=[],el=new Array(Ea).fill(0),tl=wa.shape.slice();tl[Ta]=1;const nl=new Array(ka);for(let rl=0;rl<nl.length;rl++){el[Ta]=rl;const sl=slice$1({inputs:{x:wa},backend:xa,attrs:{begin:el,size:tl}}),ol=reshape$2({inputs:{x:sl},backend:xa,attrs:{shape:Aa}});nl[rl]=ol,La.push(sl)}return La.forEach(rl=>xa.disposeIntermediateTensorInfo(rl)),nl}const unpackConfig$1={kernelName:Unpack$1,backendName:"webgl",kernelFunc:unpack$1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let SegmentOpProgram$1=class{constructor(aa,xa){this.variableNames=["x","segmentIds"];const ba=aa.windowSize,Sa=aa.batchSize,Ta=aa.inSize,wa=aa.numSegments,Ea=wa*Math.ceil(Ta/ba);this.outputShape=[Sa,Ea];const ka="0.0",Aa="sumValue",Fa=Math.floor(ba/4)*4,La=ba%4,el=`
        sumValue += dot(values, segFilter);
    `;let tl="";Ta%ba>0&&(tl=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return initializationValue;
        }
      `);let nl="";Ta%ba>0&&(nl=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${ka};

      float getValue(int batch, int inIdx) {
        ${tl}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${nl}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${wa})) * float(${ba}));
        int currentSeg = int(mod(float(outIdx), float(${wa})));

        float sumValue = 0.0;

        for (int i = 0; i < ${Fa}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${el}
        }

        int inIdx = inOffset + ${Fa};
        if (${La===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${el}
        } else if (${La===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${el}
        } else if (${La===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${el}
        }
        setOutput(${Aa});
      }
    `}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum$1(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,segmentIds:Ta}=aa,{numSegments:wa}=ba,Ea=Sa.shape.length,ka=[];let Aa=0;const Fa=getAxesPermutation$1([Aa],Ea);let La=Sa;Fa!=null&&(La=transpose$1({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),ka.push(La),Aa=getInnerMostAxes$1(1,Ea)[0]);const el=computeOutShape$3(La.shape,Aa,wa),tl=sizeFromShape$1([La.shape[Aa]]),nl=reshape$2({inputs:{x:La},backend:xa,attrs:{shape:[-1,tl]}});ka.push(nl);const rl=sumOutType$1(Sa.dtype),sl=(il,cl,ul,dl,hl)=>{const pl=il.shape[0],fl=il.shape[1],ml=segOpComputeOptimalWindowSize$1(fl,hl),gl={windowSize:ml,inSize:fl,batchSize:pl,numSegments:hl},$l=new SegmentOpProgram$1(gl,cl),xl=xa.compileAndRun($l,[il,ul],dl);if(ka.push(xl),xl.shape[1]===hl)return xl;const yl=range$1({backend:xa,attrs:{start:0,stop:hl,step:1,dtype:"float32"}}),bl=tile$1({inputs:{x:yl},backend:xa,attrs:{reps:[fl/ml]}});return ka.push(yl),ka.push(bl),sl(xl,cl,bl,dl,hl)},ol=sl(nl,"unsortedSegmentSum",Ta,rl,wa),al=reshape$2({inputs:{x:ol},backend:xa,attrs:{shape:el}});let ll=al;if(Fa!=null){ka.push(al);const il=getUndoAxesPermutation$1(Fa);ll=transpose$1({inputs:{x:ll},backend:xa,attrs:{perm:il}})}return ka.forEach(il=>xa.disposeIntermediateTensorInfo(il)),ll}const unsortedSegmentSumConfig$1={kernelName:UnsortedSegmentSum$1,backendName:"webgl",kernelFunc:unsortedSegmentSum$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs$1=[_fusedMatMulConfig$1,absConfig$1,acosConfig$1,acoshConfig$1,addConfig$1,addNConfig$1,allConfig$1,anyConfig$1,argMaxConfig$1,argMinConfig$1,asinConfig$1,asinhConfig$1,atanConfig$1,atan2Config$1,atanhConfig$1,avgPoolConfig$1,avgPool3DConfig$1,avgPool3DGradConfig$1,avgPoolGradConfig$1,batchMatMulConfig$1,batchNormConfig$1,batchToSpaceNDConfig$1,bincountConfig$1,bitwiseAndConfig$1,broadcastArgsConfig$1,castConfig$1,ceilConfig$1,clipByValueConfig$1,complexConfig$1,complexAbsConfig$1,concatConfig$1,conv2DConfig$1,conv2DBackpropFilterConfig$1,conv2DBackpropInputConfig$1,conv3DConfig$1,conv3DBackpropFilterV2Config$1,conv3DBackpropInputConfig$1,cosConfig$1,coshConfig$1,cropAndResizeConfig$1,cumprodConfig$1,cumsumConfig$1,denseBincountConfig$1,depthToSpaceConfig$1,depthwiseConv2dNativeConfig$1,depthwiseConv2dNativeBackpropFilterConfig$1,depthwiseConv2dNativeBackpropInputConfig$1,diagConfig$1,dilation2DConfig$1,einsumConfig$1,eluConfig$1,eluGradConfig$1,equalConfig$1,erfConfig$1,expConfig$1,expandDimsConfig$1,expm1Config$1,fftConfig$1,fillConfig$1,flipLeftRightConfig$1,floorConfig$1,floorDivConfig$1,fromPixelsConfig$1,fusedConv2DConfig$1,fusedDepthwiseConv2DConfig$1,gatherNdConfig$1,gatherV2Config$1,greaterConfig$1,greaterEqualConfig$1,identityConfig$1,ifftConfig$1,imagConfig$1,isFiniteConfig$1,isInfConfig$1,isNaNConfig$1,leakyReluConfig$1,lessConfig$1,lessEqualConfig$1,linSpaceConfig$1,logConfig$1,log1pConfig$1,logicalAndConfig$1,logicalNotConfig$1,logicalOrConfig$1,LRNConfig$1,LRNGradConfig$1,maxConfig$1,maximumConfig$1,maxPoolConfig$1,maxPool3DConfig$1,maxPool3DGradConfig$1,maxPoolGradConfig$1,maxPoolWithArgmaxConfig$1,meanConfig$1,minConfig$1,minimumConfig$1,mirrorPadConfig$1,modConfig$1,multinomialConfig$1,multiplyConfig$1,negConfig$1,nonMaxSuppressionV3Config$1,nonMaxSuppressionV4Config$1,nonMaxSuppressionV5Config$1,notEqualConfig$1,oneHotConfig$1,onesLikeConfig$1,packConfig$1,padV2Config$1,powConfig$1,preluConfig$1,prodConfig$1,raggedGatherConfig$1,raggedRangeConfig$1,raggedTensorToTensorConfig$1,rangeConfig$1,realConfig$1,realDivConfig$1,reciprocalConfig$1,reluConfig$1,relu6Config$1,reshapeConfig$1,resizeBilinearConfig$1,resizeBilinearGradConfig$1,resizeNearestNeighborConfig$1,resizeNearestNeighborGradConfig$1,reverseConfig$1,rotateWithOffsetConfig$1,roundConfig$1,rsqrtConfig$1,scatterNdConfig$1,searchSortedConfig$1,selectConfig$1,seluConfig$1,sigmoidConfig$1,signConfig$1,sinConfig$1,sinhConfig$1,sliceConfig$1,softmaxConfig$1,softplusConfig$1,spaceToBatchNDConfig$1,sparseFillEmptyRowsConfig$1,sparseReshapeConfig$1,sparseSegmentMeanConfig$1,sparseSegmentSumConfig$1,sparseToDenseConfig$1,splitVConfig$1,sqrtConfig$1,squareConfig$1,squaredDifferenceConfig$1,staticRegexReplaceConfig$1,stepConfig$1,stridedSliceConfig$1,stringNGramsConfig$1,stringSplitConfig$1,stringToHashBucketFastConfig$1,subConfig$1,sumConfig$1,tanConfig$1,tanhConfig$1,tensorScatterUpdateConfig$1,tileConfig$1,topKConfig$1,transformConfig$1,transposeConfig$1,uniqueConfig$1,unpackConfig$1,unsortedSegmentSumConfig$1,zerosLikeConfig$1];for(const ha of kernelConfigs$1)registerKernel$1(ha);var t=typeof self<"u"?self:{};function e(ha){e:{for(var aa=["CLOSURE_FLAGS"],xa=t,ba=0;ba<aa.length;ba++)if((xa=xa[aa[ba]])==null){aa=null;break e}aa=xa}return(ha=aa&&aa[ha])!=null&&ha}function n(){throw Error("Invalid UTF8")}function r(ha,aa){return aa=String.fromCharCode.apply(null,aa),ha==null?aa:ha+aa}let s,i;const o=typeof TextDecoder<"u";let a;const h=typeof TextEncoder<"u";function c(ha){if(h)ha=(a||(a=new TextEncoder)).encode(ha);else{let xa=0;const ba=new Uint8Array(3*ha.length);for(let Sa=0;Sa<ha.length;Sa++){var aa=ha.charCodeAt(Sa);if(128>aa)ba[xa++]=aa;else{if(2048>aa)ba[xa++]=aa>>6|192;else{if(55296<=aa&&57343>=aa){if(56319>=aa&&Sa<ha.length){const Ta=ha.charCodeAt(++Sa);if(56320<=Ta&&57343>=Ta){aa=1024*(aa-55296)+Ta-56320+65536,ba[xa++]=aa>>18|240,ba[xa++]=aa>>12&63|128,ba[xa++]=aa>>6&63|128,ba[xa++]=63&aa|128;continue}Sa--}aa=65533}ba[xa++]=aa>>12|224,ba[xa++]=aa>>6&63|128}ba[xa++]=63&aa|128}}ha=xa===ba.length?ba:ba.subarray(0,xa)}return ha}var u,l=e(610401301),d=e(188588736);const f=t.navigator;function p(ha){return!!l&&!!u&&u.brands.some(({brand:aa})=>aa&&aa.indexOf(ha)!=-1)}function g(ha){var aa;return(aa=t.navigator)&&(aa=aa.userAgent)||(aa=""),aa.indexOf(ha)!=-1}function m(){return!!l&&!!u&&0<u.brands.length}function y(){return m()?p("Chromium"):(g("Chrome")||g("CriOS"))&&!(!m()&&g("Edge"))||g("Silk")}u=f&&f.userAgentData||null;var _=!m()&&(g("Trident")||g("MSIE"));!g("Android")||y(),y(),g("Safari")&&(y()||!m()&&g("Coast")||!m()&&g("Opera")||!m()&&g("Edge")||(m()?p("Microsoft Edge"):g("Edg/"))||m()&&p("Opera"));var v={},E=null;function w(ha){var aa=ha.length,xa=3*aa/4;xa%3?xa=Math.floor(xa):"=.".indexOf(ha[aa-1])!=-1&&(xa="=.".indexOf(ha[aa-2])!=-1?xa-2:xa-1);var ba=new Uint8Array(xa),Sa=0;return function(Ta,wa){function Ea(tl){for(;ka<Ta.length;){var nl=Ta.charAt(ka++),rl=E[nl];if(rl!=null)return rl;if(!/^[\s\xa0]*$/.test(nl))throw Error("Unknown base64 encoding at char: "+nl)}return tl}T();for(var ka=0;;){var Aa=Ea(-1),Fa=Ea(0),La=Ea(64),el=Ea(64);if(el===64&&Aa===-1)break;wa(Aa<<2|Fa>>4),La!=64&&(wa(Fa<<4&240|La>>2),el!=64&&wa(La<<6&192|el))}}(ha,function(Ta){ba[Sa++]=Ta}),Sa!==xa?ba.subarray(0,Sa):ba}function T(){if(!E){E={};for(var ha="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),aa=["+/=","+/","-_=","-_.","-_"],xa=0;5>xa;xa++){var ba=ha.concat(aa[xa].split(""));v[xa]=ba;for(var Sa=0;Sa<ba.length;Sa++){var Ta=ba[Sa];E[Ta]===void 0&&(E[Ta]=Sa)}}}}var A=typeof Uint8Array<"u",b=!_&&typeof btoa=="function";function k(ha){if(!b){var aa;aa===void 0&&(aa=0),T(),aa=v[aa];var xa=Array(Math.floor(ha.length/3)),ba=aa[64]||"";let ka=0,Aa=0;for(;ka<ha.length-2;ka+=3){var Sa=ha[ka],Ta=ha[ka+1],wa=ha[ka+2],Ea=aa[Sa>>2];Sa=aa[(3&Sa)<<4|Ta>>4],Ta=aa[(15&Ta)<<2|wa>>6],wa=aa[63&wa],xa[Aa++]=Ea+Sa+Ta+wa}switch(Ea=0,wa=ba,ha.length-ka){case 2:wa=aa[(15&(Ea=ha[ka+1]))<<2]||ba;case 1:ha=ha[ka],xa[Aa]=aa[ha>>2]+aa[(3&ha)<<4|Ea>>4]+wa+ba}return xa.join("")}for(aa="",xa=0,ba=ha.length-10240;xa<ba;)aa+=String.fromCharCode.apply(null,ha.subarray(xa,xa+=10240));return aa+=String.fromCharCode.apply(null,xa?ha.subarray(xa):ha),btoa(aa)}const x=/[-_.]/g,S={"-":"+",_:"/",".":"="};function L(ha){return S[ha]||""}function F(ha){if(!b)return w(ha);x.test(ha)&&(ha=ha.replace(x,L)),ha=atob(ha);const aa=new Uint8Array(ha.length);for(let xa=0;xa<ha.length;xa++)aa[xa]=ha.charCodeAt(xa);return aa}function R(ha){return A&&ha!=null&&ha instanceof Uint8Array}let M;function P(){return M||(M=new Uint8Array(0))}var O={};let C;function I(ha){if(ha!==O)throw Error("illegal external caller")}function D(){return C||(C=new U(null,O))}function N(ha){I(O);var aa=ha.g;return(aa=aa==null||R(aa)?aa:typeof aa=="string"?F(aa):null)==null?aa:ha.g=aa}var U=class{constructor(ha,aa){if(I(aa),this.g=ha,ha!=null&&ha.length===0)throw Error("ByteString should be constructed with non-empty values")}h(){const ha=N(this);return ha?new Uint8Array(ha):P()}};function B(ha,aa){return Error(`Invalid wire type: ${ha} (at position ${aa})`)}function G(){return Error("Failed to read varint, encoding is invalid.")}function j(ha,aa){return Error(`Tried to read past the end of the data ${aa} > ${ha}`)}function V(ha){if(typeof ha=="string")return{buffer:F(ha),N:!1};if(Array.isArray(ha))return{buffer:new Uint8Array(ha),N:!1};if(ha.constructor===Uint8Array)return{buffer:ha,N:!1};if(ha.constructor===ArrayBuffer)return{buffer:new Uint8Array(ha),N:!1};if(ha.constructor===U)return{buffer:N(ha)||P(),N:!0};if(ha instanceof Uint8Array)return{buffer:new Uint8Array(ha.buffer,ha.byteOffset,ha.byteLength),N:!1};throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers")}function X(){return typeof BigInt=="function"}const H=typeof Uint8Array.prototype.slice=="function";let W,z=0,K=0;function Y(ha){const aa=0>ha;let xa=(ha=Math.abs(ha))>>>0;if(ha=Math.floor((ha-xa)/4294967296),aa){const[ba,Sa]=nt(xa,ha);ha=Sa,xa=ba}z=xa>>>0,K=ha>>>0}function $(ha){const aa=W||(W=new DataView(new ArrayBuffer(8)));aa.setFloat32(0,+ha,!0),K=0,z=aa.getUint32(0,!0)}function q(ha,aa){return 4294967296*aa+(ha>>>0)}function J(ha,aa){const xa=2147483648&aa;return xa&&(aa=~aa>>>0,(ha=1+~ha>>>0)==0&&(aa=aa+1>>>0)),ha=q(ha,aa),xa?-ha:ha}function Z(ha,aa){if(ha>>>=0,2097151>=(aa>>>=0))var xa=""+(4294967296*aa+ha);else X()?xa=""+(BigInt(aa)<<BigInt(32)|BigInt(ha)):(ha=(16777215&ha)+6777216*(xa=16777215&(ha>>>24|aa<<8))+6710656*(aa=aa>>16&65535),xa+=8147497*aa,aa*=2,1e7<=ha&&(xa+=Math.floor(ha/1e7),ha%=1e7),1e7<=xa&&(aa+=Math.floor(xa/1e7),xa%=1e7),xa=aa+Q(xa)+Q(ha));return xa}function Q(ha){return ha=String(ha),"0000000".slice(ha.length)+ha}function tt(){var ha=z,aa=K;if(2147483648&aa)if(X())ha=""+(BigInt(0|aa)<<BigInt(32)|BigInt(ha>>>0));else{const[xa,ba]=nt(ha,aa);ha="-"+Z(xa,ba)}else ha=Z(ha,aa);return ha}function et(ha){if(16>ha.length)Y(Number(ha));else if(X())ha=BigInt(ha),z=Number(ha&BigInt(4294967295))>>>0,K=Number(ha>>BigInt(32)&BigInt(4294967295));else{const aa=+(ha[0]==="-");K=z=0;const xa=ha.length;for(let ba=aa,Sa=(xa-aa)%6+aa;Sa<=xa;ba=Sa,Sa+=6){const Ta=Number(ha.slice(ba,Sa));K*=1e6,z=1e6*z+Ta,4294967296<=z&&(K+=Math.trunc(z/4294967296),K>>>=0,z>>>=0)}if(aa){const[ba,Sa]=nt(z,K);z=ba,K=Sa}}}function nt(ha,aa){return aa=~aa,ha?ha=1+~ha:aa+=1,[ha,aa]}function rt(ha,aa){let xa,ba=0,Sa=0,Ta=0;const wa=ha.h;let Ea=ha.g;do xa=wa[Ea++],ba|=(127&xa)<<Ta,Ta+=7;while(32>Ta&&128&xa);for(32<Ta&&(Sa|=(127&xa)>>4),Ta=3;32>Ta&&128&xa;Ta+=7)xa=wa[Ea++],Sa|=(127&xa)<<Ta;if(lt(ha,Ea),128>xa)return aa(ba>>>0,Sa>>>0);throw G()}function st(ha){let aa=0,xa=ha.g;const ba=xa+10,Sa=ha.h;for(;xa<ba;){const Ta=Sa[xa++];if(aa|=Ta,(128&Ta)==0)return lt(ha,xa),!!(127&aa)}throw G()}function it(ha){const aa=ha.h;let xa=ha.g,ba=aa[xa++],Sa=127&ba;if(128&ba&&(ba=aa[xa++],Sa|=(127&ba)<<7,128&ba&&(ba=aa[xa++],Sa|=(127&ba)<<14,128&ba&&(ba=aa[xa++],Sa|=(127&ba)<<21,128&ba&&(ba=aa[xa++],Sa|=ba<<28,128&ba&&128&aa[xa++]&&128&aa[xa++]&&128&aa[xa++]&&128&aa[xa++]&&128&aa[xa++])))))throw G();return lt(ha,xa),Sa}function ot(ha){return it(ha)>>>0}function at(ha){var aa=ha.h;const xa=ha.g,ba=aa[xa],Sa=aa[xa+1],Ta=aa[xa+2];return aa=aa[xa+3],lt(ha,ha.g+4),(ba<<0|Sa<<8|Ta<<16|aa<<24)>>>0}function ht(ha){var aa=at(ha);ha=2*(aa>>31)+1;const xa=aa>>>23&255;return aa&=8388607,xa==255?aa?NaN:1/0*ha:xa==0?ha*Math.pow(2,-149)*aa:ha*Math.pow(2,xa-150)*(aa+Math.pow(2,23))}function ct(ha){return it(ha)}function ut(ha,aa,{ca:xa=!1}={}){ha.ca=xa,aa&&(aa=V(aa),ha.h=aa.buffer,ha.m=aa.N,ha.j=0,ha.l=ha.h.length,ha.g=ha.j)}function lt(ha,aa){if(ha.g=aa,aa>ha.l)throw j(ha.l,aa)}function dt(ha,aa){if(0>aa)throw Error(`Tried to read a negative byte length: ${aa}`);const xa=ha.g,ba=xa+aa;if(ba>ha.l)throw j(aa,ha.l-xa);return ha.g=ba,xa}function ft(ha,aa){if(aa==0)return D();var xa=dt(ha,aa);return ha.ca&&ha.m?xa=ha.h.subarray(xa,xa+aa):(ha=ha.h,xa=xa===(aa=xa+aa)?P():H?ha.slice(xa,aa):new Uint8Array(ha.subarray(xa,aa))),xa.length==0?D():new U(xa,O)}var pt=[];function gt(ha){var aa=ha.g;if(aa.g==aa.l)return!1;ha.l=ha.g.g;var xa=ot(ha.g);if(aa=xa>>>3,!(0<=(xa&=7)&&5>=xa))throw B(xa,ha.l);if(1>aa)throw Error(`Invalid field number: ${aa} (at position ${ha.l})`);return ha.m=aa,ha.h=xa,!0}function mt(ha){switch(ha.h){case 0:ha.h!=0?mt(ha):st(ha.g);break;case 1:lt(ha=ha.g,ha.g+8);break;case 2:if(ha.h!=2)mt(ha);else{var aa=ot(ha.g);lt(ha=ha.g,ha.g+aa)}break;case 5:lt(ha=ha.g,ha.g+4);break;case 3:for(aa=ha.m;;){if(!gt(ha))throw Error("Unmatched start-group tag: stream EOF");if(ha.h==4){if(ha.m!=aa)throw Error("Unmatched end-group tag");break}mt(ha)}break;default:throw B(ha.h,ha.l)}}function yt(ha,aa,xa){const ba=ha.g.l,Sa=ot(ha.g),Ta=ha.g.g+Sa;let wa=Ta-ba;if(0>=wa&&(ha.g.l=Ta,xa(aa,ha,void 0,void 0,void 0),wa=Ta-ha.g.g),wa)throw Error(`Message parsing ended unexpectedly. Expected to read ${Sa} bytes, instead read ${Sa-wa} bytes, either the data ended unexpectedly or the message misreported its own length`);return ha.g.g=Ta,ha.g.l=ba,aa}function _t(ha){var aa=ot(ha.g),xa=dt(ha=ha.g,aa);if(ha=ha.h,o){var ba,Sa=ha;(ba=i)||(ba=i=new TextDecoder("utf-8",{fatal:!0})),aa=xa+aa,Sa=xa===0&&aa===Sa.length?Sa:Sa.subarray(xa,aa);try{var Ta=ba.decode(Sa)}catch(Ea){if(s===void 0){try{ba.decode(new Uint8Array([128]))}catch{}try{ba.decode(new Uint8Array([97])),s=!0}catch{s=!1}}throw!s&&(i=void 0),Ea}}else{aa=(Ta=xa)+aa,xa=[];let Ea,ka=null;for(;Ta<aa;){var wa=ha[Ta++];128>wa?xa.push(wa):224>wa?Ta>=aa?n():(Ea=ha[Ta++],194>wa||(192&Ea)!=128?(Ta--,n()):xa.push((31&wa)<<6|63&Ea)):240>wa?Ta>=aa-1?n():(Ea=ha[Ta++],(192&Ea)!=128||wa===224&&160>Ea||wa===237&&160<=Ea||(192&(ba=ha[Ta++]))!=128?(Ta--,n()):xa.push((15&wa)<<12|(63&Ea)<<6|63&ba)):244>=wa?Ta>=aa-2?n():(Ea=ha[Ta++],(192&Ea)!=128||Ea-144+(wa<<28)>>30||(192&(ba=ha[Ta++]))!=128||(192&(Sa=ha[Ta++]))!=128?(Ta--,n()):(wa=(7&wa)<<18|(63&Ea)<<12|(63&ba)<<6|63&Sa,wa-=65536,xa.push(55296+(wa>>10&1023),56320+(1023&wa)))):n(),8192<=xa.length&&(ka=r(ka,xa),xa.length=0)}Ta=r(ka,xa)}return Ta}function vt(ha){const aa=ot(ha.g);return ft(ha.g,aa)}function Et(ha,aa,xa){var ba=ot(ha.g);for(ba=ha.g.g+ba;ha.g.g<ba;)xa.push(aa(ha.g))}var wt=[];function Tt(ha){return ha?/^\d+$/.test(ha)?(et(ha),new At(z,K)):null:bt||(bt=new At(0,0))}var At=class{constructor(ha,aa){this.h=ha>>>0,this.g=aa>>>0}};let bt;function kt(ha){return ha?/^-?\d+$/.test(ha)?(et(ha),new xt(z,K)):null:St||(St=new xt(0,0))}var xt=class{constructor(ha,aa){this.h=ha>>>0,this.g=aa>>>0}};let St;function Lt(ha,aa,xa){for(;0<xa||127<aa;)ha.g.push(127&aa|128),aa=(aa>>>7|xa<<25)>>>0,xa>>>=7;ha.g.push(aa)}function Ft(ha,aa){for(;127<aa;)ha.g.push(127&aa|128),aa>>>=7;ha.g.push(aa)}function Rt(ha,aa){if(0<=aa)Ft(ha,aa);else{for(let xa=0;9>xa;xa++)ha.g.push(127&aa|128),aa>>=7;ha.g.push(1)}}function Mt(ha,aa){ha.g.push(aa>>>0&255),ha.g.push(aa>>>8&255),ha.g.push(aa>>>16&255),ha.g.push(aa>>>24&255)}function Pt(ha,aa){aa.length!==0&&(ha.l.push(aa),ha.h+=aa.length)}function Ot(ha,aa,xa){Ft(ha.g,8*aa+xa)}function Ct(ha,aa){return Ot(ha,aa,2),aa=ha.g.end(),Pt(ha,aa),aa.push(ha.h),aa}function It(ha,aa){var xa=aa.pop();for(xa=ha.h+ha.g.length()-xa;127<xa;)aa.push(127&xa|128),xa>>>=7,ha.h++;aa.push(xa),ha.h++}function Dt(ha,aa,xa){Ot(ha,aa,2),Ft(ha.g,xa.length),Pt(ha,ha.g.end()),Pt(ha,xa)}function Nt(ha,aa,xa,ba){xa!=null&&(aa=Ct(ha,aa),ba(xa,ha),It(ha,aa))}class Ut{constructor(aa,xa,ba,Sa){this.g=aa,this.h=xa,this.l=ba,this.pa=Sa}}function Bt(ha){return Array.prototype.slice.call(ha)}function Gt(ha){return typeof Symbol=="function"&&typeof Symbol()=="symbol"?Symbol():ha}var jt=Gt(),Vt=Gt("0di"),Xt=jt?(ha,aa)=>{ha[jt]|=aa}:(ha,aa)=>{ha.g!==void 0?ha.g|=aa:Object.defineProperties(ha,{g:{value:aa,configurable:!0,writable:!0,enumerable:!1}})},Ht=jt?(ha,aa)=>{ha[jt]&=~aa}:(ha,aa)=>{ha.g!==void 0&&(ha.g&=~aa)};function Wt(ha,aa,xa){return xa?ha|aa:ha&~aa}var zt=jt?ha=>0|ha[jt]:ha=>0|ha.g,Kt=jt?ha=>ha[jt]:ha=>ha.g,Yt=jt?(ha,aa)=>(ha[jt]=aa,ha):(ha,aa)=>(ha.g!==void 0?ha.g=aa:Object.defineProperties(ha,{g:{value:aa,configurable:!0,writable:!0,enumerable:!1}}),ha);function $t(ha){return Xt(ha,34),ha}function qt(ha,aa){Yt(aa,-14591&(0|ha))}function Jt(ha,aa){Yt(aa,-14557&(34|ha))}function Zt(ha){return(ha=ha>>14&1023)===0?536870912:ha}var Qt,te={},ee={};function ne(ha){return!(!ha||typeof ha!="object"||ha.Ja!==ee)}function re(ha){return ha!==null&&typeof ha=="object"&&!Array.isArray(ha)&&ha.constructor===Object}function se(ha,aa,xa){if(ha!=null){if(typeof ha=="string")ha=ha?new U(ha,O):D();else if(ha.constructor!==U)if(R(ha))ha=ha.length?new U(xa?ha:new Uint8Array(ha),O):D();else{if(!aa)throw Error();ha=void 0}}return ha}function ie(ha,aa,xa){if(!Array.isArray(ha)||ha.length)return!1;const ba=zt(ha);return!!(1&ba)||!(!aa||!(Array.isArray(aa)?aa.includes(xa):aa.has(xa)))&&(Yt(ha,1|ba),!0)}const oe=[];function ae(ha){if(2&ha)throw Error()}Yt(oe,55),Qt=Object.freeze(oe);class he{constructor(aa,xa,ba){this.l=0,this.g=aa,this.h=xa,this.m=ba}next(){if(this.l<this.g.length){const aa=this.g[this.l++];return{done:!1,value:this.h?this.h.call(this.m,aa):aa}}return{done:!0,value:void 0}}[Symbol.iterator](){return new he(this.g,this.h,this.m)}}let ce,ue;function le(ha,aa){(aa=ce?aa[ce]:void 0)&&(ha[ce]=Bt(aa))}function de(ha){return(ha=Error(ha)).__closure__error__context__984382||(ha.__closure__error__context__984382={}),ha.__closure__error__context__984382.severity="warning",ha}function fe(ha){return ha==null||typeof ha=="number"?ha:ha==="NaN"||ha==="Infinity"||ha==="-Infinity"?Number(ha):void 0}function pe(ha){return ha==null||typeof ha=="boolean"?ha:typeof ha=="number"?!!ha:void 0}Object.freeze(new class{}),Object.freeze(new class{});const ge=/^-?([1-9][0-9]*|0)(\.[0-9]+)?$/;function me(ha){const aa=typeof ha;return aa==="number"?Number.isFinite(ha):aa==="string"&&ge.test(ha)}function ye(ha){if(ha==null)return ha;if(typeof ha=="string"){if(!ha)return;ha=+ha}return typeof ha=="number"&&Number.isFinite(ha)?0|ha:void 0}function _e(ha){if(ha==null)return ha;if(typeof ha=="string"){if(!ha)return;ha=+ha}return typeof ha=="number"&&Number.isFinite(ha)?ha>>>0:void 0}function ve(ha){return ha[0]!=="-"&&(20>ha.length||ha.length===20&&184467>Number(ha.substring(0,6)))}function Ee(ha){return ha[0]==="-"?20>ha.length||ha.length===20&&-922337<Number(ha.substring(0,7)):19>ha.length||ha.length===19&&922337>Number(ha.substring(0,6))}function we(ha){return ha=Math.trunc(ha),Number.isSafeInteger(ha)||(Y(ha),ha=J(z,K)),ha}function Te(ha){var aa=Math.trunc(Number(ha));return Number.isSafeInteger(aa)?String(aa):((aa=ha.indexOf("."))!==-1&&(ha=ha.substring(0,aa)),Ee(ha)||(et(ha),ha=tt()),ha)}function Ae(ha){return ha==null?ha:me(ha)?typeof ha=="number"?we(ha):Te(ha):void 0}function be(ha){if(typeof ha!="string")throw Error();return ha}function ke(ha){if(ha!=null&&typeof ha!="string")throw Error();return ha}function xe(ha){return ha==null||typeof ha=="string"?ha:void 0}function Se(ha,aa,xa,ba){if(ha!=null&&typeof ha=="object"&&ha.X===te)return ha;if(!Array.isArray(ha))return xa?2&ba?(ha=aa[Vt])?aa=ha:($t((ha=new aa).u),aa=aa[Vt]=ha):aa=new aa:aa=void 0,aa;let Sa=xa=zt(ha);return Sa===0&&(Sa|=32&ba),Sa|=2&ba,Sa!==xa&&Yt(ha,Sa),new aa(ha)}function Le(ha,aa,xa){if(aa){var ba=!!ba;if(!me(aa=ha))throw de("int64");typeof aa=="string"?ba=Te(aa):ba?(ba=Math.trunc(aa),Number.isSafeInteger(ba)?ba=String(ba):Ee(aa=String(ba))?ba=aa:(Y(ba),ba=tt())):ba=we(aa)}else ba=Ae(ha);return typeof(xa=(ha=ba)==null?xa?0:void 0:ha)=="string"&&(ba=+xa,Number.isSafeInteger(ba))?ba:xa}let Fe,Re,Me;function Pe(ha){switch(typeof ha){case"boolean":return Re||(Re=[0,void 0,!0]);case"number":return 0<ha?void 0:ha===0?Me||(Me=[0,void 0]):[-ha,void 0];case"string":return[0,ha];case"object":return ha}}function Oe(ha,aa){return Ce(ha,aa[0],aa[1])}function Ce(ha,aa,xa){if(ha==null&&(ha=Fe),Fe=void 0,ha==null){var ba=96;xa?(ha=[xa],ba|=512):ha=[],aa&&(ba=-16760833&ba|(1023&aa)<<14)}else{if(!Array.isArray(ha)||2048&(ba=zt(ha)))throw Error();if(64&ba)return ha;if(ba|=64,xa&&(ba|=512,xa!==ha[0]))throw Error();e:{const Sa=(xa=ha).length;if(Sa){const Ta=Sa-1;if(re(xa[Ta])){if(1024<=(aa=Ta-(+!!(512&(ba|=256))-1)))throw Error();ba=-16760833&ba|(1023&aa)<<14;break e}}if(aa){if(1024<(aa=Math.max(aa,Sa-(+!!(512&ba)-1))))throw Error();ba=-16760833&ba|(1023&aa)<<14}}}return Yt(ha,ba),ha}const Ie={};let De=function(){try{return new class extends Map{constructor(){super()}},!1}catch{return!0}}();class Ne{constructor(){this.g=new Map}get(aa){return this.g.get(aa)}set(aa,xa){return this.g.set(aa,xa),this.size=this.g.size,this}delete(aa){return aa=this.g.delete(aa),this.size=this.g.size,aa}clear(){this.g.clear(),this.size=this.g.size}has(aa){return this.g.has(aa)}entries(){return this.g.entries()}keys(){return this.g.keys()}values(){return this.g.values()}forEach(aa,xa){return this.g.forEach(aa,xa)}[Symbol.iterator](){return this.entries()}}const Ue=De?(Object.setPrototypeOf(Ne.prototype,Map.prototype),Object.defineProperties(Ne.prototype,{size:{value:0,configurable:!0,enumerable:!0,writable:!0}}),Ne):class extends Map{constructor(){super()}};function Be(ha){return ha}function Ge(ha){if(2&ha.L)throw Error("Cannot mutate an immutable Map")}var je=class extends Ue{constructor(ha,aa,xa=Be,ba=Be){super();let Sa=zt(ha);Sa|=64,Yt(ha,Sa),this.L=Sa,this.U=aa,this.S=xa,this.Z=this.U?Ve:ba;for(let Ta=0;Ta<ha.length;Ta++){const wa=ha[Ta],Ea=xa(wa[0],!1,!0);let ka=wa[1];aa?ka===void 0&&(ka=null):ka=ba(wa[1],!1,!0,void 0,void 0,Sa),super.set(Ea,ka)}}oa(ha=Xe){if(this.size!==0)return this.Y(ha)}Y(ha=Xe){const aa=[],xa=super.entries();for(var ba;!(ba=xa.next()).done;)(ba=ba.value)[0]=ha(ba[0]),ba[1]=ha(ba[1]),aa.push(ba);return aa}clear(){Ge(this),super.clear()}delete(ha){return Ge(this),super.delete(this.S(ha,!0,!1))}entries(){var ha=this.na();return new he(ha,He,this)}keys(){return this.Ia()}values(){var ha=this.na();return new he(ha,je.prototype.get,this)}forEach(ha,aa){super.forEach((xa,ba)=>{ha.call(aa,this.get(ba),ba,this)})}set(ha,aa){return Ge(this),(ha=this.S(ha,!0,!1))==null?this:aa==null?(super.delete(ha),this):super.set(ha,this.Z(aa,!0,!0,this.U,!1,this.L))}Oa(ha){const aa=this.S(ha[0],!1,!0);ha=ha[1],ha=this.U?ha===void 0?null:ha:this.Z(ha,!1,!0,void 0,!1,this.L),super.set(aa,ha)}has(ha){return super.has(this.S(ha,!1,!1))}get(ha){ha=this.S(ha,!1,!1);const aa=super.get(ha);if(aa!==void 0){var xa=this.U;return xa?((xa=this.Z(aa,!1,!0,xa,this.ta,this.L))!==aa&&super.set(ha,xa),xa):aa}}na(){return Array.from(super.keys())}Ia(){return super.keys()}[Symbol.iterator](){return this.entries()}};function Ve(ha,aa,xa,ba,Sa,Ta){return ha=Se(ha,ba,xa,Ta),Sa&&(ha=tn(ha)),ha}function Xe(ha){return ha}function He(ha){return[ha,this.get(ha)]}let We;function ze(){return We||(We=new je($t([]),void 0,void 0,void 0,Ie))}function Ke(ha,aa,xa,ba,Sa){if(ha!=null){if(Array.isArray(ha))ha=ie(ha,void 0,0)?void 0:Sa&&2&zt(ha)?ha:Ye(ha,aa,xa,ba!==void 0,Sa);else if(re(ha)){const Ta={};for(let wa in ha)Ta[wa]=Ke(ha[wa],aa,xa,ba,Sa);ha=Ta}else ha=aa(ha,ba);return ha}}function Ye(ha,aa,xa,ba,Sa){const Ta=ba||xa?zt(ha):0;ba=ba?!!(32&Ta):void 0;const wa=Bt(ha);for(let Ea=0;Ea<wa.length;Ea++)wa[Ea]=Ke(wa[Ea],aa,xa,ba,Sa);return xa&&(le(wa,ha),xa(Ta,wa)),wa}function $e(ha){return Ke(ha,qe,void 0,void 0,!1)}function qe(ha){return ha.X===te?ha.toJSON():ha instanceof je?ha.oa($e):function(aa){switch(typeof aa){case"number":return isFinite(aa)?aa:String(aa);case"boolean":return aa?1:0;case"object":if(aa)if(Array.isArray(aa)){if(ie(aa,void 0,0))return}else{if(R(aa))return k(aa);if(aa instanceof U){const xa=aa.g;return xa==null?"":typeof xa=="string"?xa:aa.g=k(xa)}if(aa instanceof je)return aa.oa()}}return aa}(ha)}function Je(ha,aa,xa=Jt){if(ha!=null){if(A&&ha instanceof Uint8Array)return aa?ha:new Uint8Array(ha);if(Array.isArray(ha)){var ba=zt(ha);return 2&ba?ha:(aa&&(aa=ba===0||!!(32&ba)&&!(64&ba||!(16&ba))),aa?Yt(ha,-12293&(34|ba)):Ye(ha,Je,4&ba?Jt:xa,!0,!0))}return ha.X===te?(xa=ha.u,ha=2&(ba=Kt(xa))?ha:Ze(ha,xa,ba,!0)):ha instanceof je&&!(2&ha.L)&&(xa=$t(ha.Y(Je)),ha=new je(xa,ha.U,ha.S,ha.Z)),ha}}function Ze(ha,aa,xa,ba){return ha=ha.constructor,Fe=aa=Qe(aa,xa,ba),aa=new ha(aa),Fe=void 0,aa}function Qe(ha,aa,xa){const ba=xa||2&aa?Jt:qt,Sa=!!(32&aa);return ha=function(Ta,wa,Ea){const ka=Bt(Ta);var Aa=ka.length;const Fa=256&wa?ka[Aa-1]:void 0;for(Aa+=Fa?-1:0,wa=512&wa?1:0;wa<Aa;wa++)ka[wa]=Ea(ka[wa]);if(Fa){wa=ka[wa]={};for(const La in Fa)wa[La]=Ea(Fa[La])}return le(ka,Ta),ka}(ha,aa,Ta=>Je(Ta,Sa,ba)),Xt(ha,32|(xa?2:0)),ha}function tn(ha){const aa=ha.u,xa=Kt(aa);return 2&xa?Ze(ha,aa,xa,!1):ha}function en(ha,aa){return nn(ha=ha.u,Kt(ha),aa)}function nn(ha,aa,xa,ba){if(xa===-1)return null;if(xa>=Zt(aa)){if(256&aa)return ha[ha.length-1][xa]}else{var Sa=ha.length;if(ba&&256&aa&&(ba=ha[Sa-1][xa])!=null)return ba;if((aa=xa+(+!!(512&aa)-1))<Sa)return ha[aa]}}function rn(ha,aa,xa,ba){const Sa=ha.u;let Ta=Kt(Sa);return ae(Ta),sn(Sa,Ta,aa,xa,ba),ha}function sn(ha,aa,xa,ba,Sa){const Ta=Zt(aa);if(xa>=Ta||Sa){let wa=aa;if(256&aa)Sa=ha[ha.length-1];else{if(ba==null)return wa;Sa=ha[Ta+(+!!(512&aa)-1)]={},wa|=256}return Sa[xa]=ba,xa<Ta&&(ha[xa+(+!!(512&aa)-1)]=void 0),wa!==aa&&Yt(ha,wa),wa}return ha[xa+(+!!(512&aa)-1)]=ba,256&aa&&xa in(ha=ha[ha.length-1])&&delete ha[xa],aa}function on(ha,aa,xa,ba,Sa){var Ta=2&aa;let wa=nn(ha,aa,xa,Sa);Array.isArray(wa)||(wa=Qt);const Ea=!(2&ba);ba=!(1&ba);const ka=!!(32&aa);let Aa=zt(wa);return Aa!==0||!ka||Ta||Ea?1&Aa||(Aa|=1,Yt(wa,Aa)):(Aa|=33,Yt(wa,Aa)),Ta?(ha=!1,2&Aa||($t(wa),ha=!!(4&Aa)),(ba||ha)&&Object.freeze(wa)):(Ta=!!(2&Aa)||!!(2048&Aa),ba&&Ta?(wa=Bt(wa),ba=1,ka&&!Ea&&(ba|=32),Yt(wa,ba),sn(ha,aa,xa,wa,Sa)):Ea&&32&Aa&&!Ta&&Ht(wa,32)),wa}function an(ha,aa){ha=ha.u;let xa=Kt(ha);const ba=nn(ha,xa,aa),Sa=fe(ba);return Sa!=null&&Sa!==ba&&sn(ha,xa,aa,Sa),Sa}function hn(ha){ha=ha.u;let aa=Kt(ha);const xa=nn(ha,aa,1),ba=se(xa,!0,!!(34&aa));return ba!=null&&ba!==xa&&sn(ha,aa,1,ba),ba}function cn(ha,aa,xa){ha=ha.u;let ba=Kt(ha);const Sa=2&ba?1:2;let Ta=un(ha,ba,aa);var wa=zt(Ta);if(!(4&wa)){(4&wa||Object.isFrozen(Ta))&&(Ta=Bt(Ta),wa=Sn(wa,ba,!1),ba=sn(ha,ba,aa,Ta));var Ea=0;let ka=0;for(;Ea<Ta.length;Ea++){const Aa=xa(Ta[Ea]);Aa!=null&&(Ta[ka++]=Aa)}ka<Ea&&(Ta.length=ka),wa=Wt(wa=ln(wa,ba,!1),20,!0),wa=Wt(wa,4096,!1),wa=Wt(wa,8192,!1),Yt(Ta,wa),2&wa&&Object.freeze(Ta)}return dn(wa)||(xa=wa,(wa=(Ea=Sa===1)?Wt(wa,2,!0):Wt(wa,32,!1))!==xa&&Yt(Ta,wa),Ea&&Object.freeze(Ta)),Sa===2&&dn(wa)&&(Ta=Bt(Ta),wa=Sn(wa,ba,!1),Yt(Ta,wa),sn(ha,ba,aa,Ta)),Ta}function un(ha,aa,xa){return ha=nn(ha,aa,xa),Array.isArray(ha)?ha:Qt}function ln(ha,aa,xa){return ha===0&&(ha=Sn(ha,aa,xa)),Wt(ha,1,!0)}function dn(ha){return!!(2&ha)&&!!(4&ha)||!!(2048&ha)}function fn(ha){ha=Bt(ha);for(let aa=0;aa<ha.length;aa++){const xa=ha[aa]=Bt(ha[aa]);Array.isArray(xa[1])&&(xa[1]=$t(xa[1]))}return ha}function pn(ha,aa,xa){{const wa=ha.u;let Ea=Kt(wa);if(ae(Ea),xa==null)sn(wa,Ea,aa);else{var ba,Sa=ha=zt(xa),Ta=!!(2&ha)||Object.isFrozen(xa);if((ba=!Ta)&&(ba=!1),!(4&ha))for(ha=21,Ta&&(xa=Bt(xa),Sa=0,ha=Sn(ha,Ea,!0)),Ta=0;Ta<xa.length;Ta++)xa[Ta]=be(xa[Ta]);ba&&(xa=Bt(xa),Sa=0,ha=Sn(ha,Ea,!0)),ha!==Sa&&Yt(xa,ha),sn(wa,Ea,aa,xa)}}}function gn(ha,aa,xa,ba){ha=ha.u;let Sa=Kt(ha);ae(Sa),sn(ha,Sa,aa,(ba==="0"?Number(xa)===0:xa===ba)?void 0:xa)}function mn(ha,aa,xa,ba){const Sa=Kt(ha);ae(Sa),ha=on(ha,Sa,aa,2),ba=xa(ba,!!(4&(aa=zt(ha)))&&!!(4096&aa)),ha.push(ba)}function yn(ha){return ha}function _n(ha,aa){return vn(ha=ha.u,Kt(ha),di)===aa?aa:-1}function vn(ha,aa,xa){let ba=0;for(let Sa=0;Sa<xa.length;Sa++){const Ta=xa[Sa];nn(ha,aa,Ta)!=null&&(ba!==0&&(aa=sn(ha,aa,ba)),ba=Ta)}return ba}function En(ha,aa,xa,ba){let Sa=Kt(ha);ae(Sa);const Ta=nn(ha,Sa,xa,ba);let wa;if(Ta!=null&&Ta.X===te)return(aa=tn(Ta))!==Ta&&sn(ha,Sa,xa,aa,ba),aa.u;if(Array.isArray(Ta)){const Ea=zt(Ta);wa=2&Ea?Qe(Ta,Ea,!1):Ta,wa=Oe(wa,aa)}else wa=Oe(void 0,aa);return wa!==Ta&&sn(ha,Sa,xa,wa,ba),wa}function wn(ha,aa,xa,ba){ha=ha.u;let Sa=Kt(ha);const Ta=nn(ha,Sa,xa,ba);return(aa=Se(Ta,aa,!1,Sa))!==Ta&&aa!=null&&sn(ha,Sa,xa,aa,ba),aa}function Tn(ha,aa,xa,ba=!1){if((aa=wn(ha,aa,xa,ba))==null)return aa;ha=ha.u;let Sa=Kt(ha);if(!(2&Sa)){const Ta=tn(aa);Ta!==aa&&sn(ha,Sa,xa,aa=Ta,ba)}return aa}function An(ha,aa,xa,ba,Sa,Ta){var wa=!!(2&aa),Ea=wa?1:2;const ka=Ea===1;Ea=Ea===2,Sa=!!Sa,Ta&&(Ta=!wa),wa=un(ha,aa,ba);var Aa=zt(wa);const Fa=!!(4&Aa);if(!Fa){var La=wa,el=aa;const tl=!!(2&(Aa=ln(Aa,aa,Sa)));tl&&(el=Wt(el,2,!0));let nl=!tl,rl=!0,sl=0,ol=0;for(;sl<La.length;sl++){const al=Se(La[sl],xa,!1,el);if(al instanceof xa){if(!tl){const ll=!!(2&zt(al.u));nl&&(nl=!ll),rl&&(rl=ll)}La[ol++]=al}}ol<sl&&(La.length=ol),Aa=Wt(Aa,4,!0),Aa=Wt(Aa,16,rl),Aa=Wt(Aa,8,nl),Yt(La,Aa),tl&&Object.freeze(La)}if(xa=!!(8&Aa)||ka&&!wa.length,Ta&&!xa){for(dn(Aa)&&(wa=Bt(wa),Aa=Sn(Aa,aa,Sa),aa=sn(ha,aa,ba,wa)),Ta=wa,xa=Aa,La=0;La<Ta.length;La++)(Aa=Ta[La])!==(el=tn(Aa))&&(Ta[La]=el);xa=Wt(xa,8,!0),xa=Wt(xa,16,!Ta.length),Yt(Ta,xa),Aa=xa}return dn(Aa)||(Ta=Aa,ka?Aa=Wt(Aa,!wa.length||16&Aa&&(!Fa||32&Aa)?2:2048,!0):Sa||(Aa=Wt(Aa,32,!1)),Aa!==Ta&&Yt(wa,Aa),ka&&Object.freeze(wa)),Ea&&dn(Aa)&&(wa=Bt(wa),Aa=Sn(Aa,aa,Sa),Yt(wa,Aa),sn(ha,aa,ba,wa)),wa}function bn(ha,aa,xa){ha=ha.u;const ba=Kt(ha);return An(ha,ba,aa,xa,!1,!(2&ba))}function kn(ha,aa,xa,ba,Sa){return ba==null&&(ba=void 0),rn(ha,xa,ba,Sa)}function xn(ha,aa,xa,ba){ba==null&&(ba=void 0),ha=ha.u;let Sa=Kt(ha);ae(Sa),(xa=vn(ha,Sa,xa))&&xa!==aa&&ba!=null&&(Sa=sn(ha,Sa,xa)),sn(ha,Sa,aa,ba)}function Sn(ha,aa,xa){return ha=Wt(ha,2,!!(2&aa)),ha=Wt(ha,32,!!(32&aa)&&xa),Wt(ha,2048,!1)}function Ln(ha,aa,xa,ba){ha=ha.u;const Sa=Kt(ha);ae(Sa),aa=An(ha,Sa,xa,aa,!0),xa=ba??new xa,aa.push(xa),2&zt(xa.u)?Ht(aa,8):Ht(aa,16)}function Fn(ha,aa){return ye(en(ha,aa))}function Rn(ha,aa){return xe(en(ha,aa))}function Mn(ha){return ha??0}function Pn(ha,aa){return Mn(an(ha,aa))}function On(ha,aa,xa){if(xa!=null&&typeof xa!="boolean")throw ha=typeof xa,Error(`Expected boolean but got ${ha!="object"?ha:xa?Array.isArray(xa)?"array":ha:"null"}: ${xa}`);rn(ha,aa,xa)}function Cn(ha,aa,xa){if(xa!=null){if(typeof xa!="number"||!Number.isFinite(xa))throw de("int32");xa|=0}rn(ha,aa,xa)}function In(ha,aa,xa){if(xa!=null&&typeof xa!="number")throw Error(`Value of float/double field must be a number, found ${typeof xa}: ${xa}`);rn(ha,aa,xa)}function Dn(ha,aa,xa){aa.g?aa.m(ha,aa.g,aa.h,xa,!0):aa.m(ha,aa.h,xa,!0)}je.prototype.toJSON=void 0,je.prototype.Ja=ee;var Nn=class{constructor(ha,aa){this.u=Ce(ha,aa)}toJSON(){return Un(this,Ye(this.u,qe,void 0,void 0,!1),!0)}l(){var ha=mo;return ha.g?ha.l(this,ha.g,ha.h,!0):ha.l(this,ha.h,ha.defaultValue,!0)}clone(){const ha=this.u;return Ze(this,ha,Kt(ha),!1)}N(){return!!(2&zt(this.u))}};function Un(ha,aa,xa){var ba=d?void 0:ha.constructor.A;const Sa=Kt(xa?ha.u:aa);if(!(ha=aa.length))return aa;let Ta,wa;if(re(xa=aa[ha-1])){e:{var Ea=xa;let Fa={},La=!1;for(var ka in Ea){let el=Ea[ka];if(Array.isArray(el)){let tl=el;(ie(el,ba,+ka)||ne(el)&&el.size===0)&&(el=null),el!=tl&&(La=!0)}el!=null?Fa[ka]=el:La=!0}if(La){for(var Aa in Fa){Ea=Fa;break e}Ea=null}}Ea!=xa&&(Ta=!0),ha--}for(ka=+!!(512&Sa)-1;0<ha&&(xa=aa[Aa=ha-1],Aa-=ka,xa==null||ie(xa,ba,Aa)||ne(xa)&&xa.size===0);ha--)wa=!0;return(Ta||wa)&&(aa=Array.prototype.slice.call(aa,0,ha),Ea&&aa.push(Ea)),aa}function Bn(ha){return Array.isArray(ha)?ha[0]instanceof Ut?ha:[Gr,ha]:[ha,void 0]}function Gn(ha,aa){if(Array.isArray(aa)){var xa=zt(aa);if(4&xa)return aa;for(var ba=0,Sa=0;ba<aa.length;ba++){const Ta=ha(aa[ba]);Ta!=null&&(aa[Sa++]=Ta)}return Sa<ba&&(aa.length=Sa),Yt(aa,-12289&(5|xa)),2&xa&&Object.freeze(aa),aa}}Nn.prototype.X=te,Nn.prototype.toString=function(){return Un(this,this.u,!1).toString()};const jn=Symbol();function Vn(ha){let aa=ha[jn];if(!aa){const xa=qn(ha),ba=hr(ha),Sa=ba.l;aa=Sa?(Ta,wa)=>Sa(Ta,wa,ba):(Ta,wa)=>{for(;gt(wa)&&wa.h!=4;){var Ea=wa.m,ka=ba[Ea];if(!ka){var Aa=ba.ea;Aa&&(Aa=Aa[Ea])&&(ka=ba[Ea]=Xn(Aa))}ka&&ka(wa,Ta,Ea)||(Ea=(ka=wa).l,mt(ka),ka.ia?ka=void 0:(Aa=ka.g.g-Ea,ka.g.g=Ea,ka=ft(ka.g,Aa)),Ea=Ta,ka&&(ce||(ce=Symbol()),(Aa=Ea[ce])?Aa.push(ka):Ea[ce]=[ka]))}xa===Wn||xa===zn||xa.j||(Ta[ue||(ue=Symbol())]=xa)},ha[jn]=aa}return aa}function Xn(ha){const aa=(ha=Bn(ha))[0].g;if(ha=ha[1]){const xa=Vn(ha),ba=hr(ha).T;return(Sa,Ta,wa)=>aa(Sa,Ta,wa,ba,xa)}return aa}class Hn{}let Wn,zn;const Kn=Symbol();function Yn(ha,aa,xa){const ba=xa[1];let Sa;if(ba){const Ta=ba[Kn];Sa=Ta?Ta.T:Pe(ba[0]),ha[aa]=Ta??ba}Sa&&Sa===Re?(ha.g||(ha.g=new Set)).add(aa):xa[0]&&(ha.h||(ha.h=new Set)).add(aa)}function $n(ha,aa){return[ha.l,!aa||0<aa[0]?void 0:aa]}function qn(ha){var aa=ha[Kn];if(aa)return aa;if(!(aa=Zn(ha,ha[Kn]=new Hn,$n,$n,Yn)).ea&&!aa.h&&!aa.g){let xa=!0;for(let ba in aa)isNaN(ba)||(xa=!1);xa?(Pe(ha[0])===Re?zn?aa=zn:((aa=new Hn).T=Pe(!0),aa=zn=aa):aa=Wn||(Wn=new Hn),aa=ha[Kn]=aa):aa.j=!0}return aa}function Jn(ha,aa,xa){ha[aa]=xa}function Zn(ha,aa,xa,ba,Sa=Jn){aa.T=Pe(ha[0]);let Ta=0;var wa=ha[++Ta];wa&&wa.constructor===Object&&(aa.ea=wa,typeof(wa=ha[++Ta])=="function"&&(aa.l=wa,aa.m=ha[++Ta],wa=ha[++Ta]));const Ea={};for(;Array.isArray(wa)&&typeof wa[0]=="number"&&0<wa[0];){for(var ka=0;ka<wa.length;ka++)Ea[wa[ka]]=wa;wa=ha[++Ta]}for(ka=1;wa!==void 0;){let La;typeof wa=="number"&&(ka+=wa,wa=ha[++Ta]);var Aa=void 0;if(wa instanceof Ut?La=wa:(La=jr,Ta--),La.pa){wa=ha[++Ta],Aa=ha;var Fa=Ta;typeof wa=="function"&&(wa=wa(),Aa[Fa]=wa),Aa=wa}for(Fa=ka+1,typeof(wa=ha[++Ta])=="number"&&0>wa&&(Fa-=wa,wa=ha[++Ta]);ka<Fa;ka++){const el=Ea[ka];Sa(aa,ka,Aa?ba(La,Aa,el):xa(La,el))}}return aa}const Qn=Symbol();function tr(ha){let aa=ha[Qn];if(!aa){const xa=sr(ha);aa=(ba,Sa)=>lr(ba,Sa,xa),ha[Qn]=aa}return aa}const er=Symbol();function nr(ha){return ha.h}function rr(ha,aa){let xa,ba;const Sa=ha.h;return(Ta,wa,Ea)=>Sa(Ta,wa,Ea,ba||(ba=sr(aa).T),xa||(xa=tr(aa)))}function sr(ha){let aa=ha[er];return aa||(aa=Zn(ha,ha[er]={},nr,rr),cr(ha),aa)}const ir=Symbol();function or(ha,aa){const xa=ha.g;return aa?(ba,Sa,Ta)=>xa(ba,Sa,Ta,aa):xa}function ar(ha,aa,xa){const ba=ha.g;let Sa,Ta;return(wa,Ea,ka)=>ba(wa,Ea,ka,Ta||(Ta=hr(aa).T),Sa||(Sa=Vn(aa)),xa)}function hr(ha){let aa=ha[ir];return aa||(qn(ha),aa=Zn(ha,ha[ir]={},or,ar),cr(ha),aa)}function cr(ha){ir in ha&&Kn in ha&&er in ha&&(ha.length=0)}function ur(ha,aa){var xa=ha[aa];if(xa)return xa;if((xa=ha.ea)&&(xa=xa[aa])){var ba=(xa=Bn(xa))[0].h;if(xa=xa[1]){const Sa=tr(xa),Ta=sr(xa).T;xa=(xa=ha.m)?xa(Ta,Sa):(wa,Ea,ka)=>ba(wa,Ea,ka,Ta,Sa)}else xa=ba;return ha[aa]=xa}}function lr(ha,aa,xa){for(var ba=Kt(ha),Sa=+!!(512&ba)-1,Ta=ha.length,wa=512&ba?1:0,Ea=Ta+(256&ba?-1:0);wa<Ea;wa++){const ka=ha[wa];if(ka==null)continue;const Aa=wa-Sa,Fa=ur(xa,Aa);Fa&&Fa(aa,ka,Aa)}if(256&ba){ba=ha[Ta-1];for(let ka in ba)Sa=+ka,Number.isNaN(Sa)||(Ta=ba[ka])!=null&&(Ea=ur(xa,Sa))&&Ea(aa,Ta,Sa)}if(ha=ce?ha[ce]:void 0)for(Pt(aa,aa.g.end()),xa=0;xa<ha.length;xa++)Pt(aa,N(ha[xa])||P())}function dr(ha,aa){return new Ut(ha,aa,!1,!1)}function fr(ha,aa){return new Ut(ha,aa,!0,!1)}function pr(ha,aa){return new Ut(ha,aa,!1,!0)}function gr(ha,aa,xa){sn(ha,Kt(ha),aa,xa)}var mr=pr(function(ha,aa,xa,ba,Sa){return ha.h===2&&(ha=yt(ha,Oe([void 0,void 0],ba),Sa),ae(ba=Kt(aa)),(Sa=nn(aa,ba,xa))instanceof je?2&Sa.L?((Sa=Sa.Y()).push(ha),sn(aa,ba,xa,Sa)):Sa.Oa(ha):Array.isArray(Sa)?(2&zt(Sa)&&sn(aa,ba,xa,Sa=fn(Sa)),Sa.push(ha)):sn(aa,ba,xa,[ha]),!0)},function(ha,aa,xa,ba,Sa){if(aa instanceof je)aa.forEach((Ta,wa)=>{Nt(ha,xa,Oe([wa,Ta],ba),Sa)});else if(Array.isArray(aa))for(let Ta=0;Ta<aa.length;Ta++){const wa=aa[Ta];Array.isArray(wa)&&Nt(ha,xa,Oe(wa,ba),Sa)}});function yr(ha,aa,xa){e:if(aa!=null){if(me(aa)){if(typeof aa=="string"){aa=Te(aa);break e}if(typeof aa=="number"){aa=we(aa);break e}}aa=void 0}aa!=null&&(typeof aa=="string"&&kt(aa),aa!=null&&(Ot(ha,xa,0),typeof aa=="number"?(ha=ha.g,Y(aa),Lt(ha,z,K)):(xa=kt(aa),Lt(ha.g,xa.h,xa.g))))}function _r(ha,aa,xa){(aa=ye(aa))!=null&&aa!=null&&(Ot(ha,xa,0),Rt(ha.g,aa))}function vr(ha,aa,xa){(aa=pe(aa))!=null&&(Ot(ha,xa,0),ha.g.g.push(aa?1:0))}function Er(ha,aa,xa){(aa=xe(aa))!=null&&Dt(ha,xa,c(aa))}function wr(ha,aa,xa,ba,Sa){Nt(ha,xa,aa instanceof Nn?aa.u:Array.isArray(aa)?Oe(aa,ba):void 0,Sa)}function Tr(ha,aa,xa){(aa=aa==null||typeof aa=="string"||R(aa)||aa instanceof U?aa:void 0)!=null&&Dt(ha,xa,V(aa).buffer)}function Ar(ha,aa,xa){return(ha.h===5||ha.h===2)&&(aa=on(aa,Kt(aa),xa,2,!1),ha.h==2?Et(ha,ht,aa):aa.push(ht(ha.g)),!0)}var br,kr=dr(function(ha,aa,xa){if(ha.h!==1)return!1;var ba=ha.g;ha=at(ba);const Sa=at(ba);ba=2*(Sa>>31)+1;const Ta=Sa>>>20&2047;return ha=4294967296*(1048575&Sa)+ha,gr(aa,xa,Ta==2047?ha?NaN:1/0*ba:Ta==0?ba*Math.pow(2,-1074)*ha:ba*Math.pow(2,Ta-1075)*(ha+4503599627370496)),!0},function(ha,aa,xa){(aa=fe(aa))!=null&&(Ot(ha,xa,1),ha=ha.g,(xa=W||(W=new DataView(new ArrayBuffer(8)))).setFloat64(0,+aa,!0),z=xa.getUint32(0,!0),K=xa.getUint32(4,!0),Mt(ha,z),Mt(ha,K))}),xr=dr(function(ha,aa,xa){return ha.h===5&&(gr(aa,xa,ht(ha.g)),!0)},function(ha,aa,xa){(aa=fe(aa))!=null&&(Ot(ha,xa,5),ha=ha.g,$(aa),Mt(ha,z))}),Sr=fr(Ar,function(ha,aa,xa){if((aa=Gn(fe,aa))!=null)for(let wa=0;wa<aa.length;wa++){var ba=ha,Sa=xa,Ta=aa[wa];Ta!=null&&(Ot(ba,Sa,5),ba=ba.g,$(Ta),Mt(ba,z))}}),Lr=fr(Ar,function(ha,aa,xa){if((aa=Gn(fe,aa))!=null&&aa.length){Ot(ha,xa,2),Ft(ha.g,4*aa.length);for(let ba=0;ba<aa.length;ba++)xa=ha.g,$(aa[ba]),Mt(xa,z)}}),Fr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,rt(ha.g,J)),!0)},yr),Rr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,(ha=rt(ha.g,J))===0?void 0:ha),!0)},yr),Mr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,rt(ha.g,q)),!0)},function(ha,aa,xa){e:if(aa!=null){if(me(aa)){if(typeof aa=="string"){var ba=Math.trunc(Number(aa));Number.isSafeInteger(ba)&&0<=ba?aa=String(ba):((ba=aa.indexOf("."))!==-1&&(aa=aa.substring(0,ba)),ve(aa)||(et(aa),aa=Z(z,K)));break e}if(typeof aa=="number"){aa=0<=(aa=Math.trunc(aa))&&Number.isSafeInteger(aa)?aa:function(Sa){if(0>Sa){Y(Sa);const Ta=Z(z,K);return Sa=Number(Ta),Number.isSafeInteger(Sa)?Sa:Ta}return ve(String(Sa))?Sa:(Y(Sa),q(z,K))}(aa);break e}}aa=void 0}aa!=null&&(typeof aa=="string"&&Tt(aa),aa!=null&&(Ot(ha,xa,0),typeof aa=="number"?(ha=ha.g,Y(aa),Lt(ha,z,K)):(xa=Tt(aa),Lt(ha.g,xa.h,xa.g))))}),Pr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,it(ha.g)),!0)},_r),Or=fr(function(ha,aa,xa){return(ha.h===0||ha.h===2)&&(aa=on(aa,Kt(aa),xa,2,!1),ha.h==2?Et(ha,it,aa):aa.push(it(ha.g)),!0)},function(ha,aa,xa){if((aa=Gn(ye,aa))!=null&&aa.length){xa=Ct(ha,xa);for(let ba=0;ba<aa.length;ba++)Rt(ha.g,aa[ba]);It(ha,xa)}}),Cr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,(ha=it(ha.g))===0?void 0:ha),!0)},_r),Ir=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,st(ha.g)),!0)},vr),Dr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,(ha=st(ha.g))===!1?void 0:ha),!0)},vr),Nr=fr(function(ha,aa,xa){return ha.h===2&&(mn(aa,xa,yn,ha=_t(ha)),!0)},function(ha,aa,xa){if((aa=Gn(xe,aa))!=null)for(let wa=0;wa<aa.length;wa++){var ba=ha,Sa=xa,Ta=aa[wa];Ta!=null&&Dt(ba,Sa,c(Ta))}}),Ur=dr(function(ha,aa,xa){return ha.h===2&&(gr(aa,xa,(ha=_t(ha))===""?void 0:ha),!0)},Er),Br=dr(function(ha,aa,xa){return ha.h===2&&(gr(aa,xa,_t(ha)),!0)},Er),Gr=pr(function(ha,aa,xa,ba,Sa){return ha.h===2&&(yt(ha,En(aa,ba,xa,!0),Sa),!0)},wr),jr=pr(function(ha,aa,xa,ba,Sa){return ha.h===2&&(yt(ha,En(aa,ba,xa),Sa),!0)},wr);br=new Ut(function(ha,aa,xa,ba,Sa){if(ha.h!==2)return!1;ba=Oe(void 0,ba);let Ta=Kt(aa);ae(Ta);let wa=on(aa,Ta,xa,3);return Ta=Kt(aa),4&zt(wa)&&(wa=Bt(wa),Yt(wa,-2079&(1|zt(wa))),sn(aa,Ta,xa,wa)),wa.push(ba),yt(ha,ba,Sa),!0},function(ha,aa,xa,ba,Sa){if(Array.isArray(aa))for(let Ta=0;Ta<aa.length;Ta++)wr(ha,aa[Ta],xa,ba,Sa)},!0,!0);var Vr=pr(function(ha,aa,xa,ba,Sa,Ta){if(ha.h!==2)return!1;let wa=Kt(aa);return ae(wa),(Ta=vn(aa,wa,Ta))&&xa!==Ta&&sn(aa,wa,Ta),yt(ha,aa=En(aa,ba,xa),Sa),!0},wr),Xr=dr(function(ha,aa,xa){return ha.h===2&&(gr(aa,xa,vt(ha)),!0)},Tr),Hr=fr(function(ha,aa,xa){return(ha.h===0||ha.h===2)&&(aa=on(aa,Kt(aa),xa,2,!1),ha.h==2?Et(ha,ot,aa):aa.push(ot(ha.g)),!0)},function(ha,aa,xa){if((aa=Gn(_e,aa))!=null)for(let wa=0;wa<aa.length;wa++){var ba=ha,Sa=xa,Ta=aa[wa];Ta!=null&&(Ot(ba,Sa,0),Ft(ba.g,Ta))}}),Wr=dr(function(ha,aa,xa){return ha.h===0&&(gr(aa,xa,it(ha.g)),!0)},function(ha,aa,xa){(aa=ye(aa))!=null&&(aa=parseInt(aa,10),Ot(ha,xa,0),Rt(ha.g,aa))}),zr=fr(function(ha,aa,xa){return(ha.h===0||ha.h===2)&&(aa=on(aa,Kt(aa),xa,2,!1),ha.h==2?Et(ha,ct,aa):aa.push(it(ha.g)),!0)},function(ha,aa,xa){if((aa=Gn(ye,aa))!=null&&aa.length){xa=Ct(ha,xa);for(let ba=0;ba<aa.length;ba++)Rt(ha.g,aa[ba]);It(ha,xa)}});class Kr{constructor(aa,xa){this.h=aa,this.g=xa,this.l=Tn,this.m=kn,this.defaultValue=void 0}}function Yr(ha,aa){return new Kr(ha,aa)}function $r(ha,aa){return(xa,ba)=>{e:{if(wt.length){const Ta=wt.pop();Ta.o(ba),ut(Ta.g,xa,ba),xa=Ta}else xa=new class{constructor(Ta,wa){if(pt.length){const Ea=pt.pop();ut(Ea,Ta,wa),Ta=Ea}else Ta=new class{constructor(Ea,ka){this.h=null,this.m=!1,this.g=this.l=this.j=0,ut(this,Ea,ka)}clear(){this.h=null,this.m=!1,this.g=this.l=this.j=0,this.ca=!1}}(Ta,wa);this.g=Ta,this.l=this.g.g,this.h=this.m=-1,this.o(wa)}o({ia:Ta=!1}={}){this.ia=Ta}}(xa,ba);try{const Ta=new ha,wa=Ta.u;Vn(aa)(wa,xa);var Sa=Ta;break e}finally{xa.g.clear(),xa.m=-1,xa.h=-1,100>wt.length&&wt.push(xa)}Sa=void 0}return Sa}}function qr(ha){return function(){const aa=new class{constructor(){this.l=[],this.h=0,this.g=new class{constructor(){this.g=[]}length(){return this.g.length}end(){const wa=this.g;return this.g=[],wa}}}};lr(this.u,aa,sr(ha)),Pt(aa,aa.g.end());const xa=new Uint8Array(aa.h),ba=aa.l,Sa=ba.length;let Ta=0;for(let wa=0;wa<Sa;wa++){const Ea=ba[wa];xa.set(Ea,Ta),Ta+=Ea.length}return aa.l=[xa],xa}}var Jr=class extends Nn{constructor(ha){super(ha)}},Zr=[0,Ur,dr(function(ha,aa,xa){return ha.h===2&&(gr(aa,xa,(ha=vt(ha))===D()?void 0:ha),!0)},function(ha,aa,xa){if(aa!=null){if(aa instanceof Nn){const ba=aa.Qa;return void(ba&&(aa=ba(aa),aa!=null&&Dt(ha,xa,V(aa).buffer)))}if(Array.isArray(aa))return}Tr(ha,aa,xa)})],Qr=[0,Br],ts=[0,Pr,Wr,Ir,-1,Or,Wr,-1],es=[0,Ir,-1],ns=class extends Nn{constructor(){super()}};ns.A=[6];var rs=[0,Ir,Br,Ir,Wr,-1,zr,Br,-1,es,Wr],ss=[0,Br,-2],is=class extends Nn{constructor(){super()}},os=[0],as=[0,Pr,Ir,-3],hs=class extends Nn{constructor(ha){super(ha,2)}},cs={},us=[-2,cs,Ir];cs[336783863]=[0,Br,Ir,-1,Pr,[0,[1,2,3,4,5],Vr,os,Vr,rs,Vr,ss,Vr,as,Vr,ts],Qr];var ls=[0,Ur,Dr],ds=[0,Rr,-1,Dr,-3,Rr,Or,Ur,Cr,Rr,-1,Dr,Cr,Dr,-2,Ur],fs=[-1,{}],ps=[0,Br,1,fs],gs=[0,Br,Nr,fs];function ms(ha,aa){gn(ha,2,ke(aa),"")}function ys(ha,aa){mn(ha.u,3,be,aa)}function _s(ha,aa){mn(ha.u,4,be,aa)}var vs=class extends Nn{constructor(ha){super(ha,500)}o(ha){return kn(this,0,7,ha)}};vs.A=[3,4,5,6,8,13,17,1005];var Es=[-500,Ur,-1,Nr,-3,us,br,Zr,Cr,-1,ps,gs,br,ls,Ur,ds,Cr,Nr,987,Nr],ws=[0,Ur,-1,fs],Ts=[-500,Br,-1,[-1,{}],998,Br],As=[-500,Br,Nr,-1,[-2,{},Ir],997,Nr,-1],bs=[-500,Br,Nr,fs,998,Nr];function ks(ha,aa){Ln(ha,1,vs,aa)}function xs(ha,aa){mn(ha.u,10,be,aa)}function Ss(ha,aa){mn(ha.u,15,be,aa)}var Ls=class extends Nn{constructor(ha){super(ha,500)}o(ha){return kn(this,0,1001,ha)}};Ls.A=[1,6,7,9,10,15,16,17,14,1002];var Fs=[-500,br,Es,4,br,Ts,br,As,Cr,br,bs,Nr,Cr,ps,gs,br,ws,Nr,-2,ds,Ur,-1,Dr,979,fs,br,Zr],Rs=$r(Ls,Fs);Ls.prototype.g=qr(Fs);var Ms=[0,br,[0,Pr,-2]],Ps=class extends Nn{constructor(ha){super(ha)}},Os=[0,Pr,xr,Br,-1],Cs=class extends Nn{constructor(ha){super(ha)}g(){return bn(this,Ps,1)}};Cs.A=[1];var Is=[0,br,Os],Ds=$r(Cs,Is),Ns=[0,Pr,xr],Us=[0,Pr,-1,Ms],Bs=class extends Nn{constructor(ha){super(ha)}},Gs=[0,Pr,-3],js=[0,xr,-3],Vs=class extends Nn{constructor(ha){super(ha)}},Xs=[0,xr,-1,Br,xr],Hs=class extends Nn{constructor(ha){super(ha)}h(){return Tn(this,Bs,2)}g(){return bn(this,Vs,5)}};Hs.A=[5];var Ws=[0,Wr,Gs,js,Us,br,Xs],zs=class extends Nn{constructor(ha){super(ha)}};zs.A=[1,2,3,8,9];var Ks=$r(zs,[0,Nr,Or,Lr,Ws,Br,-1,Fr,br,Ns,Nr,Fr]),Ys=class extends Nn{constructor(ha){super(ha)}},$s=[0,xr,-4],qs=class extends Nn{constructor(ha){super(ha)}};qs.A=[1];var Js=$r(qs,[0,br,$s]),Zs=class extends Nn{constructor(ha){super(ha)}},Qs=[0,xr,-4],ti=class extends Nn{constructor(ha){super(ha)}};ti.A=[1];var ei=$r(ti,[0,br,Qs]),ni=class extends Nn{constructor(ha){super(ha)}};ni.A=[3];var ri=[0,Pr,-1,Lr,Wr],si=class extends Nn{constructor(){super()}};si.prototype.g=qr([0,xr,-4,Fr]);var ii=class extends Nn{constructor(ha){super(ha)}},oi=[0,1,Pr,Br,Is],ai=class extends Nn{constructor(ha){super(ha)}};ai.A=[1];var hi=$r(ai,[0,br,oi,Fr]),ci=class extends Nn{constructor(ha){super(ha)}};ci.A=[1];var ui=class extends Nn{constructor(ha){super(ha)}qa(){const ha=hn(this);return ha??D()}},li=class extends Nn{constructor(ha){super(ha)}},di=[1,2],fi=[0,di,Vr,[0,Lr],Vr,[0,Xr],Pr,Br],pi=class extends Nn{constructor(ha){super(ha)}};pi.A=[1];var gi=$r(pi,[0,br,fi,Fr]),mi=class extends Nn{constructor(ha){super(ha)}};mi.A=[4,5];var yi=[0,Br,Pr,xr,Nr,-1],_i=class extends Nn{constructor(ha){super(ha)}},vi=[0,Ir,-1],Ei=class extends Nn{constructor(ha){super(ha)}},wi=[1,2,3,4,5],Ti=class extends Nn{constructor(ha){super(ha)}g(){return hn(this)!=null}h(){return Rn(this,2)!=null}},Ai=[0,Xr,Br,[0,Pr,Fr,-1],[0,Mr,Fr]],bi=class extends Nn{constructor(ha){super(ha)}g(){return pe(en(this,2))??!1}},ki=[0,Ai,Ir,[0,wi,Vr,as,Vr,rs,Vr,ts,Vr,os,Vr,ss],Wr],xi=class extends Nn{constructor(ha){super(ha)}},Si=[0,ki,xr,-1,Pr],Li=Yr(502141897,xi);cs[502141897]=Si;var Fi=[0,Ai];cs[512499200]=Fi;var Ri=[0,Fi];cs[515723506]=Ri;var Mi=$r(class extends Nn{constructor(ha){super(ha)}},[0,[0,Wr,-1,Sr,Hr],ri]),Pi=[0,ki];cs[508981768]=Pi;var Oi=class extends Nn{constructor(ha){super(ha)}},Ci=[0,ki,xr,Pi,Ir],Ii=class extends Nn{constructor(ha){super(ha)}},Di=[0,ki,Si,Ci,xr,Ri];cs[508968149]=Ci;var Ni=Yr(508968150,Ii);cs[508968150]=Di;var Ui=class extends Nn{constructor(ha){super(ha)}},Bi=Yr(513916220,Ui);cs[513916220]=[0,ki,Di,Pr];var Gi=class extends Nn{constructor(ha){super(ha)}h(){return Tn(this,mi,2)}g(){rn(this,2)}},ji=[0,ki,yi];cs[478825465]=ji;var Vi=[0,ki];cs[478825422]=Vi;var Xi=class extends Nn{constructor(ha){super(ha)}},Hi=[0,ki,Vi,ji,-1],Wi=class extends Nn{constructor(ha){super(ha)}},zi=[0,ki,xr,Pr],Ki=class extends Nn{constructor(ha){super(ha)}},Yi=[0,ki,xr],$i=class extends Nn{constructor(ha){super(ha)}},qi=[0,ki,zi,Yi,xr],Ji=class extends Nn{constructor(ha){super(ha)}},Zi=[0,ki,qi,Hi];cs[463370452]=Hi,cs[464864288]=zi,cs[474472470]=Yi;var Qi=Yr(462713202,$i);cs[462713202]=qi;var to=Yr(479097054,Ji);cs[479097054]=Zi;var eo=class extends Nn{constructor(ha){super(ha)}},no=[0,ki],ro=class extends Nn{constructor(ha){super(ha)}},so=[0,ki,xr,-1,Pr];cs[514774813]=so;var io=class extends Nn{constructor(ha){super(ha)}},oo=[0,ki,xr,Ir];cs[518928384]=oo;var ao=class extends Nn{constructor(){super()}};ao.prototype.g=qr([0,ki,Yi,no,Si,Ci,so,oo]);var ho=class extends Nn{constructor(ha){super(ha)}},co=Yr(456383383,ho);cs[456383383]=[0,ki,yi];var uo=class extends Nn{constructor(ha){super(ha)}},lo=Yr(476348187,uo);cs[476348187]=[0,ki,vi];var fo=class extends Nn{constructor(ha){super(ha)}},po=[0,Wr,-1],go=class extends Nn{constructor(ha){super(ha)}};go.A=[3];var mo=Yr(458105876,class extends Nn{constructor(ha){super(ha)}g(){var ha=this.u;const aa=Kt(ha);var xa=2&aa;return ha=function(ba,Sa,Ta){var wa=go;const Ea=2&Sa;let ka=!1;if(Ta==null){if(Ea)return ze();Ta=[]}else if(Ta.constructor===je){if(!(2&Ta.L)||Ea)return Ta;Ta=Ta.Y()}else Array.isArray(Ta)?ka=!!(2&zt(Ta)):Ta=[];if(Ea){if(!Ta.length)return ze();ka||(ka=!0,$t(Ta))}else ka&&(ka=!1,Ta=fn(Ta));return ka||(64&zt(Ta)?Ht(Ta,32):32&Sa&&Xt(Ta,32)),sn(ba,Sa,2,wa=new je(Ta,wa,Le,void 0),!1),wa}(ha,aa,nn(ha,aa,2)),ha==null||!xa&&go&&(ha.ta=!0),xa=ha}});cs[458105876]=[0,po,mr,[!0,Fr,[0,Br,-1,Nr]]];var yo=class extends Nn{constructor(ha){super(ha)}},_o=Yr(458105758,yo);cs[458105758]=[0,ki,Br,po];var vo=class extends Nn{constructor(ha){super(ha)}};vo.A=[5,6];var Eo=Yr(443442058,vo);cs[443442058]=[0,ki,Br,Pr,xr,Nr,-1];var wo=class extends Nn{constructor(ha){super(ha)}},To=Yr(516587230,wo);function Ao(ha,aa){return aa=aa?aa.clone():new mi,ha.displayNamesLocale!==void 0?rn(aa,1,ke(ha.displayNamesLocale)):ha.displayNamesLocale===void 0&&rn(aa,1),ha.maxResults!==void 0?Cn(aa,2,ha.maxResults):"maxResults"in ha&&rn(aa,2),ha.scoreThreshold!==void 0?In(aa,3,ha.scoreThreshold):"scoreThreshold"in ha&&rn(aa,3),ha.categoryAllowlist!==void 0?pn(aa,4,ha.categoryAllowlist):"categoryAllowlist"in ha&&rn(aa,4),ha.categoryDenylist!==void 0?pn(aa,5,ha.categoryDenylist):"categoryDenylist"in ha&&rn(aa,5),aa}function bo(ha,aa=-1,xa=""){return{categories:ha.map(ba=>({index:Mn(Fn(ba,1))??-1,score:Pn(ba,2)??0,categoryName:Rn(ba,3)??""??"",displayName:Rn(ba,4)??""??""})),headIndex:aa,headName:xa}}function ko(ha){var wa,Ea;var aa=cn(ha,3,fe),xa=cn(ha,2,ye),ba=cn(ha,1,xe),Sa=cn(ha,9,xe);const Ta={categories:[],keypoints:[]};for(let ka=0;ka<aa.length;ka++)Ta.categories.push({score:aa[ka],index:xa[ka]??-1,categoryName:ba[ka]??"",displayName:Sa[ka]??""});if((aa=(wa=Tn(ha,Hs,4))==null?void 0:wa.h())&&(Ta.boundingBox={originX:Fn(aa,1)??0,originY:Fn(aa,2)??0,width:Fn(aa,3)??0,height:Fn(aa,4)??0,angle:0}),(Ea=Tn(ha,Hs,4))==null?void 0:Ea.g().length)for(const ka of Tn(ha,Hs,4).g())Ta.keypoints.push({x:an(ka,1)??0,y:an(ka,2)??0,score:an(ka,4)??0,label:Rn(ka,3)??""});return Ta}function xo(ha){const aa=[];for(const xa of bn(ha,Zs,1))aa.push({x:Pn(xa,1)??0,y:Pn(xa,2)??0,z:Pn(xa,3)??0,visibility:Pn(xa,4)??0});return aa}function So(ha){const aa=[];for(const xa of bn(ha,Ys,1))aa.push({x:Pn(xa,1)??0,y:Pn(xa,2)??0,z:Pn(xa,3)??0,visibility:Pn(xa,4)??0});return aa}function Lo(ha){return Array.from(ha,aa=>127<aa?aa-256:aa)}function Fo(ha,aa){if(ha.length!==aa.length)throw Error(`Cannot compute cosine similarity between embeddings of different sizes (${ha.length} vs. ${aa.length}).`);let xa=0,ba=0,Sa=0;for(let Ta=0;Ta<ha.length;Ta++)xa+=ha[Ta]*aa[Ta],ba+=ha[Ta]*ha[Ta],Sa+=aa[Ta]*aa[Ta];if(0>=ba||0>=Sa)throw Error("Cannot compute cosine similarity on embedding with 0 norm.");return xa/Math.sqrt(ba*Sa)}let Ro;cs[516587230]=[0,ki,so,oo,xr];const Mo=new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]);async function Po(){if(Ro===void 0)try{await WebAssembly.instantiate(Mo),Ro=!0}catch{Ro=!1}return Ro}async function Oo(ha,aa=""){const xa=await Po()?"wasm_internal":"wasm_nosimd_internal";return{wasmLoaderPath:`${aa}/${ha}_${xa}.js`,wasmBinaryPath:`${aa}/${ha}_${xa}.wasm`}}var Co=class{};function Io(){const ha=navigator.userAgent;return ha.includes("Safari")&&!ha.includes("Chrome")}async function Do(ha){if(typeof importScripts!="function"){const aa=document.createElement("script");return aa.src=ha.toString(),aa.crossOrigin="anonymous",new Promise((xa,ba)=>{aa.addEventListener("load",()=>{xa()},!1),aa.addEventListener("error",Sa=>{ba(Sa)},!1),document.body.appendChild(aa)})}importScripts(ha.toString())}function No(ha){return ha.videoWidth!==void 0?[ha.videoWidth,ha.videoHeight]:ha.naturalWidth!==void 0?[ha.naturalWidth,ha.naturalHeight]:ha.displayWidth!==void 0?[ha.displayWidth,ha.displayHeight]:[ha.width,ha.height]}function Uo(ha,aa,xa){ha.m||console.error("No wasm multistream support detected: ensure dependency inclusion of :gl_graph_runner_internal_multi_input target"),xa(aa=ha.i.stringToNewUTF8(aa)),ha.i._free(aa)}function Bo(ha,aa,xa){if(!ha.i.canvas)throw Error("No OpenGL canvas configured.");if(xa?ha.i._bindTextureToStream(xa):ha.i._bindTextureToCanvas(),!(xa=ha.i.canvas.getContext("webgl2")||ha.i.canvas.getContext("webgl")))throw Error("Failed to obtain WebGL context from the provided canvas. `getContext()` should only be invoked with `webgl` or `webgl2`.");ha.i.gpuOriginForWebTexturesIsBottomLeft&&xa.pixelStorei(xa.UNPACK_FLIP_Y_WEBGL,!0),xa.texImage2D(xa.TEXTURE_2D,0,xa.RGBA,xa.RGBA,xa.UNSIGNED_BYTE,aa),ha.i.gpuOriginForWebTexturesIsBottomLeft&&xa.pixelStorei(xa.UNPACK_FLIP_Y_WEBGL,!1);const[ba,Sa]=No(aa);return!ha.l||ba===ha.i.canvas.width&&Sa===ha.i.canvas.height||(ha.i.canvas.width=ba,ha.i.canvas.height=Sa),[ba,Sa]}function Go(ha,aa,xa){ha.m||console.error("No wasm multistream support detected: ensure dependency inclusion of :gl_graph_runner_internal_multi_input target");const ba=new Uint32Array(aa.length);for(let Sa=0;Sa<aa.length;Sa++)ba[Sa]=ha.i.stringToNewUTF8(aa[Sa]);aa=ha.i._malloc(4*ba.length),ha.i.HEAPU32.set(ba,aa>>2),xa(aa);for(const Sa of ba)ha.i._free(Sa);ha.i._free(aa)}function jo(ha,aa,xa){ha.i.simpleListeners=ha.i.simpleListeners||{},ha.i.simpleListeners[aa]=xa}function Vo(ha,aa,xa){let ba=[];ha.i.simpleListeners=ha.i.simpleListeners||{},ha.i.simpleListeners[aa]=(Sa,Ta,wa)=>{Ta?(xa(ba,wa),ba=[]):ba.push(Sa)}}Co.forVisionTasks=function(ha){return Oo("vision",ha)},Co.forTextTasks=function(ha){return Oo("text",ha)},Co.forGenAiTasks=function(ha){return Oo("genai",ha)},Co.forAudioTasks=function(ha){return Oo("audio",ha)},Co.isSimdSupported=function(){return Po()};async function Xo(ha,aa,xa,ba){return ha=await(async(Sa,Ta,wa,Ea,ka)=>{if(Ta&&await Do(Ta),!self.ModuleFactory||wa&&(await Do(wa),!self.ModuleFactory))throw Error("ModuleFactory not set.");return self.Module&&ka&&((Ta=self.Module).locateFile=ka.locateFile,ka.mainScriptUrlOrBlob&&(Ta.mainScriptUrlOrBlob=ka.mainScriptUrlOrBlob)),ka=await self.ModuleFactory(self.Module||ka),self.ModuleFactory=self.Module=void 0,new Sa(ka,Ea)})(ha,xa.wasmLoaderPath,xa.assetLoaderPath,aa,{locateFile:Sa=>Sa.endsWith(".wasm")?xa.wasmBinaryPath.toString():xa.assetBinaryPath&&Sa.endsWith(".data")?xa.assetBinaryPath.toString():Sa}),await ha.o(ba),ha}function Ho(ha,aa){const xa=Tn(ha.baseOptions,Ti,1)||new Ti;typeof aa=="string"?(rn(xa,2,ke(aa)),rn(xa,1)):aa instanceof Uint8Array&&(rn(xa,1,se(aa,!1,!1)),rn(xa,2)),kn(ha.baseOptions,0,1,xa)}function Wo(ha){try{const aa=ha.H.length;if(aa===1)throw Error(ha.H[0].message);if(1<aa)throw Error("Encountered multiple errors: "+ha.H.map(xa=>xa.message).join(", "))}finally{ha.H=[]}}function zo(ha,aa){ha.C=Math.max(ha.C,aa)}function Ko(ha,aa){ha.B=new vs,ms(ha.B,"PassThroughCalculator"),ys(ha.B,"free_memory"),_s(ha.B,"free_memory_unused_out"),xs(aa,"free_memory"),ks(aa,ha.B)}function Yo(ha,aa){ys(ha.B,aa),_s(ha.B,aa+"_unused_out")}function $o(ha){ha.g.addBoolToStream(!0,"free_memory",ha.C)}var qo=class{constructor(ha){this.g=ha,this.H=[],this.C=0,this.g.setAutoRenderToScreen(!1)}l(ha,aa=!0){var xa,ba,Sa,Ta,wa,Ea;if(aa){const ka=ha.baseOptions||{};if((xa=ha.baseOptions)!=null&&xa.modelAssetBuffer&&((ba=ha.baseOptions)!=null&&ba.modelAssetPath))throw Error("Cannot set both baseOptions.modelAssetPath and baseOptions.modelAssetBuffer");if(!((Sa=Tn(this.baseOptions,Ti,1))!=null&&Sa.g()||(Ta=Tn(this.baseOptions,Ti,1))!=null&&Ta.h()||(wa=ha.baseOptions)!=null&&wa.modelAssetBuffer||(Ea=ha.baseOptions)!=null&&Ea.modelAssetPath))throw Error("Either baseOptions.modelAssetPath or baseOptions.modelAssetBuffer must be set");if(function(Aa,Fa){let La=Tn(Aa.baseOptions,Ei,3);if(!La){var el=La=new Ei,tl=new is;xn(el,4,wi,tl)}"delegate"in Fa&&(Fa.delegate==="GPU"?(Fa=La,el=new ns,xn(Fa,2,wi,el)):(Fa=La,el=new is,xn(Fa,4,wi,el))),kn(Aa.baseOptions,0,3,La)}(this,ka),ka.modelAssetPath)return fetch(ka.modelAssetPath.toString()).then(Aa=>{if(Aa.ok)return Aa.arrayBuffer();throw Error(`Failed to fetch model: ${ka.modelAssetPath} (${Aa.status})`)}).then(Aa=>{try{this.g.i.FS_unlink("/model.dat")}catch{}this.g.i.FS_createDataFile("/","model.dat",new Uint8Array(Aa),!0,!1,!1),Ho(this,"/model.dat"),this.m(),this.K()});Ho(this,ka.modelAssetBuffer)}return this.m(),this.K(),Promise.resolve()}K(){}fa(){let ha;if(this.g.fa(aa=>{ha=Rs(aa)}),!ha)throw Error("Failed to retrieve CalculatorGraphConfig");return ha}setGraph(ha,aa){this.g.attachErrorListener((xa,ba)=>{this.H.push(Error(ba))}),this.g.Ma(),this.g.setGraph(ha,aa),this.B=void 0,Wo(this)}finishProcessing(){this.g.finishProcessing(),Wo(this)}close(){this.B=void 0,this.g.closeGraph()}};function Jo(ha,aa){if(!ha)throw Error(`Unable to obtain required WebGL resource: ${aa}`);return ha}qo.prototype.close=qo.prototype.close;class Zo{constructor(aa,xa,ba,Sa){this.g=aa,this.h=xa,this.m=ba,this.l=Sa}bind(){this.g.bindVertexArray(this.h)}close(){this.g.deleteVertexArray(this.h),this.g.deleteBuffer(this.m),this.g.deleteBuffer(this.l)}}function Qo(ha,aa,xa){const ba=ha.g;if(xa=Jo(ba.createShader(xa),"Failed to create WebGL shader"),ba.shaderSource(xa,aa),ba.compileShader(xa),!ba.getShaderParameter(xa,ba.COMPILE_STATUS))throw Error(`Could not compile WebGL shader: ${ba.getShaderInfoLog(xa)}`);return ba.attachShader(ha.h,xa),xa}function ta(ha,aa){const xa=ha.g,ba=Jo(xa.createVertexArray(),"Failed to create vertex array");xa.bindVertexArray(ba);const Sa=Jo(xa.createBuffer(),"Failed to create buffer");xa.bindBuffer(xa.ARRAY_BUFFER,Sa),xa.enableVertexAttribArray(ha.P),xa.vertexAttribPointer(ha.P,2,xa.FLOAT,!1,0,0),xa.bufferData(xa.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),xa.STATIC_DRAW);const Ta=Jo(xa.createBuffer(),"Failed to create buffer");return xa.bindBuffer(xa.ARRAY_BUFFER,Ta),xa.enableVertexAttribArray(ha.O),xa.vertexAttribPointer(ha.O,2,xa.FLOAT,!1,0,0),xa.bufferData(xa.ARRAY_BUFFER,new Float32Array(aa?[0,1,0,0,1,0,1,1]:[0,0,0,1,1,1,1,0]),xa.STATIC_DRAW),xa.bindBuffer(xa.ARRAY_BUFFER,null),xa.bindVertexArray(null),new Zo(xa,ba,Sa,Ta)}function ea(ha,aa){if(ha.g){if(aa!==ha.g)throw Error("Cannot change GL context once initialized")}else ha.g=aa}function na(ha,aa,xa,ba){return ea(ha,aa),ha.h||(ha.m(),ha.D()),xa?(ha.s||(ha.s=ta(ha,!0)),xa=ha.s):(ha.v||(ha.v=ta(ha,!1)),xa=ha.v),aa.useProgram(ha.h),xa.bind(),ha.l(),ha=ba(),xa.g.bindVertexArray(null),ha}function ra(ha,aa,xa){return ea(ha,aa),ha=Jo(aa.createTexture(),"Failed to create texture"),aa.bindTexture(aa.TEXTURE_2D,ha),aa.texParameteri(aa.TEXTURE_2D,aa.TEXTURE_WRAP_S,aa.CLAMP_TO_EDGE),aa.texParameteri(aa.TEXTURE_2D,aa.TEXTURE_WRAP_T,aa.CLAMP_TO_EDGE),aa.texParameteri(aa.TEXTURE_2D,aa.TEXTURE_MIN_FILTER,xa??aa.LINEAR),aa.texParameteri(aa.TEXTURE_2D,aa.TEXTURE_MAG_FILTER,xa??aa.LINEAR),aa.bindTexture(aa.TEXTURE_2D,null),ha}function sa(ha,aa,xa){ea(ha,aa),ha.B||(ha.B=Jo(aa.createFramebuffer(),"Failed to create framebuffe.")),aa.bindFramebuffer(aa.FRAMEBUFFER,ha.B),aa.framebufferTexture2D(aa.FRAMEBUFFER,aa.COLOR_ATTACHMENT0,aa.TEXTURE_2D,xa,0)}function ia(ha){var aa;(aa=ha.g)==null||aa.bindFramebuffer(ha.g.FRAMEBUFFER,null)}var oa=class{H(){return`
  precision mediump float;
  varying vec2 vTex;
  uniform sampler2D inputTexture;
  void main() {
    gl_FragColor = texture2D(inputTexture, vTex);
  }
 `}m(){const ha=this.g;if(this.h=Jo(ha.createProgram(),"Failed to create WebGL program"),this.ba=Qo(this,`
  attribute vec2 aVertex;
  attribute vec2 aTex;
  varying vec2 vTex;
  void main(void) {
    gl_Position = vec4(aVertex, 0.0, 1.0);
    vTex = aTex;
  }`,ha.VERTEX_SHADER),this.aa=Qo(this,this.H(),ha.FRAGMENT_SHADER),ha.linkProgram(this.h),!ha.getProgramParameter(this.h,ha.LINK_STATUS))throw Error(`Error during program linking: ${ha.getProgramInfoLog(this.h)}`);this.P=ha.getAttribLocation(this.h,"aVertex"),this.O=ha.getAttribLocation(this.h,"aTex")}D(){}l(){}close(){if(this.h){const ha=this.g;ha.deleteProgram(this.h),ha.deleteShader(this.ba),ha.deleteShader(this.aa)}this.B&&this.g.deleteFramebuffer(this.B),this.v&&this.v.close(),this.s&&this.s.close()}};function ca(ha,aa){switch(aa){case 0:return ha.g.find(xa=>xa instanceof Uint8Array);case 1:return ha.g.find(xa=>xa instanceof Float32Array);case 2:return ha.g.find(xa=>typeof WebGLTexture<"u"&&xa instanceof WebGLTexture);default:throw Error(`Type is not supported: ${aa}`)}}function ua(ha){var aa=ca(ha,1);if(!aa){if(aa=ca(ha,0))aa=new Float32Array(aa).map(ba=>ba/255);else{aa=new Float32Array(ha.width*ha.height);const ba=da(ha);var xa=pa(ha);if(sa(xa,ba,la(ha)),"iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in self.document){xa=new Float32Array(ha.width*ha.height*4),ba.readPixels(0,0,ha.width,ha.height,ba.RGBA,ba.FLOAT,xa);for(let Sa=0,Ta=0;Sa<aa.length;++Sa,Ta+=4)aa[Sa]=xa[Ta]}else ba.readPixels(0,0,ha.width,ha.height,ba.RED,ba.FLOAT,aa)}ha.g.push(aa)}return aa}function la(ha){let aa=ca(ha,2);if(!aa){const xa=da(ha);aa=ga(ha);const ba=ua(ha),Sa=fa(ha);xa.texImage2D(xa.TEXTURE_2D,0,Sa,ha.width,ha.height,0,xa.RED,xa.FLOAT,ba),ma(ha)}return aa}function da(ha){if(!ha.canvas)throw Error("Conversion to different image formats require that a canvas is passed when initializing the image.");return ha.h||(ha.h=Jo(ha.canvas.getContext("webgl2"),"You cannot use a canvas that is already bound to a different type of rendering context.")),ha.h}function fa(ha){if(ha=da(ha),!ya)if(ha.getExtension("EXT_color_buffer_float")&&ha.getExtension("OES_texture_float_linear")&&ha.getExtension("EXT_float_blend"))ya=ha.R32F;else{if(!ha.getExtension("EXT_color_buffer_half_float"))throw Error("GPU does not fully support 4-channel float32 or float16 formats");ya=ha.R16F}return ya}function pa(ha){return ha.l||(ha.l=new oa),ha.l}function ga(ha){const aa=da(ha);aa.viewport(0,0,ha.width,ha.height),aa.activeTexture(aa.TEXTURE0);let xa=ca(ha,2);return xa||(xa=ra(pa(ha),aa,ha.m?aa.LINEAR:aa.NEAREST),ha.g.push(xa),ha.j=!0),aa.bindTexture(aa.TEXTURE_2D,xa),xa}function ma(ha){ha.h.bindTexture(ha.h.TEXTURE_2D,null)}var ya,_a=class{constructor(ha,aa,xa,ba,Sa,Ta,wa){this.g=ha,this.m=aa,this.j=xa,this.canvas=ba,this.l=Sa,this.width=Ta,this.height=wa,this.j&&--va===0&&console.error("You seem to be creating MPMask instances without invoking .close(). This leaks resources.")}Ha(){return!!ca(this,0)}la(){return!!ca(this,1)}R(){return!!ca(this,2)}ka(){return(aa=ca(ha=this,0))||(aa=ua(ha),aa=new Uint8Array(aa.map(xa=>255*xa)),ha.g.push(aa)),aa;var ha,aa}ja(){return ua(this)}M(){return la(this)}clone(){const ha=[];for(const aa of this.g){let xa;if(aa instanceof Uint8Array)xa=new Uint8Array(aa);else if(aa instanceof Float32Array)xa=new Float32Array(aa);else{if(!(aa instanceof WebGLTexture))throw Error(`Type is not supported: ${aa}`);{const ba=da(this),Sa=pa(this);ba.activeTexture(ba.TEXTURE1),xa=ra(Sa,ba,this.m?ba.LINEAR:ba.NEAREST),ba.bindTexture(ba.TEXTURE_2D,xa);const Ta=fa(this);ba.texImage2D(ba.TEXTURE_2D,0,Ta,this.width,this.height,0,ba.RED,ba.FLOAT,null),ba.bindTexture(ba.TEXTURE_2D,null),sa(Sa,ba,xa),na(Sa,ba,!1,()=>{ga(this),ba.clearColor(0,0,0,0),ba.clear(ba.COLOR_BUFFER_BIT),ba.drawArrays(ba.TRIANGLE_FAN,0,4),ma(this)}),ia(Sa),ma(this)}}ha.push(xa)}return new _a(ha,this.m,this.R(),this.canvas,this.l,this.width,this.height)}close(){this.j&&da(this).deleteTexture(ca(this,2)),va=-1}};_a.prototype.close=_a.prototype.close,_a.prototype.clone=_a.prototype.clone,_a.prototype.getAsWebGLTexture=_a.prototype.M,_a.prototype.getAsFloat32Array=_a.prototype.ja,_a.prototype.getAsUint8Array=_a.prototype.ka,_a.prototype.hasWebGLTexture=_a.prototype.R,_a.prototype.hasFloat32Array=_a.prototype.la,_a.prototype.hasUint8Array=_a.prototype.Ha;var va=250;function Ra(ha,aa){switch(aa){case 0:return ha.g.find(xa=>xa instanceof ImageData);case 1:return ha.g.find(xa=>typeof ImageBitmap<"u"&&xa instanceof ImageBitmap);case 2:return ha.g.find(xa=>typeof WebGLTexture<"u"&&xa instanceof WebGLTexture);default:throw Error(`Type is not supported: ${aa}`)}}function Ma(ha){var aa=Ra(ha,0);if(!aa){aa=Oa(ha);const xa=Ca(ha),ba=new Uint8Array(ha.width*ha.height*4);sa(xa,aa,Pa(ha)),aa.readPixels(0,0,ha.width,ha.height,aa.RGBA,aa.UNSIGNED_BYTE,ba),ia(xa),aa=new ImageData(new Uint8ClampedArray(ba.buffer),ha.width,ha.height),ha.g.push(aa)}return aa}function Pa(ha){let aa=Ra(ha,2);if(!aa){const xa=Oa(ha);aa=Ia(ha);const ba=Ra(ha,1)||Ma(ha);xa.texImage2D(xa.TEXTURE_2D,0,xa.RGBA,xa.RGBA,xa.UNSIGNED_BYTE,ba),Da(ha)}return aa}function Oa(ha){if(!ha.canvas)throw Error("Conversion to different image formats require that a canvas is passed when iniitializing the image.");return ha.h||(ha.h=Jo(ha.canvas.getContext("webgl2"),"You cannot use a canvas that is already bound to a different type of rendering context.")),ha.h}function Ca(ha){return ha.l||(ha.l=new oa),ha.l}function Ia(ha){const aa=Oa(ha);aa.viewport(0,0,ha.width,ha.height),aa.activeTexture(aa.TEXTURE0);let xa=Ra(ha,2);return xa||(xa=ra(Ca(ha),aa),ha.g.push(xa),ha.m=!0),aa.bindTexture(aa.TEXTURE_2D,xa),xa}function Da(ha){ha.h.bindTexture(ha.h.TEXTURE_2D,null)}function Na(ha){const aa=Oa(ha);return na(Ca(ha),aa,!0,()=>function(xa,ba){const Sa=xa.canvas;if(Sa.width===xa.width&&Sa.height===xa.height)return ba();const Ta=Sa.width,wa=Sa.height;return Sa.width=xa.width,Sa.height=xa.height,xa=ba(),Sa.width=Ta,Sa.height=wa,xa}(ha,()=>{if(aa.bindFramebuffer(aa.FRAMEBUFFER,null),aa.clearColor(0,0,0,0),aa.clear(aa.COLOR_BUFFER_BIT),aa.drawArrays(aa.TRIANGLE_FAN,0,4),!(ha.canvas instanceof OffscreenCanvas))throw Error("Conversion to ImageBitmap requires that the MediaPipe Tasks is initialized with an OffscreenCanvas");return ha.canvas.transferToImageBitmap()}))}var Ua=class{constructor(ha,aa,xa,ba,Sa,Ta,wa){this.g=ha,this.j=aa,this.m=xa,this.canvas=ba,this.l=Sa,this.width=Ta,this.height=wa,(this.j||this.m)&&--Ba===0&&console.error("You seem to be creating MPImage instances without invoking .close(). This leaks resources.")}Ga(){return!!Ra(this,0)}ma(){return!!Ra(this,1)}R(){return!!Ra(this,2)}Ea(){return Ma(this)}Da(){var ha=Ra(this,1);return ha||(Pa(this),Ia(this),ha=Na(this),Da(this),this.g.push(ha),this.j=!0),ha}M(){return Pa(this)}clone(){const ha=[];for(const aa of this.g){let xa;if(aa instanceof ImageData)xa=new ImageData(aa.data,this.width,this.height);else if(aa instanceof WebGLTexture){const ba=Oa(this),Sa=Ca(this);ba.activeTexture(ba.TEXTURE1),xa=ra(Sa,ba),ba.bindTexture(ba.TEXTURE_2D,xa),ba.texImage2D(ba.TEXTURE_2D,0,ba.RGBA,this.width,this.height,0,ba.RGBA,ba.UNSIGNED_BYTE,null),ba.bindTexture(ba.TEXTURE_2D,null),sa(Sa,ba,xa),na(Sa,ba,!1,()=>{Ia(this),ba.clearColor(0,0,0,0),ba.clear(ba.COLOR_BUFFER_BIT),ba.drawArrays(ba.TRIANGLE_FAN,0,4),Da(this)}),ia(Sa),Da(this)}else{if(!(aa instanceof ImageBitmap))throw Error(`Type is not supported: ${aa}`);Pa(this),Ia(this),xa=Na(this),Da(this)}ha.push(xa)}return new Ua(ha,this.ma(),this.R(),this.canvas,this.l,this.width,this.height)}close(){this.j&&Ra(this,1).close(),this.m&&Oa(this).deleteTexture(Ra(this,2)),Ba=-1}};Ua.prototype.close=Ua.prototype.close,Ua.prototype.clone=Ua.prototype.clone,Ua.prototype.getAsWebGLTexture=Ua.prototype.M,Ua.prototype.getAsImageBitmap=Ua.prototype.Da,Ua.prototype.getAsImageData=Ua.prototype.Ea,Ua.prototype.hasWebGLTexture=Ua.prototype.R,Ua.prototype.hasImageBitmap=Ua.prototype.ma,Ua.prototype.hasImageData=Ua.prototype.Ga;var Ba=250;function Ga(...ha){return ha.map(([aa,xa])=>({start:aa,end:xa}))}const ja=function(ha){return class extends ha{Ma(){this.i._registerModelResourcesGraphService()}}}((Va=class{constructor(ha,aa){this.l=!0,this.i=ha,this.g=null,this.h=0,this.m=typeof this.i._addIntToInputStream=="function",aa!==void 0?this.i.canvas=aa:typeof OffscreenCanvas>"u"||Io()?(console.warn("OffscreenCanvas not supported and GraphRunner constructor glCanvas parameter is undefined. Creating backup canvas."),this.i.canvas=document.createElement("canvas")):this.i.canvas=new OffscreenCanvas(1,1)}async initializeGraph(ha){const aa=await(await fetch(ha)).arrayBuffer();ha=!(ha.endsWith(".pbtxt")||ha.endsWith(".textproto")),this.setGraph(new Uint8Array(aa),ha)}setGraphFromString(ha){this.setGraph(new TextEncoder().encode(ha),!1)}setGraph(ha,aa){const xa=ha.length,ba=this.i._malloc(xa);this.i.HEAPU8.set(ha,ba),aa?this.i._changeBinaryGraph(xa,ba):this.i._changeTextGraph(xa,ba),this.i._free(ba)}configureAudio(ha,aa,xa,ba,Sa){this.i._configureAudio||console.warn('Attempting to use configureAudio without support for input audio. Is build dep ":gl_graph_runner_audio" missing?'),Uo(this,ba||"input_audio",Ta=>{Uo(this,Sa=Sa||"audio_header",wa=>{this.i._configureAudio(Ta,wa,ha,aa,xa)})})}setAutoResizeCanvas(ha){this.l=ha}setAutoRenderToScreen(ha){this.i._setAutoRenderToScreen(ha)}setGpuBufferVerticalFlip(ha){this.i.gpuOriginForWebTexturesIsBottomLeft=ha}fa(ha){jo(this,"__graph_config__",aa=>{ha(aa)}),Uo(this,"__graph_config__",aa=>{this.i._getGraphConfig(aa,void 0)}),delete this.i.simpleListeners.__graph_config__}attachErrorListener(ha){this.i.errorListener=ha}attachEmptyPacketListener(ha,aa){this.i.emptyPacketListeners=this.i.emptyPacketListeners||{},this.i.emptyPacketListeners[ha]=aa}addAudioToStream(ha,aa,xa){this.addAudioToStreamWithShape(ha,0,0,aa,xa)}addAudioToStreamWithShape(ha,aa,xa,ba,Sa){const Ta=4*ha.length;this.h!==Ta&&(this.g&&this.i._free(this.g),this.g=this.i._malloc(Ta),this.h=Ta),this.i.HEAPF32.set(ha,this.g/4),Uo(this,ba,wa=>{this.i._addAudioToInputStream(this.g,aa,xa,wa,Sa)})}addGpuBufferToStream(ha,aa,xa){Uo(this,aa,ba=>{const[Sa,Ta]=Bo(this,ha,ba);this.i._addBoundTextureToStream(ba,Sa,Ta,xa)})}addBoolToStream(ha,aa,xa){Uo(this,aa,ba=>{this.i._addBoolToInputStream(ha,ba,xa)})}addDoubleToStream(ha,aa,xa){Uo(this,aa,ba=>{this.i._addDoubleToInputStream(ha,ba,xa)})}addFloatToStream(ha,aa,xa){Uo(this,aa,ba=>{this.i._addFloatToInputStream(ha,ba,xa)})}addIntToStream(ha,aa,xa){Uo(this,aa,ba=>{this.i._addIntToInputStream(ha,ba,xa)})}addStringToStream(ha,aa,xa){Uo(this,aa,ba=>{Uo(this,ha,Sa=>{this.i._addStringToInputStream(Sa,ba,xa)})})}addStringRecordToStream(ha,aa,xa){Uo(this,aa,ba=>{Go(this,Object.keys(ha),Sa=>{Go(this,Object.values(ha),Ta=>{this.i._addFlatHashMapToInputStream(Sa,Ta,Object.keys(ha).length,ba,xa)})})})}addProtoToStream(ha,aa,xa,ba){Uo(this,xa,Sa=>{Uo(this,aa,Ta=>{const wa=this.i._malloc(ha.length);this.i.HEAPU8.set(ha,wa),this.i._addProtoToInputStream(wa,ha.length,Ta,Sa,ba),this.i._free(wa)})})}addEmptyPacketToStream(ha,aa){Uo(this,ha,xa=>{this.i._addEmptyPacketToInputStream(xa,aa)})}addBoolVectorToStream(ha,aa,xa){Uo(this,aa,ba=>{const Sa=this.i._allocateBoolVector(ha.length);if(!Sa)throw Error("Unable to allocate new bool vector on heap.");for(const Ta of ha)this.i._addBoolVectorEntry(Sa,Ta);this.i._addBoolVectorToInputStream(Sa,ba,xa)})}addDoubleVectorToStream(ha,aa,xa){Uo(this,aa,ba=>{const Sa=this.i._allocateDoubleVector(ha.length);if(!Sa)throw Error("Unable to allocate new double vector on heap.");for(const Ta of ha)this.i._addDoubleVectorEntry(Sa,Ta);this.i._addDoubleVectorToInputStream(Sa,ba,xa)})}addFloatVectorToStream(ha,aa,xa){Uo(this,aa,ba=>{const Sa=this.i._allocateFloatVector(ha.length);if(!Sa)throw Error("Unable to allocate new float vector on heap.");for(const Ta of ha)this.i._addFloatVectorEntry(Sa,Ta);this.i._addFloatVectorToInputStream(Sa,ba,xa)})}addIntVectorToStream(ha,aa,xa){Uo(this,aa,ba=>{const Sa=this.i._allocateIntVector(ha.length);if(!Sa)throw Error("Unable to allocate new int vector on heap.");for(const Ta of ha)this.i._addIntVectorEntry(Sa,Ta);this.i._addIntVectorToInputStream(Sa,ba,xa)})}addStringVectorToStream(ha,aa,xa){Uo(this,aa,ba=>{const Sa=this.i._allocateStringVector(ha.length);if(!Sa)throw Error("Unable to allocate new string vector on heap.");for(const Ta of ha)Uo(this,Ta,wa=>{this.i._addStringVectorEntry(Sa,wa)});this.i._addStringVectorToInputStream(Sa,ba,xa)})}addBoolToInputSidePacket(ha,aa){Uo(this,aa,xa=>{this.i._addBoolToInputSidePacket(ha,xa)})}addDoubleToInputSidePacket(ha,aa){Uo(this,aa,xa=>{this.i._addDoubleToInputSidePacket(ha,xa)})}addFloatToInputSidePacket(ha,aa){Uo(this,aa,xa=>{this.i._addFloatToInputSidePacket(ha,xa)})}addIntToInputSidePacket(ha,aa){Uo(this,aa,xa=>{this.i._addIntToInputSidePacket(ha,xa)})}addStringToInputSidePacket(ha,aa){Uo(this,aa,xa=>{Uo(this,ha,ba=>{this.i._addStringToInputSidePacket(ba,xa)})})}addProtoToInputSidePacket(ha,aa,xa){Uo(this,xa,ba=>{Uo(this,aa,Sa=>{const Ta=this.i._malloc(ha.length);this.i.HEAPU8.set(ha,Ta),this.i._addProtoToInputSidePacket(Ta,ha.length,Sa,ba),this.i._free(Ta)})})}addBoolVectorToInputSidePacket(ha,aa){Uo(this,aa,xa=>{const ba=this.i._allocateBoolVector(ha.length);if(!ba)throw Error("Unable to allocate new bool vector on heap.");for(const Sa of ha)this.i._addBoolVectorEntry(ba,Sa);this.i._addBoolVectorToInputSidePacket(ba,xa)})}addDoubleVectorToInputSidePacket(ha,aa){Uo(this,aa,xa=>{const ba=this.i._allocateDoubleVector(ha.length);if(!ba)throw Error("Unable to allocate new double vector on heap.");for(const Sa of ha)this.i._addDoubleVectorEntry(ba,Sa);this.i._addDoubleVectorToInputSidePacket(ba,xa)})}addFloatVectorToInputSidePacket(ha,aa){Uo(this,aa,xa=>{const ba=this.i._allocateFloatVector(ha.length);if(!ba)throw Error("Unable to allocate new float vector on heap.");for(const Sa of ha)this.i._addFloatVectorEntry(ba,Sa);this.i._addFloatVectorToInputSidePacket(ba,xa)})}addIntVectorToInputSidePacket(ha,aa){Uo(this,aa,xa=>{const ba=this.i._allocateIntVector(ha.length);if(!ba)throw Error("Unable to allocate new int vector on heap.");for(const Sa of ha)this.i._addIntVectorEntry(ba,Sa);this.i._addIntVectorToInputSidePacket(ba,xa)})}addStringVectorToInputSidePacket(ha,aa){Uo(this,aa,xa=>{const ba=this.i._allocateStringVector(ha.length);if(!ba)throw Error("Unable to allocate new string vector on heap.");for(const Sa of ha)Uo(this,Sa,Ta=>{this.i._addStringVectorEntry(ba,Ta)});this.i._addStringVectorToInputSidePacket(ba,xa)})}attachBoolListener(ha,aa){jo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachBoolListener(xa)})}attachBoolVectorListener(ha,aa){Vo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachBoolVectorListener(xa)})}attachIntListener(ha,aa){jo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachIntListener(xa)})}attachIntVectorListener(ha,aa){Vo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachIntVectorListener(xa)})}attachDoubleListener(ha,aa){jo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachDoubleListener(xa)})}attachDoubleVectorListener(ha,aa){Vo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachDoubleVectorListener(xa)})}attachFloatListener(ha,aa){jo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachFloatListener(xa)})}attachFloatVectorListener(ha,aa){Vo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachFloatVectorListener(xa)})}attachStringListener(ha,aa){jo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachStringListener(xa)})}attachStringVectorListener(ha,aa){Vo(this,ha,aa),Uo(this,ha,xa=>{this.i._attachStringVectorListener(xa)})}attachProtoListener(ha,aa,xa){jo(this,ha,aa),Uo(this,ha,ba=>{this.i._attachProtoListener(ba,xa||!1)})}attachProtoVectorListener(ha,aa,xa){Vo(this,ha,aa),Uo(this,ha,ba=>{this.i._attachProtoVectorListener(ba,xa||!1)})}attachAudioListener(ha,aa,xa){this.i._attachAudioListener||console.warn('Attempting to use attachAudioListener without support for output audio. Is build dep ":gl_graph_runner_audio_out" missing?'),jo(this,ha,(ba,Sa)=>{ba=new Float32Array(ba.buffer,ba.byteOffset,ba.length/4),aa(ba,Sa)}),Uo(this,ha,ba=>{this.i._attachAudioListener(ba,xa||!1)})}finishProcessing(){this.i._waitUntilIdle()}closeGraph(){this.i._closeGraph(),this.i.simpleListeners=void 0,this.i.emptyPacketListeners=void 0}},class extends Va{get ha(){return this.i}sa(ha,aa,xa){Uo(this,aa,ba=>{const[Sa,Ta]=Bo(this,ha,ba);this.ha._addBoundTextureAsImageToStream(ba,Sa,Ta,xa)})}W(ha,aa){jo(this,ha,aa),Uo(this,ha,xa=>{this.ha._attachImageListener(xa)})}da(ha,aa){Vo(this,ha,aa),Uo(this,ha,xa=>{this.ha._attachImageVectorListener(xa)})}}));var Va,Xa=class extends ja{};async function Ha(ha,aa,xa){return async function(ba,Sa,Ta,wa){return Xo(ba,Sa,Ta,wa)}(ha,xa.canvas??(typeof OffscreenCanvas>"u"||Io()?document.createElement("canvas"):void 0),aa,xa)}function Wa(ha,aa,xa,ba){if(ha.V){const Ta=new si;if(xa!=null&&xa.regionOfInterest){if(!ha.ra)throw Error("This task doesn't support region-of-interest.");var Sa=xa.regionOfInterest;if(Sa.left>=Sa.right||Sa.top>=Sa.bottom)throw Error("Expected RectF with left < right and top < bottom.");if(0>Sa.left||0>Sa.top||1<Sa.right||1<Sa.bottom)throw Error("Expected RectF values to be in [0,1].");In(Ta,1,(Sa.left+Sa.right)/2),In(Ta,2,(Sa.top+Sa.bottom)/2),In(Ta,4,Sa.right-Sa.left),In(Ta,3,Sa.bottom-Sa.top)}else In(Ta,1,.5),In(Ta,2,.5),In(Ta,4,1),In(Ta,3,1);if(xa!=null&&xa.rotationDegrees){if((xa==null?void 0:xa.rotationDegrees)%90!=0)throw Error("Expected rotation to be a multiple of 90°.");if(In(Ta,5,-Math.PI*xa.rotationDegrees/180),(xa==null?void 0:xa.rotationDegrees)%180!=0){const[wa,Ea]=No(aa);xa=Pn(Ta,3)*Ea/wa,Sa=Pn(Ta,4)*wa/Ea,In(Ta,4,xa),In(Ta,3,Sa)}}ha.g.addProtoToStream(Ta.g(),"mediapipe.NormalizedRect",ha.V,ba)}ha.g.sa(aa,ha.ba,ba??performance.now()),ha.finishProcessing()}function za(ha,aa,xa){var ba;if((ba=ha.baseOptions)!=null&&ba.g())throw Error("Task is not initialized with image mode. 'runningMode' must be set to 'IMAGE'.");Wa(ha,aa,xa,ha.C+1)}function Ka(ha,aa,xa,ba){var Sa;if(!((Sa=ha.baseOptions)!=null&&Sa.g()))throw Error("Task is not initialized with video mode. 'runningMode' must be set to 'VIDEO'.");Wa(ha,aa,xa,ba)}function Ya(ha,aa,xa,ba){var Sa=aa.data;const Ta=aa.width,wa=Ta*(aa=aa.height);if((Sa instanceof Uint8Array||Sa instanceof Float32Array)&&Sa.length!==wa)throw Error("Unsupported channel count: "+Sa.length/wa);return ha=new _a([Sa],xa,!1,ha.g.i.canvas,ha.O,Ta,aa),ba?ha.clone():ha}var $a=class extends qo{constructor(ha,aa,xa,ba){super(ha),this.g=ha,this.ba=aa,this.V=xa,this.ra=ba,this.O=new oa}l(ha,aa=!0){if("runningMode"in ha&&On(this.baseOptions,2,!!ha.runningMode&&ha.runningMode!=="IMAGE"),ha.canvas!==void 0&&this.g.i.canvas!==ha.canvas)throw Error("You must create a new task to reset the canvas.");return super.l(ha,aa)}close(){this.O.close(),super.close()}};$a.prototype.close=$a.prototype.close;var qa=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect_in",!1),this.j={detections:[]},kn(ha=this.h=new xi,0,1,aa=new bi),In(this.h,2,.5),In(this.h,3,.3)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return"minDetectionConfidence"in ha&&In(this.h,2,ha.minDetectionConfidence??.5),"minSuppressionThreshold"in ha&&In(this.h,3,ha.minSuppressionThreshold??.3),this.l(ha)}F(ha,aa){return this.j={detections:[]},za(this,ha,aa),this.j}G(ha,aa,xa){return this.j={detections:[]},Ka(this,ha,xa,aa),this.j}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect_in"),Ss(ha,"detections");const aa=new hs;Dn(aa,Li,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.face_detector.FaceDetectorGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect_in"),_s(xa,"DETECTIONS:detections"),xa.o(aa),ks(ha,xa),this.g.attachProtoVectorListener("detections",(ba,Sa)=>{for(const Ta of ba)ba=Ks(Ta),this.j.detections.push(ko(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("detections",ba=>{zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};qa.prototype.detectForVideo=qa.prototype.G,qa.prototype.detect=qa.prototype.F,qa.prototype.setOptions=qa.prototype.o,qa.createFromModelPath=async function(ha,aa){return Ha(qa,ha,{baseOptions:{modelAssetPath:aa}})},qa.createFromModelBuffer=function(ha,aa){return Ha(qa,ha,{baseOptions:{modelAssetBuffer:aa}})},qa.createFromOptions=function(ha,aa){return Ha(qa,ha,aa)};var Ja=Ga([61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]),Za=Ga([263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,385],[385,384],[384,398],[398,362]),Qa=Ga([276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]),th=Ga([474,475],[475,476],[476,477],[477,474]),eh=Ga([33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]),nh=Ga([46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]),rh=Ga([469,470],[470,471],[471,472],[472,469]),sh=Ga([10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],[378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]),ih=[...Ja,...Za,...Qa,...eh,...nh,...sh],oh=Ga([127,34],[34,139],[139,127],[11,0],[0,37],[37,11],[232,231],[231,120],[120,232],[72,37],[37,39],[39,72],[128,121],[121,47],[47,128],[232,121],[121,128],[128,232],[104,69],[69,67],[67,104],[175,171],[171,148],[148,175],[118,50],[50,101],[101,118],[73,39],[39,40],[40,73],[9,151],[151,108],[108,9],[48,115],[115,131],[131,48],[194,204],[204,211],[211,194],[74,40],[40,185],[185,74],[80,42],[42,183],[183,80],[40,92],[92,186],[186,40],[230,229],[229,118],[118,230],[202,212],[212,214],[214,202],[83,18],[18,17],[17,83],[76,61],[61,146],[146,76],[160,29],[29,30],[30,160],[56,157],[157,173],[173,56],[106,204],[204,194],[194,106],[135,214],[214,192],[192,135],[203,165],[165,98],[98,203],[21,71],[71,68],[68,21],[51,45],[45,4],[4,51],[144,24],[24,23],[23,144],[77,146],[146,91],[91,77],[205,50],[50,187],[187,205],[201,200],[200,18],[18,201],[91,106],[106,182],[182,91],[90,91],[91,181],[181,90],[85,84],[84,17],[17,85],[206,203],[203,36],[36,206],[148,171],[171,140],[140,148],[92,40],[40,39],[39,92],[193,189],[189,244],[244,193],[159,158],[158,28],[28,159],[247,246],[246,161],[161,247],[236,3],[3,196],[196,236],[54,68],[68,104],[104,54],[193,168],[168,8],[8,193],[117,228],[228,31],[31,117],[189,193],[193,55],[55,189],[98,97],[97,99],[99,98],[126,47],[47,100],[100,126],[166,79],[79,218],[218,166],[155,154],[154,26],[26,155],[209,49],[49,131],[131,209],[135,136],[136,150],[150,135],[47,126],[126,217],[217,47],[223,52],[52,53],[53,223],[45,51],[51,134],[134,45],[211,170],[170,140],[140,211],[67,69],[69,108],[108,67],[43,106],[106,91],[91,43],[230,119],[119,120],[120,230],[226,130],[130,247],[247,226],[63,53],[53,52],[52,63],[238,20],[20,242],[242,238],[46,70],[70,156],[156,46],[78,62],[62,96],[96,78],[46,53],[53,63],[63,46],[143,34],[34,227],[227,143],[123,117],[117,111],[111,123],[44,125],[125,19],[19,44],[236,134],[134,51],[51,236],[216,206],[206,205],[205,216],[154,153],[153,22],[22,154],[39,37],[37,167],[167,39],[200,201],[201,208],[208,200],[36,142],[142,100],[100,36],[57,212],[212,202],[202,57],[20,60],[60,99],[99,20],[28,158],[158,157],[157,28],[35,226],[226,113],[113,35],[160,159],[159,27],[27,160],[204,202],[202,210],[210,204],[113,225],[225,46],[46,113],[43,202],[202,204],[204,43],[62,76],[76,77],[77,62],[137,123],[123,116],[116,137],[41,38],[38,72],[72,41],[203,129],[129,142],[142,203],[64,98],[98,240],[240,64],[49,102],[102,64],[64,49],[41,73],[73,74],[74,41],[212,216],[216,207],[207,212],[42,74],[74,184],[184,42],[169,170],[170,211],[211,169],[170,149],[149,176],[176,170],[105,66],[66,69],[69,105],[122,6],[6,168],[168,122],[123,147],[147,187],[187,123],[96,77],[77,90],[90,96],[65,55],[55,107],[107,65],[89,90],[90,180],[180,89],[101,100],[100,120],[120,101],[63,105],[105,104],[104,63],[93,137],[137,227],[227,93],[15,86],[86,85],[85,15],[129,102],[102,49],[49,129],[14,87],[87,86],[86,14],[55,8],[8,9],[9,55],[100,47],[47,121],[121,100],[145,23],[23,22],[22,145],[88,89],[89,179],[179,88],[6,122],[122,196],[196,6],[88,95],[95,96],[96,88],[138,172],[172,136],[136,138],[215,58],[58,172],[172,215],[115,48],[48,219],[219,115],[42,80],[80,81],[81,42],[195,3],[3,51],[51,195],[43,146],[146,61],[61,43],[171,175],[175,199],[199,171],[81,82],[82,38],[38,81],[53,46],[46,225],[225,53],[144,163],[163,110],[110,144],[52,65],[65,66],[66,52],[229,228],[228,117],[117,229],[34,127],[127,234],[234,34],[107,108],[108,69],[69,107],[109,108],[108,151],[151,109],[48,64],[64,235],[235,48],[62,78],[78,191],[191,62],[129,209],[209,126],[126,129],[111,35],[35,143],[143,111],[117,123],[123,50],[50,117],[222,65],[65,52],[52,222],[19,125],[125,141],[141,19],[221,55],[55,65],[65,221],[3,195],[195,197],[197,3],[25,7],[7,33],[33,25],[220,237],[237,44],[44,220],[70,71],[71,139],[139,70],[122,193],[193,245],[245,122],[247,130],[130,33],[33,247],[71,21],[21,162],[162,71],[170,169],[169,150],[150,170],[188,174],[174,196],[196,188],[216,186],[186,92],[92,216],[2,97],[97,167],[167,2],[141,125],[125,241],[241,141],[164,167],[167,37],[37,164],[72,38],[38,12],[12,72],[38,82],[82,13],[13,38],[63,68],[68,71],[71,63],[226,35],[35,111],[111,226],[101,50],[50,205],[205,101],[206,92],[92,165],[165,206],[209,198],[198,217],[217,209],[165,167],[167,97],[97,165],[220,115],[115,218],[218,220],[133,112],[112,243],[243,133],[239,238],[238,241],[241,239],[214,135],[135,169],[169,214],[190,173],[173,133],[133,190],[171,208],[208,32],[32,171],[125,44],[44,237],[237,125],[86,87],[87,178],[178,86],[85,86],[86,179],[179,85],[84,85],[85,180],[180,84],[83,84],[84,181],[181,83],[201,83],[83,182],[182,201],[137,93],[93,132],[132,137],[76,62],[62,183],[183,76],[61,76],[76,184],[184,61],[57,61],[61,185],[185,57],[212,57],[57,186],[186,212],[214,207],[207,187],[187,214],[34,143],[143,156],[156,34],[79,239],[239,237],[237,79],[123,137],[137,177],[177,123],[44,1],[1,4],[4,44],[201,194],[194,32],[32,201],[64,102],[102,129],[129,64],[213,215],[215,138],[138,213],[59,166],[166,219],[219,59],[242,99],[99,97],[97,242],[2,94],[94,141],[141,2],[75,59],[59,235],[235,75],[24,110],[110,228],[228,24],[25,130],[130,226],[226,25],[23,24],[24,229],[229,23],[22,23],[23,230],[230,22],[26,22],[22,231],[231,26],[112,26],[26,232],[232,112],[189,190],[190,243],[243,189],[221,56],[56,190],[190,221],[28,56],[56,221],[221,28],[27,28],[28,222],[222,27],[29,27],[27,223],[223,29],[30,29],[29,224],[224,30],[247,30],[30,225],[225,247],[238,79],[79,20],[20,238],[166,59],[59,75],[75,166],[60,75],[75,240],[240,60],[147,177],[177,215],[215,147],[20,79],[79,166],[166,20],[187,147],[147,213],[213,187],[112,233],[233,244],[244,112],[233,128],[128,245],[245,233],[128,114],[114,188],[188,128],[114,217],[217,174],[174,114],[131,115],[115,220],[220,131],[217,198],[198,236],[236,217],[198,131],[131,134],[134,198],[177,132],[132,58],[58,177],[143,35],[35,124],[124,143],[110,163],[163,7],[7,110],[228,110],[110,25],[25,228],[356,389],[389,368],[368,356],[11,302],[302,267],[267,11],[452,350],[350,349],[349,452],[302,303],[303,269],[269,302],[357,343],[343,277],[277,357],[452,453],[453,357],[357,452],[333,332],[332,297],[297,333],[175,152],[152,377],[377,175],[347,348],[348,330],[330,347],[303,304],[304,270],[270,303],[9,336],[336,337],[337,9],[278,279],[279,360],[360,278],[418,262],[262,431],[431,418],[304,408],[408,409],[409,304],[310,415],[415,407],[407,310],[270,409],[409,410],[410,270],[450,348],[348,347],[347,450],[422,430],[430,434],[434,422],[313,314],[314,17],[17,313],[306,307],[307,375],[375,306],[387,388],[388,260],[260,387],[286,414],[414,398],[398,286],[335,406],[406,418],[418,335],[364,367],[367,416],[416,364],[423,358],[358,327],[327,423],[251,284],[284,298],[298,251],[281,5],[5,4],[4,281],[373,374],[374,253],[253,373],[307,320],[320,321],[321,307],[425,427],[427,411],[411,425],[421,313],[313,18],[18,421],[321,405],[405,406],[406,321],[320,404],[404,405],[405,320],[315,16],[16,17],[17,315],[426,425],[425,266],[266,426],[377,400],[400,369],[369,377],[322,391],[391,269],[269,322],[417,465],[465,464],[464,417],[386,257],[257,258],[258,386],[466,260],[260,388],[388,466],[456,399],[399,419],[419,456],[284,332],[332,333],[333,284],[417,285],[285,8],[8,417],[346,340],[340,261],[261,346],[413,441],[441,285],[285,413],[327,460],[460,328],[328,327],[355,371],[371,329],[329,355],[392,439],[439,438],[438,392],[382,341],[341,256],[256,382],[429,420],[420,360],[360,429],[364,394],[394,379],[379,364],[277,343],[343,437],[437,277],[443,444],[444,283],[283,443],[275,440],[440,363],[363,275],[431,262],[262,369],[369,431],[297,338],[338,337],[337,297],[273,375],[375,321],[321,273],[450,451],[451,349],[349,450],[446,342],[342,467],[467,446],[293,334],[334,282],[282,293],[458,461],[461,462],[462,458],[276,353],[353,383],[383,276],[308,324],[324,325],[325,308],[276,300],[300,293],[293,276],[372,345],[345,447],[447,372],[352,345],[345,340],[340,352],[274,1],[1,19],[19,274],[456,248],[248,281],[281,456],[436,427],[427,425],[425,436],[381,256],[256,252],[252,381],[269,391],[391,393],[393,269],[200,199],[199,428],[428,200],[266,330],[330,329],[329,266],[287,273],[273,422],[422,287],[250,462],[462,328],[328,250],[258,286],[286,384],[384,258],[265,353],[353,342],[342,265],[387,259],[259,257],[257,387],[424,431],[431,430],[430,424],[342,353],[353,276],[276,342],[273,335],[335,424],[424,273],[292,325],[325,307],[307,292],[366,447],[447,345],[345,366],[271,303],[303,302],[302,271],[423,266],[266,371],[371,423],[294,455],[455,460],[460,294],[279,278],[278,294],[294,279],[271,272],[272,304],[304,271],[432,434],[434,427],[427,432],[272,407],[407,408],[408,272],[394,430],[430,431],[431,394],[395,369],[369,400],[400,395],[334,333],[333,299],[299,334],[351,417],[417,168],[168,351],[352,280],[280,411],[411,352],[325,319],[319,320],[320,325],[295,296],[296,336],[336,295],[319,403],[403,404],[404,319],[330,348],[348,349],[349,330],[293,298],[298,333],[333,293],[323,454],[454,447],[447,323],[15,16],[16,315],[315,15],[358,429],[429,279],[279,358],[14,15],[15,316],[316,14],[285,336],[336,9],[9,285],[329,349],[349,350],[350,329],[374,380],[380,252],[252,374],[318,402],[402,403],[403,318],[6,197],[197,419],[419,6],[318,319],[319,325],[325,318],[367,364],[364,365],[365,367],[435,367],[367,397],[397,435],[344,438],[438,439],[439,344],[272,271],[271,311],[311,272],[195,5],[5,281],[281,195],[273,287],[287,291],[291,273],[396,428],[428,199],[199,396],[311,271],[271,268],[268,311],[283,444],[444,445],[445,283],[373,254],[254,339],[339,373],[282,334],[334,296],[296,282],[449,347],[347,346],[346,449],[264,447],[447,454],[454,264],[336,296],[296,299],[299,336],[338,10],[10,151],[151,338],[278,439],[439,455],[455,278],[292,407],[407,415],[415,292],[358,371],[371,355],[355,358],[340,345],[345,372],[372,340],[346,347],[347,280],[280,346],[442,443],[443,282],[282,442],[19,94],[94,370],[370,19],[441,442],[442,295],[295,441],[248,419],[419,197],[197,248],[263,255],[255,359],[359,263],[440,275],[275,274],[274,440],[300,383],[383,368],[368,300],[351,412],[412,465],[465,351],[263,467],[467,466],[466,263],[301,368],[368,389],[389,301],[395,378],[378,379],[379,395],[412,351],[351,419],[419,412],[436,426],[426,322],[322,436],[2,164],[164,393],[393,2],[370,462],[462,461],[461,370],[164,0],[0,267],[267,164],[302,11],[11,12],[12,302],[268,12],[12,13],[13,268],[293,300],[300,301],[301,293],[446,261],[261,340],[340,446],[330,266],[266,425],[425,330],[426,423],[423,391],[391,426],[429,355],[355,437],[437,429],[391,327],[327,326],[326,391],[440,457],[457,438],[438,440],[341,382],[382,362],[362,341],[459,457],[457,461],[461,459],[434,430],[430,394],[394,434],[414,463],[463,362],[362,414],[396,369],[369,262],[262,396],[354,461],[461,457],[457,354],[316,403],[403,402],[402,316],[315,404],[404,403],[403,315],[314,405],[405,404],[404,314],[313,406],[406,405],[405,313],[421,418],[418,406],[406,421],[366,401],[401,361],[361,366],[306,408],[408,407],[407,306],[291,409],[409,408],[408,291],[287,410],[410,409],[409,287],[432,436],[436,410],[410,432],[434,416],[416,411],[411,434],[264,368],[368,383],[383,264],[309,438],[438,457],[457,309],[352,376],[376,401],[401,352],[274,275],[275,4],[4,274],[421,428],[428,262],[262,421],[294,327],[327,358],[358,294],[433,416],[416,367],[367,433],[289,455],[455,439],[439,289],[462,370],[370,326],[326,462],[2,326],[326,370],[370,2],[305,460],[460,455],[455,305],[254,449],[449,448],[448,254],[255,261],[261,446],[446,255],[253,450],[450,449],[449,253],[252,451],[451,450],[450,252],[256,452],[452,451],[451,256],[341,453],[453,452],[452,341],[413,464],[464,463],[463,413],[441,413],[413,414],[414,441],[258,442],[442,441],[441,258],[257,443],[443,442],[442,257],[259,444],[444,443],[443,259],[260,445],[445,444],[444,260],[467,342],[342,445],[445,467],[459,458],[458,250],[250,459],[289,392],[392,290],[290,289],[290,328],[328,460],[460,290],[376,433],[433,435],[435,376],[250,290],[290,392],[392,250],[411,416],[416,433],[433,411],[341,463],[463,464],[464,341],[453,464],[464,465],[465,453],[357,465],[465,412],[412,357],[343,412],[412,399],[399,343],[360,363],[363,440],[440,360],[437,399],[399,456],[456,437],[420,456],[456,363],[363,420],[401,435],[435,288],[288,401],[372,383],[383,353],[353,372],[339,255],[255,249],[249,339],[448,261],[261,255],[255,448],[133,243],[243,190],[190,133],[133,155],[155,112],[112,133],[33,246],[246,247],[247,33],[33,130],[130,25],[25,33],[398,384],[384,286],[286,398],[362,398],[398,414],[414,362],[362,463],[463,341],[341,362],[263,359],[359,467],[467,263],[263,249],[249,255],[255,263],[466,467],[467,260],[260,466],[75,60],[60,166],[166,75],[238,239],[239,79],[79,238],[162,127],[127,139],[139,162],[72,11],[11,37],[37,72],[121,232],[232,120],[120,121],[73,72],[72,39],[39,73],[114,128],[128,47],[47,114],[233,232],[232,128],[128,233],[103,104],[104,67],[67,103],[152,175],[175,148],[148,152],[119,118],[118,101],[101,119],[74,73],[73,40],[40,74],[107,9],[9,108],[108,107],[49,48],[48,131],[131,49],[32,194],[194,211],[211,32],[184,74],[74,185],[185,184],[191,80],[80,183],[183,191],[185,40],[40,186],[186,185],[119,230],[230,118],[118,119],[210,202],[202,214],[214,210],[84,83],[83,17],[17,84],[77,76],[76,146],[146,77],[161,160],[160,30],[30,161],[190,56],[56,173],[173,190],[182,106],[106,194],[194,182],[138,135],[135,192],[192,138],[129,203],[203,98],[98,129],[54,21],[21,68],[68,54],[5,51],[51,4],[4,5],[145,144],[144,23],[23,145],[90,77],[77,91],[91,90],[207,205],[205,187],[187,207],[83,201],[201,18],[18,83],[181,91],[91,182],[182,181],[180,90],[90,181],[181,180],[16,85],[85,17],[17,16],[205,206],[206,36],[36,205],[176,148],[148,140],[140,176],[165,92],[92,39],[39,165],[245,193],[193,244],[244,245],[27,159],[159,28],[28,27],[30,247],[247,161],[161,30],[174,236],[236,196],[196,174],[103,54],[54,104],[104,103],[55,193],[193,8],[8,55],[111,117],[117,31],[31,111],[221,189],[189,55],[55,221],[240,98],[98,99],[99,240],[142,126],[126,100],[100,142],[219,166],[166,218],[218,219],[112,155],[155,26],[26,112],[198,209],[209,131],[131,198],[169,135],[135,150],[150,169],[114,47],[47,217],[217,114],[224,223],[223,53],[53,224],[220,45],[45,134],[134,220],[32,211],[211,140],[140,32],[109,67],[67,108],[108,109],[146,43],[43,91],[91,146],[231,230],[230,120],[120,231],[113,226],[226,247],[247,113],[105,63],[63,52],[52,105],[241,238],[238,242],[242,241],[124,46],[46,156],[156,124],[95,78],[78,96],[96,95],[70,46],[46,63],[63,70],[116,143],[143,227],[227,116],[116,123],[123,111],[111,116],[1,44],[44,19],[19,1],[3,236],[236,51],[51,3],[207,216],[216,205],[205,207],[26,154],[154,22],[22,26],[165,39],[39,167],[167,165],[199,200],[200,208],[208,199],[101,36],[36,100],[100,101],[43,57],[57,202],[202,43],[242,20],[20,99],[99,242],[56,28],[28,157],[157,56],[124,35],[35,113],[113,124],[29,160],[160,27],[27,29],[211,204],[204,210],[210,211],[124,113],[113,46],[46,124],[106,43],[43,204],[204,106],[96,62],[62,77],[77,96],[227,137],[137,116],[116,227],[73,41],[41,72],[72,73],[36,203],[203,142],[142,36],[235,64],[64,240],[240,235],[48,49],[49,64],[64,48],[42,41],[41,74],[74,42],[214,212],[212,207],[207,214],[183,42],[42,184],[184,183],[210,169],[169,211],[211,210],[140,170],[170,176],[176,140],[104,105],[105,69],[69,104],[193,122],[122,168],[168,193],[50,123],[123,187],[187,50],[89,96],[96,90],[90,89],[66,65],[65,107],[107,66],[179,89],[89,180],[180,179],[119,101],[101,120],[120,119],[68,63],[63,104],[104,68],[234,93],[93,227],[227,234],[16,15],[15,85],[85,16],[209,129],[129,49],[49,209],[15,14],[14,86],[86,15],[107,55],[55,9],[9,107],[120,100],[100,121],[121,120],[153,145],[145,22],[22,153],[178,88],[88,179],[179,178],[197,6],[6,196],[196,197],[89,88],[88,96],[96,89],[135,138],[138,136],[136,135],[138,215],[215,172],[172,138],[218,115],[115,219],[219,218],[41,42],[42,81],[81,41],[5,195],[195,51],[51,5],[57,43],[43,61],[61,57],[208,171],[171,199],[199,208],[41,81],[81,38],[38,41],[224,53],[53,225],[225,224],[24,144],[144,110],[110,24],[105,52],[52,66],[66,105],[118,229],[229,117],[117,118],[227,34],[34,234],[234,227],[66,107],[107,69],[69,66],[10,109],[109,151],[151,10],[219,48],[48,235],[235,219],[183,62],[62,191],[191,183],[142,129],[129,126],[126,142],[116,111],[111,143],[143,116],[118,117],[117,50],[50,118],[223,222],[222,52],[52,223],[94,19],[19,141],[141,94],[222,221],[221,65],[65,222],[196,3],[3,197],[197,196],[45,220],[220,44],[44,45],[156,70],[70,139],[139,156],[188,122],[122,245],[245,188],[139,71],[71,162],[162,139],[149,170],[170,150],[150,149],[122,188],[188,196],[196,122],[206,216],[216,92],[92,206],[164,2],[2,167],[167,164],[242,141],[141,241],[241,242],[0,164],[164,37],[37,0],[11,72],[72,12],[12,11],[12,38],[38,13],[13,12],[70,63],[63,71],[71,70],[31,226],[226,111],[111,31],[36,101],[101,205],[205,36],[203,206],[206,165],[165,203],[126,209],[209,217],[217,126],[98,165],[165,97],[97,98],[237,220],[220,218],[218,237],[237,239],[239,241],[241,237],[210,214],[214,169],[169,210],[140,171],[171,32],[32,140],[241,125],[125,237],[237,241],[179,86],[86,178],[178,179],[180,85],[85,179],[179,180],[181,84],[84,180],[180,181],[182,83],[83,181],[181,182],[194,201],[201,182],[182,194],[177,137],[137,132],[132,177],[184,76],[76,183],[183,184],[185,61],[61,184],[184,185],[186,57],[57,185],[185,186],[216,212],[212,186],[186,216],[192,214],[214,187],[187,192],[139,34],[34,156],[156,139],[218,79],[79,237],[237,218],[147,123],[123,177],[177,147],[45,44],[44,4],[4,45],[208,201],[201,32],[32,208],[98,64],[64,129],[129,98],[192,213],[213,138],[138,192],[235,59],[59,219],[219,235],[141,242],[242,97],[97,141],[97,2],[2,141],[141,97],[240,75],[75,235],[235,240],[229,24],[24,228],[228,229],[31,25],[25,226],[226,31],[230,23],[23,229],[229,230],[231,22],[22,230],[230,231],[232,26],[26,231],[231,232],[233,112],[112,232],[232,233],[244,189],[189,243],[243,244],[189,221],[221,190],[190,189],[222,28],[28,221],[221,222],[223,27],[27,222],[222,223],[224,29],[29,223],[223,224],[225,30],[30,224],[224,225],[113,247],[247,225],[225,113],[99,60],[60,240],[240,99],[213,147],[147,215],[215,213],[60,20],[20,166],[166,60],[192,187],[187,213],[213,192],[243,112],[112,244],[244,243],[244,233],[233,245],[245,244],[245,128],[128,188],[188,245],[188,114],[114,174],[174,188],[134,131],[131,220],[220,134],[174,217],[217,236],[236,174],[236,198],[198,134],[134,236],[215,177],[177,58],[58,215],[156,143],[143,124],[124,156],[25,110],[110,7],[7,25],[31,228],[228,25],[25,31],[264,356],[356,368],[368,264],[0,11],[11,267],[267,0],[451,452],[452,349],[349,451],[267,302],[302,269],[269,267],[350,357],[357,277],[277,350],[350,452],[452,357],[357,350],[299,333],[333,297],[297,299],[396,175],[175,377],[377,396],[280,347],[347,330],[330,280],[269,303],[303,270],[270,269],[151,9],[9,337],[337,151],[344,278],[278,360],[360,344],[424,418],[418,431],[431,424],[270,304],[304,409],[409,270],[272,310],[310,407],[407,272],[322,270],[270,410],[410,322],[449,450],[450,347],[347,449],[432,422],[422,434],[434,432],[18,313],[313,17],[17,18],[291,306],[306,375],[375,291],[259,387],[387,260],[260,259],[424,335],[335,418],[418,424],[434,364],[364,416],[416,434],[391,423],[423,327],[327,391],[301,251],[251,298],[298,301],[275,281],[281,4],[4,275],[254,373],[373,253],[253,254],[375,307],[307,321],[321,375],[280,425],[425,411],[411,280],[200,421],[421,18],[18,200],[335,321],[321,406],[406,335],[321,320],[320,405],[405,321],[314,315],[315,17],[17,314],[423,426],[426,266],[266,423],[396,377],[377,369],[369,396],[270,322],[322,269],[269,270],[413,417],[417,464],[464,413],[385,386],[386,258],[258,385],[248,456],[456,419],[419,248],[298,284],[284,333],[333,298],[168,417],[417,8],[8,168],[448,346],[346,261],[261,448],[417,413],[413,285],[285,417],[326,327],[327,328],[328,326],[277,355],[355,329],[329,277],[309,392],[392,438],[438,309],[381,382],[382,256],[256,381],[279,429],[429,360],[360,279],[365,364],[364,379],[379,365],[355,277],[277,437],[437,355],[282,443],[443,283],[283,282],[281,275],[275,363],[363,281],[395,431],[431,369],[369,395],[299,297],[297,337],[337,299],[335,273],[273,321],[321,335],[348,450],[450,349],[349,348],[359,446],[446,467],[467,359],[283,293],[293,282],[282,283],[250,458],[458,462],[462,250],[300,276],[276,383],[383,300],[292,308],[308,325],[325,292],[283,276],[276,293],[293,283],[264,372],[372,447],[447,264],[346,352],[352,340],[340,346],[354,274],[274,19],[19,354],[363,456],[456,281],[281,363],[426,436],[436,425],[425,426],[380,381],[381,252],[252,380],[267,269],[269,393],[393,267],[421,200],[200,428],[428,421],[371,266],[266,329],[329,371],[432,287],[287,422],[422,432],[290,250],[250,328],[328,290],[385,258],[258,384],[384,385],[446,265],[265,342],[342,446],[386,387],[387,257],[257,386],[422,424],[424,430],[430,422],[445,342],[342,276],[276,445],[422,273],[273,424],[424,422],[306,292],[292,307],[307,306],[352,366],[366,345],[345,352],[268,271],[271,302],[302,268],[358,423],[423,371],[371,358],[327,294],[294,460],[460,327],[331,279],[279,294],[294,331],[303,271],[271,304],[304,303],[436,432],[432,427],[427,436],[304,272],[272,408],[408,304],[395,394],[394,431],[431,395],[378,395],[395,400],[400,378],[296,334],[334,299],[299,296],[6,351],[351,168],[168,6],[376,352],[352,411],[411,376],[307,325],[325,320],[320,307],[285,295],[295,336],[336,285],[320,319],[319,404],[404,320],[329,330],[330,349],[349,329],[334,293],[293,333],[333,334],[366,323],[323,447],[447,366],[316,15],[15,315],[315,316],[331,358],[358,279],[279,331],[317,14],[14,316],[316,317],[8,285],[285,9],[9,8],[277,329],[329,350],[350,277],[253,374],[374,252],[252,253],[319,318],[318,403],[403,319],[351,6],[6,419],[419,351],[324,318],[318,325],[325,324],[397,367],[367,365],[365,397],[288,435],[435,397],[397,288],[278,344],[344,439],[439,278],[310,272],[272,311],[311,310],[248,195],[195,281],[281,248],[375,273],[273,291],[291,375],[175,396],[396,199],[199,175],[312,311],[311,268],[268,312],[276,283],[283,445],[445,276],[390,373],[373,339],[339,390],[295,282],[282,296],[296,295],[448,449],[449,346],[346,448],[356,264],[264,454],[454,356],[337,336],[336,299],[299,337],[337,338],[338,151],[151,337],[294,278],[278,455],[455,294],[308,292],[292,415],[415,308],[429,358],[358,355],[355,429],[265,340],[340,372],[372,265],[352,346],[346,280],[280,352],[295,442],[442,282],[282,295],[354,19],[19,370],[370,354],[285,441],[441,295],[295,285],[195,248],[248,197],[197,195],[457,440],[440,274],[274,457],[301,300],[300,368],[368,301],[417,351],[351,465],[465,417],[251,301],[301,389],[389,251],[394,395],[395,379],[379,394],[399,412],[412,419],[419,399],[410,436],[436,322],[322,410],[326,2],[2,393],[393,326],[354,370],[370,461],[461,354],[393,164],[164,267],[267,393],[268,302],[302,12],[12,268],[312,268],[268,13],[13,312],[298,293],[293,301],[301,298],[265,446],[446,340],[340,265],[280,330],[330,425],[425,280],[322,426],[426,391],[391,322],[420,429],[429,437],[437,420],[393,391],[391,326],[326,393],[344,440],[440,438],[438,344],[458,459],[459,461],[461,458],[364,434],[434,394],[394,364],[428,396],[396,262],[262,428],[274,354],[354,457],[457,274],[317,316],[316,402],[402,317],[316,315],[315,403],[403,316],[315,314],[314,404],[404,315],[314,313],[313,405],[405,314],[313,421],[421,406],[406,313],[323,366],[366,361],[361,323],[292,306],[306,407],[407,292],[306,291],[291,408],[408,306],[291,287],[287,409],[409,291],[287,432],[432,410],[410,287],[427,434],[434,411],[411,427],[372,264],[264,383],[383,372],[459,309],[309,457],[457,459],[366,352],[352,401],[401,366],[1,274],[274,4],[4,1],[418,421],[421,262],[262,418],[331,294],[294,358],[358,331],[435,433],[433,367],[367,435],[392,289],[289,439],[439,392],[328,462],[462,326],[326,328],[94,2],[2,370],[370,94],[289,305],[305,455],[455,289],[339,254],[254,448],[448,339],[359,255],[255,446],[446,359],[254,253],[253,449],[449,254],[253,252],[252,450],[450,253],[252,256],[256,451],[451,252],[256,341],[341,452],[452,256],[414,413],[413,463],[463,414],[286,441],[441,414],[414,286],[286,258],[258,441],[441,286],[258,257],[257,442],[442,258],[257,259],[259,443],[443,257],[259,260],[260,444],[444,259],[260,467],[467,445],[445,260],[309,459],[459,250],[250,309],[305,289],[289,290],[290,305],[305,290],[290,460],[460,305],[401,376],[376,435],[435,401],[309,250],[250,392],[392,309],[376,411],[411,433],[433,376],[453,341],[341,464],[464,453],[357,453],[453,465],[465,357],[343,357],[357,412],[412,343],[437,343],[343,399],[399,437],[344,360],[360,440],[440,344],[420,437],[437,456],[456,420],[360,420],[420,363],[363,360],[361,401],[401,288],[288,361],[265,372],[372,353],[353,265],[390,339],[339,249],[249,390],[339,448],[448,255],[255,339]);function ah(ha){ha.j={faceLandmarks:[],faceBlendshapes:[],facialTransformationMatrixes:[]}}var hh=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!1),this.j={faceLandmarks:[],faceBlendshapes:[],facialTransformationMatrixes:[]},this.outputFacialTransformationMatrixes=this.outputFaceBlendshapes=!1,kn(ha=this.h=new Ii,0,1,aa=new bi),this.v=new Oi,kn(this.h,0,3,this.v),this.s=new xi,kn(this.h,0,2,this.s),Cn(this.s,4,1),In(this.s,2,.5),In(this.v,2,.5),In(this.h,4,.5)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return"numFaces"in ha&&Cn(this.s,4,ha.numFaces??1),"minFaceDetectionConfidence"in ha&&In(this.s,2,ha.minFaceDetectionConfidence??.5),"minTrackingConfidence"in ha&&In(this.h,4,ha.minTrackingConfidence??.5),"minFacePresenceConfidence"in ha&&In(this.v,2,ha.minFacePresenceConfidence??.5),"outputFaceBlendshapes"in ha&&(this.outputFaceBlendshapes=!!ha.outputFaceBlendshapes),"outputFacialTransformationMatrixes"in ha&&(this.outputFacialTransformationMatrixes=!!ha.outputFacialTransformationMatrixes),this.l(ha)}F(ha,aa){return ah(this),za(this,ha,aa),this.j}G(ha,aa,xa){return ah(this),Ka(this,ha,xa,aa),this.j}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect"),Ss(ha,"face_landmarks");const aa=new hs;Dn(aa,Ni,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.face_landmarker.FaceLandmarkerGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"NORM_LANDMARKS:face_landmarks"),xa.o(aa),ks(ha,xa),this.g.attachProtoVectorListener("face_landmarks",(ba,Sa)=>{for(const Ta of ba)ba=ei(Ta),this.j.faceLandmarks.push(xo(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("face_landmarks",ba=>{zo(this,ba)}),this.outputFaceBlendshapes&&(Ss(ha,"blendshapes"),_s(xa,"BLENDSHAPES:blendshapes"),this.g.attachProtoVectorListener("blendshapes",(ba,Sa)=>{if(this.outputFaceBlendshapes)for(const Ta of ba)ba=Ds(Ta),this.j.faceBlendshapes.push(bo(ba.g()??[]));zo(this,Sa)}),this.g.attachEmptyPacketListener("blendshapes",ba=>{zo(this,ba)})),this.outputFacialTransformationMatrixes&&(Ss(ha,"face_geometry"),_s(xa,"FACE_GEOMETRY:face_geometry"),this.g.attachProtoVectorListener("face_geometry",(ba,Sa)=>{if(this.outputFacialTransformationMatrixes)for(const Ta of ba)(ba=Tn(Mi(Ta),ni,2))&&this.j.facialTransformationMatrixes.push({rows:Mn(Fn(ba,1))??0,columns:Mn(Fn(ba,2))??0,data:cn(ba,3,fe).slice()??[]});zo(this,Sa)}),this.g.attachEmptyPacketListener("face_geometry",ba=>{zo(this,ba)})),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};hh.prototype.detectForVideo=hh.prototype.G,hh.prototype.detect=hh.prototype.F,hh.prototype.setOptions=hh.prototype.o,hh.createFromModelPath=function(ha,aa){return Ha(hh,ha,{baseOptions:{modelAssetPath:aa}})},hh.createFromModelBuffer=function(ha,aa){return Ha(hh,ha,{baseOptions:{modelAssetBuffer:aa}})},hh.createFromOptions=function(ha,aa){return Ha(hh,ha,aa)},hh.FACE_LANDMARKS_LIPS=Ja,hh.FACE_LANDMARKS_LEFT_EYE=Za,hh.FACE_LANDMARKS_LEFT_EYEBROW=Qa,hh.FACE_LANDMARKS_LEFT_IRIS=th,hh.FACE_LANDMARKS_RIGHT_EYE=eh,hh.FACE_LANDMARKS_RIGHT_EYEBROW=nh,hh.FACE_LANDMARKS_RIGHT_IRIS=rh,hh.FACE_LANDMARKS_FACE_OVAL=sh,hh.FACE_LANDMARKS_CONTOURS=ih,hh.FACE_LANDMARKS_TESSELATION=oh;var ch=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!0),kn(ha=this.j=new Ui,0,1,aa=new bi)}get baseOptions(){return Tn(this.j,bi,1)}set baseOptions(ha){kn(this.j,0,1,ha)}o(ha){return super.l(ha)}Pa(ha,aa,xa){const ba=typeof aa!="function"?aa:{};if(this.h=typeof aa=="function"?aa:xa,za(this,ha,ba??{}),!this.h)return this.s}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect"),Ss(ha,"stylized_image");const aa=new hs;Dn(aa,Bi,this.j);const xa=new vs;ms(xa,"mediapipe.tasks.vision.face_stylizer.FaceStylizerGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"STYLIZED_IMAGE:stylized_image"),xa.o(aa),ks(ha,xa),this.g.W("stylized_image",(ba,Sa)=>{var Ta=!this.h,wa=ba.data,Ea=ba.width;const ka=Ea*(ba=ba.height);if(wa instanceof Uint8Array)if(wa.length===3*ka){const Aa=new Uint8ClampedArray(4*ka);for(let Fa=0;Fa<ka;++Fa)Aa[4*Fa]=wa[3*Fa],Aa[4*Fa+1]=wa[3*Fa+1],Aa[4*Fa+2]=wa[3*Fa+2],Aa[4*Fa+3]=255;wa=new ImageData(Aa,Ea,ba)}else{if(wa.length!==4*ka)throw Error("Unsupported channel count: "+wa.length/ka);wa=new ImageData(new Uint8ClampedArray(wa.buffer,wa.byteOffset,wa.length),Ea,ba)}else if(!(wa instanceof WebGLTexture))throw Error(`Unsupported format: ${wa.constructor.name}`);Ea=new Ua([wa],!1,!1,this.g.i.canvas,this.O,Ea,ba),this.s=Ta=Ta?Ea.clone():Ea,this.h&&this.h(Ta),zo(this,Sa)}),this.g.attachEmptyPacketListener("stylized_image",ba=>{this.s=null,this.h&&this.h(null),zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};ch.prototype.stylize=ch.prototype.Pa,ch.prototype.setOptions=ch.prototype.o,ch.createFromModelPath=function(ha,aa){return Ha(ch,ha,{baseOptions:{modelAssetPath:aa}})},ch.createFromModelBuffer=function(ha,aa){return Ha(ch,ha,{baseOptions:{modelAssetBuffer:aa}})},ch.createFromOptions=function(ha,aa){return Ha(ch,ha,aa)};var uh=Ga([0,1],[1,2],[2,3],[3,4],[0,5],[5,6],[6,7],[7,8],[5,9],[9,10],[10,11],[11,12],[9,13],[13,14],[14,15],[15,16],[13,17],[0,17],[17,18],[18,19],[19,20]);function lh(ha){ha.gestures=[],ha.landmarks=[],ha.worldLandmarks=[],ha.handedness=[]}function dh(ha){return ha.gestures.length===0?{gestures:[],landmarks:[],worldLandmarks:[],handedness:[],handednesses:[]}:{gestures:ha.gestures,landmarks:ha.landmarks,worldLandmarks:ha.worldLandmarks,handedness:ha.handedness,handednesses:ha.handedness}}function fh(ha,aa=!0){const xa=[];for(const Sa of ha){var ba=Ds(Sa);ha=[];for(const Ta of ba.g())ba=aa&&Fn(Ta,1)!=null?Mn(Fn(Ta,1)):-1,ha.push({score:Pn(Ta,2)??0,index:ba,categoryName:Rn(Ta,3)??""??"",displayName:Rn(Ta,4)??""??""});xa.push(ha)}return xa}var ph=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!1),this.gestures=[],this.landmarks=[],this.worldLandmarks=[],this.handedness=[],kn(ha=this.j=new Ji,0,1,aa=new bi),this.s=new $i,kn(this.j,0,2,this.s),this.D=new Ki,kn(this.s,0,3,this.D),this.v=new Wi,kn(this.s,0,2,this.v),this.h=new Xi,kn(this.j,0,3,this.h),In(this.v,2,.5),In(this.s,4,.5),In(this.D,2,.5)}get baseOptions(){return Tn(this.j,bi,1)}set baseOptions(ha){kn(this.j,0,1,ha)}o(ha){var Sa,Ta,wa,Ea;if(Cn(this.v,3,ha.numHands??1),"minHandDetectionConfidence"in ha&&In(this.v,2,ha.minHandDetectionConfidence??.5),"minTrackingConfidence"in ha&&In(this.s,4,ha.minTrackingConfidence??.5),"minHandPresenceConfidence"in ha&&In(this.D,2,ha.minHandPresenceConfidence??.5),ha.cannedGesturesClassifierOptions){var aa=new Gi,xa=aa,ba=Ao(ha.cannedGesturesClassifierOptions,(Sa=Tn(this.h,Gi,3))==null?void 0:Sa.h());kn(xa,0,2,ba),kn(this.h,0,3,aa)}else ha.cannedGesturesClassifierOptions===void 0&&((Ta=Tn(this.h,Gi,3))==null||Ta.g());return ha.customGesturesClassifierOptions?(kn(xa=aa=new Gi,0,2,ba=Ao(ha.customGesturesClassifierOptions,(wa=Tn(this.h,Gi,4))==null?void 0:wa.h())),kn(this.h,0,4,aa)):ha.customGesturesClassifierOptions===void 0&&((Ea=Tn(this.h,Gi,4))==null||Ea.g()),this.l(ha)}Ka(ha,aa){return lh(this),za(this,ha,aa),dh(this)}La(ha,aa,xa){return lh(this),Ka(this,ha,xa,aa),dh(this)}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect"),Ss(ha,"hand_gestures"),Ss(ha,"hand_landmarks"),Ss(ha,"world_hand_landmarks"),Ss(ha,"handedness");const aa=new hs;Dn(aa,to,this.j);const xa=new vs;ms(xa,"mediapipe.tasks.vision.gesture_recognizer.GestureRecognizerGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"HAND_GESTURES:hand_gestures"),_s(xa,"LANDMARKS:hand_landmarks"),_s(xa,"WORLD_LANDMARKS:world_hand_landmarks"),_s(xa,"HANDEDNESS:handedness"),xa.o(aa),ks(ha,xa),this.g.attachProtoVectorListener("hand_landmarks",(ba,Sa)=>{for(const Ta of ba){ba=ei(Ta);const wa=[];for(const Ea of bn(ba,Zs,1))wa.push({x:Pn(Ea,1)??0,y:Pn(Ea,2)??0,z:Pn(Ea,3)??0,visibility:Pn(Ea,4)??0});this.landmarks.push(wa)}zo(this,Sa)}),this.g.attachEmptyPacketListener("hand_landmarks",ba=>{zo(this,ba)}),this.g.attachProtoVectorListener("world_hand_landmarks",(ba,Sa)=>{for(const Ta of ba){ba=Js(Ta);const wa=[];for(const Ea of bn(ba,Ys,1))wa.push({x:Pn(Ea,1)??0,y:Pn(Ea,2)??0,z:Pn(Ea,3)??0,visibility:Pn(Ea,4)??0});this.worldLandmarks.push(wa)}zo(this,Sa)}),this.g.attachEmptyPacketListener("world_hand_landmarks",ba=>{zo(this,ba)}),this.g.attachProtoVectorListener("hand_gestures",(ba,Sa)=>{this.gestures.push(...fh(ba,!1)),zo(this,Sa)}),this.g.attachEmptyPacketListener("hand_gestures",ba=>{zo(this,ba)}),this.g.attachProtoVectorListener("handedness",(ba,Sa)=>{this.handedness.push(...fh(ba)),zo(this,Sa)}),this.g.attachEmptyPacketListener("handedness",ba=>{zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};function gh(ha){return{landmarks:ha.landmarks,worldLandmarks:ha.worldLandmarks,handednesses:ha.handedness,handedness:ha.handedness}}ph.prototype.recognizeForVideo=ph.prototype.La,ph.prototype.recognize=ph.prototype.Ka,ph.prototype.setOptions=ph.prototype.o,ph.createFromModelPath=function(ha,aa){return Ha(ph,ha,{baseOptions:{modelAssetPath:aa}})},ph.createFromModelBuffer=function(ha,aa){return Ha(ph,ha,{baseOptions:{modelAssetBuffer:aa}})},ph.createFromOptions=function(ha,aa){return Ha(ph,ha,aa)},ph.HAND_CONNECTIONS=uh;var mh=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!1),this.landmarks=[],this.worldLandmarks=[],this.handedness=[],kn(ha=this.h=new $i,0,1,aa=new bi),this.s=new Ki,kn(this.h,0,3,this.s),this.j=new Wi,kn(this.h,0,2,this.j),Cn(this.j,3,1),In(this.j,2,.5),In(this.s,2,.5),In(this.h,4,.5)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return"numHands"in ha&&Cn(this.j,3,ha.numHands??1),"minHandDetectionConfidence"in ha&&In(this.j,2,ha.minHandDetectionConfidence??.5),"minTrackingConfidence"in ha&&In(this.h,4,ha.minTrackingConfidence??.5),"minHandPresenceConfidence"in ha&&In(this.s,2,ha.minHandPresenceConfidence??.5),this.l(ha)}F(ha,aa){return this.landmarks=[],this.worldLandmarks=[],this.handedness=[],za(this,ha,aa),gh(this)}G(ha,aa,xa){return this.landmarks=[],this.worldLandmarks=[],this.handedness=[],Ka(this,ha,xa,aa),gh(this)}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect"),Ss(ha,"hand_landmarks"),Ss(ha,"world_hand_landmarks"),Ss(ha,"handedness");const aa=new hs;Dn(aa,Qi,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.hand_landmarker.HandLandmarkerGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"LANDMARKS:hand_landmarks"),_s(xa,"WORLD_LANDMARKS:world_hand_landmarks"),_s(xa,"HANDEDNESS:handedness"),xa.o(aa),ks(ha,xa),this.g.attachProtoVectorListener("hand_landmarks",(ba,Sa)=>{for(const Ta of ba)ba=ei(Ta),this.landmarks.push(xo(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("hand_landmarks",ba=>{zo(this,ba)}),this.g.attachProtoVectorListener("world_hand_landmarks",(ba,Sa)=>{for(const Ta of ba)ba=Js(Ta),this.worldLandmarks.push(So(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("world_hand_landmarks",ba=>{zo(this,ba)}),this.g.attachProtoVectorListener("handedness",(ba,Sa)=>{var Ta=this.handedness,wa=Ta.push;const Ea=[];for(const ka of ba){ba=Ds(ka);const Aa=[];for(const Fa of ba.g())Aa.push({score:Pn(Fa,2)??0,index:Mn(Fn(Fa,1))??-1,categoryName:Rn(Fa,3)??""??"",displayName:Rn(Fa,4)??""??""});Ea.push(Aa)}wa.call(Ta,...Ea),zo(this,Sa)}),this.g.attachEmptyPacketListener("handedness",ba=>{zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};mh.prototype.detectForVideo=mh.prototype.G,mh.prototype.detect=mh.prototype.F,mh.prototype.setOptions=mh.prototype.o,mh.createFromModelPath=function(ha,aa){return Ha(mh,ha,{baseOptions:{modelAssetPath:aa}})},mh.createFromModelBuffer=function(ha,aa){return Ha(mh,ha,{baseOptions:{modelAssetBuffer:aa}})},mh.createFromOptions=function(ha,aa){return Ha(mh,ha,aa)},mh.HAND_CONNECTIONS=uh;var yh=Ga([0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]);function _h(ha){ha.h={faceLandmarks:[],faceBlendshapes:[],poseLandmarks:[],poseWorldLandmarks:[],poseSegmentationMasks:[],leftHandLandmarks:[],leftHandWorldLandmarks:[],rightHandLandmarks:[],rightHandWorldLandmarks:[]}}function vh(ha){try{if(!ha.D)return ha.h;ha.D(ha.h)}finally{$o(ha)}}function Eh(ha,aa){ha=ei(ha),aa.push(xo(ha))}var wh=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"input_frames_image",null,!1),this.h={faceLandmarks:[],faceBlendshapes:[],poseLandmarks:[],poseWorldLandmarks:[],poseSegmentationMasks:[],leftHandLandmarks:[],leftHandWorldLandmarks:[],rightHandLandmarks:[],rightHandWorldLandmarks:[]},this.outputPoseSegmentationMasks=this.outputFaceBlendshapes=!1,kn(ha=this.j=new ao,0,1,aa=new bi),this.I=new Ki,kn(this.j,0,2,this.I),this.aa=new eo,kn(this.j,0,3,this.aa),this.s=new xi,kn(this.j,0,4,this.s),this.P=new Oi,kn(this.j,0,5,this.P),this.v=new ro,kn(this.j,0,6,this.v),this.J=new io,kn(this.j,0,7,this.J),In(this.s,2,.5),In(this.s,3,.3),In(this.P,2,.5),In(this.v,2,.5),In(this.v,3,.3),In(this.J,2,.5),In(this.I,2,.5)}get baseOptions(){return Tn(this.j,bi,1)}set baseOptions(ha){kn(this.j,0,1,ha)}o(ha){return"minFaceDetectionConfidence"in ha&&In(this.s,2,ha.minFaceDetectionConfidence??.5),"minFaceSuppressionThreshold"in ha&&In(this.s,3,ha.minFaceSuppressionThreshold??.3),"minFacePresenceConfidence"in ha&&In(this.P,2,ha.minFacePresenceConfidence??.5),"outputFaceBlendshapes"in ha&&(this.outputFaceBlendshapes=!!ha.outputFaceBlendshapes),"minPoseDetectionConfidence"in ha&&In(this.v,2,ha.minPoseDetectionConfidence??.5),"minPoseSuppressionThreshold"in ha&&In(this.v,3,ha.minPoseSuppressionThreshold??.3),"minPosePresenceConfidence"in ha&&In(this.J,2,ha.minPosePresenceConfidence??.5),"outputPoseSegmentationMasks"in ha&&(this.outputPoseSegmentationMasks=!!ha.outputPoseSegmentationMasks),"minHandLandmarksConfidence"in ha&&In(this.I,2,ha.minHandLandmarksConfidence??.5),this.l(ha)}F(ha,aa,xa){const ba=typeof aa!="function"?aa:{};return this.D=typeof aa=="function"?aa:xa,_h(this),za(this,ha,ba),vh(this)}G(ha,aa,xa,ba){const Sa=typeof xa!="function"?xa:{};return this.D=typeof xa=="function"?xa:ba,_h(this),Ka(this,ha,Sa,aa),vh(this)}m(){var ha=new Ls;xs(ha,"input_frames_image"),Ss(ha,"pose_landmarks"),Ss(ha,"pose_world_landmarks"),Ss(ha,"face_landmarks"),Ss(ha,"left_hand_landmarks"),Ss(ha,"left_hand_world_landmarks"),Ss(ha,"right_hand_landmarks"),Ss(ha,"right_hand_world_landmarks");const aa=new hs,xa=new Jr;gn(xa,1,ke("type.googleapis.com/mediapipe.tasks.vision.holistic_landmarker.proto.HolisticLandmarkerGraphOptions"),""),function(Sa,Ta){if(Ta!=null)if(Array.isArray(Ta))rn(Sa,2,Ye(Ta,qe,void 0,void 0,!1));else{if(!(typeof Ta=="string"||Ta instanceof U||R(Ta)))throw Error("invalid value in Any.value field: "+Ta+" expected a ByteString, a base64 encoded string, a Uint8Array or a jspb array");gn(Sa,2,se(Ta,!1,!1),D())}}(xa,this.j.g());const ba=new vs;ms(ba,"mediapipe.tasks.vision.holistic_landmarker.HolisticLandmarkerGraph"),Ln(ba,8,Jr,xa),ys(ba,"IMAGE:input_frames_image"),_s(ba,"POSE_LANDMARKS:pose_landmarks"),_s(ba,"POSE_WORLD_LANDMARKS:pose_world_landmarks"),_s(ba,"FACE_LANDMARKS:face_landmarks"),_s(ba,"LEFT_HAND_LANDMARKS:left_hand_landmarks"),_s(ba,"LEFT_HAND_WORLD_LANDMARKS:left_hand_world_landmarks"),_s(ba,"RIGHT_HAND_LANDMARKS:right_hand_landmarks"),_s(ba,"RIGHT_HAND_WORLD_LANDMARKS:right_hand_world_landmarks"),ba.o(aa),ks(ha,ba),Ko(this,ha),this.g.attachProtoListener("pose_landmarks",(Sa,Ta)=>{Eh(Sa,this.h.poseLandmarks),zo(this,Ta)}),this.g.attachEmptyPacketListener("pose_landmarks",Sa=>{zo(this,Sa)}),this.g.attachProtoListener("pose_world_landmarks",(Sa,Ta)=>{var wa=this.h.poseWorldLandmarks;Sa=Js(Sa),wa.push(So(Sa)),zo(this,Ta)}),this.g.attachEmptyPacketListener("pose_world_landmarks",Sa=>{zo(this,Sa)}),this.outputPoseSegmentationMasks&&(_s(ba,"POSE_SEGMENTATION_MASK:pose_segmentation_mask"),Yo(this,"pose_segmentation_mask"),this.g.W("pose_segmentation_mask",(Sa,Ta)=>{this.h.poseSegmentationMasks=[Ya(this,Sa,!0,!this.D)],zo(this,Ta)}),this.g.attachEmptyPacketListener("pose_segmentation_mask",Sa=>{this.h.poseSegmentationMasks=[],zo(this,Sa)})),this.g.attachProtoListener("face_landmarks",(Sa,Ta)=>{Eh(Sa,this.h.faceLandmarks),zo(this,Ta)}),this.g.attachEmptyPacketListener("face_landmarks",Sa=>{zo(this,Sa)}),this.outputFaceBlendshapes&&(Ss(ha,"extra_blendshapes"),_s(ba,"FACE_BLENDSHAPES:extra_blendshapes"),this.g.attachProtoListener("extra_blendshapes",(Sa,Ta)=>{var wa=this.h.faceBlendshapes;this.outputFaceBlendshapes&&(Sa=Ds(Sa),wa.push(bo(Sa.g()??[]))),zo(this,Ta)}),this.g.attachEmptyPacketListener("extra_blendshapes",Sa=>{zo(this,Sa)})),this.g.attachProtoListener("left_hand_landmarks",(Sa,Ta)=>{Eh(Sa,this.h.leftHandLandmarks),zo(this,Ta)}),this.g.attachEmptyPacketListener("left_hand_landmarks",Sa=>{zo(this,Sa)}),this.g.attachProtoListener("left_hand_world_landmarks",(Sa,Ta)=>{var wa=this.h.leftHandWorldLandmarks;Sa=Js(Sa),wa.push(So(Sa)),zo(this,Ta)}),this.g.attachEmptyPacketListener("left_hand_world_landmarks",Sa=>{zo(this,Sa)}),this.g.attachProtoListener("right_hand_landmarks",(Sa,Ta)=>{Eh(Sa,this.h.rightHandLandmarks),zo(this,Ta)}),this.g.attachEmptyPacketListener("right_hand_landmarks",Sa=>{zo(this,Sa)}),this.g.attachProtoListener("right_hand_world_landmarks",(Sa,Ta)=>{var wa=this.h.rightHandWorldLandmarks;Sa=Js(Sa),wa.push(So(Sa)),zo(this,Ta)}),this.g.attachEmptyPacketListener("right_hand_world_landmarks",Sa=>{zo(this,Sa)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};wh.prototype.detectForVideo=wh.prototype.G,wh.prototype.detect=wh.prototype.F,wh.prototype.setOptions=wh.prototype.o,wh.createFromModelPath=function(ha,aa){return Ha(wh,ha,{baseOptions:{modelAssetPath:aa}})},wh.createFromModelBuffer=function(ha,aa){return Ha(wh,ha,{baseOptions:{modelAssetBuffer:aa}})},wh.createFromOptions=function(ha,aa){return Ha(wh,ha,aa)},wh.HAND_CONNECTIONS=uh,wh.POSE_CONNECTIONS=yh,wh.FACE_LANDMARKS_LIPS=Ja,wh.FACE_LANDMARKS_LEFT_EYE=Za,wh.FACE_LANDMARKS_LEFT_EYEBROW=Qa,wh.FACE_LANDMARKS_LEFT_IRIS=th,wh.FACE_LANDMARKS_RIGHT_EYE=eh,wh.FACE_LANDMARKS_RIGHT_EYEBROW=nh,wh.FACE_LANDMARKS_RIGHT_IRIS=rh,wh.FACE_LANDMARKS_FACE_OVAL=sh,wh.FACE_LANDMARKS_CONTOURS=ih,wh.FACE_LANDMARKS_TESSELATION=oh;var Th=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"input_image","norm_rect",!0),this.j={classifications:[]},kn(ha=this.h=new ho,0,1,aa=new bi)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return kn(this.h,0,2,Ao(ha,Tn(this.h,mi,2))),this.l(ha)}ua(ha,aa){return this.j={classifications:[]},za(this,ha,aa),this.j}va(ha,aa,xa){return this.j={classifications:[]},Ka(this,ha,xa,aa),this.j}m(){var ha=new Ls;xs(ha,"input_image"),xs(ha,"norm_rect"),Ss(ha,"classifications");const aa=new hs;Dn(aa,co,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.image_classifier.ImageClassifierGraph"),ys(xa,"IMAGE:input_image"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"CLASSIFICATIONS:classifications"),xa.o(aa),ks(ha,xa),this.g.attachProtoListener("classifications",(ba,Sa)=>{this.j=function(Ta){const wa={classifications:bn(Ta,ii,1).map(Ea=>{var ka;return bo(((ka=Tn(Ea,Cs,4))==null?void 0:ka.g())??[],Mn(Fn(Ea,2)),Rn(Ea,3)??"")})};return Ae(en(Ta,2))!=null&&(wa.timestampMs=Mn(Ae(en(Ta,2)))),wa}(hi(ba)),zo(this,Sa)}),this.g.attachEmptyPacketListener("classifications",ba=>{zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};Th.prototype.classifyForVideo=Th.prototype.va,Th.prototype.classify=Th.prototype.ua,Th.prototype.setOptions=Th.prototype.o,Th.createFromModelPath=function(ha,aa){return Ha(Th,ha,{baseOptions:{modelAssetPath:aa}})},Th.createFromModelBuffer=function(ha,aa){return Ha(Th,ha,{baseOptions:{modelAssetBuffer:aa}})},Th.createFromOptions=function(ha,aa){return Ha(Th,ha,aa)};var Ah=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!0),this.h=new uo,this.embeddings={embeddings:[]},kn(ha=this.h,0,1,aa=new bi)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){var aa=this.h,xa=Tn(this.h,_i,2);return xa=xa?xa.clone():new _i,ha.l2Normalize!==void 0?On(xa,1,ha.l2Normalize):"l2Normalize"in ha&&rn(xa,1),ha.quantize!==void 0?On(xa,2,ha.quantize):"quantize"in ha&&rn(xa,2),kn(aa,0,2,xa),this.l(ha)}Ba(ha,aa){return za(this,ha,aa),this.embeddings}Ca(ha,aa,xa){return Ka(this,ha,xa,aa),this.embeddings}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect"),Ss(ha,"embeddings_out");const aa=new hs;Dn(aa,lo,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.image_embedder.ImageEmbedderGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"EMBEDDINGS:embeddings_out"),xa.o(aa),ks(ha,xa),this.g.attachProtoListener("embeddings_out",(ba,Sa)=>{ba=gi(ba),this.embeddings=function(Ta){return{embeddings:bn(Ta,li,1).map(wa=>{var ka,Aa;const Ea={headIndex:Mn(Fn(wa,3))??-1,headName:Rn(wa,4)??""??""};if(wn(wa,ci,_n(wa,1))!==void 0)wa=cn(wa=Tn(wa,ci,_n(wa,1)),1,fe),Ea.floatEmbedding=wa.slice();else{const Fa=new Uint8Array(0);Ea.quantizedEmbedding=((Aa=(ka=Tn(wa,ui,_n(wa,2)))==null?void 0:ka.qa())==null?void 0:Aa.h())??Fa}return Ea}),timestampMs:Mn(Ae(en(Ta,2)))}}(ba),zo(this,Sa)}),this.g.attachEmptyPacketListener("embeddings_out",ba=>{zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};Ah.cosineSimilarity=function(ha,aa){if(ha.floatEmbedding&&aa.floatEmbedding)ha=Fo(ha.floatEmbedding,aa.floatEmbedding);else{if(!ha.quantizedEmbedding||!aa.quantizedEmbedding)throw Error("Cannot compute cosine similarity between quantized and float embeddings.");ha=Fo(Lo(ha.quantizedEmbedding),Lo(aa.quantizedEmbedding))}return ha},Ah.prototype.embedForVideo=Ah.prototype.Ca,Ah.prototype.embed=Ah.prototype.Ba,Ah.prototype.setOptions=Ah.prototype.o,Ah.createFromModelPath=function(ha,aa){return Ha(Ah,ha,{baseOptions:{modelAssetPath:aa}})},Ah.createFromModelBuffer=function(ha,aa){return Ha(Ah,ha,{baseOptions:{modelAssetBuffer:aa}})},Ah.createFromOptions=function(ha,aa){return Ha(Ah,ha,aa)};var bh=class{constructor(ha,aa,xa){this.confidenceMasks=ha,this.categoryMask=aa,this.qualityScores=xa}close(){var ha,aa;(ha=this.confidenceMasks)==null||ha.forEach(xa=>{xa.close()}),(aa=this.categoryMask)==null||aa.close()}};function kh(ha){ha.categoryMask=void 0,ha.confidenceMasks=void 0,ha.qualityScores=void 0}function xh(ha){try{const aa=new bh(ha.confidenceMasks,ha.categoryMask,ha.qualityScores);if(!ha.j)return aa;ha.j(aa)}finally{$o(ha)}}bh.prototype.close=bh.prototype.close;var Sh=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!1),this.s=[],this.outputCategoryMask=!1,this.outputConfidenceMasks=!0,this.h=new yo,this.v=new fo,kn(this.h,0,3,this.v),kn(ha=this.h,0,1,aa=new bi)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return ha.displayNamesLocale!==void 0?rn(this.h,2,ke(ha.displayNamesLocale)):"displayNamesLocale"in ha&&rn(this.h,2),"outputCategoryMask"in ha&&(this.outputCategoryMask=ha.outputCategoryMask??!1),"outputConfidenceMasks"in ha&&(this.outputConfidenceMasks=ha.outputConfidenceMasks??!0),super.l(ha)}K(){(function(ha){var xa,ba;const aa=bn(ha.fa(),vs,1).filter(Sa=>(Rn(Sa,1)??"").includes("mediapipe.tasks.TensorsToSegmentationCalculator"));if(ha.s=[],1<aa.length)throw Error("The graph has more than one mediapipe.tasks.TensorsToSegmentationCalculator.");aa.length===1&&(((ba=(xa=Tn(aa[0],hs,7))==null?void 0:xa.l())==null?void 0:ba.g())??new Map).forEach((Sa,Ta)=>{ha.s[Number(Ta)]=Rn(Sa,1)??""})})(this)}ga(ha,aa,xa){const ba=typeof aa!="function"?aa:{};return this.j=typeof aa=="function"?aa:xa,kh(this),za(this,ha,ba),xh(this)}Na(ha,aa,xa,ba){const Sa=typeof xa!="function"?xa:{};return this.j=typeof xa=="function"?xa:ba,kh(this),Ka(this,ha,Sa,aa),xh(this)}Fa(){return this.s}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect");const aa=new hs;Dn(aa,_o,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.image_segmenter.ImageSegmenterGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),xa.o(aa),ks(ha,xa),Ko(this,ha),this.outputConfidenceMasks&&(Ss(ha,"confidence_masks"),_s(xa,"CONFIDENCE_MASKS:confidence_masks"),Yo(this,"confidence_masks"),this.g.da("confidence_masks",(ba,Sa)=>{this.confidenceMasks=ba.map(Ta=>Ya(this,Ta,!0,!this.j)),zo(this,Sa)}),this.g.attachEmptyPacketListener("confidence_masks",ba=>{this.confidenceMasks=[],zo(this,ba)})),this.outputCategoryMask&&(Ss(ha,"category_mask"),_s(xa,"CATEGORY_MASK:category_mask"),Yo(this,"category_mask"),this.g.W("category_mask",(ba,Sa)=>{this.categoryMask=Ya(this,ba,!1,!this.j),zo(this,Sa)}),this.g.attachEmptyPacketListener("category_mask",ba=>{this.categoryMask=void 0,zo(this,ba)})),Ss(ha,"quality_scores"),_s(xa,"QUALITY_SCORES:quality_scores"),this.g.attachFloatVectorListener("quality_scores",(ba,Sa)=>{this.qualityScores=ba,zo(this,Sa)}),this.g.attachEmptyPacketListener("quality_scores",ba=>{this.categoryMask=void 0,zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};Sh.prototype.getLabels=Sh.prototype.Fa,Sh.prototype.segmentForVideo=Sh.prototype.Na,Sh.prototype.segment=Sh.prototype.ga,Sh.prototype.setOptions=Sh.prototype.o,Sh.createFromModelPath=function(ha,aa){return Ha(Sh,ha,{baseOptions:{modelAssetPath:aa}})},Sh.createFromModelBuffer=function(ha,aa){return Ha(Sh,ha,{baseOptions:{modelAssetBuffer:aa}})},Sh.createFromOptions=function(ha,aa){return Ha(Sh,ha,aa)};var Lh=class{constructor(ha,aa,xa){this.confidenceMasks=ha,this.categoryMask=aa,this.qualityScores=xa}close(){var ha,aa;(ha=this.confidenceMasks)==null||ha.forEach(xa=>{xa.close()}),(aa=this.categoryMask)==null||aa.close()}};Lh.prototype.close=Lh.prototype.close;var Fh=class extends Nn{constructor(ha){super(ha)}},Rh=[0,Pr,-2],Mh=[0,kr,-3,Ir],Ph=[0,kr,-3,Ir,kr,-1],Oh=[0,Ph],Ch=[0,Oh,Rh],Ih=[0,Ph,Rh],Dh=[0,Ph,Pr,-1],Nh=[0,Dh,Rh],Uh=[0,kr,-3,Ir,Rh,-1],Bh=[0,kr,-3,Ir,Wr],Gh=class extends Nn{constructor(ha){super(ha)}},jh=[0,kr,-1,Ir],Vh=class extends Nn{constructor(){super()}};Vh.A=[1];var Xh=class extends Nn{constructor(ha){super(ha)}},Hh=[1,2,3,4,5,6,7,8,9,10,14,15],Wh=[0,Hh,Vr,Ph,Vr,Ih,Vr,Oh,Vr,Ch,Vr,jh,Vr,Bh,Vr,Mh,Vr,[0,Br,kr,-2,Ir,Pr,Ir,-1,2,kr,Rh],Vr,Dh,Vr,Nh,kr,Rh,Br,Vr,Uh,Vr,[0,br,jh]],zh=[0,Br,Pr,-1,Ir],Kh=class extends Nn{constructor(){super()}};Kh.A=[1],Kh.prototype.g=qr([0,br,Wh,Br,zh]);var Yh=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect_in",!1),this.outputCategoryMask=!1,this.outputConfidenceMasks=!0,this.h=new yo,this.s=new fo,kn(this.h,0,3,this.s),kn(ha=this.h,0,1,aa=new bi)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return"outputCategoryMask"in ha&&(this.outputCategoryMask=ha.outputCategoryMask??!1),"outputConfidenceMasks"in ha&&(this.outputConfidenceMasks=ha.outputConfidenceMasks??!0),super.l(ha)}ga(ha,aa,xa,ba){const Sa=typeof xa!="function"?xa:{};this.j=typeof xa=="function"?xa:ba,this.qualityScores=this.categoryMask=this.confidenceMasks=void 0,xa=this.C+1,ba=new Kh;const Ta=new Xh;var wa=new Fh;if(Cn(wa,1,255),kn(Ta,0,12,wa),aa.keypoint&&aa.scribble)throw Error("Cannot provide both keypoint and scribble.");if(aa.keypoint){var Ea=new Gh;On(Ea,3,!0),In(Ea,1,aa.keypoint.x),In(Ea,2,aa.keypoint.y),xn(Ta,5,Hh,Ea)}else{if(!aa.scribble)throw Error("Must provide either a keypoint or a scribble.");for(Ea of(wa=new Vh,aa.scribble))On(aa=new Gh,3,!0),In(aa,1,Ea.x),In(aa,2,Ea.y),Ln(wa,1,Gh,aa);xn(Ta,15,Hh,wa)}Ln(ba,1,Xh,Ta),this.g.addProtoToStream(ba.g(),"drishti.RenderData","roi_in",xa),za(this,ha,Sa);e:{try{const Aa=new Lh(this.confidenceMasks,this.categoryMask,this.qualityScores);if(!this.j){var ka=Aa;break e}this.j(Aa)}finally{$o(this)}ka=void 0}return ka}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"roi_in"),xs(ha,"norm_rect_in");const aa=new hs;Dn(aa,_o,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.interactive_segmenter.InteractiveSegmenterGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"ROI:roi_in"),ys(xa,"NORM_RECT:norm_rect_in"),xa.o(aa),ks(ha,xa),Ko(this,ha),this.outputConfidenceMasks&&(Ss(ha,"confidence_masks"),_s(xa,"CONFIDENCE_MASKS:confidence_masks"),Yo(this,"confidence_masks"),this.g.da("confidence_masks",(ba,Sa)=>{this.confidenceMasks=ba.map(Ta=>Ya(this,Ta,!0,!this.j)),zo(this,Sa)}),this.g.attachEmptyPacketListener("confidence_masks",ba=>{this.confidenceMasks=[],zo(this,ba)})),this.outputCategoryMask&&(Ss(ha,"category_mask"),_s(xa,"CATEGORY_MASK:category_mask"),Yo(this,"category_mask"),this.g.W("category_mask",(ba,Sa)=>{this.categoryMask=Ya(this,ba,!1,!this.j),zo(this,Sa)}),this.g.attachEmptyPacketListener("category_mask",ba=>{this.categoryMask=void 0,zo(this,ba)})),Ss(ha,"quality_scores"),_s(xa,"QUALITY_SCORES:quality_scores"),this.g.attachFloatVectorListener("quality_scores",(ba,Sa)=>{this.qualityScores=ba,zo(this,Sa)}),this.g.attachEmptyPacketListener("quality_scores",ba=>{this.categoryMask=void 0,zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};Yh.prototype.segment=Yh.prototype.ga,Yh.prototype.setOptions=Yh.prototype.o,Yh.createFromModelPath=function(ha,aa){return Ha(Yh,ha,{baseOptions:{modelAssetPath:aa}})},Yh.createFromModelBuffer=function(ha,aa){return Ha(Yh,ha,{baseOptions:{modelAssetBuffer:aa}})},Yh.createFromOptions=function(ha,aa){return Ha(Yh,ha,aa)};var $h=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"input_frame_gpu","norm_rect",!1),this.j={detections:[]},kn(ha=this.h=new vo,0,1,aa=new bi)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return ha.displayNamesLocale!==void 0?rn(this.h,2,ke(ha.displayNamesLocale)):"displayNamesLocale"in ha&&rn(this.h,2),ha.maxResults!==void 0?Cn(this.h,3,ha.maxResults):"maxResults"in ha&&rn(this.h,3),ha.scoreThreshold!==void 0?In(this.h,4,ha.scoreThreshold):"scoreThreshold"in ha&&rn(this.h,4),ha.categoryAllowlist!==void 0?pn(this.h,5,ha.categoryAllowlist):"categoryAllowlist"in ha&&rn(this.h,5),ha.categoryDenylist!==void 0?pn(this.h,6,ha.categoryDenylist):"categoryDenylist"in ha&&rn(this.h,6),this.l(ha)}F(ha,aa){return this.j={detections:[]},za(this,ha,aa),this.j}G(ha,aa,xa){return this.j={detections:[]},Ka(this,ha,xa,aa),this.j}m(){var ha=new Ls;xs(ha,"input_frame_gpu"),xs(ha,"norm_rect"),Ss(ha,"detections");const aa=new hs;Dn(aa,Eo,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.ObjectDetectorGraph"),ys(xa,"IMAGE:input_frame_gpu"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"DETECTIONS:detections"),xa.o(aa),ks(ha,xa),this.g.attachProtoVectorListener("detections",(ba,Sa)=>{for(const Ta of ba)ba=Ks(Ta),this.j.detections.push(ko(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("detections",ba=>{zo(this,ba)}),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};$h.prototype.detectForVideo=$h.prototype.G,$h.prototype.detect=$h.prototype.F,$h.prototype.setOptions=$h.prototype.o,$h.createFromModelPath=async function(ha,aa){return Ha($h,ha,{baseOptions:{modelAssetPath:aa}})},$h.createFromModelBuffer=function(ha,aa){return Ha($h,ha,{baseOptions:{modelAssetBuffer:aa}})},$h.createFromOptions=function(ha,aa){return Ha($h,ha,aa)};var qh=class{constructor(ha,aa,xa){this.landmarks=ha,this.worldLandmarks=aa,this.segmentationMasks=xa}close(){var ha;(ha=this.segmentationMasks)==null||ha.forEach(aa=>{aa.close()})}};function Jh(ha){ha.landmarks=[],ha.worldLandmarks=[],ha.segmentationMasks=void 0}function Zh(ha){try{const aa=new qh(ha.landmarks,ha.worldLandmarks,ha.segmentationMasks);if(!ha.s)return aa;ha.s(aa)}finally{$o(ha)}}qh.prototype.close=qh.prototype.close;var Qh=class extends $a{constructor(ha,aa){super(new Xa(ha,aa),"image_in","norm_rect",!1),this.landmarks=[],this.worldLandmarks=[],this.outputSegmentationMasks=!1,kn(ha=this.h=new wo,0,1,aa=new bi),this.v=new io,kn(this.h,0,3,this.v),this.j=new ro,kn(this.h,0,2,this.j),Cn(this.j,4,1),In(this.j,2,.5),In(this.v,2,.5),In(this.h,4,.5)}get baseOptions(){return Tn(this.h,bi,1)}set baseOptions(ha){kn(this.h,0,1,ha)}o(ha){return"numPoses"in ha&&Cn(this.j,4,ha.numPoses??1),"minPoseDetectionConfidence"in ha&&In(this.j,2,ha.minPoseDetectionConfidence??.5),"minTrackingConfidence"in ha&&In(this.h,4,ha.minTrackingConfidence??.5),"minPosePresenceConfidence"in ha&&In(this.v,2,ha.minPosePresenceConfidence??.5),"outputSegmentationMasks"in ha&&(this.outputSegmentationMasks=ha.outputSegmentationMasks??!1),this.l(ha)}F(ha,aa,xa){const ba=typeof aa!="function"?aa:{};return this.s=typeof aa=="function"?aa:xa,Jh(this),za(this,ha,ba),Zh(this)}G(ha,aa,xa,ba){const Sa=typeof xa!="function"?xa:{};return this.s=typeof xa=="function"?xa:ba,Jh(this),Ka(this,ha,Sa,aa),Zh(this)}m(){var ha=new Ls;xs(ha,"image_in"),xs(ha,"norm_rect"),Ss(ha,"normalized_landmarks"),Ss(ha,"world_landmarks"),Ss(ha,"segmentation_masks");const aa=new hs;Dn(aa,To,this.h);const xa=new vs;ms(xa,"mediapipe.tasks.vision.pose_landmarker.PoseLandmarkerGraph"),ys(xa,"IMAGE:image_in"),ys(xa,"NORM_RECT:norm_rect"),_s(xa,"NORM_LANDMARKS:normalized_landmarks"),_s(xa,"WORLD_LANDMARKS:world_landmarks"),xa.o(aa),ks(ha,xa),Ko(this,ha),this.g.attachProtoVectorListener("normalized_landmarks",(ba,Sa)=>{this.landmarks=[];for(const Ta of ba)ba=ei(Ta),this.landmarks.push(xo(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("normalized_landmarks",ba=>{this.landmarks=[],zo(this,ba)}),this.g.attachProtoVectorListener("world_landmarks",(ba,Sa)=>{this.worldLandmarks=[];for(const Ta of ba)ba=Js(Ta),this.worldLandmarks.push(So(ba));zo(this,Sa)}),this.g.attachEmptyPacketListener("world_landmarks",ba=>{this.worldLandmarks=[],zo(this,ba)}),this.outputSegmentationMasks&&(_s(xa,"SEGMENTATION_MASK:segmentation_masks"),Yo(this,"segmentation_masks"),this.g.da("segmentation_masks",(ba,Sa)=>{this.segmentationMasks=ba.map(Ta=>Ya(this,Ta,!0,!this.s)),zo(this,Sa)}),this.g.attachEmptyPacketListener("segmentation_masks",ba=>{this.segmentationMasks=[],zo(this,ba)})),ha=ha.g(),this.setGraph(new Uint8Array(ha),!0)}};Qh.prototype.detectForVideo=Qh.prototype.G,Qh.prototype.detect=Qh.prototype.F,Qh.prototype.setOptions=Qh.prototype.o,Qh.createFromModelPath=function(ha,aa){return Ha(Qh,ha,{baseOptions:{modelAssetPath:aa}})},Qh.createFromModelBuffer=function(ha,aa){return Ha(Qh,ha,{baseOptions:{modelAssetBuffer:aa}})},Qh.createFromOptions=function(ha,aa){return Ha(Qh,ha,aa)},Qh.POSE_CONNECTIONS=yh;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EPSILON_FLOAT32$1=1e-7,EPSILON_FLOAT16$1=1e-4;class DataStorage{constructor(aa,xa){this.backend=aa,this.dataMover=xa,this.data=new WeakMap,this.dataIdsCount=0}get(aa){return this.data.has(aa)||this.dataMover.moveData(this.backend,aa),this.data.get(aa)}set(aa,xa){this.dataIdsCount++,this.data.set(aa,xa)}has(aa){return this.data.has(aa)}delete(aa){return this.dataIdsCount--,this.data.delete(aa)}numDataIds(){return this.dataIdsCount}}class KernelBackend{refCount(aa){return notYetImplemented("refCount")}incRef(aa){return notYetImplemented("incRef")}timerAvailable(){return!0}time(aa){return notYetImplemented("time")}read(aa){return notYetImplemented("read")}readSync(aa){return notYetImplemented("readSync")}readToGPU(aa,xa){return notYetImplemented("readToGPU")}numDataIds(){return notYetImplemented("numDataIds")}disposeData(aa,xa){return notYetImplemented("disposeData")}write(aa,xa,ba){return notYetImplemented("write")}move(aa,xa,ba,Sa,Ta){return notYetImplemented("move")}createTensorFromGPUData(aa,xa,ba){return notYetImplemented("createTensorFromGPUData")}memory(){return notYetImplemented("memory")}floatPrecision(){return notYetImplemented("floatPrecision")}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32$1:EPSILON_FLOAT16$1}dispose(){return notYetImplemented("dispose")}}function notYetImplemented(ha){throw new Error(`'${ha}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clamp(ha,aa,xa){return Math.max(ha,Math.min(aa,xa))}function nearestLargerEven(ha){return ha%2===0?ha:ha+1}function swap(ha,aa,xa){const ba=ha[aa];ha[aa]=ha[xa],ha[xa]=ba}function sum$2(ha){let aa=0;for(let xa=0;xa<ha.length;xa++)aa+=ha[xa];return aa}function assert(ha,aa){if(!ha)throw new Error(typeof aa=="string"?aa:aa())}function assertShapesMatch(ha,aa,xa=""){assert(arraysEqual(ha,aa),()=>xa+` Shapes ${ha} and ${aa} must match`)}function sizeFromShape(ha){if(ha.length===0)return 1;let aa=ha[0];for(let xa=1;xa<ha.length;xa++)aa*=ha[xa];return aa}function arraysEqual(ha,aa){if(ha===aa)return!0;if(ha==null||aa==null||ha.length!==aa.length)return!1;for(let xa=0;xa<ha.length;xa++)if(ha[xa]!==aa[xa])return!1;return!0}function isInt(ha){return ha%1===0}function sizeToSquarishShape(ha){const aa=Math.ceil(Math.sqrt(ha));return[aa,Math.ceil(ha/aa)]}function rightPad(ha,aa){return aa<=ha.length?ha:ha+" ".repeat(aa-ha.length)}function repeatedTry(ha,aa=Sa=>0,xa,ba){return new Promise((Sa,Ta)=>{let wa=0;const Ea=()=>{if(ha()){Sa();return}wa++;const ka=aa(wa);if(xa!=null&&wa>=xa){Ta();return}ba!=null?ba(Ea,ka):setTimeout(Ea,ka)};Ea()})}function inferFromImplicitShape(ha,aa){let xa=1,ba=-1;for(let Ta=0;Ta<ha.length;++Ta)if(ha[Ta]>=0)xa*=ha[Ta];else if(ha[Ta]===-1){if(ba!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${ba} and dim ${Ta}`);ba=Ta}else if(ha[Ta]<0)throw Error(`Shapes can not be < 0. Found ${ha[Ta]} at dim ${Ta}`);if(ba===-1){if(aa>0&&aa!==xa)throw Error(`Size(${aa}) must match the product of shape ${ha}`);return ha}if(xa===0)throw Error(`Cannot infer the missing size in [${ha}] when there are 0 elements`);if(aa%xa!==0)throw Error(`The implicit shape can't be a fractional number. Got ${aa} / ${xa}`);const Sa=ha.slice();return Sa[ba]=aa/xa,Sa}function parseAxisParam(ha,aa){const xa=aa.length;return ha=ha==null?aa.map((ba,Sa)=>Sa):[].concat(ha),assert(ha.every(ba=>ba>=-xa&&ba<xa),()=>`All values in axis param must be in range [-${xa}, ${xa}) but got axis ${ha}`),assert(ha.every(ba=>isInt(ba)),()=>`All values in axis param must be integers but got axis ${ha}`),ha.map(ba=>ba<0?xa+ba:ba)}function squeezeShape(ha,aa){const xa=[],ba=[];for(let Sa=0;Sa<ha.length;++Sa)ha[Sa]!==1&&(xa.push(ha[Sa]),ba.push(Sa));return{newShape:xa,keptDims:ba}}function getTypedArrayFromDType(ha,aa){return getArrayFromDType(ha,aa)}function getArrayFromDType(ha,aa){let xa=null;if(ha==null||ha==="float32")xa=new Float32Array(aa);else if(ha==="int32")xa=new Int32Array(aa);else if(ha==="bool")xa=new Uint8Array(aa);else if(ha==="string")xa=new Array(aa);else throw new Error(`Unknown data type ${ha}`);return xa}function checkConversionForErrors(ha,aa){for(let xa=0;xa<ha.length;xa++){const ba=ha[xa];if(isNaN(ba)||!isFinite(ba))throw Error(`A tensor of type ${aa} being uploaded contains ${ba}.`)}}function isValidDtype(ha){return ha==="bool"||ha==="complex64"||ha==="float32"||ha==="int32"||ha==="string"}function hasEncodingLoss(ha,aa){return!(aa==="complex64"||aa==="float32"&&ha!=="complex64"||aa==="int32"&&ha!=="float32"&&ha!=="complex64"||aa==="bool"&&ha==="bool")}function bytesPerElement(ha){if(ha==="float32"||ha==="int32")return 4;if(ha==="complex64")return 8;if(ha==="bool")return 1;throw new Error(`Unknown dtype ${ha}`)}function bytesFromStringArray(ha){if(ha==null)return 0;let aa=0;return ha.forEach(xa=>aa+=xa.length),aa}function isString(ha){return typeof ha=="string"||ha instanceof String}function isBoolean(ha){return typeof ha=="boolean"}function isNumber(ha){return typeof ha=="number"}function inferDtype(ha){return Array.isArray(ha)?inferDtype(ha[0]):ha instanceof Float32Array?"float32":ha instanceof Int32Array||ha instanceof Uint8Array||ha instanceof Uint8ClampedArray?"int32":isNumber(ha)?"float32":isString(ha)?"string":isBoolean(ha)?"bool":"float32"}function isFunction(ha){return!!(ha&&ha.constructor&&ha.call&&ha.apply)}function nearestDivisor(ha,aa){for(let xa=aa;xa<ha;++xa)if(ha%xa===0)return xa;return ha}function computeStrides(ha){const aa=ha.length;if(aa<2)return[];const xa=new Array(aa-1);xa[aa-2]=ha[aa-1];for(let ba=aa-3;ba>=0;--ba)xa[ba]=xa[ba+1]*ha[ba+1];return xa}function createNestedArray(ha,aa,xa,ba=!1){const Sa=new Array;if(aa.length===1){const Ta=aa[0]*(ba?2:1);for(let wa=0;wa<Ta;wa++)Sa[wa]=xa[ha+wa]}else{const Ta=aa[0],wa=aa.slice(1),Ea=wa.reduce((ka,Aa)=>ka*Aa)*(ba?2:1);for(let ka=0;ka<Ta;ka++)Sa[ka]=createNestedArray(ha+ka*Ea,wa,xa,ba)}return Sa}function toNestedArray(ha,aa,xa=!1){if(ha.length===0)return aa[0];const ba=ha.reduce((Sa,Ta)=>Sa*Ta)*(xa?2:1);if(ba===0)return[];if(ba!==aa.length)throw new Error(`[${ha}] does not match the input size ${aa.length}${xa?" for a complex tensor":""}.`);return createNestedArray(0,ha,aa,xa)}function makeOnesTypedArray(ha,aa){const xa=makeZerosTypedArray(ha,aa);for(let ba=0;ba<xa.length;ba++)xa[ba]=1;return xa}function makeZerosTypedArray(ha,aa){if(aa==null||aa==="float32"||aa==="complex64")return new Float32Array(ha);if(aa==="int32")return new Int32Array(ha);if(aa==="bool")return new Uint8Array(ha);throw new Error(`Unknown data type ${aa}`)}function assertNonNegativeIntegerDimensions(ha){ha.forEach(aa=>{assert(Number.isInteger(aa)&&aa>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${ha}].`)})}function locToIndex(ha,aa,xa){if(aa===0)return 0;if(aa===1)return ha[0];let ba=ha[ha.length-1];for(let Sa=0;Sa<ha.length-1;++Sa)ba+=xa[Sa]*ha[Sa];return ba}function indexToLoc(ha,aa,xa){if(aa===0)return[];if(aa===1)return[ha];const ba=new Array(aa);for(let Sa=0;Sa<ba.length-1;++Sa)ba[Sa]=Math.floor(ha/xa[Sa]),ha-=ba[Sa]*xa[Sa];return ba[ba.length-1]=ha,ba}function isPromise(ha){return ha&&ha.then&&typeof ha.then=="function"}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TENSORFLOWJS_FLAGS_PREFIX="tfjsflags";class Environment{constructor(aa){this.global=aa,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=getQueryParams,this.populateURLFlags()}setPlatform(aa,xa){this.platform!=null&&(env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${aa}.`)),this.platformName=aa,this.platform=xa}registerFlag(aa,xa,ba){if(this.flagRegistry[aa]={evaluationFn:xa,setHook:ba},this.urlFlags[aa]!=null){const Sa=this.urlFlags[aa];env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Setting feature override from URL ${aa}: ${Sa}.`),this.set(aa,Sa)}}async getAsync(aa){return aa in this.flags?this.flags[aa]:(this.flags[aa]=await this.evaluateFlag(aa),this.flags[aa])}get(aa){if(aa in this.flags)return this.flags[aa];const xa=this.evaluateFlag(aa);if(isPromise(xa))throw new Error(`Flag ${aa} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[aa]=xa,this.flags[aa]}getNumber(aa){return this.get(aa)}getBool(aa){return this.get(aa)}getString(aa){return this.get(aa)}getFlags(){return this.flags}get features(){return this.flags}set(aa,xa){if(this.flagRegistry[aa]==null)throw new Error(`Cannot set flag ${aa} as it has not been registered.`);this.flags[aa]=xa,this.flagRegistry[aa].setHook!=null&&this.flagRegistry[aa].setHook(xa)}evaluateFlag(aa){if(this.flagRegistry[aa]==null)throw new Error(`Cannot evaluate flag '${aa}': no evaluation function found.`);return this.flagRegistry[aa].evaluationFn()}setFlags(aa){this.flags=Object.assign({},aa)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const aa=this.getQueryParams(this.global.location.search);TENSORFLOWJS_FLAGS_PREFIX in aa&&aa[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach(ba=>{const[Sa,Ta]=ba.split(":");this.urlFlags[Sa]=parseValue(Sa,Ta)})}}function getQueryParams(ha){const aa={};return ha.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(xa,...ba)=>(decodeParam(aa,ba[0],ba[1]),ba.join("="))),aa}function decodeParam(ha,aa,xa){ha[decodeURIComponent(aa)]=decodeURIComponent(xa||"")}function parseValue(ha,aa){const xa=aa.toLowerCase();return xa==="true"||xa==="false"?xa==="true":`${+xa}`===xa?+xa:aa}function env(){return ENV$2}let ENV$2=null;function setEnvironmentGlobal(ha){ENV$2=ha}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */let globalNameSpace;function getGlobalNamespace(){if(globalNameSpace==null){let ha;if(typeof window<"u")ha=window;else if(typeof global<"u")ha=global;else if(typeof process<"u")ha=process;else if(typeof self<"u")ha=self;else throw new Error("Could not find a global object");globalNameSpace=ha}return globalNameSpace}function getGlobalMap(){const ha=getGlobalNamespace();return ha._tfGlobals==null&&(ha._tfGlobals=new Map),ha._tfGlobals}function getGlobal(ha,aa){const xa=getGlobalMap();if(xa.has(ha))return xa.get(ha);{const ba=aa();return xa.set(ha,ba),xa.get(ha)}}const Abs="Abs",Acos="Acos",Acosh="Acosh",Add="Add",AddN="AddN",All="All",Any="Any",ArgMax="ArgMax",ArgMin="ArgMin",Asin="Asin",Asinh="Asinh",Atan="Atan",Atanh="Atanh",Atan2="Atan2",AvgPool="AvgPool",AvgPoolGrad="AvgPoolGrad",AvgPool3D="AvgPool3D",AvgPool3DGrad="AvgPool3DGrad",BatchMatMul="BatchMatMul",BatchToSpaceND="BatchToSpaceND",Bincount="Bincount",BitwiseAnd="BitwiseAnd",BroadcastArgs="BroadcastArgs",Cast="Cast",Ceil="Ceil",ClipByValue="ClipByValue",Complex="Complex",ComplexAbs="ComplexAbs",Concat="Concat",Conv2D="Conv2D",Conv2DBackpropFilter="Conv2DBackpropFilter",Conv2DBackpropInput="Conv2DBackpropInput",Conv3D="Conv3D",Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",Conv3DBackpropInputV2="Conv3DBackpropInputV2",Cos="Cos",Cosh="Cosh",Cumprod="Cumprod",Cumsum="Cumsum",CropAndResize="CropAndResize",DenseBincount="DenseBincount",DepthToSpace="DepthToSpace",DepthwiseConv2dNative="DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",Diag="Diag",Dilation2D="Dilation2D",RealDiv="RealDiv",Einsum="Einsum",Elu="Elu",EluGrad="EluGrad",Erf="Erf",Equal="Equal",Exp="Exp",ExpandDims="ExpandDims",Expm1="Expm1",FFT="FFT",Fill="Fill",FlipLeftRight="FlipLeftRight",Floor="Floor",FloorDiv="FloorDiv",FusedBatchNorm="FusedBatchNorm",GatherV2="GatherV2",GatherNd="GatherNd",Greater="Greater",GreaterEqual="GreaterEqual",Identity="Identity",IFFT="IFFT",Imag="Imag",IsFinite="IsFinite",IsInf="IsInf",IsNan="IsNan",LeakyRelu="LeakyRelu",Less="Less",LessEqual="LessEqual",LinSpace="LinSpace",Log="Log",Log1p="Log1p",LogicalAnd="LogicalAnd",LogicalNot="LogicalNot",LogicalOr="LogicalOr",LRN="LRN",LRNGrad="LRNGrad",Max="Max",Maximum="Maximum",MaxPool="MaxPool",MaxPoolGrad="MaxPoolGrad",MaxPool3D="MaxPool3D",MaxPool3DGrad="MaxPool3DGrad",MaxPoolWithArgmax="MaxPoolWithArgmax",Mean="Mean",Min="Min",Minimum="Minimum",MirrorPad="MirrorPad",Mod="Mod",Multinomial="Multinomial",Multiply="Multiply",Neg="Neg",NotEqual="NotEqual",NonMaxSuppressionV3="NonMaxSuppressionV3",NonMaxSuppressionV4="NonMaxSuppressionV4",NonMaxSuppressionV5="NonMaxSuppressionV5",OnesLike="OnesLike",OneHot="OneHot",Pack="Pack",PadV2="PadV2",Pow="Pow",Prelu="Prelu",Prod="Prod",RaggedGather="RaggedGather",RaggedRange="RaggedRange",RaggedTensorToTensor="RaggedTensorToTensor",Range="Range",Real="Real",Reciprocal="Reciprocal",Relu="Relu",Reshape="Reshape",ResizeNearestNeighbor="ResizeNearestNeighbor",ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",ResizeBilinear="ResizeBilinear",ResizeBilinearGrad="ResizeBilinearGrad",Relu6="Relu6",Reverse="Reverse",Round="Round",Rsqrt="Rsqrt",ScatterNd="ScatterNd",TensorScatterUpdate="TensorScatterUpdate",SearchSorted="SearchSorted",Select="Select",Selu="Selu",Slice="Slice",Sin="Sin",Sinh="Sinh",Sign="Sign",Sigmoid="Sigmoid",Softplus="Softplus",Sqrt="Sqrt",Sum="Sum",SpaceToBatchND="SpaceToBatchND",SplitV="SplitV",Softmax="Softmax",SparseFillEmptyRows="SparseFillEmptyRows",SparseReshape="SparseReshape",SparseSegmentMean="SparseSegmentMean",SparseSegmentSum="SparseSegmentSum",SparseToDense="SparseToDense",SquaredDifference="SquaredDifference",Square="Square",StaticRegexReplace="StaticRegexReplace",StridedSlice="StridedSlice",StringNGrams="StringNGrams",StringSplit="StringSplit",StringToHashBucketFast="StringToHashBucketFast",Sub="Sub",Tan="Tan",Tanh="Tanh",Tile="Tile",TopK="TopK",Transform="Transform",Transpose="Transpose",Unique="Unique",Unpack="Unpack",UnsortedSegmentSum="UnsortedSegmentSum",ZerosLike="ZerosLike",Step="Step",FromPixels="FromPixels",RotateWithOffset="RotateWithOffset",_FusedMatMul="_FusedMatMul",FusedConv2D="FusedConv2D",FusedDepthwiseConv2D="FusedDepthwiseConv2D";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function warn(...ha){env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(...ha)}function log$1(...ha){env().getBool("IS_TEST")||env().getBool("PROD")||console.log(...ha)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelRegistry=getGlobal("kernelRegistry",()=>new Map),gradRegistry=getGlobal("gradRegistry",()=>new Map);function getKernel(ha,aa){const xa=makeKey(ha,aa);return kernelRegistry.get(xa)}function getGradient(ha){return gradRegistry.get(ha)}function getKernelsForBackend(ha){const aa=kernelRegistry.entries(),xa=[];for(;;){const{done:ba,value:Sa}=aa.next();if(ba)break;const[Ta,wa]=Sa,[Ea]=Ta.split("_");Ea===ha&&xa.push(wa)}return xa}function registerKernel(ha){const{kernelName:aa,backendName:xa}=ha,ba=makeKey(aa,xa);kernelRegistry.has(ba)&&warn(`The kernel '${aa}' for backend '${xa}' is already registered`),kernelRegistry.set(ba,ha)}function makeKey(ha,aa){return`${aa}_${ha}`}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isTypedArrayBrowser(ha){return ha instanceof Float32Array||ha instanceof Int32Array||ha instanceof Uint8Array||ha instanceof Uint8ClampedArray}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Long=long$1||LongExports;function hexToLong(ha){return Long.fromString(ha,!0,16)}const k0=hexToLong("c3a5c85c97cb3127"),k1=hexToLong("b492b66fbe98f273"),k2=hexToLong("9ae16a3b2f90404f");function shiftMix(ha){return ha.xor(ha.shru(47))}function fetch$1(ha,aa,xa){const ba=ha.slice(aa,aa+xa);return Long.fromBytes(Array.from(ba),!0,!0)}function fetch64(ha,aa){return fetch$1(ha,aa,8)}function fetch32(ha,aa){return fetch$1(ha,aa,4)}function rotate64(ha,aa){return aa===0?ha:ha.shru(aa).or(ha.shl(64-aa))}function hashLen16(ha,aa,xa=hexToLong("9ddfea08eb382d69")){let ba=ha.xor(aa).mul(xa);ba=ba.xor(ba.shru(47));let Sa=aa.xor(ba).mul(xa);return Sa=Sa.xor(Sa.shru(47)),Sa=Sa.mul(xa),Sa}function weakHashLen32WithSeeds(ha,aa,xa,ba,Sa,Ta){Sa=Sa.add(ha),Ta=rotate64(Ta.add(Sa).add(ba),21);const wa=Sa;return Sa=Sa.add(aa),Sa=Sa.add(xa),Ta=Ta.add(rotate64(Sa,44)),[Sa.add(ba),Ta.add(wa)]}function weakHashLen32WithSeedsStr(ha,aa,xa,ba){return weakHashLen32WithSeeds(fetch64(ha,aa),fetch64(ha,aa+8),fetch64(ha,aa+16),fetch64(ha,aa+24),xa,ba)}function hashLen0to16(ha,aa=ha.length){if(aa>=8){const xa=k2.add(aa*2),ba=fetch64(ha,0).add(k2),Sa=fetch64(ha,aa-8),Ta=rotate64(Sa,37).mul(xa).add(ba),wa=rotate64(ba,25).add(Sa).mul(xa);return hashLen16(Ta,wa,xa)}if(aa>=4){const xa=k2.add(aa*2),ba=fetch32(ha,0);return hashLen16(ba.shl(3).add(aa),fetch32(ha,aa-4),xa)}if(aa>0){const xa=ha[0],ba=ha[aa>>1],Sa=ha[aa-1],Ta=xa+(ba<<8),wa=aa+(Sa<<2);return shiftMix(k2.mul(Ta).xor(k0.mul(wa))).mul(k2)}return k2}function hashLen17to32(ha,aa=ha.length){const xa=k2.add(aa*2),ba=fetch64(ha,0).mul(k1),Sa=fetch64(ha,8),Ta=fetch64(ha,aa-8).mul(xa),wa=fetch64(ha,aa-16).mul(k2);return hashLen16(rotate64(ba.add(Sa),43).add(rotate64(Ta,30)).add(wa),ba.add(rotate64(Sa.add(k2),18)).add(Ta),xa)}function hashLen33to64(ha,aa=ha.length){const xa=k2.add(aa*2),ba=fetch64(ha,0).mul(k2),Sa=fetch64(ha,8),Ta=fetch64(ha,aa-8).mul(xa),wa=fetch64(ha,aa-16).mul(k2),Ea=rotate64(ba.add(Sa),43).add(rotate64(Ta,30)).add(wa),ka=hashLen16(Ea,ba.add(rotate64(Sa.add(k2),18)).add(Ta),xa),Aa=fetch64(ha,16).mul(xa),Fa=fetch64(ha,24),La=Ea.add(fetch64(ha,aa-32)).mul(xa),el=ka.add(fetch64(ha,aa-24)).mul(xa);return hashLen16(rotate64(Aa.add(Fa),43).add(rotate64(La,30)).add(el),Aa.add(rotate64(Fa.add(ba),18)).add(La),xa)}function fingerPrint64(ha,aa=ha.length){const xa=Long.fromNumber(81,!0);if(aa<=32)return aa<=16?hashLen0to16(ha,aa):hashLen17to32(ha,aa);if(aa<=64)return hashLen33to64(ha,aa);let ba=xa,Sa=xa.mul(k1).add(113),Ta=shiftMix(Sa.mul(k2).add(113)).mul(k2),wa=[Long.UZERO,Long.UZERO],Ea=[Long.UZERO,Long.UZERO];ba=ba.mul(k2).add(fetch64(ha,0));let ka=0;const Aa=(aa-1>>6)*64,Fa=Aa+(aa-1&63)-63;do ba=rotate64(ba.add(Sa).add(wa[0]).add(fetch64(ha,ka+8)),37).mul(k1),Sa=rotate64(Sa.add(wa[1]).add(fetch64(ha,ka+48)),42).mul(k1),ba=ba.xor(Ea[1]),Sa=Sa.add(wa[0]).add(fetch64(ha,ka+40)),Ta=rotate64(Ta.add(Ea[0]),33).mul(k1),wa=weakHashLen32WithSeedsStr(ha,ka,wa[1].mul(k1),ba.add(Ea[0])),Ea=weakHashLen32WithSeedsStr(ha,ka+32,Ta.add(Ea[1]),Sa.add(fetch64(ha,ka+16))),[Ta,ba]=[ba,Ta],ka+=64;while(ka!==Aa);const La=k1.add(Ta.and(255).shl(1));return ka=Fa,Ea[0]=Ea[0].add(aa-1&63),wa[0]=wa[0].add(Ea[0]),Ea[0]=Ea[0].add(wa[0]),ba=rotate64(ba.add(Sa).add(wa[0]).add(fetch64(ha,ka+8)),37).mul(La),Sa=rotate64(Sa.add(wa[1]).add(fetch64(ha,ka+48)),42).mul(La),ba=ba.xor(Ea[1].mul(9)),Sa=Sa.add(wa[0].mul(9).add(fetch64(ha,ka+40))),Ta=rotate64(Ta.add(Ea[0]),33).mul(La),wa=weakHashLen32WithSeedsStr(ha,ka,wa[1].mul(La),ba.add(Ea[0])),Ea=weakHashLen32WithSeedsStr(ha,ka+32,Ta.add(Ea[1]),Sa.add(fetch64(ha,ka+16))),[Ta,ba]=[ba,Ta],hashLen16(hashLen16(wa[0],Ea[0],La).add(shiftMix(Sa).mul(k0)).add(Ta),hashLen16(wa[1],Ea[1],La).add(ba),La)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createScalarValue(ha,aa){return aa==="string"?encodeString(ha):toTypedArray([ha],aa)}function noConversionNeeded(ha,aa){return ha instanceof Float32Array&&aa==="float32"||ha instanceof Int32Array&&aa==="int32"||ha instanceof Uint8Array&&aa==="bool"}function toTypedArray(ha,aa){if(aa==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(ha)&&(ha=flatten(ha)),env().getBool("DEBUG")&&checkConversionForErrors(ha,aa),noConversionNeeded(ha,aa))return ha;if(aa==null||aa==="float32"||aa==="complex64")return new Float32Array(ha);if(aa==="int32")return new Int32Array(ha);if(aa==="bool"){const xa=new Uint8Array(ha.length);for(let ba=0;ba<xa.length;++ba)Math.round(ha[ba])!==0&&(xa[ba]=1);return xa}else throw new Error(`Unknown data type ${aa}`)}function now(){return env().platform.now()}function encodeString(ha,aa="utf-8"){return aa=aa||"utf-8",env().platform.encode(ha,aa)}function decodeString(ha,aa="utf-8"){return aa=aa||"utf-8",env().platform.decode(ha,aa)}function isTypedArray(ha){return env().platform.isTypedArray!=null?env().platform.isTypedArray(ha):isTypedArrayBrowser(ha)}function flatten(ha,aa=[],xa=!1){if(aa==null&&(aa=[]),typeof ha=="boolean"||typeof ha=="number"||typeof ha=="string"||isPromise(ha)||ha==null||isTypedArray(ha)&&xa)aa.push(ha);else if(Array.isArray(ha)||isTypedArray(ha))for(let ba=0;ba<ha.length;++ba)flatten(ha[ba],aa,xa);else{let ba=-1;for(const Sa of Object.keys(ha))/^([1-9]+[0-9]*|0)$/.test(Sa)&&(ba=Math.max(ba,Number(Sa)));for(let Sa=0;Sa<=ba;Sa++)flatten(ha[Sa],aa,xa)}return aa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Profiler{constructor(aa,xa){this.backendTimer=aa,this.logger=xa,xa==null&&(this.logger=new Logger)}profileKernel(aa,xa,ba){let Sa;const Ta=()=>{Sa=ba()};let wa;const Ea=now();if(this.backendTimer.timerAvailable())wa=this.backendTimer.time(Ta);else{Ta();for(const Aa of Sa)Aa.dataSync();wa=Promise.resolve({kernelMs:now()-Ea})}if(env().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let Aa=0;Aa<Sa.length;Aa++){const Fa=Sa[Aa];Fa.data().then(La=>{checkComputationForErrors(La,Fa.dtype,aa)})}return{kernelName:aa,outputs:Sa,inputs:xa,timeMs:wa.then(Aa=>Aa.kernelMs),extraInfo:wa.then(Aa=>Aa.getExtraProfileInfo!=null?Aa.getExtraProfileInfo():"")}}logKernelProfile(aa){const{kernelName:xa,outputs:ba,timeMs:Sa,inputs:Ta,extraInfo:wa}=aa;ba.forEach(Ea=>{Promise.all([Ea.data(),Sa,wa]).then(ka=>{this.logger.logKernelProfile(xa,Ea,ka[0],ka[1],Ta,ka[2])})})}}function checkComputationForErrors(ha,aa,xa){if(aa!=="float32")return!1;for(let ba=0;ba<ha.length;ba++){const Sa=ha[ba];if(isNaN(Sa)||!isFinite(Sa))return console.warn(`Found ${Sa} in the result of '${xa}'`),!0}return!1}class Logger{logKernelProfile(aa,xa,ba,Sa,Ta,wa){const Ea=typeof Sa=="number"?rightPad(`${Sa}ms`,9):Sa.error,ka=rightPad(aa,25),Aa=xa.rank,Fa=xa.size,La=rightPad(xa.shape.toString(),14);let el="";for(const tl in Ta){const nl=Ta[tl];if(nl!=null){const rl=nl.shape||xa.shape,sl=rl.length;el+=`${tl}: ${sl}D ${sl>0?rl:""} `}}console.log(`%c${ka}	%c${Ea}	%c${Aa}D ${La}	%c${Fa}	%c${el}	%c${wa}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFilteredNodesXToY(ha,aa,xa){const ba={},Sa={};for(let ka=0;ka<aa.length;ka++)ba[aa[ka].id]=!0;for(let ka=0;ka<ha.length;ka++){const Aa=ha[ka],Fa=Aa.inputs;for(const La in Fa){const el=Fa[La];let tl=!1;for(let nl=0;nl<aa.length;nl++)if(ba[el.id]){Aa.outputs.forEach(rl=>ba[rl.id]=!0),tl=!0,Sa[Aa.id]=!0;break}if(tl)break}}const Ta={};Ta[xa.id]=!0;const wa={};for(let ka=ha.length-1;ka>=0;ka--){const Aa=ha[ka],Fa=Aa.inputs;for(let La=0;La<Aa.outputs.length;La++)if(Ta[Aa.outputs[La].id]){for(const el in Fa)Ta[Fa[el].id]=!0,wa[Aa.id]=!0;break}}const Ea=[];for(let ka=0;ka<ha.length;ka++){const Aa=ha[ka];if(Sa[Aa.id]&&wa[Aa.id]){const Fa={};for(const el in Aa.inputs){const tl=Aa.inputs[el];ba[tl.id]&&(Fa[el]=tl)}const La=Object.assign({},Aa);La.inputs=Fa,La.outputs=Aa.outputs,Ea.push(La)}}return Ea}function backpropagateGradients(ha,aa,xa,ba){for(let Sa=aa.length-1;Sa>=0;Sa--){const Ta=aa[Sa],wa=[];if(Ta.outputs.forEach(ka=>{const Aa=ha[ka.id];Aa!=null?wa.push(Aa):wa.push(null)}),Ta.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${Ta.kernelName}.`);const Ea=Ta.gradient(wa);for(const ka in Ta.inputs){if(!(ka in Ea))throw new Error(`Cannot backprop through input ${ka}. Available gradients found: ${Object.keys(Ea)}.`);const Aa=xa(()=>Ea[ka]());if(Aa.dtype!=="float32")throw new Error(`Error in gradient for op ${Ta.kernelName}. The gradient of input ${ka} must have 'float32' dtype, but has '${Aa.dtype}'`);const Fa=Ta.inputs[ka];if(!arraysEqual(Aa.shape,Fa.shape))throw new Error(`Error in gradient for op ${Ta.kernelName}. The gradient of input '${ka}' has shape '${Aa.shape}', which does not match the shape of the input '${Fa.shape}'`);if(ha[Fa.id]==null)ha[Fa.id]=Aa;else{const La=ha[Fa.id];ha[Fa.id]=ba(La,Aa),La.dispose()}}}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FORMAT_LIMIT_NUM_VALS=20,FORMAT_NUM_FIRST_LAST_VALS=3,FORMAT_NUM_SIG_DIGITS=7;function tensorToString(ha,aa,xa,ba){const Sa=computeStrides(aa),Ta=computeMaxSizePerColumn(ha,aa,xa,Sa),wa=aa.length,Ea=subTensorToString(ha,aa,xa,Sa,Ta),ka=["Tensor"];return ba&&(ka.push(`  dtype: ${xa}`),ka.push(`  rank: ${wa}`),ka.push(`  shape: [${aa}]`),ka.push("  values:")),ka.push(Ea.map(Aa=>"    "+Aa).join(`
`)),ka.join(`
`)}function computeMaxSizePerColumn(ha,aa,xa,ba){const Sa=sizeFromShape(aa),Ta=ba[ba.length-1],wa=new Array(Ta).fill(0),Ea=aa.length,ka=xa==="complex64"?createComplexTuples(ha):ha;if(Ea>1)for(let Aa=0;Aa<Sa/Ta;Aa++){const Fa=Aa*Ta;for(let La=0;La<Ta;La++)wa[La]=Math.max(wa[La],valToString(ka[Fa+La],0,xa).length)}return wa}function valToString(ha,aa,xa){let ba;return Array.isArray(ha)?ba=`${parseFloat(ha[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ${parseFloat(ha[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`:isString(ha)?ba=`'${ha}'`:xa==="bool"?ba=boolNumToString(ha):ba=parseFloat(ha.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(),rightPad(ba,aa)}function boolNumToString(ha){return ha===0?"false":"true"}function subTensorToString(ha,aa,xa,ba,Sa,Ta=!0){const wa=xa==="complex64"?2:1,Ea=aa[0],ka=aa.length;if(ka===0){if(xa==="complex64"){const rl=createComplexTuples(ha);return[valToString(rl[0],0,xa)]}return xa==="bool"?[boolNumToString(ha[0])]:[ha[0].toString()]}if(ka===1){if(Ea>FORMAT_LIMIT_NUM_VALS){const sl=FORMAT_NUM_FIRST_LAST_VALS*wa;let ol=Array.from(ha.slice(0,sl)),al=Array.from(ha.slice((Ea-FORMAT_NUM_FIRST_LAST_VALS)*wa,Ea*wa));return xa==="complex64"&&(ol=createComplexTuples(ol),al=createComplexTuples(al)),["["+ol.map((ll,il)=>valToString(ll,Sa[il],xa)).join(", ")+", ..., "+al.map((ll,il)=>valToString(ll,Sa[Ea-FORMAT_NUM_FIRST_LAST_VALS+il],xa)).join(", ")+"]"]}return["["+(xa==="complex64"?createComplexTuples(ha):Array.from(ha)).map((sl,ol)=>valToString(sl,Sa[ol],xa)).join(", ")+"]"]}const Aa=aa.slice(1),Fa=ba.slice(1),La=ba[0]*wa,el=[];if(Ea>FORMAT_LIMIT_NUM_VALS){for(let rl=0;rl<FORMAT_NUM_FIRST_LAST_VALS;rl++){const sl=rl*La,ol=sl+La;el.push(...subTensorToString(ha.slice(sl,ol),Aa,xa,Fa,Sa,!1))}el.push("...");for(let rl=Ea-FORMAT_NUM_FIRST_LAST_VALS;rl<Ea;rl++){const sl=rl*La,ol=sl+La;el.push(...subTensorToString(ha.slice(sl,ol),Aa,xa,Fa,Sa,rl===Ea-1))}}else for(let rl=0;rl<Ea;rl++){const sl=rl*La,ol=sl+La;el.push(...subTensorToString(ha.slice(sl,ol),Aa,xa,Fa,Sa,rl===Ea-1))}const tl=ka===2?",":"";el[0]="["+(Ea>0?el[0]+tl:"");for(let rl=1;rl<el.length-1;rl++)el[rl]=" "+el[rl]+tl;let nl=`,
`;for(let rl=2;rl<ka;rl++)nl+=`
`;return el[el.length-1]=" "+el[el.length-1]+"]"+(Ta?"":nl),el}function createComplexTuples(ha){const aa=[];for(let xa=0;xa<ha.length;xa+=2)aa.push([ha[xa],ha[xa+1]]);return aa}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TensorBuffer{constructor(aa,xa,ba){if(this.dtype=xa,this.shape=aa.slice(),this.size=sizeFromShape(aa),ba!=null){const Sa=ba.length;assert(Sa===this.size,()=>`Length of values '${Sa}' does not match the size inferred by the shape '${this.size}'.`)}if(xa==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=ba||getArrayFromDType(xa,this.size),this.strides=computeStrides(aa)}set(aa,...xa){xa.length===0&&(xa=[0]),assert(xa.length===this.rank,()=>`The number of provided coordinates (${xa.length}) must match the rank (${this.rank})`);const ba=this.locToIndex(xa);this.values[ba]=aa}get(...aa){aa.length===0&&(aa=[0]);let xa=0;for(const Sa of aa){if(Sa<0||Sa>=this.shape[xa]){const Ta=`Requested out of range element at ${aa}.   Buffer shape=${this.shape}`;throw new Error(Ta)}xa++}let ba=aa[aa.length-1];for(let Sa=0;Sa<aa.length-1;++Sa)ba+=this.strides[Sa]*aa[Sa];return this.values[ba]}locToIndex(aa){if(this.rank===0)return 0;if(this.rank===1)return aa[0];let xa=aa[aa.length-1];for(let ba=0;ba<aa.length-1;++ba)xa+=this.strides[ba]*aa[ba];return xa}indexToLoc(aa){if(this.rank===0)return[];if(this.rank===1)return[aa];const xa=new Array(this.shape.length);for(let ba=0;ba<xa.length-1;++ba)xa[ba]=Math.floor(aa/this.strides[ba]),aa-=xa[ba]*this.strides[ba];return xa[xa.length-1]=aa,xa}get rank(){return this.shape.length}toTensor(){return trackerFn().makeTensor(this.values,this.shape,this.dtype)}}let trackerFn=null,opHandler$1=null;function setTensorTracker(ha){trackerFn=ha}function setOpHandler(ha){opHandler$1=ha}class Tensor{constructor(aa,xa,ba,Sa){this.kept=!1,this.isDisposedInternal=!1,this.shape=aa.slice(),this.dtype=xa||"float32",this.size=sizeFromShape(aa),this.strides=computeStrides(aa),this.dataId=ba,this.id=Sa,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const aa=await this.data();return opHandler$1.buffer(this.shape,this.dtype,aa)}bufferSync(){return opHandler$1.buffer(this.shape,this.dtype,this.dataSync())}async array(){const aa=await this.data();return toNestedArray(this.shape,aa,this.dtype==="complex64")}arraySync(){return toNestedArray(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();const aa=trackerFn().read(this.dataId);if(this.dtype==="string"){const xa=await aa;try{return xa.map(ba=>decodeString(ba))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return aa}dataToGPU(aa){return this.throwIfDisposed(),trackerFn().readToGPU(this.dataId,aa)}dataSync(){this.throwIfDisposed();const aa=trackerFn().readSync(this.dataId);if(this.dtype==="string")try{return aa.map(xa=>decodeString(xa))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return aa}async bytes(){this.throwIfDisposed();const aa=await trackerFn().read(this.dataId);return this.dtype==="string"?aa:new Uint8Array(aa.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),trackerFn().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(aa=!1){return opHandler$1.print(this,aa)}clone(){return this.throwIfDisposed(),opHandler$1.clone(this)}toString(aa=!1){const xa=this.dataSync();return tensorToString(xa,this.shape,this.dtype,aa)}cast(aa){return this.throwIfDisposed(),opHandler$1.cast(this,aa)}variable(aa=!0,xa,ba){return this.throwIfDisposed(),trackerFn().makeVariable(this,aa,xa,ba)}}Object.defineProperty(Tensor,Symbol.hasInstance,{value:ha=>!!ha&&ha.data!=null&&ha.dataSync!=null&&ha.throwIfDisposed!=null});function getGlobalTensorClass(){return getGlobal("Tensor",()=>Tensor)}getGlobalTensorClass();class Variable extends Tensor{constructor(aa,xa,ba,Sa){super(aa.shape,aa.dtype,aa.dataId,Sa),this.trainable=xa,this.name=ba}assign(aa){if(aa.dtype!==this.dtype)throw new Error(`dtype of the new value (${aa.dtype}) and previous value (${this.dtype}) must match`);if(!arraysEqual(aa.shape,this.shape))throw new Error(`shape of the new value (${aa.shape}) and previous value (${this.shape}) must match`);trackerFn().disposeTensor(this),this.dataId=aa.dataId,trackerFn().incRef(this,null)}dispose(){trackerFn().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Variable,Symbol.hasInstance,{value:ha=>ha instanceof Tensor&&ha.assign!=null&&ha.assign instanceof Function});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Rank;(function(ha){ha.R0="R0",ha.R1="R1",ha.R2="R2",ha.R3="R3",ha.R4="R4",ha.R5="R5",ha.R6="R6"})(Rank||(Rank={}));var UpcastInt32AndMap;(function(ha){ha.float32="float32",ha.int32="int32",ha.bool="int32",ha.complex64="complex64"})(UpcastInt32AndMap||(UpcastInt32AndMap={}));var UpcastBoolAndMap;(function(ha){ha.float32="float32",ha.int32="int32",ha.bool="bool",ha.complex64="complex64"})(UpcastBoolAndMap||(UpcastBoolAndMap={}));var UpcastFloat32AndMap;(function(ha){ha.float32="float32",ha.int32="float32",ha.bool="float32",ha.complex64="complex64"})(UpcastFloat32AndMap||(UpcastFloat32AndMap={}));var UpcastComplex64AndMap;(function(ha){ha.float32="complex64",ha.int32="complex64",ha.bool="complex64",ha.complex64="complex64"})(UpcastComplex64AndMap||(UpcastComplex64AndMap={}));const upcastTypeMap={float32:UpcastFloat32AndMap,int32:UpcastInt32AndMap,bool:UpcastBoolAndMap,complex64:UpcastComplex64AndMap};function upcastType(ha,aa){if(ha==="string"||aa==="string"){if(ha==="string"&&aa==="string")return"string";throw new Error(`Can not upcast ${ha} with ${aa}`)}return upcastTypeMap[ha][aa]}function sumOutType(ha){return upcastType(ha,"int32")}function isWebGLData(ha){return ha!=null&&typeof ha=="object"&&"texture"in ha&&ha.texture instanceof WebGLTexture}function isWebGPUData(ha){return typeof GPUBuffer<"u"&&ha!=null&&typeof ha=="object"&&"buffer"in ha&&ha.buffer instanceof GPUBuffer}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTypesMatch(ha,aa){if(ha.dtype===aa.dtype)return[ha,aa];const xa=upcastType(ha.dtype,aa.dtype);return[ha.cast(xa),aa.cast(xa)]}function getTensorsInContainer(ha){const aa=[];return walkTensorContainer(ha,aa,new Set),aa}function walkTensorContainer(ha,aa,xa){if(ha==null)return;if(ha instanceof Tensor){aa.push(ha);return}if(!isIterable(ha))return;const ba=ha;for(const Sa in ba){const Ta=ba[Sa];xa.has(Ta)||(xa.add(Ta),walkTensorContainer(Ta,aa,xa))}}function isIterable(ha){return Array.isArray(ha)||typeof ha=="object"}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function isRegisteredKernelInvocation(ha){return ha.kernelName!=null}class EngineState{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(aa=>aa.name)))}}}dispose(){for(const aa in this.registeredVariables)this.registeredVariables[aa].dispose()}}class Engine{constructor(aa){this.ENV=aa,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new EngineState}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;const aa=this.getSortedBackends();for(let xa=0;xa<aa.length;xa++){const ba=aa[xa];if(await this.initializeBackend(ba).success){await this.setBackend(ba);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){const{name:aa,asyncInit:xa}=this.initializeBackendsAndReturnBest();if(xa)throw new Error(`The highest priority backend '${aa}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(aa)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(aa){if(!(aa in this.registry))if(aa in this.registryFactory){const{asyncInit:xa}=this.initializeBackend(aa);if(xa)return null}else return null;return this.registry[aa]}findBackendFactory(aa){return aa in this.registryFactory?this.registryFactory[aa].factory:null}registerBackend(aa,xa,ba=1){return aa in this.registryFactory?(warn(`${aa} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[aa]={factory:xa,priority:ba},!0)}async setBackend(aa){if(this.registryFactory[aa]==null)throw new Error(`Backend name '${aa}' not found in registry`);if(this.backendName=aa,this.registry[aa]==null){this.backendInstance=null;const{success:xa,asyncInit:ba}=this.initializeBackend(aa);if(!(ba?await xa:xa))return!1}return this.backendInstance=this.registry[aa],this.setupRegisteredKernels(),this.profiler=new Profiler(this.backendInstance),!0}setupRegisteredKernels(){getKernelsForBackend(this.backendName).forEach(xa=>{xa.setupFunc!=null&&xa.setupFunc(this.backendInstance)})}disposeRegisteredKernels(aa){getKernelsForBackend(aa).forEach(ba=>{ba.disposeFunc!=null&&ba.disposeFunc(this.registry[aa])})}initializeBackend(aa){const xa=this.registryFactory[aa];if(xa==null)throw new Error(`Cannot initialize backend ${aa}, no registration found.`);try{const ba=xa.factory();if(ba&&!(ba instanceof KernelBackend)&&typeof ba.then=="function"){const Sa=++this.pendingBackendInitId,Ta=ba.then(wa=>Sa<this.pendingBackendInitId?!1:(this.registry[aa]=wa,this.pendingBackendInit=null,!0)).catch(wa=>(Sa<this.pendingBackendInitId||(this.pendingBackendInit=null,warn(`Initialization of backend ${aa} failed`),warn(wa.stack||wa.message)),!1));return this.pendingBackendInit=Ta,{success:Ta,asyncInit:!0}}else return this.registry[aa]=ba,{success:!0,asyncInit:!1}}catch(ba){return warn(`Initialization of backend ${aa} failed`),warn(ba.stack||ba.message),{success:!1,asyncInit:!1}}}removeBackend(aa){if(!(aa in this.registryFactory))throw new Error(`${aa} backend not found in registry`);this.backendName===aa&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,aa in this.registry&&(this.disposeRegisteredKernels(aa),this.registry[aa].dispose(),delete this.registry[aa]),delete this.registryFactory[aa],this.backendName===aa&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((aa,xa)=>this.registryFactory[xa].priority-this.registryFactory[aa].priority)}initializeBackendsAndReturnBest(){const aa=this.getSortedBackends();for(let xa=0;xa<aa.length;xa++){const ba=aa[xa],{success:Sa,asyncInit:Ta}=this.initializeBackend(ba);if(Ta||Sa)return{name:ba,asyncInit:Ta}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(aa,xa){const ba=this.state.tensorInfo.get(xa),Sa=ba.backend,Ta=this.readSync(xa),wa=Sa.refCount(xa);Sa.disposeData(xa,!0),ba.backend=aa,aa.move(xa,Ta,ba.shape,ba.dtype,wa),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(aa,xa){let ba=null;if(xa==null){if(typeof aa!="function")throw new Error("Please provide a function to tidy()");xa=aa}else{if(typeof aa!="string"&&!(aa instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof xa!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");ba=aa}let Sa;return this.scopedRun(()=>this.startScope(ba),()=>this.endScope(Sa),()=>(Sa=xa(),Sa instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Sa))}scopedRun(aa,xa,ba){aa();try{const Sa=ba();return xa(),Sa}catch(Sa){throw xa(),Sa}}nextTensorId(){return Engine.nextTensorId++}nextVariableId(){return Engine.nextVariableId++}clone(aa){const xa=ENGINE.runKernel(Identity,{x:aa}),ba={x:aa},Sa=wa=>({x:()=>{const Ea="float32",ka={x:wa},Aa={dtype:Ea};return ENGINE.runKernel(Cast,ka,Aa)}}),Ta=[];return this.addTapeNode(this.state.activeScope.name,ba,[xa],Sa,Ta,{}),xa}runKernel(aa,xa,ba){if(this.backendName==null&&this.backend,!(getKernel(aa,this.backendName)!=null))throw new Error(`Kernel '${aa}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:aa,inputs:xa,attrs:ba})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(aa,xa,ba){const Sa=this.backend.numDataIds();let Ta=0;ba.forEach(ka=>{Ta+=ka.dtype==="complex64"?3:1});const wa=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],Ea=Sa-xa-Ta-wa;if(Ea>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${Ea} data ids) after running '${aa}'`)}runKernelFunc(aa){let xa,ba=[];const Sa=this.isTapeOn(),Ta=this.state.numBytes,wa=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let Ea;this.backendName==null&&this.backend;let ka;const Aa=isRegisteredKernelInvocation(aa)?aa.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(isRegisteredKernelInvocation(aa)){const{kernelName:nl,inputs:rl,attrs:sl}=aa;this.backendName==null&&this.backend;const ol=getKernel(nl,this.backendName);assert(ol!=null,()=>`Cannot find registered kernel '${nl}' for backend '${this.backendName}'`),Ea=()=>{const al=this.backend.numDataIds();ka=ol.kernelFunc({inputs:rl,attrs:sl,backend:this.backend});const ll=Array.isArray(ka)?ka:[ka];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(nl,al,ll);const il=ll.map(cl=>cl.rank!=null?cl:this.makeTensorFromTensorInfo(cl));if(Sa){const cl=this.getTensorsForGradient(nl,rl,il);ba=this.saveTensorsForBackwardMode(cl)}return il}}else{const{forwardFunc:nl}=aa,rl=sl=>{Sa&&(ba=sl.map(ol=>this.keep(this.clone(ol))))};Ea=()=>{const sl=this.backend.numDataIds();ka=this.tidy(()=>nl(this.backend,rl));const ol=Array.isArray(ka)?ka:[ka];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(Aa,sl,ol),ol}}const{inputs:Fa,attrs:La}=aa,el=isRegisteredKernelInvocation(aa)?null:aa.backwardsFunc;let tl;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?xa=Ea():(tl=this.profiler.profileKernel(Aa,Fa,()=>Ea()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(tl),xa=tl.outputs)}),Sa&&this.addTapeNode(Aa,Fa,xa,el,ba,La),this.state.profiling&&this.state.activeProfile.kernels.push({name:Aa,bytesAdded:this.state.numBytes-Ta,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-wa,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(Fa).map(nl=>Fa[nl]!=null?Fa[nl].shape:null),outputShapes:xa.map(nl=>nl.shape),kernelTimeMs:tl.timeMs,extraInfo:tl.extraInfo}),Array.isArray(ka)?xa:xa[0]}saveTensorsForBackwardMode(aa){return aa.map(ba=>this.keep(this.clone(ba)))}getTensorsForGradient(aa,xa,ba){const Sa=getGradient(aa);if(Sa!=null){const Ta=Sa.inputsToSave||[],wa=Sa.outputsToSave||[];let Ea;Sa.saveAllInputs?(assert(Array.isArray(xa),()=>"saveAllInputs is true, expected inputs to be an array."),Ea=Object.keys(xa).map(Aa=>xa[Aa])):Ea=Ta.map(Aa=>xa[Aa]);const ka=ba.filter((Aa,Fa)=>wa[Fa]);return Ea.concat(ka)}return[]}makeTensor(aa,xa,ba,Sa){if(aa==null)throw new Error("Values passed to engine.makeTensor() are null");ba=ba||"float32",Sa=Sa||this.backend;let Ta=aa;ba==="string"&&isString(aa[0])&&(Ta=aa.map(ka=>encodeString(ka)));const wa=Sa.write(Ta,xa,ba),Ea=new Tensor(xa,ba,wa,this.nextTensorId());if(this.trackTensor(Ea,Sa),ba==="string"){const ka=this.state.tensorInfo.get(wa),Aa=bytesFromStringArray(Ta);this.state.numBytes+=Aa-ka.bytes,ka.bytes=Aa}return Ea}makeTensorFromDataId(aa,xa,ba,Sa){ba=ba||"float32";const Ta={dataId:aa,shape:xa,dtype:ba};return this.makeTensorFromTensorInfo(Ta,Sa)}makeTensorFromTensorInfo(aa,xa){const{dataId:ba,shape:Sa,dtype:Ta}=aa,wa=new Tensor(Sa,Ta,ba,this.nextTensorId());return this.trackTensor(wa,xa),wa}makeVariable(aa,xa=!0,ba,Sa){ba=ba||this.nextVariableId().toString(),Sa!=null&&Sa!==aa.dtype&&(aa=aa.cast(Sa));const Ta=new Variable(aa,xa,ba,this.nextTensorId());if(this.state.registeredVariables[Ta.name]!=null)throw new Error(`Variable with name ${Ta.name} was already registered`);return this.state.registeredVariables[Ta.name]=Ta,this.incRef(Ta,this.backend),Ta}trackTensor(aa,xa){this.state.numTensors++,aa.dtype==="string"&&this.state.numStringTensors++;let ba=0;aa.dtype!=="complex64"&&aa.dtype!=="string"&&(ba=aa.size*bytesPerElement(aa.dtype)),this.state.numBytes+=ba,this.state.tensorInfo.has(aa.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(aa.dataId,{backend:xa||this.backend,dtype:aa.dtype,shape:aa.shape,bytes:ba})),aa instanceof Variable||this.track(aa)}incRef(aa,xa){this.trackTensor(aa,xa),this.backend.incRef(aa.dataId)}removeDataId(aa,xa){this.state.tensorInfo.has(aa)&&this.state.tensorInfo.get(aa).backend===xa&&(this.state.tensorInfo.delete(aa),this.state.numDataBuffers--)}disposeTensor(aa){if(!this.state.tensorInfo.has(aa.dataId))return;const xa=this.state.tensorInfo.get(aa.dataId);if(this.state.numTensors--,aa.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=xa.bytes),aa.dtype!=="complex64"&&aa.dtype!=="string"){const ba=aa.size*bytesPerElement(aa.dtype);this.state.numBytes-=ba}xa.backend.disposeData(aa.dataId)&&this.removeDataId(aa.dataId,xa.backend)}disposeVariables(){for(const aa in this.state.registeredVariables){const xa=this.state.registeredVariables[aa];this.disposeVariable(xa)}}disposeVariable(aa){this.disposeTensor(aa),this.state.registeredVariables[aa.name]!=null&&delete this.state.registeredVariables[aa.name]}memory(){const aa=this.backend.memory();return aa.numTensors=this.state.numTensors,aa.numDataBuffers=this.state.numDataBuffers,aa.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(aa.unreliable=!0,aa.reasons==null&&(aa.reasons=[]),aa.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),aa}async profile(aa){this.state.profiling=!0;const xa=this.state.numBytes,ba=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await aa(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(Sa=>Sa.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-xa,this.state.activeProfile.newTensors=this.state.numTensors-ba;for(const Sa of this.state.activeProfile.kernels)Sa.kernelTimeMs=await Sa.kernelTimeMs,Sa.extraInfo=await Sa.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(aa,xa,ba,Sa,Ta,wa){const Ea={id:this.state.nextTapeNodeId++,kernelName:aa,inputs:xa,outputs:ba,saved:Ta},ka=getGradient(aa);ka!=null&&(Sa=ka.gradFunc),Sa!=null&&(Ea.gradient=Aa=>(Aa=Aa.map((Fa,La)=>{if(Fa==null){const el=ba[La],tl=makeZerosTypedArray(el.size,el.dtype);return this.makeTensor(tl,el.shape,el.dtype)}return Fa}),Sa(Aa.length>1?Aa:Aa[0],Ta,wa))),this.state.activeTape.push(Ea)}keep(aa){return aa.kept=!0,aa}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(aa){const xa={track:[],name:"unnamed scope",id:this.state.nextScopeId++};aa&&(xa.name=aa),this.state.scopeStack.push(xa),this.state.activeScope=xa}endScope(aa){const xa=getTensorsInContainer(aa),ba=new Set(xa.map(Ta=>Ta.id));for(let Ta=0;Ta<this.state.activeScope.track.length;Ta++){const wa=this.state.activeScope.track[Ta];!wa.kept&&!ba.has(wa.id)&&wa.dispose()}const Sa=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],xa.forEach(Ta=>{!Ta.kept&&Ta.scopeId===Sa.id&&this.track(Ta)})}gradients(aa,xa,ba,Sa=!1){if(assert(xa.length>0,()=>"gradients() received an empty list of xs."),ba!=null&&ba.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${ba.dtype}'`);const Ta=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",aa));assert(Ta instanceof Tensor,()=>"The result y returned by f() must be a tensor.");const wa=getFilteredNodesXToY(this.state.activeTape,xa,Ta);if(!Sa&&wa.length===0&&xa.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const Ea={};Ea[Ta.id]=ba??ones(Ta.shape),backpropagateGradients(Ea,wa,Aa=>this.tidy(Aa),add$1);const ka=xa.map(Aa=>Ea[Aa.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(Aa=>{for(const Fa of Aa.saved)Fa.dispose()}),this.state.activeTape=null),{value:Ta,grads:ka}})}customGrad(aa){return assert(isFunction(aa),()=>"The f passed in customGrad(f) must be a function."),(...xa)=>{assert(xa.every(Ea=>Ea instanceof Tensor),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let ba;const Sa={};xa.forEach((Ea,ka)=>{Sa[ka]=Ea});const Ta=(Ea,ka)=>(ba=aa(...xa,ka),assert(ba.value instanceof Tensor,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),assert(isFunction(ba.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),ba.value),wa=(Ea,ka)=>{const Aa=ba.gradFunc(Ea,ka),Fa=Array.isArray(Aa)?Aa:[Aa];assert(Fa.length===xa.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),assert(Fa.every(el=>el instanceof Tensor),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const La={};return Fa.forEach((el,tl)=>{La[tl]=()=>el}),La};return this.runKernelFunc({forwardFunc:Ta,backwardsFunc:wa,inputs:Sa})}}readSync(aa){return this.state.tensorInfo.get(aa).backend.readSync(aa)}read(aa){return this.state.tensorInfo.get(aa).backend.read(aa)}readToGPU(aa,xa){return this.state.tensorInfo.get(aa).backend.readToGPU(aa,xa)}async time(aa){const xa=now(),ba=await this.backend.time(aa);return ba.wallMs=now()-xa,ba}track(aa){return this.state.activeScope!=null&&(aa.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(aa)),aa}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new EngineState;for(const aa in this.registry)this.disposeRegisteredKernels(aa),this.registry[aa].dispose(),delete this.registry[aa];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Engine.nextTensorId=0,Engine.nextVariableId=0;function ones(ha){const aa=makeOnesTypedArray(sizeFromShape(ha),"float32");return ENGINE.makeTensor(aa,ha,"float32")}function getOrMakeEngine(){const ha=getGlobalNamespace();if(ha._tfengine==null){const aa=new Environment(ha);ha._tfengine=new Engine(aa)}return setEnvironmentGlobal(ha._tfengine.ENV),setTensorTracker(()=>ha._tfengine),ha._tfengine}const ENGINE=getOrMakeEngine();function add$1(ha,aa){const xa={a:ha,b:aa};return ENGINE.runKernel(Add,xa)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _isNavigatorDefined(){return typeof navigator<"u"&&navigator!=null}function isMobile(ha){if(ha||_isNavigatorDefined()){if(ha||(ha=navigator),ha.product==="ReactNative")return!0;const aa=ha.userAgent||ha.vendor||(typeof window<"u"?window.opera:"");if(!aa){const xa=ha;return xa.userAgentData&&xa.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(aa)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(aa.substr(0,4))}return!1}function isBrowser(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV$1=env();ENV$1.registerFlag("DEBUG",()=>!1,ha=>{ha&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),ENV$1.registerFlag("IS_BROWSER",()=>isBrowser()),ENV$1.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),ENV$1.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),ENV$1.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),ENV$1.registerFlag("PROD",()=>!1),ENV$1.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>ENV$1.getBool("DEBUG")),ENV$1.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),ENV$1.registerFlag("IS_TEST",()=>!1),ENV$1.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>ENV$1.getBool("DEBUG")),ENV$1.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),ENV$1.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),ENV$1.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function inferShape(ha,aa){let xa=ha;if(isTypedArray(ha))return aa==="string"?[]:[ha.length];if(isWebGLData(ha)){const Sa=ha.channels||"RGBA";return[ha.height,ha.width*Sa.length]}else if(isWebGPUData(ha))return[ha.buffer.size/(aa==null?4:bytesPerElement(aa))];if(!Array.isArray(ha))return[];const ba=[];for(;Array.isArray(xa)||isTypedArray(xa)&&aa!=="string";)ba.push(xa.length),xa=xa[0];return Array.isArray(ha)&&env().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&deepAssertShapeConsistency(ha,ba,[]),ba}function deepAssertShapeConsistency(ha,aa,xa){if(xa=xa||[],!Array.isArray(ha)&&!isTypedArray(ha)){assert(aa.length===0,()=>`Element arr[${xa.join("][")}] is a primitive, but should be an array/TypedArray of ${aa[0]} elements`);return}assert(aa.length>0,()=>`Element arr[${xa.join("][")}] should be a primitive, but is an array of ${ha.length} elements`),assert(ha.length===aa[0],()=>`Element arr[${xa.join("][")}] should have ${aa[0]} elements, but has ${ha.length} elements`);const ba=aa.slice(1);for(let Sa=0;Sa<ha.length;++Sa)deepAssertShapeConsistency(ha[Sa],ba,xa.concat(Sa))}function assertDtype(ha,aa,xa,ba){if(ha!=="string_or_numeric"){if(ha==null)throw new Error("Expected dtype cannot be null.");if(ha!=="numeric"&&ha!==aa||ha==="numeric"&&aa==="string")throw new Error(`Argument '${xa}' passed to '${ba}' must be ${ha} tensor, but got ${aa} tensor`)}}function convertToTensor(ha,aa,xa,ba="numeric"){if(ha instanceof getGlobalTensorClass())return assertDtype(ba,ha.dtype,aa,xa),ha;let Sa=inferDtype(ha);if(Sa!=="string"&&["bool","int32","float32"].indexOf(ba)>=0&&(Sa=ba),assertDtype(ba,Sa,aa,xa),ha==null||!isTypedArray(ha)&&!Array.isArray(ha)&&typeof ha!="number"&&typeof ha!="boolean"&&typeof ha!="string"){const ka=ha==null?"null":ha.constructor.name;throw new Error(`Argument '${aa}' passed to '${xa}' must be a Tensor or TensorLike, but got '${ka}'`)}const Ta=inferShape(ha,Sa);!isTypedArray(ha)&&!Array.isArray(ha)&&(ha=[ha]);const Ea=Sa!=="string"?toTypedArray(ha,Sa):flatten(ha,[],!0);return ENGINE.makeTensor(Ea,Ta,Sa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OP_SCOPE_SUFFIX="__op";function op(ha){const aa=Object.keys(ha);if(aa.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${aa.length} keys.`);let xa=aa[0];const ba=ha[xa];xa.endsWith("_")&&(xa=xa.substring(0,xa.length-1)),xa=xa+OP_SCOPE_SUFFIX;const Sa=(...Ta)=>{ENGINE.startScope(xa);try{const wa=ba(...Ta);return isPromise(wa)&&console.error("Cannot return a Promise inside of tidy."),ENGINE.endScope(wa),wa}catch(wa){throw ENGINE.endScope(null),wa}};return Object.defineProperty(Sa,"name",{value:xa,configurable:!0}),Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex_(ha,aa){const xa=convertToTensor(ha,"real","complex"),ba=convertToTensor(aa,"imag","complex");assertShapesMatch(xa.shape,ba.shape,`real and imag shapes, ${xa.shape} and ${ba.shape}, must match in call to tf.complex().`);const Sa={real:xa,imag:ba};return ENGINE.runKernel(Complex,Sa)}const complex$1=op({complex_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeTensor(ha,aa,xa,ba){if(ba==null)ba=inferDtype(ha);else if(ba==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(isWebGPUData(ha)||isWebGLData(ha)){if(ba!=="float32"&&ba!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${ba}.`);return ENGINE.backend.createTensorFromGPUData(ha,aa||xa,ba)}if(!isTypedArray(ha)&&!Array.isArray(ha)&&typeof ha!="number"&&typeof ha!="boolean"&&typeof ha!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(aa!=null){assertNonNegativeIntegerDimensions(aa);const Sa=sizeFromShape(aa),Ta=sizeFromShape(xa);assert(Sa===Ta,()=>`Based on the provided shape, [${aa}], the tensor should have ${Sa} values but has ${Ta}`);for(let wa=0;wa<xa.length;++wa){const Ea=xa[wa],ka=wa===xa.length-1?Ea!==sizeFromShape(aa.slice(wa)):!0;assert(xa[wa]===aa[wa]||!ka,()=>`Error creating a new Tensor. Inferred shape (${xa}) does not match the provided shape (${aa}). `)}}return!isTypedArray(ha)&&!Array.isArray(ha)&&(ha=[ha]),aa=aa||xa,ha=ba!=="string"?toTypedArray(ha,ba):flatten(ha,[],!0),ENGINE.makeTensor(ha,aa,ba)}class CompositeArrayBuffer{static join(aa){return new CompositeArrayBuffer(aa).slice()}constructor(aa){if(this.shards=[],this.previousShardIndex=0,aa==null||(aa instanceof Array||(aa=[aa]),aa=aa.map(ba=>isTypedArray(ba)?ba.buffer:ba),aa.length===0))return;this.bufferUniformSize=aa[0].byteLength;let xa=0;for(let ba=0;ba<aa.length;ba++){const Sa=aa[ba];ba!==aa.length-1&&Sa.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const Ta=xa+Sa.byteLength;this.shards.push({buffer:Sa,start:xa,end:Ta}),xa=Ta}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(aa=0,xa=this.byteLength){if(this.shards.length===0)return new ArrayBuffer(0);if(aa=isNaN(Number(aa))?0:aa,xa=isNaN(Number(xa))?0:xa,aa=Math.max(0,aa),xa=Math.min(this.byteLength,xa),xa<=aa)return new ArrayBuffer(0);const ba=this.findShardForByte(aa);if(ba===-1)throw new Error(`Could not find start shard for byte ${aa}`);const Sa=xa-aa,Ta=new ArrayBuffer(Sa),wa=new Uint8Array(Ta);let Ea=0;for(let ka=ba;ka<this.shards.length;ka++){const Aa=this.shards[ka],La=aa+Ea-Aa.start,el=Ea,nl=Math.min(xa,Aa.end)-Aa.start,rl=new Uint8Array(Aa.buffer,La,nl-La);if(wa.set(rl,el),Ea+=rl.length,xa<Aa.end)break}return Ta}findShardForByte(aa){if(this.shards.length===0||aa<0||aa>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(aa/this.bufferUniformSize),this.previousShardIndex;function xa(Sa){return aa<Sa.start?-1:aa>=Sa.end?1:0}if(xa(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;const ba=search(this.shards,xa);return ba===-1?-1:(this.previousShardIndex=ba,this.previousShardIndex)}}function search(ha,aa){let xa=0,ba=ha.length;for(;xa<=ba;){const Sa=Math.floor((ba-xa)/2)+xa,Ta=aa(ha[Sa]);if(Ta===0)return Sa;Ta<0?ba=Sa:xa=Sa+1}return-1}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function engine(){return ENGINE}function tidy(ha,aa){return ENGINE.tidy(ha,aa)}function dispose(ha){getTensorsInContainer(ha).forEach(xa=>xa.dispose())}function keep(ha){return ENGINE.keep(ha)}function registerBackend(ha,aa,xa=1){return ENGINE.registerBackend(ha,aa,xa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const useNodeBuffer=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function stringByteLength(ha){return useNodeBuffer?Buffer.byteLength(ha,"utf8"):new Blob([ha]).size}function arrayBufferToBase64String(ha){if(useNodeBuffer)return Buffer.from(ha).toString("base64");const aa=new Uint8Array(ha);let xa="";for(let ba=0,Sa=aa.length;ba<Sa;ba++)xa+=String.fromCharCode(aa[ba]);return btoa(xa)}function base64StringToArrayBuffer(ha){if(useNodeBuffer){const ba=Buffer.from(ha,"base64");return ba.buffer.slice(ba.byteOffset,ba.byteOffset+ba.byteLength)}const aa=atob(ha),xa=new Uint8Array(aa.length);for(let ba=0;ba<aa.length;++ba)xa.set([aa.charCodeAt(ba)],ba);return xa.buffer}function getModelJSONForModelArtifacts(ha,aa){const xa={modelTopology:ha.modelTopology,format:ha.format,generatedBy:ha.generatedBy,convertedBy:ha.convertedBy,weightsManifest:aa};return ha.signature!=null&&(xa.signature=ha.signature),ha.userDefinedMetadata!=null&&(xa.userDefinedMetadata=ha.userDefinedMetadata),ha.modelInitializer!=null&&(xa.modelInitializer=ha.modelInitializer),ha.initializerSignature!=null&&(xa.initializerSignature=ha.initializerSignature),ha.trainingConfig!=null&&(xa.trainingConfig=ha.trainingConfig),xa}function getModelArtifactsForJSONSync(ha,aa,xa){const ba={modelTopology:ha.modelTopology,format:ha.format,generatedBy:ha.generatedBy,convertedBy:ha.convertedBy};if(ha.trainingConfig!=null&&(ba.trainingConfig=ha.trainingConfig),ha.weightsManifest!=null){if(!aa)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!xa)throw new Error("modelJSON has weightsManifest but weightData is null");ba.weightSpecs=aa,ba.weightData=xa}return ha.signature!=null&&(ba.signature=ha.signature),ha.userDefinedMetadata!=null&&(ba.userDefinedMetadata=ha.userDefinedMetadata),ha.modelInitializer!=null&&(ba.modelInitializer=ha.modelInitializer),ha.initializerSignature!=null&&(ba.initializerSignature=ha.initializerSignature),ba}async function getModelArtifactsForJSON(ha,aa){let xa,ba;return ha.weightsManifest!=null&&([xa,ba]=await aa(ha.weightsManifest)),getModelArtifactsForJSONSync(ha,xa,ba)}function getModelArtifactsInfoForJSON(ha){if(ha.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:ha.modelTopology==null?0:stringByteLength(JSON.stringify(ha.modelTopology)),weightSpecsBytes:ha.weightSpecs==null?0:stringByteLength(JSON.stringify(ha.weightSpecs)),weightDataBytes:ha.weightData==null?0:new CompositeArrayBuffer(ha.weightData).byteLength}}function getWeightSpecs(ha){const aa=[];for(const xa of ha)aa.push(...xa.weights);return aa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class IORouterRegistry{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return IORouterRegistry.instance==null&&(IORouterRegistry.instance=new IORouterRegistry),IORouterRegistry.instance}static registerSaveRouter(aa){IORouterRegistry.getInstance().saveRouters.push(aa)}static registerLoadRouter(aa){IORouterRegistry.getInstance().loadRouters.push(aa)}static getSaveHandlers(aa){return IORouterRegistry.getHandlers(aa,"save")}static getLoadHandlers(aa,xa){return IORouterRegistry.getHandlers(aa,"load",xa)}static getHandlers(aa,xa,ba){const Sa=[];return(xa==="load"?IORouterRegistry.getInstance().loadRouters:IORouterRegistry.getInstance().saveRouters).forEach(wa=>{const Ea=wa(aa,ba);Ea!==null&&Sa.push(Ea)}),Sa}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DATABASE_NAME="tensorflowjs",DATABASE_VERSION=1,MODEL_STORE_NAME="models_store",INFO_STORE_NAME="model_info_store";function getIndexedDBFactory(){if(!env().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const ha=typeof window>"u"?self:window,aa=ha.indexedDB||ha.mozIndexedDB||ha.webkitIndexedDB||ha.msIndexedDB||ha.shimIndexedDB;if(aa==null)throw new Error("The current browser does not appear to support IndexedDB.");return aa}function setUpDatabase(ha){const aa=ha.result;aa.createObjectStore(MODEL_STORE_NAME,{keyPath:"modelPath"}),aa.createObjectStore(INFO_STORE_NAME,{keyPath:"modelPath"})}class BrowserIndexedDB{constructor(aa){if(this.indexedDB=getIndexedDBFactory(),aa==null||!aa)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=aa}async save(aa){if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,aa)}async load(){return this.databaseAction(this.modelPath)}databaseAction(aa,xa){return new Promise((ba,Sa)=>{const Ta=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);Ta.onupgradeneeded=()=>setUpDatabase(Ta),Ta.onsuccess=()=>{const wa=Ta.result;if(xa==null){const Ea=wa.transaction(MODEL_STORE_NAME,"readonly"),Aa=Ea.objectStore(MODEL_STORE_NAME).get(this.modelPath);Aa.onsuccess=()=>{if(Aa.result==null)return wa.close(),Sa(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));ba(Aa.result.modelArtifacts)},Aa.onerror=Fa=>(wa.close(),Sa(Aa.error)),Ea.oncomplete=()=>wa.close()}else{xa.weightData=CompositeArrayBuffer.join(xa.weightData);const Ea=getModelArtifactsInfoForJSON(xa),ka=wa.transaction(INFO_STORE_NAME,"readwrite");let Aa=ka.objectStore(INFO_STORE_NAME),Fa;try{Fa=Aa.put({modelPath:this.modelPath,modelArtifactsInfo:Ea})}catch(el){return Sa(el)}let La;Fa.onsuccess=()=>{La=wa.transaction(MODEL_STORE_NAME,"readwrite");const el=La.objectStore(MODEL_STORE_NAME);let tl;try{tl=el.put({modelPath:this.modelPath,modelArtifacts:xa,modelArtifactsInfo:Ea})}catch(nl){return Sa(nl)}tl.onsuccess=()=>ba({modelArtifactsInfo:Ea}),tl.onerror=nl=>{Aa=ka.objectStore(INFO_STORE_NAME);const rl=Aa.delete(this.modelPath);rl.onsuccess=()=>(wa.close(),Sa(tl.error)),rl.onerror=sl=>(wa.close(),Sa(tl.error))}},Fa.onerror=el=>(wa.close(),Sa(Fa.error)),ka.oncomplete=()=>{La==null?wa.close():La.oncomplete=()=>wa.close()}}},Ta.onerror=wa=>Sa(Ta.error)})}}BrowserIndexedDB.URL_SCHEME="indexeddb://";const indexedDBRouter=ha=>env().getBool("IS_BROWSER")&&!Array.isArray(ha)&&ha.startsWith(BrowserIndexedDB.URL_SCHEME)?browserIndexedDB(ha.slice(BrowserIndexedDB.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(indexedDBRouter),IORouterRegistry.registerLoadRouter(indexedDBRouter);function browserIndexedDB(ha){return new BrowserIndexedDB(ha)}function maybeStripScheme$1(ha){return ha.startsWith(BrowserIndexedDB.URL_SCHEME)?ha.slice(BrowserIndexedDB.URL_SCHEME.length):ha}class BrowserIndexedDBManager{constructor(){this.indexedDB=getIndexedDBFactory()}async listModels(){return new Promise((aa,xa)=>{const ba=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);ba.onupgradeneeded=()=>setUpDatabase(ba),ba.onsuccess=()=>{const Sa=ba.result,Ta=Sa.transaction(INFO_STORE_NAME,"readonly"),Ea=Ta.objectStore(INFO_STORE_NAME).getAll();Ea.onsuccess=()=>{const ka={};for(const Aa of Ea.result)ka[Aa.modelPath]=Aa.modelArtifactsInfo;aa(ka)},Ea.onerror=ka=>(Sa.close(),xa(Ea.error)),Ta.oncomplete=()=>Sa.close()},ba.onerror=Sa=>xa(ba.error)})}async removeModel(aa){return aa=maybeStripScheme$1(aa),new Promise((xa,ba)=>{const Sa=this.indexedDB.open(DATABASE_NAME,DATABASE_VERSION);Sa.onupgradeneeded=()=>setUpDatabase(Sa),Sa.onsuccess=()=>{const Ta=Sa.result,wa=Ta.transaction(INFO_STORE_NAME,"readwrite"),Ea=wa.objectStore(INFO_STORE_NAME),ka=Ea.get(aa);let Aa;ka.onsuccess=()=>{if(ka.result==null)return Ta.close(),ba(new Error(`Cannot find model with path '${aa}' in IndexedDB.`));{const Fa=Ea.delete(aa),La=()=>{Aa=Ta.transaction(MODEL_STORE_NAME,"readwrite");const tl=Aa.objectStore(MODEL_STORE_NAME).delete(aa);tl.onsuccess=()=>xa(ka.result.modelArtifactsInfo),tl.onerror=nl=>ba(ka.error)};Fa.onsuccess=La,Fa.onerror=el=>(La(),Ta.close(),ba(ka.error))}},ka.onerror=Fa=>(Ta.close(),ba(ka.error)),wa.oncomplete=()=>{Aa==null?Ta.close():Aa.oncomplete=()=>Ta.close()}},Sa.onerror=Ta=>ba(Sa.error)})}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PATH_SEPARATOR="/",PATH_PREFIX="tensorflowjs_models",INFO_SUFFIX="info",MODEL_TOPOLOGY_SUFFIX="model_topology",WEIGHT_SPECS_SUFFIX="weight_specs",WEIGHT_DATA_SUFFIX="weight_data",MODEL_METADATA_SUFFIX="model_metadata";function getModelKeys(ha){return{info:[PATH_PREFIX,ha,INFO_SUFFIX].join(PATH_SEPARATOR),topology:[PATH_PREFIX,ha,MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),weightSpecs:[PATH_PREFIX,ha,WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),weightData:[PATH_PREFIX,ha,WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),modelMetadata:[PATH_PREFIX,ha,MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)}}function removeItems(ha){for(const aa of Object.values(ha))window.localStorage.removeItem(aa)}function getModelPathFromKey(ha){const aa=ha.split(PATH_SEPARATOR);if(aa.length<3)throw new Error(`Invalid key format: ${ha}`);return aa.slice(1,aa.length-1).join(PATH_SEPARATOR)}function maybeStripScheme(ha){return ha.startsWith(BrowserLocalStorage.URL_SCHEME)?ha.slice(BrowserLocalStorage.URL_SCHEME.length):ha}class BrowserLocalStorage{constructor(aa){if(!env().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,aa==null||!aa)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=aa,this.keys=getModelKeys(this.modelPath)}async save(aa){if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const xa=JSON.stringify(aa.modelTopology),ba=JSON.stringify(aa.weightSpecs),Sa=getModelArtifactsInfoForJSON(aa),Ta=CompositeArrayBuffer.join(aa.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(Sa)),this.LS.setItem(this.keys.topology,xa),this.LS.setItem(this.keys.weightSpecs,ba),this.LS.setItem(this.keys.weightData,arrayBufferToBase64String(Ta));const wa={format:aa.format,generatedBy:aa.generatedBy,convertedBy:aa.convertedBy,signature:aa.signature!=null?aa.signature:void 0,userDefinedMetadata:aa.userDefinedMetadata!=null?aa.userDefinedMetadata:void 0,modelInitializer:aa.modelInitializer!=null?aa.modelInitializer:void 0,initializerSignature:aa.initializerSignature!=null?aa.initializerSignature:void 0,trainingConfig:aa.trainingConfig!=null?aa.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(wa)),{modelArtifactsInfo:Sa}}catch{throw removeItems(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${Sa.modelTopologyBytes}, weightSpecsBytes=${Sa.weightSpecsBytes}, weightDataBytes=${Sa.weightDataBytes}.`)}}}async load(){const aa=JSON.parse(this.LS.getItem(this.keys.info));if(aa==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(aa.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const xa={},ba=JSON.parse(this.LS.getItem(this.keys.topology));if(ba==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);xa.modelTopology=ba;const Sa=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(Sa==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);xa.weightSpecs=Sa;const Ta=this.LS.getItem(this.keys.modelMetadata);if(Ta!=null){const Ea=JSON.parse(Ta);xa.format=Ea.format,xa.generatedBy=Ea.generatedBy,xa.convertedBy=Ea.convertedBy,Ea.signature!=null&&(xa.signature=Ea.signature),Ea.userDefinedMetadata!=null&&(xa.userDefinedMetadata=Ea.userDefinedMetadata),Ea.modelInitializer!=null&&(xa.modelInitializer=Ea.modelInitializer),Ea.initializerSignature!=null&&(xa.initializerSignature=Ea.initializerSignature),Ea.trainingConfig!=null&&(xa.trainingConfig=Ea.trainingConfig)}const wa=this.LS.getItem(this.keys.weightData);if(wa==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return xa.weightData=base64StringToArrayBuffer(wa),xa}}BrowserLocalStorage.URL_SCHEME="localstorage://";const localStorageRouter=ha=>env().getBool("IS_BROWSER")&&!Array.isArray(ha)&&ha.startsWith(BrowserLocalStorage.URL_SCHEME)?browserLocalStorage(ha.slice(BrowserLocalStorage.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(localStorageRouter),IORouterRegistry.registerLoadRouter(localStorageRouter);function browserLocalStorage(ha){return new BrowserLocalStorage(ha)}class BrowserLocalStorageManager{constructor(){assert(env().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),assert(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const aa={},xa=PATH_PREFIX+PATH_SEPARATOR,ba=PATH_SEPARATOR+INFO_SUFFIX;for(let Sa=0;Sa<this.LS.length;++Sa){const Ta=this.LS.key(Sa);if(Ta.startsWith(xa)&&Ta.endsWith(ba)){const wa=getModelPathFromKey(Ta);aa[wa]=JSON.parse(this.LS.getItem(Ta))}}return aa}async removeModel(aa){aa=maybeStripScheme(aa);const xa=getModelKeys(aa);if(this.LS.getItem(xa.info)==null)throw new Error(`Cannot find model at path '${aa}'`);const ba=JSON.parse(this.LS.getItem(xa.info));return removeItems(xa),ba}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const URL_SCHEME_SUFFIX="://";class ModelStoreManagerRegistry{constructor(){this.managers={}}static getInstance(){return ModelStoreManagerRegistry.instance==null&&(ModelStoreManagerRegistry.instance=new ModelStoreManagerRegistry),ModelStoreManagerRegistry.instance}static registerManager(aa,xa){assert(aa!=null,()=>"scheme must not be undefined or null."),aa.endsWith(URL_SCHEME_SUFFIX)&&(aa=aa.slice(0,aa.indexOf(URL_SCHEME_SUFFIX))),assert(aa.length>0,()=>"scheme must not be an empty string.");const ba=ModelStoreManagerRegistry.getInstance();assert(ba.managers[aa]==null,()=>`A model store manager is already registered for scheme '${aa}'.`),ba.managers[aa]=xa}static getManager(aa){const xa=ModelStoreManagerRegistry.getInstance().managers[aa];if(xa==null)throw new Error(`Cannot find model manager for scheme '${aa}'`);return xa}static getSchemes(){return Object.keys(ModelStoreManagerRegistry.getInstance().managers)}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PlatformBrowser{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(aa,xa){return fetch(aa,xa)}now(){return performance.now()}encode(aa,xa){if(xa!=="utf-8"&&xa!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${xa}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(aa)}decode(aa,xa){return new TextDecoder(xa).decode(aa)}setTimeoutCustom(aa,xa){if(typeof window>"u"||!env().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(aa,xa);return}this.functionRefs.push(aa),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},xa),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",ba=>{if(ba.source===window&&ba.data.name===this.messageName){ba.stopPropagation();const Sa=this.functionRefs[ba.data.index];Sa(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(aa){return isTypedArrayBrowser(aa)}}if(env().get("IS_BROWSER")){env().setPlatform("browser",new PlatformBrowser);try{ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME,new BrowserLocalStorageManager)}catch{}try{ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME,new BrowserIndexedDBManager)}catch{}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const getNodeFetch={importFetch:()=>require("node-fetch")};let systemFetch;class PlatformNode{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(aa,xa){return env().global.fetch!=null?env().global.fetch(aa,xa):(systemFetch==null&&(systemFetch=getNodeFetch.importFetch()),systemFetch(aa,xa))}now(){const aa=process.hrtime();return aa[0]*1e3+aa[1]/1e6}encode(aa,xa){if(xa!=="utf-8"&&xa!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${xa}`);return this.textEncoder.encode(aa)}decode(aa,xa){return aa.length===0?"":new this.util.TextDecoder(xa).decode(aa)}isTypedArray(aa){return this.util.types.isFloat32Array(aa)||this.util.types.isInt32Array(aa)||this.util.types.isUint8Array(aa)||this.util.types.isUint8ClampedArray(aa)}}env().get("IS_NODE")&&!env().get("IS_BROWSER")&&env().setPlatform("node",new PlatformNode);/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function buffer(ha,aa="float32",xa){return aa=aa||"float32",assertNonNegativeIntegerDimensions(ha),new TensorBuffer(ha,aa,xa)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast_(ha,aa){const xa=convertToTensor(ha,"x","cast");if(!isValidDtype(aa))throw new Error(`Failed to cast to unknown dtype ${aa}`);if(aa==="string"&&xa.dtype!=="string"||aa!=="string"&&xa.dtype==="string")throw new Error("Only strings can be casted to strings");const ba={x:xa},Sa={dtype:aa};return ENGINE.runKernel(Cast,ba,Sa)}const cast$1=op({cast_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clone_(ha){const xa={x:convertToTensor(ha,"x","clone","string_or_numeric")};return ENGINE.runKernel(Identity,xa)}const clone=op({clone_});/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function print(ha,aa=!1){console.log(ha.toString(aa))}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */getOrMakeEngine();const opHandler={buffer,cast:cast$1,clone,print};setOpHandler(opHandler);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function add_(ha,aa){let xa=convertToTensor(ha,"a","add"),ba=convertToTensor(aa,"b","add");[xa,ba]=makeTypesMatch(xa,ba);const Sa={a:xa,b:ba};return ENGINE.runKernel(Add,Sa)}const add=op({add_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function floorDiv_(ha,aa){let xa=convertToTensor(ha,"a","floorDiv"),ba=convertToTensor(aa,"b","floorDiv");[xa,ba]=makeTypesMatch(xa,ba);const Sa={a:xa,b:ba};return ENGINE.runKernel(FloorDiv,Sa)}const floorDiv$1=op({floorDiv_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function div_(ha,aa){let xa=convertToTensor(ha,"a","div"),ba=convertToTensor(aa,"b","div");if([xa,ba]=makeTypesMatch(xa,ba),xa.dtype==="int32"&&ba.dtype==="int32")return floorDiv$1(xa,ba);const Sa={a:xa,b:ba},Ta={};return ENGINE.runKernel(RealDiv,Sa,Ta)}const div=op({div_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mul_(ha,aa){let xa=convertToTensor(ha,"a","mul"),ba=convertToTensor(aa,"b","mul");[xa,ba]=makeTypesMatch(xa,ba);const Sa={a:xa,b:ba};return ENGINE.runKernel(Multiply,Sa)}const mul=op({mul_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function abs_(ha){const aa=convertToTensor(ha,"x","abs");if(aa.dtype==="complex64"){const xa={x:aa};return ENGINE.runKernel(ComplexAbs,xa)}else{const xa={x:aa};return ENGINE.runKernel(Abs,xa)}}const abs$1=op({abs_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function computeDilation2DInfo(ha,aa,xa,ba,Sa="NHWC",Ta){const wa=ha[3],Ea=[...aa,wa],ka=convertConv2DDataFormat(Sa);return computeConv2DInfo(ha,Ea,xa,Ta,ba,null,null,ka)}function computePool2DInfo(ha,aa,xa,ba,Sa,Ta,wa="channelsLast"){const[Ea,ka]=parseTupleParam(aa);let Aa;if(wa==="channelsLast")Aa=[Ea,ka,ha[3],ha[3]];else if(wa==="channelsFirst")Aa=[Ea,ka,ha[1],ha[1]];else throw new Error(`Unknown dataFormat ${wa}`);return computeConv2DInfo(ha,Aa,xa,ba,Sa,Ta,!1,wa)}function computePool3DInfo(ha,aa,xa,ba,Sa,Ta,wa="NDHWC"){const[Ea,ka,Aa]=parse3TupleParam(aa);let Fa,La;if(wa==="NDHWC")La="channelsLast",Fa=[Ea,ka,Aa,ha[4],ha[4]];else if(wa==="NCDHW")La="channelsFirst",Fa=[Ea,ka,Aa,ha[1],ha[1]];else throw new Error(`Unknown dataFormat ${wa}`);return computeConv3DInfo(ha,Fa,xa,ba,Sa,!1,La,Ta)}function computeConv2DInfo(ha,aa,xa,ba,Sa,Ta,wa=!1,Ea="channelsLast"){let[ka,Aa,Fa,La]=[-1,-1,-1,-1];if(Ea==="channelsLast")[ka,Aa,Fa,La]=ha;else if(Ea==="channelsFirst")[ka,La,Aa,Fa]=ha;else throw new Error(`Unknown dataFormat ${Ea}`);const[el,tl,,nl]=aa,[rl,sl]=parseTupleParam(xa),[ol,al]=parseTupleParam(ba),ll=getEffectiveFilterSize(el,ol),il=getEffectiveFilterSize(tl,al),{padInfo:cl,outHeight:ul,outWidth:dl}=getPadAndOutInfo(Sa,Aa,Fa,rl,sl,ll,il,Ta,Ea),hl=wa?nl*La:nl;let pl;return Ea==="channelsFirst"?pl=[ka,hl,ul,dl]:Ea==="channelsLast"&&(pl=[ka,ul,dl,hl]),{batchSize:ka,dataFormat:Ea,inHeight:Aa,inWidth:Fa,inChannels:La,outHeight:ul,outWidth:dl,outChannels:hl,padInfo:cl,strideHeight:rl,strideWidth:sl,filterHeight:el,filterWidth:tl,effectiveFilterHeight:ll,effectiveFilterWidth:il,dilationHeight:ol,dilationWidth:al,inShape:ha,outShape:pl,filterShape:aa}}function computeConv3DInfo(ha,aa,xa,ba,Sa,Ta=!1,wa="channelsLast",Ea){let[ka,Aa,Fa,La,el]=[-1,-1,-1,-1,-1];if(wa==="channelsLast")[ka,Aa,Fa,La,el]=ha;else if(wa==="channelsFirst")[ka,el,Aa,Fa,La]=ha;else throw new Error(`Unknown dataFormat ${wa}`);const[tl,nl,rl,,sl]=aa,[ol,al,ll]=parse3TupleParam(xa),[il,cl,ul]=parse3TupleParam(ba),dl=getEffectiveFilterSize(tl,il),hl=getEffectiveFilterSize(nl,cl),pl=getEffectiveFilterSize(rl,ul),{padInfo:fl,outDepth:ml,outHeight:gl,outWidth:$l}=get3DPadAndOutInfo(Sa,Aa,Fa,La,ol,al,ll,dl,hl,pl,Ea),xl=Ta?sl*el:sl;let yl;return wa==="channelsFirst"?yl=[ka,xl,ml,gl,$l]:wa==="channelsLast"&&(yl=[ka,ml,gl,$l,xl]),{batchSize:ka,dataFormat:wa,inDepth:Aa,inHeight:Fa,inWidth:La,inChannels:el,outDepth:ml,outHeight:gl,outWidth:$l,outChannels:xl,padInfo:fl,strideDepth:ol,strideHeight:al,strideWidth:ll,filterDepth:tl,filterHeight:nl,filterWidth:rl,effectiveFilterDepth:dl,effectiveFilterHeight:hl,effectiveFilterWidth:pl,dilationDepth:il,dilationHeight:cl,dilationWidth:ul,inShape:ha,outShape:yl,filterShape:aa}}function computeOutputShape2D(ha,aa,xa,ba,Sa){ba==null&&(ba=computeDefaultPad(ha,aa,xa));const Ta=ha[0],wa=ha[1],Ea=round$1((Ta-aa+2*ba)/xa+1,Sa),ka=round$1((wa-aa+2*ba)/xa+1,Sa);return[Ea,ka]}function computeOutputShape4D(ha,aa,xa,ba,Sa,Ta){Sa==null&&(Sa=computeDefaultPad(ha,aa[0],ba[0]));const wa=[0,0,0,xa];for(let Ea=0;Ea<3;Ea++)ha[Ea]+2*Sa>=aa[Ea]&&(wa[Ea]=round$1((ha[Ea]-aa[Ea]+2*Sa)/ba[Ea]+1,Ta));return wa}function computeDefaultPad(ha,aa,xa,ba=1){const Sa=getEffectiveFilterSize(aa,ba);return Math.floor((ha[0]*(xa-1)-xa+Sa)/2)}function parseTupleParam(ha){return typeof ha=="number"?[ha,ha,ha]:ha.length===2?[ha[0],ha[1],1]:ha}function parse3TupleParam(ha){return typeof ha=="number"?[ha,ha,ha]:ha}function getEffectiveFilterSize(ha,aa){return aa<=1?ha:ha+(ha-1)*(aa-1)}function getPadAndOutInfo(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){let Aa,Fa,La;if(typeof ha=="number"){Aa={top:ha,bottom:ha,left:ha,right:ha,type:ha===0?"VALID":"NUMBER"};const tl=computeOutputShape2D([aa,xa],Ta,ba,ha,Ea);Fa=tl[0],La=tl[1]}else if(ha==="same"){Fa=Math.ceil(aa/ba),La=Math.ceil(xa/Sa);const el=Math.max(0,(Fa-1)*ba+Ta-aa),tl=Math.max(0,(La-1)*Sa+wa-xa),nl=Math.floor(el/2),rl=el-nl,sl=Math.floor(tl/2),ol=tl-sl;Aa={top:nl,bottom:rl,left:sl,right:ol,type:"SAME"}}else if(ha==="valid")Aa={top:0,bottom:0,left:0,right:0,type:"VALID"},Fa=Math.ceil((aa-Ta+1)/ba),La=Math.ceil((xa-wa+1)/Sa);else if(typeof ha=="object"){const el=ka==="channelsLast"?ha[1][0]:ha[2][0],tl=ka==="channelsLast"?ha[1][1]:ha[2][1],nl=ka==="channelsLast"?ha[2][0]:ha[3][0],rl=ka==="channelsLast"?ha[2][1]:ha[3][1];Aa={top:el,bottom:tl,left:nl,right:rl,type:el===0&&tl===0&&nl===0&&rl===0?"VALID":"EXPLICIT"},Fa=round$1((aa-Ta+el+tl)/ba+1,Ea),La=round$1((xa-wa+nl+rl)/Sa+1,Ea)}else throw Error(`Unknown padding parameter: ${ha}`);return{padInfo:Aa,outHeight:Fa,outWidth:La}}function get3DPadAndOutInfo(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){let La,el,tl,nl;if(ha==="valid"&&(ha=0),typeof ha=="number"){La={top:ha,bottom:ha,left:ha,right:ha,front:ha,back:ha,type:ha===0?"VALID":"NUMBER"};const sl=computeOutputShape4D([aa,xa,ba,1],[Ea,ka,Aa],1,[Sa,Ta,wa],ha,Fa);el=sl[0],tl=sl[1],nl=sl[2]}else if(ha==="same"){el=Math.ceil(aa/Sa),tl=Math.ceil(xa/Ta),nl=Math.ceil(ba/wa);const rl=(el-1)*Sa+Ea-aa,sl=(tl-1)*Ta+ka-xa,ol=(nl-1)*wa+Aa-ba,al=Math.floor(rl/2),ll=rl-al,il=Math.floor(sl/2),cl=sl-il,ul=Math.floor(ol/2),dl=ol-ul;La={top:il,bottom:cl,left:ul,right:dl,front:al,back:ll,type:"SAME"}}else throw Error(`Unknown padding parameter: ${ha}`);return{padInfo:La,outDepth:el,outHeight:tl,outWidth:nl}}function round$1(ha,aa){if(!aa)return Math.trunc(ha);switch(aa){case"round":return Math.round(ha);case"ceil":return Math.ceil(ha);case"floor":return Math.floor(ha);default:throw new Error(`Unknown roundingMode ${aa}`)}}function tupleValuesAreOne(ha){const[aa,xa,ba]=parseTupleParam(ha);return aa===1&&xa===1&&ba===1}function eitherStridesOrDilationsAreOne(ha,aa){return tupleValuesAreOne(ha)||tupleValuesAreOne(aa)}function stridesOrDilationsArePositive(ha){return parseTupleParam(ha).every(aa=>aa>0)}function convertConv2DDataFormat(ha){if(ha==="NHWC")return"channelsLast";if(ha==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${ha}`)}function checkPadOnDimRoundingMode(ha,aa,xa){if(xa!=null){if(typeof aa=="string")throw Error(`Error in ${ha}: pad must be an integer when using dimRoundingMode ${xa} but got pad ${aa}.`);if(typeof aa=="number")assert(isInt(aa),()=>`Error in ${ha}: pad must be an integer when using dimRoundingMode ${xa} but got pad ${aa}.`);else if(typeof aa=="object")aa.forEach(ba=>{ba.forEach(Sa=>{assert(isInt(Sa),()=>`Error in ${ha}: pad must be an integer when using dimRoundingMode ${xa} but got pad ${Sa}.`)})});else throw Error(`Error in ${ha}: Unknown padding parameter: ${aa}`)}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape_(ha,aa){const ba={x:convertToTensor(ha,"x","reshape","string_or_numeric")},Sa={shape:aa};return ENGINE.runKernel(Reshape,ba,Sa)}const reshape$1=op({reshape_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sigmoid_(ha){const xa={x:convertToTensor(ha,"x","sigmoid","float32")};return ENGINE.runKernel(Sigmoid,xa)}const sigmoid$1=op({sigmoid_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastTo_(ha,aa){let xa=convertToTensor(ha,"broadcastTo","x");const ba=xa.shape;if(assertNonNegativeIntegerDimensions(aa),aa.length<xa.rank)throw new Error(`broadcastTo(): shape.length=${aa.length} < input.rank=${xa.rank}.`);if(aa.length>xa.rank){const Aa=xa.shape.slice();for(;Aa.length<aa.length;)Aa.unshift(1);xa=reshape$1(xa,Aa)}const Sa=xa.shape,Ta=Array.from(aa);for(let Aa=aa.length-1;Aa>=0;Aa--)if(Sa[Aa]===aa[Aa])Ta[Aa]=1;else if(xa.shape[Aa]!==1)throw new Error(`broadcastTo(): [${ba}] cannot be broadcast to [${aa}].`);if(Ta.map((Aa,Fa)=>Aa>1?Fa:-1).filter(Aa=>Aa>=0).length===0)return clone(xa);const Ea={x:xa},ka={reps:Ta};return ENGINE.runKernel(Tile,Ea,ka)}const broadcastTo=op({broadcastTo_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill$1(ha,aa,xa){assertNonNegativeIntegerDimensions(ha),xa=xa||inferDtype(aa);const ba={shape:ha,value:aa,dtype:xa};return ENGINE.runKernel(Fill,{},ba)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getBroadcastDims$1(ha,aa){const xa=ha.length,ba=[];for(let Sa=0;Sa<xa;Sa++){const Ta=xa-1-Sa,wa=ha[Ta]||1;(aa[aa.length-1-Sa]||1)>1&&wa===1&&ba.unshift(Ta)}return ba}function getReductionAxes(ha,aa){const xa=[];for(let ba=0;ba<aa.length;ba++){const Sa=ha[ha.length-ba-1],Ta=aa.length-ba-1,wa=aa[Ta];(Sa==null||Sa===1&&wa>1)&&xa.unshift(Ta)}return xa}function assertAndGetBroadcastShape(ha,aa){const xa=Math.max(ha.length,aa.length),ba=new Array(xa);for(let Sa=0;Sa<xa;Sa++){let Ta=ha[ha.length-Sa-1];Ta==null&&(Ta=1);let wa=aa[aa.length-Sa-1];if(wa==null&&(wa=1),Ta===1)ba[xa-Sa-1]=wa;else if(wa===1)ba[xa-Sa-1]=Ta;else if(Ta!==wa){const Ea=`Operands could not be broadcast together with shapes ${ha} and ${aa}.`;throw Error(Ea)}else ba[xa-Sa-1]=Ta}return ba}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike_(ha){const xa={x:convertToTensor(ha,"x","zerosLike")};return ENGINE.runKernel(ZerosLike,xa)}const zerosLike$1=op({zerosLike_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function elu_(ha){const xa={x:convertToTensor(ha,"x","elu","float32")};return ENGINE.runKernel(Elu,xa)}const elu$1=op({elu_});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function axesAreInnerMostDims(ha,aa){for(let xa=0;xa<ha.length;++xa)if(ha[ha.length-xa-1]!==aa-1-xa)return!1;return!0}function combineLocations(ha,aa,xa){const ba=ha.length+aa.length,Sa=[];let Ta=0,wa=0;for(let Ea=0;Ea<ba;Ea++)xa.indexOf(Ea)===-1?Sa.push(ha[Ta++]):Sa.push(aa[wa++]);return Sa}function computeOutAndReduceShapes(ha,aa){const xa=[],ba=ha.length;for(let Ta=0;Ta<ba;Ta++)aa.indexOf(Ta)===-1&&xa.push(ha[Ta]);const Sa=aa.map(Ta=>ha[Ta]);return[xa,Sa]}function expandShapeToKeepDim(ha,aa){const xa=aa.map(ba=>1);return combineLocations(ha,xa,aa)}function assertAxesAreInnerMostDims(ha,aa,xa){assert(axesAreInnerMostDims(aa,xa),()=>`${ha} supports only inner-most axes for now. Got axes ${aa} and rank-${xa} input.`)}function getAxesPermutation(ha,aa){if(axesAreInnerMostDims(ha,aa))return null;const xa=[];for(let ba=0;ba<aa;++ba)ha.indexOf(ba)===-1&&xa.push(ba);return ha.forEach(ba=>xa.push(ba)),xa}function getUndoAxesPermutation(ha){return ha.map((aa,xa)=>[xa,aa]).sort((aa,xa)=>aa[1]-xa[1]).map(aa=>aa[0])}function getInnerMostAxes(ha,aa){const xa=[];for(let ba=aa-ha;ba<aa;++ba)xa.push(ba);return xa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pow_(ha,aa){let xa=convertToTensor(ha,"base","pow"),ba=convertToTensor(aa,"exp","pow");[xa,ba]=makeTypesMatch(xa,ba);const Sa={a:xa,b:ba};return ENGINE.runKernel(Pow,Sa)}const pow$1=op({pow_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scalar(ha,aa){if((isTypedArray(ha)&&aa!=="string"||Array.isArray(ha))&&aa!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(aa==="string"&&isTypedArray(ha)&&!(ha instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return makeTensor(ha,[],[],aa)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sqrt_(ha){const xa={x:convertToTensor(ha,"x","sqrt","float32")};return ENGINE.runKernel(Sqrt,xa)}const sqrt$1=op({sqrt_});/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function square_(ha){const aa=convertToTensor(ha,"x","square"),xa={};return ENGINE.runKernel("Square",{x:aa},xa)}const square$1=op({square_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum_(ha,aa=null,xa=!1){let ba=convertToTensor(ha,"x","sum");ba.dtype==="bool"&&(ba=cast$1(ba,"int32"));const Sa={x:ba},Ta={axis:aa,keepDims:xa};return ENGINE.runKernel(Sum,Sa,Ta)}const sum$1=op({sum_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function leakyRelu_(ha,aa=.2){const ba={x:convertToTensor(ha,"x","leakyRelu")},Sa={alpha:aa};return ENGINE.runKernel(LeakyRelu,ba,Sa)}const leakyRelu$1=op({leakyRelu_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function variableGrads(ha,aa){assert(isFunction(ha),()=>"The f passed in variableGrads(f) must be a function"),assert(aa==null||Array.isArray(aa)&&aa.every(Aa=>Aa instanceof Variable),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const xa=aa!=null;if(!xa){aa=[];for(const Aa in ENGINE.registeredVariables)aa.push(ENGINE.registeredVariables[Aa])}const ba=xa?aa.filter(Aa=>!Aa.trainable):null,Sa=aa.length;aa=aa.filter(Aa=>Aa.trainable),assert(aa.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${Sa} variables is trainable.`);const Ta=!0,{value:wa,grads:Ea}=ENGINE.gradients(ha,aa,null,Ta);assert(Ea.some(Aa=>Aa!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),assert(wa.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${wa.rank} tensor`);const ka={};return aa.forEach((Aa,Fa)=>{Ea[Fa]!=null&&(ka[Aa.name]=Ea[Fa])}),ba!=null&&ba.forEach(Aa=>ka[Aa.name]=null),{value:wa,grads:ka}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sub_(ha,aa){let xa=convertToTensor(ha,"a","sub"),ba=convertToTensor(aa,"b","sub");[xa,ba]=makeTypesMatch(xa,ba);const Sa={a:xa,b:ba};return ENGINE.runKernel(Sub,Sa)}const sub$1=op({sub_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maximum_(ha,aa){let xa=convertToTensor(ha,"a","maximum"),ba=convertToTensor(aa,"b","maximum");[xa,ba]=makeTypesMatch(xa,ba),xa.dtype==="bool"&&(xa=cast$1(xa,"int32"),ba=cast$1(ba,"int32")),assertAndGetBroadcastShape(xa.shape,ba.shape);const Sa={a:xa,b:ba};return ENGINE.runKernel(Maximum,Sa)}const maximum$1=op({maximum_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zeros(ha,aa="float32"){if(assertNonNegativeIntegerDimensions(ha),aa==="complex64"){const ba=zeros(ha,"float32"),Sa=zeros(ha,"float32");return complex$1(ba,Sa)}const xa=makeZerosTypedArray(sizeFromShape(ha),aa);return ENGINE.makeTensor(xa,ha,aa)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prelu_(ha,aa){const xa=convertToTensor(ha,"x","prelu"),ba=convertToTensor(aa,"alpha","prelu"),Sa={x:xa,alpha:ba};return ENGINE.runKernel(Prelu,Sa)}const prelu$1=op({prelu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu_(ha){const xa={x:convertToTensor(ha,"x","relu")};return ENGINE.runKernel(Relu,xa)}const relu$1=op({relu_});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function relu6_(ha){const xa={x:convertToTensor(ha,"x","relu6")};return ENGINE.runKernel(Relu6,xa)}const relu6$1=op({relu6_});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step_(ha,aa=0){const ba={x:convertToTensor(ha,"x","step")},Sa={alpha:aa};return ENGINE.runKernel(Step,ba,Sa)}const step$1=op({step_});function validateUpdateShape(ha,aa,xa){const ba=aa.rank>1?aa.shape[aa.rank-1]:1,Sa=aa.rank>1?aa.rank-1:1,Ta=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${xa.shape}, indices.shape: ${aa.shape}, shape: ${ha}, sliceDim: ${ba}, and batchDim: ${Sa}.`;if(xa.rank<Sa)throw new Error(Ta+` update.rank < ${Sa}. `);if(ha.length<ba+(xa.rank-Sa))throw new Error(Ta+` Output shape length < ${ba+(xa.rank-Sa)}`);if(xa.rank!==Sa+ha.length-ba)throw new Error(Ta+` update.rank != ${Sa+ha.length-ba}`);for(let wa=0;wa<Sa;++wa)if(xa.shape[wa]!==aa.shape[wa])throw new Error(Ta+` updates.shape[${wa}] (${xa.shape[wa]}) != indices.shape[${wa}] (${aa.shape[wa]}).`);for(let wa=0;wa<xa.rank-Sa;++wa)if(xa.shape[wa+Sa]!==ha[wa+ba])throw new Error(Ta+` updates.shape[${wa+Sa}] (${xa.shape[wa+Sa]}) != shape[${wa+Sa}] (${ha[wa+Sa]})`)}function validateInput(ha,aa,xa){if(aa.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${aa.rank}.`);if(ha.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${ha.rank}.`);if(aa.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${aa.dtype}`);if(xa.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${xa}`);if(xa.length===0){if(aa.size===0)throw new Error(`Indices specified for empty output. indices shape: ${aa.shape}`);if(ha.size===0)throw new Error(`Updates specified for empty output. updates shape: ${ha.shape}`)}validateUpdateShape(xa,aa,ha)}function calculateShapes(ha,aa,xa){const ba=aa.shape.length,Sa=ba>1?aa.shape[ba-1]:1,Ta=xa.length;let wa=1;for(let La=Sa;La<Ta;++La)wa*=xa[La];const Ea=Sa<1?1:Sa,ka=sizeFromShape(aa.shape)/Ea,Aa=[...computeStrides(xa.slice(0,Sa)),1],Fa=sizeFromShape(xa);return{sliceRank:Sa,numUpdates:ka,sliceSize:wa,strides:Aa,outputSize:Fa}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function whereImpl$1(ha,aa){const xa=[];for(let Ta=0;Ta<aa.length;Ta++)aa[Ta]&&xa.push(Ta);const ba=buffer(ha,"int32"),Sa=buffer([xa.length,ha.length],"int32");for(let Ta=0;Ta<xa.length;Ta++){const wa=ba.indexToLoc(xa[Ta]),Ea=Ta*ha.length;Sa.values.set(wa,Ea)}return Sa.toTensor()}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getFusedDyActivation(ha,aa,xa){if(xa==null||xa==="linear")return ha;if(xa==="relu")return mul(ha,step$1(aa));throw new Error(`Cannot compute gradient for fused activation ${xa}.`)}function getFusedBiasGradient(ha,aa){let xa=aa;const ba=getReductionAxes(ha.shape,aa.shape);return ba.length>0&&(xa=sum$1(xa,ba)),reshape$1(xa,ha.shape)}function applyActivation(ha,aa,xa,ba){if(aa==="linear")return ha;if(aa==="relu")return relu$1(ha);if(aa==="elu")return elu$1(ha);if(aa==="relu6")return relu6$1(ha);if(aa==="prelu")return prelu$1(ha,xa);if(aa==="leakyrelu")return leakyRelu$1(ha,ba);if(aa==="sigmoid")return sigmoid$1(ha);throw new Error(`Unknown fused activation ${aa}.`)}const shouldFuse=(ha,aa)=>!(ha>0)||aa==="linear";/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function binaryInsert(ha,aa,xa){const ba=binarySearch(ha,aa,xa),Sa=ba<0?-(ba+1):ba;ha.splice(Sa,0,aa)}function binarySearch(ha,aa,xa){return binarySearch_(ha,aa,xa||defaultComparator)}function defaultComparator(ha,aa){return ha>aa?1:ha<aa?-1:0}function binarySearch_(ha,aa,xa){let ba=0,Sa=ha.length,Ta=0,wa=!1;for(;ba<Sa;){Ta=ba+(Sa-ba>>>1);const Ea=xa(aa,ha[Ta]);Ea>0?ba=Ta+1:(Sa=Ta,wa=!Ea)}return wa?ba:-ba-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function nonMaxSuppressionV3Impl$1(ha,aa,xa,ba,Sa){return nonMaxSuppressionImpl_(ha,aa,xa,ba,Sa,0)}function nonMaxSuppressionV4Impl$1(ha,aa,xa,ba,Sa,Ta){return nonMaxSuppressionImpl_(ha,aa,xa,ba,Sa,0,!1,Ta,!0)}function nonMaxSuppressionV5Impl$1(ha,aa,xa,ba,Sa,Ta){return nonMaxSuppressionImpl_(ha,aa,xa,ba,Sa,Ta,!0)}function nonMaxSuppressionImpl_(ha,aa,xa,ba,Sa,Ta,wa=!1,Ea=!1,ka=!1){const Aa=[];for(let sl=0;sl<aa.length;sl++)aa[sl]>Sa&&Aa.push({score:aa[sl],boxIndex:sl,suppressBeginIndex:0});Aa.sort(ascendingComparator);const Fa=Ta>0?-.5/Ta:0,La=[],el=[];for(;La.length<xa&&Aa.length>0;){const sl=Aa.pop(),{score:ol,boxIndex:al,suppressBeginIndex:ll}=sl;if(ol<Sa)break;let il=!1;for(let cl=La.length-1;cl>=ll;--cl){const ul=intersectionOverUnion(ha,al,La[cl]);if(ul>=ba){il=!0;break}if(sl.score=sl.score*suppressWeight(ba,Fa,ul),sl.score<=Sa)break}sl.suppressBeginIndex=La.length,il||(sl.score===ol?(La.push(al),el.push(sl.score)):sl.score>Sa&&binaryInsert(Aa,sl,ascendingComparator))}const tl=La.length,nl=xa-tl;Ea&&nl>0&&(La.push(...new Array(nl).fill(0)),el.push(...new Array(nl).fill(0)));const rl={selectedIndices:La};return wa&&(rl.selectedScores=el),ka&&(rl.validOutputs=tl),rl}function intersectionOverUnion(ha,aa,xa){const ba=ha.subarray(aa*4,aa*4+4),Sa=ha.subarray(xa*4,xa*4+4),Ta=Math.min(ba[0],ba[2]),wa=Math.min(ba[1],ba[3]),Ea=Math.max(ba[0],ba[2]),ka=Math.max(ba[1],ba[3]),Aa=Math.min(Sa[0],Sa[2]),Fa=Math.min(Sa[1],Sa[3]),La=Math.max(Sa[0],Sa[2]),el=Math.max(Sa[1],Sa[3]),tl=(Ea-Ta)*(ka-wa),nl=(La-Aa)*(el-Fa);if(tl<=0||nl<=0)return 0;const rl=Math.max(Ta,Aa),sl=Math.max(wa,Fa),ol=Math.min(Ea,La),al=Math.min(ka,el),ll=Math.max(ol-rl,0)*Math.max(al-sl,0);return ll/(tl+nl-ll)}function suppressWeight(ha,aa,xa){const ba=Math.exp(aa*xa*xa);return xa<=ha?ba:0}function ascendingComparator(ha,aa){return ha.score-aa.score||ha.score===aa.score&&aa.boxIndex-ha.boxIndex}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GLOBAL_CUSTOM_OBJECT=new Map,GLOBAL_CUSTOM_NAMES=new Map;class Serializable{getClassName(){return this.constructor.className}static fromConfig(aa,xa){return new aa(xa)}}class SerializationMap{constructor(){this.classNameMap={}}static getMap(){return SerializationMap.instance==null&&(SerializationMap.instance=new SerializationMap),SerializationMap.instance}static register(aa){SerializationMap.getMap().classNameMap[aa.className]=[aa,aa.fromConfig]}}function registerClass(ha,aa,xa){assert(ha.className!=null,()=>"Class being registered does not have the static className property defined."),assert(typeof ha.className=="string",()=>"className is required to be a string, but got type "+typeof ha.className),assert(ha.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof aa>"u"&&(aa="Custom"),typeof xa>"u"&&(xa=ha.className);const ba=xa,Sa=aa+">"+ba;return SerializationMap.register(ha),GLOBAL_CUSTOM_OBJECT.set(Sa,ha),GLOBAL_CUSTOM_NAMES.set(ha,Sa),ha}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Optimizer extends Serializable{minimize(aa,xa=!1,ba){const{value:Sa,grads:Ta}=this.computeGradients(aa,ba);if(ba!=null){const wa=ba.map(Ea=>({name:Ea.name,tensor:Ta[Ea.name]}));this.applyGradients(wa)}else this.applyGradients(Ta);return dispose(Ta),xa?Sa:(Sa.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(aa,xa){return variableGrads(aa,xa)}dispose(){this.iterations_!=null&&dispose(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:scalar(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(aa){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(aa){return this.iterations_=(await aa[0].tensor.data())[0],aa.slice(1)}}Object.defineProperty(Optimizer,Symbol.hasInstance,{value:ha=>ha.minimize!=null&&ha.computeGradients!=null&&ha.applyGradients!=null});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdadeltaOptimizer extends Optimizer{static get className(){return"Adadelta"}constructor(aa,xa,ba=null){super(),this.learningRate=aa,this.rho=xa,this.epsilon=ba,this.accumulatedGrads=[],this.accumulatedUpdates=[],ba==null&&(this.epsilon=ENGINE.backend.epsilon())}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE.registeredVariables[ba],wa=!1;this.accumulatedGrads[Sa]==null&&(this.accumulatedGrads[Sa]={originalName:`${ba}/accum_grad`,variable:tidy(()=>zerosLike$1(Ta).variable(wa))}),this.accumulatedUpdates[Sa]==null&&(this.accumulatedUpdates[Sa]={originalName:`${ba}/accum_var`,variable:tidy(()=>zerosLike$1(Ta).variable(wa))});const Ea=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(Ea==null)return;const ka=this.accumulatedGrads[Sa].variable,Aa=this.accumulatedUpdates[Sa].variable;tidy(()=>{const Fa=add(mul(ka,this.rho),mul(square$1(Ea),1-this.rho)),La=mul(div(sqrt$1(add(Aa,this.epsilon)),sqrt$1(add(ka,this.epsilon))),Ea),el=add(mul(Aa,this.rho),mul(square$1(La),1-this.rho));ka.assign(Fa),Aa.assign(el);const tl=add(mul(La,-this.learningRate),Ta);Ta.assign(tl)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(dispose(this.accumulatedGrads.map(aa=>aa.variable)),dispose(this.accumulatedUpdates.map(aa=>aa.variable)))}async getWeights(){const aa=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(aa.map(xa=>({name:xa.originalName,tensor:xa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=aa.length/2,ba=!1;this.accumulatedGrads=aa.slice(0,xa).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.accumulatedUpdates=aa.slice(xa,xa*2).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.rho,xa.epsilon)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdagradOptimizer extends Optimizer{static get className(){return"Adagrad"}constructor(aa,xa=.1){super(),this.learningRate=aa,this.initialAccumulatorValue=xa,this.accumulatedGrads=[]}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE.registeredVariables[ba];this.accumulatedGrads[Sa]==null&&(this.accumulatedGrads[Sa]={originalName:`${ba}/accumulator`,variable:tidy(()=>fill$1(Ta.shape,this.initialAccumulatorValue).variable(!1))});const wa=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(wa==null)return;const Ea=this.accumulatedGrads[Sa].variable;tidy(()=>{const ka=add(Ea,square$1(wa));Ea.assign(ka);const Aa=add(mul(div(wa,sqrt$1(add(ka,ENGINE.backend.epsilon()))),-this.learningRate),Ta);Ta.assign(Aa)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&dispose(this.accumulatedGrads.map(aa=>aa.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(aa=>({name:aa.originalName,tensor:aa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=!1;this.accumulatedGrads=aa.map(ba=>({originalName:ba.name,variable:ba.tensor.variable(xa)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.initialAccumulatorValue)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdamOptimizer extends Optimizer{static get className(){return"Adam"}constructor(aa,xa,ba,Sa=null){super(),this.learningRate=aa,this.beta1=xa,this.beta2=ba,this.epsilon=Sa,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],tidy(()=>{this.accBeta1=scalar(xa).variable(),this.accBeta2=scalar(ba).variable()}),Sa==null&&(this.epsilon=ENGINE.backend.epsilon())}applyGradients(aa){const xa=Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa);tidy(()=>{const ba=sub$1(1,this.accBeta1),Sa=sub$1(1,this.accBeta2);xa.forEach((Ta,wa)=>{const Ea=ENGINE.registeredVariables[Ta],ka=!1;this.accumulatedFirstMoment[wa]==null&&(this.accumulatedFirstMoment[wa]={originalName:`${Ta}/m`,variable:tidy(()=>zerosLike$1(Ea).variable(ka))}),this.accumulatedSecondMoment[wa]==null&&(this.accumulatedSecondMoment[wa]={originalName:`${Ta}/v`,variable:tidy(()=>zerosLike$1(Ea).variable(ka))});const Aa=Array.isArray(aa)?aa[wa].tensor:aa[Ta];if(Aa==null)return;const Fa=this.accumulatedFirstMoment[wa].variable,La=this.accumulatedSecondMoment[wa].variable,el=add(mul(Fa,this.beta1),mul(Aa,1-this.beta1)),tl=add(mul(La,this.beta2),mul(square$1(Aa),1-this.beta2)),nl=div(el,ba),rl=div(tl,Sa);Fa.assign(el),La.assign(tl);const sl=add(mul(div(nl,add(sqrt$1(rl),this.epsilon)),-this.learningRate),Ea);Ea.assign(sl)}),this.accBeta1.assign(mul(this.accBeta1,this.beta1)),this.accBeta2.assign(mul(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&dispose(this.accumulatedFirstMoment.map(aa=>aa.variable)),this.accumulatedSecondMoment!=null&&dispose(this.accumulatedSecondMoment.map(aa=>aa.variable))}async getWeights(){const aa=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(aa.map(xa=>({name:xa.originalName,tensor:xa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa),tidy(()=>{this.accBeta1.assign(pow$1(this.beta1,this.iterations_+1)),this.accBeta2.assign(pow$1(this.beta2,this.iterations_+1))});const xa=aa.length/2,ba=!1;this.accumulatedFirstMoment=aa.slice(0,xa).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.accumulatedSecondMoment=aa.slice(xa,xa*2).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.beta1,xa.beta2,xa.epsilon)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AdamaxOptimizer extends Optimizer{static get className(){return"Adamax"}constructor(aa,xa,ba,Sa=null,Ta=0){super(),this.learningRate=aa,this.beta1=xa,this.beta2=ba,this.epsilon=Sa,this.decay=Ta,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],tidy(()=>{this.iteration=scalar(0).variable(),this.accBeta1=scalar(xa).variable()}),Sa==null&&(this.epsilon=ENGINE.backend.epsilon())}applyGradients(aa){const xa=Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa);tidy(()=>{const ba=sub$1(1,this.accBeta1),Sa=div(-this.learningRate,add(mul(this.iteration,this.decay),1));xa.forEach((Ta,wa)=>{const Ea=ENGINE.registeredVariables[Ta],ka=!1;this.accumulatedFirstMoment[wa]==null&&(this.accumulatedFirstMoment[wa]={originalName:`${Ta}/m`,variable:zerosLike$1(Ea).variable(ka)}),this.accumulatedWeightedInfNorm[wa]==null&&(this.accumulatedWeightedInfNorm[wa]={originalName:`${Ta}/v`,variable:zerosLike$1(Ea).variable(ka)});const Aa=Array.isArray(aa)?aa[wa].tensor:aa[Ta];if(Aa==null)return;const Fa=this.accumulatedFirstMoment[wa].variable,La=this.accumulatedWeightedInfNorm[wa].variable,el=add(mul(Fa,this.beta1),mul(Aa,1-this.beta1)),tl=mul(La,this.beta2),nl=abs$1(Aa),rl=maximum$1(tl,nl);Fa.assign(el),La.assign(rl);const sl=add(mul(div(Sa,ba),div(el,add(rl,this.epsilon))),Ea);Ea.assign(sl)}),this.iteration.assign(add(this.iteration,1)),this.accBeta1.assign(mul(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&dispose(this.accumulatedFirstMoment.map(aa=>aa.variable)),this.accumulatedWeightedInfNorm!=null&&dispose(this.accumulatedWeightedInfNorm.map(aa=>aa.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(aa){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.beta1,xa.beta2,xa.epsilon,xa.decay)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SGDOptimizer extends Optimizer{static get className(){return"SGD"}constructor(aa){super(),this.learningRate=aa,this.setLearningRate(aa)}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(Ta==null)return;const wa=ENGINE.registeredVariables[ba];tidy(()=>{const Ea=add(mul(this.c,Ta),wa);wa.assign(Ea)})}),this.incrementIterations()}setLearningRate(aa){this.learningRate=aa,this.c!=null&&this.c.dispose(),this.c=keep(scalar(-aa))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(aa){if(aa=await this.extractIterations(aa),aa.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(aa,xa){return new aa(xa.learningRate)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MomentumOptimizer extends SGDOptimizer{static get className(){return"Momentum"}constructor(aa,xa,ba=!1){super(aa),this.learningRate=aa,this.momentum=xa,this.useNesterov=ba,this.accumulations=[],this.m=scalar(this.momentum)}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE.registeredVariables[ba];this.accumulations[Sa]==null&&(this.accumulations[Sa]={originalName:`${ba}/momentum`,variable:tidy(()=>zerosLike$1(Ta).variable(!1))});const wa=this.accumulations[Sa].variable,Ea=Array.isArray(aa)?aa[Sa].tensor:aa[ba];Ea!=null&&tidy(()=>{let ka;const Aa=add(mul(this.m,wa),Ea);this.useNesterov?ka=add(mul(this.c,add(Ea,mul(Aa,this.m))),Ta):ka=add(mul(this.c,Aa),Ta),wa.assign(Aa),Ta.assign(ka)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&dispose(this.accumulations.map(aa=>aa.variable))}setMomentum(aa){this.momentum=aa}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(aa=>({name:aa.originalName,tensor:aa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=!1;this.accumulations=aa.map(ba=>({originalName:ba.name,variable:ba.tensor.variable(xa)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.momentum,xa.useNesterov)}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class RMSPropOptimizer extends Optimizer{static get className(){return"RMSProp"}constructor(aa,xa=.9,ba=0,Sa=null,Ta=!1){if(super(),this.learningRate=aa,this.decay=xa,this.momentum=ba,this.epsilon=Sa,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=Ta,Sa==null&&(this.epsilon=ENGINE.backend.epsilon()),aa==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(aa){(Array.isArray(aa)?aa.map(ba=>ba.name):Object.keys(aa)).forEach((ba,Sa)=>{const Ta=ENGINE.registeredVariables[ba],wa=!1;this.accumulatedMeanSquares[Sa]==null&&(this.accumulatedMeanSquares[Sa]={originalName:`${ba}/rms`,variable:tidy(()=>zerosLike$1(Ta).variable(wa))}),this.accumulatedMoments[Sa]==null&&(this.accumulatedMoments[Sa]={originalName:`${ba}/momentum`,variable:tidy(()=>zerosLike$1(Ta).variable(wa))}),this.accumulatedMeanGrads[Sa]==null&&this.centered&&(this.accumulatedMeanGrads[Sa]={originalName:`${ba}/mg`,variable:tidy(()=>zerosLike$1(Ta).variable(wa))});const Ea=Array.isArray(aa)?aa[Sa].tensor:aa[ba];if(Ea==null)return;const ka=this.accumulatedMeanSquares[Sa].variable,Aa=this.accumulatedMoments[Sa].variable;tidy(()=>{const Fa=add(mul(ka,this.decay),mul(square$1(Ea),1-this.decay));if(this.centered){const La=this.accumulatedMeanGrads[Sa].variable,el=add(mul(La,this.decay),mul(Ea,1-this.decay)),tl=div(mul(Ea,this.learningRate),sqrt$1(sub$1(Fa,add(square$1(el),this.epsilon)))),nl=add(mul(Aa,this.momentum),tl);ka.assign(Fa),La.assign(el),Aa.assign(nl);const rl=sub$1(Ta,nl);Ta.assign(rl)}else{const La=add(mul(ka,this.decay),mul(square$1(Ea),1-this.decay)),el=add(mul(Aa,this.momentum),div(mul(Ea,this.learningRate),sqrt$1(add(La,this.epsilon))));ka.assign(La),Aa.assign(el);const tl=sub$1(Ta,el);Ta.assign(tl)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&dispose(this.accumulatedMeanSquares.map(aa=>aa.variable)),this.accumulatedMeanGrads!=null&&this.centered&&dispose(this.accumulatedMeanGrads.map(aa=>aa.variable)),this.accumulatedMoments!=null&&dispose(this.accumulatedMoments.map(aa=>aa.variable))}async getWeights(){const aa=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&aa.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(aa.map(xa=>({name:xa.originalName,tensor:xa.variable})))}async setWeights(aa){aa=await this.extractIterations(aa);const xa=this.centered?aa.length/3:aa.length/2,ba=!1;this.accumulatedMeanSquares=aa.slice(0,xa).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.accumulatedMoments=aa.slice(xa,xa*2).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})),this.centered&&(this.accumulatedMeanGrads=aa.slice(xa*2,xa*3).map(Sa=>({originalName:Sa.name,variable:Sa.tensor.variable(ba)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(aa,xa){return new aa(xa.learningRate,xa.decay,xa.momentum,xa.epsilon,xa.centered)}}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OPTIMIZERS=[AdadeltaOptimizer,AdagradOptimizer,AdamOptimizer,AdamaxOptimizer,MomentumOptimizer,RMSPropOptimizer,SGDOptimizer];function registerOptimizers(){for(const ha of OPTIMIZERS)registerClass(ha)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DEFAULT_FILE_NAME_PREFIX="model",DEFAULT_JSON_EXTENSION_NAME=".json",DEFAULT_WEIGHT_DATA_EXTENSION_NAME=".weights.bin";function defer(ha){return new Promise(aa=>setTimeout(aa)).then(ha)}class BrowserDownloads{constructor(aa){if(!env().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");aa.startsWith(BrowserDownloads.URL_SCHEME)&&(aa=aa.slice(BrowserDownloads.URL_SCHEME.length)),(aa==null||aa.length===0)&&(aa=DEFAULT_FILE_NAME_PREFIX),this.modelJsonFileName=aa+DEFAULT_JSON_EXTENSION_NAME,this.weightDataFileName=aa+DEFAULT_WEIGHT_DATA_EXTENSION_NAME}async save(aa){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const xa=CompositeArrayBuffer.join(aa.weightData),ba=window.URL.createObjectURL(new Blob([xa],{type:"application/octet-stream"}));if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const Sa=[{paths:["./"+this.weightDataFileName],weights:aa.weightSpecs}],Ta=getModelJSONForModelArtifacts(aa,Sa),wa=window.URL.createObjectURL(new Blob([JSON.stringify(Ta)],{type:"application/json"})),Ea=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(Ea.download=this.modelJsonFileName,Ea.href=wa,await defer(()=>Ea.dispatchEvent(new MouseEvent("click"))),aa.weightData!=null){const ka=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;ka.download=this.weightDataFileName,ka.href=ba,await defer(()=>ka.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:getModelArtifactsInfoForJSON(aa)}}}}BrowserDownloads.URL_SCHEME="downloads://";const browserDownloadsRouter=ha=>env().getBool("IS_BROWSER")&&!Array.isArray(ha)&&ha.startsWith(BrowserDownloads.URL_SCHEME)?browserDownloads(ha.slice(BrowserDownloads.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(browserDownloadsRouter);function browserDownloads(ha="model"){return new BrowserDownloads(ha)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function monitorPromisesProgress(ha,aa,xa,ba){wa(ha),xa=xa??0,ba=ba??1,Ea(xa,ba);let Sa=0;const Ta=ka=>(ka.then(Aa=>{const Fa=xa+ ++Sa/ha.length*(ba-xa);return aa(Fa),Aa}),ka);function wa(ka){assert(ka!=null&&Array.isArray(ka)&&ka.length>0,()=>"promises must be a none empty array")}function Ea(ka,Aa){assert(ka>=0&&ka<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${ka}`),assert(Aa>=0&&Aa<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${Aa}`),assert(Aa>=ka,()=>`startFraction must be no more than endFraction, but got startFraction ${ka} and endFraction ${Aa}`)}return Promise.all(ha.map(Ta))}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */async function loadWeightsAsArrayBuffer$1(ha,aa){aa==null&&(aa={});const xa=aa.fetchFunc==null?env().platform.fetch:aa.fetchFunc,ba=ha.map(La=>xa(La,aa.requestInit,{isBinary:!0})),Ea=(aa.onProgress==null?await Promise.all(ba):await monitorPromisesProgress(ba,aa.onProgress,0,.5)).map(La=>La.arrayBuffer());return aa.onProgress==null?await Promise.all(Ea):await monitorPromisesProgress(Ea,aa.onProgress,.5,1)}function streamWeights(ha,aa){var xa;const ba=aa.fetchFunc==null?env().platform.fetch:aa.fetchFunc;let Sa=0,Ta;return(xa=aa.onProgress)===null||xa===void 0||xa.call(aa,0),new ReadableStream({pull:async wa=>{for(var Ea;Sa<ha.length;){Ta||(Ta=(await ba(ha[Sa],aa.requestInit,{isBinary:!0})).body.getReader());const{done:ka,value:Aa}=await Ta.read();if(ka){Sa++,Ta=void 0,(Ea=aa.onProgress)===null||Ea===void 0||Ea.call(aa,Sa/ha.length);continue}wa.enqueue(Aa);return}wa.close()}})}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const OCTET_STREAM_MIME_TYPE="application/octet-stream",JSON_TYPE="application/json";class HTTPRequest{constructor(aa,xa){if(this.DEFAULT_METHOD="POST",xa==null&&(xa={}),this.weightPathPrefix=xa.weightPathPrefix,this.weightUrlConverter=xa.weightUrlConverter,xa.fetchFunc!=null?(assert(typeof xa.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=xa.fetchFunc):this.fetch=env().platform.fetch,assert(aa!=null&&aa.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(aa)&&assert(aa.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${aa.length}).`),this.path=aa,xa.requestInit!=null&&xa.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=xa.requestInit||{},this.loadOptions=xa}async save(aa){if(aa.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const xa=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);xa.body=new FormData;const ba=[{paths:["./model.weights.bin"],weights:aa.weightSpecs}],Sa=getModelJSONForModelArtifacts(aa,ba);if(xa.body.append("model.json",new Blob([JSON.stringify(Sa)],{type:JSON_TYPE}),"model.json"),aa.weightData!=null){const wa=CompositeArrayBuffer.join(aa.weightData);xa.body.append("model.weights.bin",new Blob([wa],{type:OCTET_STREAM_MIME_TYPE}),"model.weights.bin")}const Ta=await this.fetch(this.path,xa);if(Ta.ok)return{modelArtifactsInfo:getModelArtifactsInfoForJSON(aa),responses:[Ta]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${Ta.status}.`)}async loadModelJSON(){const aa=await this.fetch(this.path,this.requestInit);if(!aa.ok)throw new Error(`Request to ${this.path} failed with status code ${aa.status}. Please verify this URL points to the model JSON of the model to load.`);let xa;try{xa=await aa.json()}catch{let wa=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?wa+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":wa+=" Please make sure the server is serving valid JSON for this request.",new Error(wa)}const ba=xa.modelTopology,Sa=xa.weightsManifest;if(ba==null&&Sa==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return xa}async load(){if(this.loadOptions.streamWeights)return this.loadStream();const aa=await this.loadModelJSON();return getModelArtifactsForJSON(aa,xa=>this.loadWeights(xa))}async loadStream(){const aa=await this.loadModelJSON(),xa=await this.getWeightUrls(aa.weightsManifest),ba=getWeightSpecs(aa.weightsManifest),Sa=()=>streamWeights(xa,this.loadOptions);return Object.assign(Object.assign({},aa),{weightSpecs:ba,getWeightStream:Sa})}async getWeightUrls(aa){const xa=Array.isArray(this.path)?this.path[1]:this.path,[ba,Sa]=parseUrl(xa),Ta=this.weightPathPrefix||ba,wa=[],Ea=[];for(const ka of aa)for(const Aa of ka.paths)this.weightUrlConverter!=null?Ea.push(this.weightUrlConverter(Aa)):wa.push(Ta+Aa+Sa);return this.weightUrlConverter&&wa.push(...await Promise.all(Ea)),wa}async loadWeights(aa){const xa=await this.getWeightUrls(aa),ba=getWeightSpecs(aa),Sa=await loadWeightsAsArrayBuffer$1(xa,this.loadOptions);return[ba,Sa]}}HTTPRequest.URL_SCHEME_REGEX=/^https?:\/\//;function parseUrl(ha){const aa=ha.lastIndexOf("/"),xa=ha.lastIndexOf("?"),ba=ha.substring(0,aa),Sa=xa>aa?ha.substring(xa):"";return[ba+"/",Sa]}function isHTTPScheme(ha){return ha.match(HTTPRequest.URL_SCHEME_REGEX)!=null}const httpRouter=(ha,aa)=>{if(typeof fetch>"u"&&(aa==null||aa.fetchFunc==null))return null;{let xa=!0;if(Array.isArray(ha)?xa=ha.every(ba=>isHTTPScheme(ba)):xa=isHTTPScheme(ha),xa)return http(ha,aa)}return null};IORouterRegistry.registerSaveRouter(httpRouter),IORouterRegistry.registerLoadRouter(httpRouter);function http(ha,aa){return new HTTPRequest(ha,aa)}function prepareAndValidate(ha,aa){const xa=ha.shape.length,ba=aa.shape.length;if(xa<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${xa}.`);if(ba<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${ba}.`);if(aa.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${aa.dtype}.`);if(aa.shape[ba-1]>xa)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${aa.shape[ba-1]} vs. ${xa}`);if(sizeFromShape(ha.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${ha.shape}.`);const Sa=aa.shape,Ta=Sa[Sa.length-1];let wa=1;for(let La=0;La<Sa.length-1;++La)wa*=Sa[La];const Ea=ha.shape,ka=Sa.slice();ka.pop();let Aa=1;for(let La=Ta;La<xa;++La)Aa*=Ea[La],ka.push(Ea[La]);const Fa=[...computeStrides(ha.shape).map(La=>La/Aa),1].slice(0,Ta);return[ka,wa,Aa,Fa]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEW_AXIS=-2,SHRINK_AXIS=-1;function assertParamsValid(ha,aa,xa){const ba=ha.shape.length;assert(ba===aa.length,()=>`Error in slice${ba}D: Length of begin ${aa} must match the rank of the array (${ba}).`),assert(ba===xa.length,()=>`Error in slice${ba}D: Length of size ${xa} must match the rank of the array (${ba}).`);for(let Sa=0;Sa<ba;++Sa)assert(aa[Sa]+xa[Sa]<=ha.shape[Sa],()=>`Error in slice${ba}D: begin[${Sa}] + size[${Sa}] (${aa[Sa]+xa[Sa]}) would overflow input.shape[${Sa}] (${ha.shape[Sa]})`)}function maskToAxes(ha){const aa=[];let xa=0;for(;ha>0;)ha&1&&aa.push(xa),ha/=2,xa++;return aa}function computeOutShape$2(ha,aa,xa){const ba=[];for(let Sa=0;Sa<ha.length;Sa++)ba[Sa]=Math.ceil((aa[Sa]-ha[Sa])/xa[Sa]);return ba}function stridesWithElidedDims(ha,aa,xa,ba){const Sa=[...ha];for(let Ta=Sa.length;Ta<ba.length;Ta++)Sa.push(1);for(let Ta=0;Ta<xa;Ta++)Ta===0?Sa[aa]=1:(Sa.splice(aa,0,1),Sa.pop());return Sa}function unnormalizeAxis(ha,aa,xa){return xa<=ha?xa:xa-(aa-1)}function getElidedAxes(ha,aa){const xa=[];for(let ba=0;ba<ha;ba++)xa.push(aa+ba);return xa}function getNormalizedAxes(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){const Aa=ha.length;let Fa=new Array(Aa),La=new Array(Aa),el=new Array(Aa);if(aa.length&&xa>0){const tl=aa[0],nl=xa+1;Fa=startIndicesWithElidedDims(wa,tl,nl,ba,ha),La=stopIndicesWithElidedDims(Ea,tl,nl,Sa,ha),el=stridesWithElidedDims(Ta,tl,nl,ha)}else for(let tl=0;tl<Aa;tl++)Fa[tl]=startForAxis(wa,ba,Ta,ha,tl,ka),La[tl]=stopForAxis(Ea,Sa,Ta,ha,tl,ka),el[tl]=stridesForAxis(Ta,tl,ka);return{begin:Fa,end:La,strides:el}}function startIndicesWithElidedDims(ha,aa,xa,ba,Sa){const Ta=[...Sa],wa=getElidedAxes(xa,aa);for(let Ea=0;Ea<Ta.length;Ea++)if(wa.indexOf(Ea)>-1)Ta[Ea]=0;else{const ka=unnormalizeAxis(aa,xa,Ea);let Aa=ba[ka];ha&1<<ka&&(Aa=0),Ta[Ea]=Aa}return Ta}function stopIndicesWithElidedDims(ha,aa,xa,ba,Sa){const Ta=[...Sa],wa=getElidedAxes(xa,aa);for(let Ea=0;Ea<Ta.length;Ea++)if(wa.indexOf(Ea)>-1)Ta[Ea]=Number.MAX_SAFE_INTEGER;else{const ka=unnormalizeAxis(aa,xa,Ea);let Aa=ba[ka];ha&1<<ka&&(Aa=Number.MAX_SAFE_INTEGER),Ta[Ea]=Aa}for(let Ea=0;Ea<Ta.length;Ea++){const ka=Sa[Ea];Ta[Ea]<0&&(Ta[Ea]+=ka),Ta[Ea]=clamp(0,Ta[Ea],Sa[Ea])}return Ta}function stridesForAxis(ha,aa,xa){let ba=ha[aa];return(xa&1<<aa||ba==null)&&(ba=1),ba}function startForAxis(ha,aa,xa,ba,Sa,Ta){let wa=aa[Sa];const Ea=xa[Sa]||1;(ha&1<<Sa||Ta&1<<Sa||wa==null)&&(Ea>0?wa=Number.MIN_SAFE_INTEGER:wa=Number.MAX_SAFE_INTEGER);const ka=ba[Sa];return wa<0&&(wa+=ka),wa=clamp(0,wa,ka-1),wa}function stopForAxis(ha,aa,xa,ba,Sa,Ta){let wa=aa[Sa];const Ea=xa[Sa]||1;(ha&1<<Sa||Ta&1<<Sa||wa==null)&&(Ea>0?wa=Number.MAX_SAFE_INTEGER:wa=Number.MIN_SAFE_INTEGER);const ka=ba[Sa];return wa<0&&(wa+=ka),Ea>0?wa=clamp(0,wa,ka):wa=clamp(-1,wa,ka-1),wa}function isSliceContinous(ha,aa,xa){let ba=xa.length;for(let Sa=0;Sa<xa.length;Sa++)if(xa[Sa]>1){ba=Sa;break}for(let Sa=ba+1;Sa<xa.length;Sa++)if(aa[Sa]>0||xa[Sa]!==ha[Sa])return!1;return!0}function computeFlatOffset(ha,aa){let xa=ha.length>0?ha[ha.length-1]:1;for(let ba=0;ba<ha.length-1;ba++)xa+=ha[ba]*aa[ba];return xa}function parseSliceParams(ha,aa,xa){let ba;const Sa=ha.shape.length;typeof aa=="number"?ba=[aa,...new Array(Sa-1).fill(0)]:aa.length<Sa?ba=aa.concat(new Array(Sa-aa.length).fill(0)):ba=aa.slice(),ba.forEach(wa=>{assert(wa!==-1,()=>"slice() does not support negative begin indexing.")});let Ta;return xa==null?Ta=new Array(Sa).fill(-1):typeof xa=="number"?Ta=[xa,...new Array(Sa-1).fill(-1)]:xa.length<Sa?Ta=xa.concat(new Array(Sa-xa.length).fill(-1)):Ta=xa,Ta=Ta.map((wa,Ea)=>wa>=0?wa:(assert(wa===-1,()=>`Negative size values should be exactly -1 but got ${wa} for the slice() size at index ${Ea}.`),ha.shape[Ea]-ba[Ea])),[ba,Ta]}function sliceInfo(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){let Aa;if(ba==null?(Aa=new Array(aa.length),Aa.fill(1)):Aa=ba,wa!=null&&wa&wa-1)throw new Error("Multiple ellipses in slice is not allowed.");let Fa=!1;const La={dims:Aa.length,numAddAxisAfterEllipsis:0,begin:aa.slice(),end:xa.slice(),strides:Aa.slice(),beginMask:Sa,endMask:Ta,ellipsisMask:wa,newAxisMask:Ea,shrinkAxisMask:ka};for(let ll=0;ll<La.dims;ll++)Fa&&1<<ll&Ea&&La.numAddAxisAfterEllipsis++,1<<ll&wa&&(Fa=!0);Fa||(La.ellipsisMask|=1<<La.dims,La.dims++);const el={dims:ha.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};buildDenseSpec(La,el);let tl=!0,nl=!0,rl=!0;const sl=[],ol=[];for(let ll=0;ll<ha.length;++ll){if(el.strides[ll]===0)throw Error(`strides[${ll}] must be non-zero`);const il=!!(el.shrinkAxisMask&1<<ll),cl=ha[ll];if(cl===-1){sl.push(il?1:-1);continue}const ul=[el.beginMask&1<<ll,el.endMask&1<<ll],dl=[el.strides[ll]>0?0:-1,el.strides[ll]>0?cl:cl-1];if(il&&el.strides[ll]<=0)throw Error("only stride 1 allowed on non-range indexing.");rl=rl&&el.strides[ll]===1;const hl=!!(el.beginMask&1<<ll&&el.endMask&1<<ll);if(el.beginValid&&el.endValid){if(il){const gl=el.begin[ll]<0?cl+el.begin[ll]:el.begin[ll];if(el.begin[ll]=gl,el.end[ll]=el.begin[ll]+1,gl<0||gl>=cl)throw Error(`slice index ${el.begin[ll]} of dimension ${ll} out of bounds.`)}else el.begin[ll]=canonical(el.begin[ll],0,el.strides[ll],cl,ul,dl),el.end[ll]=canonical(el.end[ll],1,el.strides[ll],cl,ul,dl);const ml=el.strides[ll]===1&&el.begin[ll]===0&&el.end[ll]===cl;tl=tl&&ml,nl=nl&&(ll===0&&el.strides[ll]===1||ml)}else tl=tl&&el.strides[ll]===1&&hl,nl=nl&&(ll===0&&el.strides[ll]===1||hl);let pl,fl=!1;if(el.beginValid&&el.endValid?(pl=el.end[ll]-el.begin[ll],fl=!0):il?(pl=1,fl=!0):hl&&cl>=0&&(el.strides[ll]<0?pl=-cl:pl=cl,fl=!0),fl){let ml;pl===0||pl<0!=el.strides[ll]<0?ml=0:ml=Math.trunc(pl/el.strides[ll])+(pl%el.strides[ll]!==0?1:0),sl.push(ml)}else sl.push(-1)}for(let ll=0;ll<el.finalShapeGatherIndices.length;++ll){const il=el.finalShapeGatherIndices[ll];il>=0?ol.push(sl[il]):il===NEW_AXIS&&ol.push(1)}return{finalShapeSparse:ol.filter((ll,il)=>el.finalShapeGatherIndices[il]!==NEW_AXIS),finalShape:ol,isIdentity:tl,sliceDim0:nl,isSimpleSlice:rl,begin:el.begin,end:el.end,strides:el.strides}}function buildDenseSpec(ha,aa){aa.beginMask=0,aa.endMask=0,aa.shrinkAxisMask=0;let xa=0;aa.beginValid=ha.begin!=null,aa.endValid=ha.end!=null,aa.begin=new Array(aa.dims),aa.end=new Array(aa.dims),aa.strides=new Array(aa.dims),aa.finalShapeGatherIndices=[],aa.finalShapeGatherIndicesSparse=[],aa.inputShapeGatherIndicesSparse=new Array(aa.dims);for(let ba=0;ba<ha.dims;ba++)if(1<<ba&ha.ellipsisMask){const Sa=Math.min(aa.dims-(ha.dims-ba)+1+ha.numAddAxisAfterEllipsis,aa.dims);for(;xa<Sa;xa++)aa.begin[xa]=0,aa.end[xa]=0,aa.strides[xa]=1,aa.beginMask|=1<<xa,aa.endMask|=1<<xa,aa.finalShapeGatherIndices.push(xa),aa.finalShapeGatherIndicesSparse.push(-1),aa.inputShapeGatherIndicesSparse[xa]=ba}else if(1<<ba&ha.newAxisMask)aa.finalShapeGatherIndices.push(NEW_AXIS),aa.finalShapeGatherIndicesSparse.push(-1);else{if(xa===aa.begin.length)throw Error(`Index out of range using input dim ${xa}; input has only ${aa.dims} dims, ${aa.begin.length}.`);ha.begin!=null&&(aa.begin[xa]=ha.begin[ba]),ha.end!=null&&(aa.end[xa]=ha.end[ba]),aa.strides[xa]=ha.strides[ba],ha.beginMask&1<<ba&&(aa.beginMask|=1<<xa),ha.endMask&1<<ba&&(aa.endMask|=1<<xa),ha.shrinkAxisMask&1<<ba?(aa.finalShapeGatherIndices.push(SHRINK_AXIS),aa.finalShapeGatherIndicesSparse.push(-1),aa.shrinkAxisMask|=1<<xa):(aa.finalShapeGatherIndices.push(xa),aa.finalShapeGatherIndicesSparse.push(ba)),aa.inputShapeGatherIndicesSparse[xa]=ba,xa++}}function canonical(ha,aa,xa,ba,Sa,Ta){if(Sa[aa])return xa>0?Ta[aa]:Ta[aa+1&1];{const wa=ha<0?ba+ha:ha;return wa<Ta[0]?Ta[0]:wa>Ta[1]?Ta[1]:wa}}var slice_util=Object.freeze({__proto__:null,assertParamsValid,computeFlatOffset,computeOutShape:computeOutShape$2,getNormalizedAxes,isSliceContinous,maskToAxes,parseSliceParams,sliceInfo,startForAxis,startIndicesWithElidedDims,stopForAxis,stopIndicesWithElidedDims,stridesForAxis,stridesWithElidedDims});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const delayCallback=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:ha=>ha();function nextFrame(){return new Promise(ha=>delayCallback(()=>ha()))}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function assertParamsConsistent(ha,aa){const xa=ha[0].length;ha.forEach((Sa,Ta)=>{assert(Sa.length===xa,()=>`Error in concat${xa}D: rank of tensors[${Ta}] must be the same as the rank of the rest (${xa})`)}),assert(aa>=0&&aa<xa,()=>`Error in concat${xa}D: axis must be between 0 and ${xa-1}.`);const ba=ha[0];ha.forEach((Sa,Ta)=>{for(let wa=0;wa<xa;wa++)assert(wa===aa||Sa[wa]===ba[wa],()=>`Error in concat${xa}D: Shape of tensors[${Ta}] (${Sa}) does not match the shape of the rest (${ba}) along the non-concatenated axis ${Ta}.`)})}function computeOutShape$1(ha,aa){const xa=ha[0].slice();for(let ba=1;ba<ha.length;ba++)xa[aa]+=ha[ba][aa];return xa}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType$1;(function(ha){ha[ha.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",ha[ha.VALUE_ROWIDS=1]="VALUE_ROWIDS",ha[ha.ROW_LENGTHS=2]="ROW_LENGTHS",ha[ha.ROW_SPLITS=3]="ROW_SPLITS",ha[ha.ROW_LIMITS=4]="ROW_LIMITS",ha[ha.ROW_STARTS=5]="ROW_STARTS"})(RowPartitionType$1||(RowPartitionType$1={}));function combineRaggedTensorToTensorShapes(ha,aa,xa){let ba=new Array;if(xa==null&&aa==null)return ba;if(aa==null)for(;ba.length<ha+xa.length;)ba.push(-1);else ba=aa.slice();if(xa==null)return ba;if(ha+xa.length!==ba.length)throw new Error(`rt input.shape and shape=${aa} are incompatible: rt input.rank = ${ha+xa.length}, but shape.rank = ${ba.length}`);for(let Sa=1;Sa<xa.length;++Sa){const Ta=xa[Sa],wa=ba[ba.length-xa.length+Sa],Ea=ba[wa];if(Ta>=0)if(Ea>=0){if(Ea!==Ta)throw new Error(`rt input.shape and shape=${aa} are incompatible: rt input.shape[${Sa+ha}] = ${Ta} but shape[${Sa+ha}] = ${Ea}`)}else ba[wa]=Ta}return ba}function getRowPartitionTypesHelper(ha){const aa={FIRST_DIM_SIZE:RowPartitionType$1.FIRST_DIM_SIZE,VALUE_ROWIDS:RowPartitionType$1.VALUE_ROWIDS,ROW_LENGTHS:RowPartitionType$1.ROW_LENGTHS,ROW_SPLITS:RowPartitionType$1.ROW_SPLITS,ROW_LIMITS:RowPartitionType$1.ROW_LIMITS,ROW_STARTS:RowPartitionType$1.ROW_STARTS},xa=[];for(const ba of ha)if(ba in aa)xa.push(aa[ba]);else break;return xa}function getRaggedRank(ha){return ha.length===0?0:ha[0]===RowPartitionType$1.FIRST_DIM_SIZE?ha.length-1:ha.length}function validateDefaultValueShape(ha,aa){if(ha==null||aa==null)return;const xa=ha.length,ba=aa.length;if(xa>=ba)throw new Error(`defaultValue.shape=${ha} and ragged tensor flatValues.shape=${aa}, are incompatible: defaultValue.rank = ${xa} must be less than ragged tensor input flatValues.rank = ${ba})`);for(let Sa=0;Sa<Math.min(xa,ba-1);++Sa){const Ta=ha[Sa],wa=aa[Sa+1];if(Ta>=0&&wa>=0&&Ta!==1&&Ta!==wa)throw new Error(`defaultValue.shape=${ha}, and ragged tensor input flatValues.shape=${aa} are incompatible: defaultValue.shape[${Sa-ha.length}] = ${Ta} but ragged tensor input.flatValues.shape[${Sa-ha.length}] = ${wa}`)}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PARALLELIZE_THRESHOLD=30;function computeOptimalWindowSize(ha){return ha<=PARALLELIZE_THRESHOLD?ha:nearestDivisor(ha,Math.floor(Math.sqrt(ha)))}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getImageCenter(ha,aa,xa){const ba=xa*(typeof ha=="number"?ha:ha[0]),Sa=aa*(typeof ha=="number"?ha:ha[1]);return[ba,Sa]}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReshaped(ha,aa,xa,ba=!0){let Sa=[];if(ba)Sa=Sa.concat(aa.slice(0)),Sa.push(ha[0]/xa),Sa=Sa.concat(ha.slice(1));else{Sa=Sa.concat(ha[0]);const Ta=aa.length;for(let wa=0;wa<Ta;++wa)Sa=Sa.concat([ha[wa+1]/aa[wa],aa[wa]]);Sa=Sa.concat(ha.slice(Ta+1))}return Sa}function getPermuted(ha,aa,xa=!0){const ba=[];if(xa){ba.push(aa);for(let Sa=aa+1;Sa<ha;++Sa)Sa<=2*aa?(ba.push(Sa),ba.push(Sa-(aa+1))):ba.push(Sa)}else{const Sa=[],Ta=[];for(let wa=1;wa<ha;++wa)wa>=aa*2+1||wa%2===1?Ta.push(wa):Sa.push(wa);ba.push(...Sa),ba.push(0),ba.push(...Ta)}return ba}function getReshapedPermuted(ha,aa,xa,ba=!0){const Sa=[];ba?Sa.push(ha[0]/xa):Sa.push(ha[0]*xa);for(let Ta=1;Ta<ha.length;++Ta)Ta<=aa.length?ba?Sa.push(aa[Ta-1]*ha[Ta]):Sa.push(ha[Ta]/aa[Ta-1]):Sa.push(ha[Ta]);return Sa}function getSliceBeginCoords(ha,aa){const xa=[0];for(let ba=0;ba<aa;++ba)xa.push(ha[ba][0]);return xa}function getSliceSize(ha,aa,xa){const ba=ha.slice(0,1);for(let Sa=0;Sa<xa;++Sa)ba.push(ha[Sa+1]-aa[Sa][0]-aa[Sa][1]);return ba}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU_SCALEALPHA=1.7580993408473768,SELU_SCALE=1.0507009873554805;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF_P=.3275911,ERF_A1=.254829592,ERF_A2=-.284496736,ERF_A3=1.421413741,ERF_A4=-1.453152027,ERF_A5=1.061405429;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function mergeRealAndImagArrays(ha,aa){if(ha.length!==aa.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${ha.length}, imag: ${aa.length}.`);const xa=new Float32Array(ha.length*2);for(let ba=0;ba<xa.length;ba+=2)xa[ba]=ha[ba/2],xa[ba+1]=aa[ba/2];return xa}function splitRealAndImagArrays(ha){const aa=new Float32Array(ha.length/2),xa=new Float32Array(ha.length/2);for(let ba=0;ba<ha.length;ba+=2)aa[ba/2]=ha[ba],xa[ba/2]=ha[ba+1];return{real:aa,imag:xa}}function complexWithEvenIndex(ha){const aa=Math.ceil(ha.length/4),xa=new Float32Array(aa),ba=new Float32Array(aa);for(let Sa=0;Sa<ha.length;Sa+=4)xa[Math.floor(Sa/4)]=ha[Sa],ba[Math.floor(Sa/4)]=ha[Sa+1];return{real:xa,imag:ba}}function complexWithOddIndex(ha){const aa=Math.floor(ha.length/4),xa=new Float32Array(aa),ba=new Float32Array(aa);for(let Sa=2;Sa<ha.length;Sa+=4)xa[Math.floor(Sa/4)]=ha[Sa],ba[Math.floor(Sa/4)]=ha[Sa+1];return{real:xa,imag:ba}}function getComplexWithIndex(ha,aa){const xa=ha[aa*2],ba=ha[aa*2+1];return{real:xa,imag:ba}}function assignToTypedArray(ha,aa,xa,ba){ha[ba*2]=aa,ha[ba*2+1]=xa}function exponents(ha,aa){const xa=new Float32Array(ha/2),ba=new Float32Array(ha/2);for(let Sa=0;Sa<Math.ceil(ha/2);Sa++){const Ta=(aa?2:-2)*Math.PI*(Sa/ha);xa[Sa]=Math.cos(Ta),ba[Sa]=Math.sin(Ta)}return{real:xa,imag:ba}}function exponent(ha,aa,xa){const ba=(xa?2:-2)*Math.PI*(ha/aa),Sa=Math.cos(ba),Ta=Math.sin(ba);return{real:Sa,imag:Ta}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ARROW="->",ARROW_REGEX=/->/g,COMMA=",",ELLIPSIS="...";function decodeEinsumEquation(ha,aa){ha=ha.replace(/\s/g,"");const xa=(ha.length-ha.replace(ARROW_REGEX,"").length)/ARROW.length;if(xa<1)throw new Error("Equations without an arrow are not supported.");if(xa>1)throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);const[ba,Sa]=ha.split(ARROW);assert(ba.indexOf(ELLIPSIS)===-1,()=>`The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);const Ta=ba.split(COMMA),wa=Ta.length;if(aa!==wa)throw new Error(`Expected ${wa} input tensors, received ${aa}`);if(wa>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const Ea=[];for(let el=0;el<Sa.length;++el){const tl=Sa[el];if(!Ta.some(nl=>nl.indexOf(tl)!==-1))throw new Error(`Output subscripts contain the label ${tl} not present in the input subscripts.`);Ea.indexOf(tl)===-1&&Ea.push(tl)}for(let el=0;el<ba.length;++el){const tl=ba[el];Ea.indexOf(tl)===-1&&tl!==COMMA&&Ea.push(tl)}const ka=new Array(Ta.length);for(let el=0;el<wa;++el){if(new Set(Ta[el].split("")).size!==Ta[el].length)throw new Error(`Found duplicate axes in input component ${Ta[el]}. Support for duplicate axes in input is not implemented yet.`);ka[el]=[];for(let tl=0;tl<Ta[el].length;++tl)ka[el].push(Ea.indexOf(Ta[el][tl]))}const Aa=Ea.length,Fa=Sa.length,La=[];for(let el=Fa;el<Aa;++el)La.push(el);return{allDims:Ea,summedDims:La,idDims:ka}}function getEinsumPermutation(ha,aa){let xa=new Array(ha);xa.fill(-1);for(let Sa=0;Sa<aa.length;++Sa)xa[aa[Sa]]=Sa;const ba=[];for(let Sa=0;Sa<ha;++Sa)xa[Sa]===-1&&ba.push(Sa);return xa=xa.filter(Sa=>Sa!==-1),{permutationIndices:xa,expandDims:ba}}function checkEinsumDimSizes(ha,aa,xa){const ba=new Array(ha);for(let Sa=0;Sa<xa.length;++Sa){const Ta=xa[Sa].shape;for(let wa=0;wa<aa[Sa].length;++wa)ba[aa[Sa][wa]]===void 0?ba[aa[Sa][wa]]=Ta[wa]:assert(ba[aa[Sa][wa]]===Ta[wa],()=>`Expected dimension ${ba[aa[Sa][wa]]} at axis ${wa} of input shaped ${JSON.stringify(Ta)}, but got dimension ${Ta[wa]}`)}}function getEinsumComputePath(ha,aa){const xa=ha,ba=[];let Sa=0;ha.length===0&&xa.push(-1),Sa=ha.length+1;for(let wa=0;wa<Sa;++wa)ba.push([]);const Ta=[];for(let wa=0;wa<xa.length;++wa){const Ea=xa[wa],ka=findTermsWithDim(aa,Ea);for(const Aa of ka)Ta.indexOf(Aa)===-1&&(ba[wa].push(Aa),Ta.push(Aa))}return{path:xa,steps:ba}}function isIdentityPermutation(ha){return ha.every((aa,xa)=>aa===xa)}function findTermsWithDim(ha,aa){const xa=[];for(let ba=0;ba<ha.length;++ba)(ha[ba].length===0||ha[ba].indexOf(aa)!==-1||aa===-1)&&xa.push(ba);return xa}function prepareSplitSize(ha,aa,xa=0){let ba=[];if(typeof aa=="number")assert(ha.shape[xa]%aa===0,()=>"Number of splits must evenly divide the axis."),ba=new Array(aa).fill(ha.shape[xa]/aa);else{const Sa=aa.reduce((wa,Ea)=>(Ea===-1&&(wa+=1),wa),0);assert(Sa<=1,()=>"There should be only one negative value in split array.");const Ta=aa.indexOf(-1);if(Ta!==-1){const wa=aa.reduce((Ea,ka)=>ka>0?Ea+ka:Ea);aa[Ta]=ha.shape[xa]-wa}assert(ha.shape[xa]===aa.reduce((wa,Ea)=>wa+Ea),()=>"The sum of sizes must match the size of the axis dimension."),ba=aa}return ba}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseFillEmptyRowsIndicesDenseShapeMismatch(ha){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${ha}`}function getSparseFillEmptyRowsNegativeIndexErrorMessage(ha,aa){return`indices(${ha}, 0) is invalid: ${aa} < 0`}function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(ha,aa,xa){return`indices(${ha}, 0) is invalid: ${aa} >= ${xa}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(ha,aa){return`only one output dimension may be -1, not both ${ha} and ${aa}`}function getSparseReshapeNegativeOutputDimErrorMessage(ha,aa){return`size ${ha} must be non-negative, not ${aa}`}function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function getSparseReshapeInputOutputMultipleErrorMessage(ha,aa){const xa=sizeFromShape(ha),ba=sizeFromShape(aa);return`Input to reshape is a SparseTensor with ${xa}
  dense values, but the requested shape requires a multiple of ${ba}. inputShape=${ha} outputShape= ${aa}`}function getSparseReshapeInputOutputMismatchErrorMessage(ha,aa){const xa=sizeFromShape(ha),ba=sizeFromShape(aa);return`Input to reshape is a tensor with ${xa} dense values, but the requested shape has ${ba}. inputShape=${ha} outputShape=${aa}`}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getSparseSegmentReductionNegativeSegmentIdsErrorMessage(){return"segment ids must be >= 0"}function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage(){return"segment ids are not increasing"}function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(ha,aa){return`Segment id ${ha} out of range [0, ${aa}), possibly because segmentIds input is not sorted.`}function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(ha,aa,xa){return`Bad: indices[${ha}] == ${aa} out of range [0, ${xa})`}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function segOpComputeOptimalWindowSize(ha,aa){let xa=!1,ba;for(ha<=PARALLELIZE_THRESHOLD?(ba=ha,xa=!0):ba=nearestDivisor(ha,Math.floor(Math.sqrt(ha)));!xa;)ba>aa||ba===ha?xa=!0:ba=nearestDivisor(ha,ba+1);return ba}function computeOutShape(ha,aa,xa){const ba=[],Sa=ha.length;for(let Ta=0;Ta<Sa;Ta++)Ta!==aa?ba.push(ha[Ta]):ba.push(xa);return ba}function collectGatherOpShapeInfo(ha,aa,xa,ba){const Sa=aa.shape.length,Ta=ha.shape.length;if(ba!==0&&(ba<-Sa||ba>Sa))throw new Error(`Expect batchDims in the range of [-${Sa}, ${Sa}], but got ${ba}`);if(ba<0&&(ba+=Sa),ba>Ta)throw new Error(`batchDims (${ba}) must be less than rank(x) (
    ${Ta}).`);if(xa<ba)throw new Error(`batchDims (${ba}) must be less than or equal to axis (${xa}).`);for(let La=0;La<ba;++La)if(ha.shape[La]!==aa.shape[La])throw new Error(`x.shape[${La}]: ${ha.shape[La]} should be equal to indices.shape[${La}]: ${aa.shape[La]}.`);const wa=ha.shape[xa],Ea=[];let ka=1,Aa=1,Fa=1;for(let La=0;La<ba;++La)Ea.push(ha.shape[La]),ka*=ha.shape[La];for(let La=ba;La<xa;La++)Ea.push(ha.shape[La]),Aa*=ha.shape[La];for(let La=ba;La<Sa;La++)Ea.push(aa.shape[La]);for(let La=xa+1;La<Ta;La++)Ea.push(ha.shape[La]),Fa*=ha.shape[La];return{batchSize:ka,sliceSize:Fa,outerSize:Aa,dimSize:wa,outputShape:Ea}}var segment_util=Object.freeze({__proto__:null,collectGatherOpShapeInfo,computeOutShape,segOpComputeOptimalWindowSize});/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fromUint8ToStringArray(ha){try{return ha.map(aa=>decodeString(aa))}catch(aa){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${aa}`)}}function fromStringArrayToUint8(ha){return ha.map(aa=>encodeString(aa))}var backend_util=Object.freeze({__proto__:null,ERF_A1,ERF_A2,ERF_A3,ERF_A4,ERF_A5,ERF_P,PARALLELIZE_THRESHOLD,get RowPartitionType(){return RowPartitionType$1},SELU_SCALE,SELU_SCALEALPHA,applyActivation,assertAndGetBroadcastShape,assertAxesAreInnerMostDims,assertParamsConsistent,assignToTypedArray,axesAreInnerMostDims,calculateShapes,checkEinsumDimSizes,checkPadOnDimRoundingMode,combineLocations,combineRaggedTensorToTensorShapes,complexWithEvenIndex,complexWithOddIndex,computeConv2DInfo,computeConv3DInfo,computeDefaultPad,computeDilation2DInfo,computeOptimalWindowSize,computeOutAndReduceShapes,computeOutShape:computeOutShape$1,computePool2DInfo,computePool3DInfo,convertConv2DDataFormat,decodeEinsumEquation,eitherStridesOrDilationsAreOne,expandShapeToKeepDim,exponent,exponents,fromStringArrayToUint8,fromUint8ToStringArray,getAxesPermutation,getBroadcastDims:getBroadcastDims$1,getComplexWithIndex,getEinsumComputePath,getEinsumPermutation,getFusedBiasGradient,getFusedDyActivation,getImageCenter,getInnerMostAxes,getPermuted,getRaggedRank,getReductionAxes,getReshaped,getReshapedPermuted,getRowPartitionTypesHelper,getSliceBeginCoords,getSliceSize,getSparseFillEmptyRowsIndicesDenseShapeMismatch,getSparseFillEmptyRowsNegativeIndexErrorMessage,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage,getSparseReshapeInputOutputMismatchErrorMessage,getSparseReshapeInputOutputMultipleErrorMessage,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage,getSparseReshapeNegativeOutputDimErrorMessage,getSparseSegmentReductionIndicesOutOfRangeErrorMessage,getSparseSegmentReductionNegativeSegmentIdsErrorMessage,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage,getUndoAxesPermutation,isIdentityPermutation,log:log$1,mergeRealAndImagArrays,prepareAndValidate,prepareSplitSize,segment_util,shouldFuse,slice_util,splitRealAndImagArrays,stridesOrDilationsArePositive,tupleValuesAreOne,upcastType,validateDefaultValueShape,validateInput,validateUpdateShape,warn});/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */registerOptimizers();/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const contexts={},WEBGL_ATTRIBUTES={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function setWebGLContext(ha,aa){contexts[ha]=aa}function getWebGLContext(ha,aa){if(!(ha in contexts)||aa!=null){const ba=getWebGLRenderingContext(ha,aa);if(ba!==null)contexts[ha]=ba;else return console.log("Could not get context for WebGL version",ha),null}const xa=contexts[ha];return xa==null||xa.isContextLost()?(delete contexts[ha],getWebGLContext(ha)):(xa.disable(xa.DEPTH_TEST),xa.disable(xa.STENCIL_TEST),xa.disable(xa.BLEND),xa.disable(xa.DITHER),xa.disable(xa.POLYGON_OFFSET_FILL),xa.disable(xa.SAMPLE_COVERAGE),xa.enable(xa.SCISSOR_TEST),xa.enable(xa.CULL_FACE),xa.cullFace(xa.BACK),contexts[ha])}function createCanvas(ha){if(!env().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&ha===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function getWebGLRenderingContext(ha,aa){if(ha!==1&&ha!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const xa=aa??createCanvas(ha);return xa.addEventListener("webglcontextlost",ba=>{ba.preventDefault(),delete contexts[ha]},!1),env().getBool("SOFTWARE_WEBGL_ENABLED")&&(WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat=!1),ha===1?xa.getContext("webgl",WEBGL_ATTRIBUTES)||xa.getContext("experimental-webgl",WEBGL_ATTRIBUTES):xa.getContext("webgl2",WEBGL_ATTRIBUTES)}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var PackingScheme;(function(ha){ha[ha.DENSE=0]="DENSE",ha[ha.SHARED_BATCH=1]="SHARED_BATCH"})(PackingScheme||(PackingScheme={}));var TextureUsage;(function(ha){ha[ha.RENDER=0]="RENDER",ha[ha.UPLOAD=1]="UPLOAD",ha[ha.PIXELS=2]="PIXELS",ha[ha.DOWNLOAD=3]="DOWNLOAD"})(TextureUsage||(TextureUsage={}));var PhysicalTextureType;(function(ha){ha[ha.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",ha[ha.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",ha[ha.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",ha[ha.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",ha[ha.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(PhysicalTextureType||(PhysicalTextureType={}));function getUnpackedMatrixTextureShapeWidthHeight(ha,aa){return[aa,ha]}function getUnpackedArraySizeFromMatrixSize(ha,aa){return ha*aa}function getDenseTexShape(ha){const aa=sizeFromShape(ha),xa=Math.ceil(aa/4);return sizeToSquarishShape(xa)}function getPackedMatrixTextureShapeWidthHeight(ha,aa){return[Math.max(1,Math.ceil(aa/2)),Math.max(1,Math.ceil(ha/2))]}function getPackedRGBAArraySizeFromMatrixShape(ha,aa){const[xa,ba]=getPackedMatrixTextureShapeWidthHeight(ha,aa);return xa*ba*4}function getTextureConfig(ha,aa){const xa=ha;let ba,Sa,Ta,wa,Ea,ka,Aa,Fa,La,el;return env().getNumber("WEBGL_VERSION")===2?(ba=xa.R32F,Sa=xa.R16F,Ta=xa.RGBA16F,wa=xa.RGBA32F,Ea=xa.RED,Aa=4,Fa=1,La=xa.HALF_FLOAT,el=xa.FLOAT,ka=xa.RGBA8):(ba=ha.RGBA,Sa=ha.RGBA,Ta=ha.RGBA,wa=xa.RGBA,Ea=ha.RGBA,Aa=4,Fa=4,La=aa!=null?aa.HALF_FLOAT_OES:null,el=ha.FLOAT,ka=ha.RGBA),{internalFormatFloat:ba,internalFormatHalfFloat:Sa,internalFormatPackedHalfFloat:Ta,internalFormatPackedFloat:wa,textureFormatFloat:Ea,downloadTextureFormat:ka,downloadUnpackNumChannels:Aa,defaultNumChannels:Fa,textureTypeHalfFloat:La,textureTypeFloat:el}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function callAndCheck(ha,aa){const xa=aa();return env().getBool("DEBUG")&&checkWebGLError(ha),xa}function checkWebGLError(ha){const aa=ha.getError();if(aa!==ha.NO_ERROR)throw new Error("WebGL Error: "+getWebGLErrorMessage(ha,aa))}const MIN_FLOAT16=596e-10,MAX_FLOAT16=65504;function canBeRepresented(ha){return!!(env().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||ha===0||MIN_FLOAT16<Math.abs(ha)&&Math.abs(ha)<MAX_FLOAT16)}function getWebGLErrorMessage(ha,aa){switch(aa){case ha.NO_ERROR:return"NO_ERROR";case ha.INVALID_ENUM:return"INVALID_ENUM";case ha.INVALID_VALUE:return"INVALID_VALUE";case ha.INVALID_OPERATION:return"INVALID_OPERATION";case ha.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case ha.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case ha.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${aa}`}}function getExtensionOrThrow(ha,aa){return throwIfNull(ha,()=>ha.getExtension(aa),'Extension "'+aa+'" not supported on this browser.')}function createVertexShader$1(ha,aa){const xa=throwIfNull(ha,()=>ha.createShader(ha.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(callAndCheck(ha,()=>ha.shaderSource(xa,aa)),callAndCheck(ha,()=>ha.compileShader(xa)),ha.getShaderParameter(xa,ha.COMPILE_STATUS)===!1)throw console.log(ha.getShaderInfoLog(xa)),new Error("Failed to compile vertex shader.");return xa}function createFragmentShader(ha,aa){const xa=throwIfNull(ha,()=>ha.createShader(ha.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(callAndCheck(ha,()=>ha.shaderSource(xa,aa)),callAndCheck(ha,()=>ha.compileShader(xa)),env().get("ENGINE_COMPILE_ONLY"))return xa;if(ha.getShaderParameter(xa,ha.COMPILE_STATUS)===!1)throw logShaderSourceAndInfoLog(aa,ha.getShaderInfoLog(xa)),new Error("Failed to compile fragment shader.");return xa}const lineNumberRegex=/ERROR: [0-9]+:([0-9]+):/g;function logShaderSourceAndInfoLog(ha,aa){const xa=lineNumberRegex.exec(aa);if(xa==null){console.log(`Couldn't parse line number in error: ${aa}`),console.log(ha);return}const ba=+xa[1],Sa=ha.split(`
`),Ta=Sa.length.toString().length+2,wa=Sa.map((La,el)=>rightPad((el+1).toString(),Ta)+La);let Ea=0;for(let La=0;La<wa.length;La++)Ea=Math.max(wa[La].length,Ea);const ka=wa.slice(0,ba-1),Aa=wa.slice(ba-1,ba),Fa=wa.slice(ba);console.log(ka.join(`
`)),console.log(aa.split(`
`)[0]),console.log(`%c ${rightPad(Aa[0],Ea)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(Fa.join(`
`))}function createProgram(ha){return throwIfNull(ha,()=>ha.createProgram(),"Unable to create WebGLProgram.")}function linkProgram(ha,aa){if(callAndCheck(ha,()=>ha.linkProgram(aa)),!env().get("ENGINE_COMPILE_ONLY")&&ha.getProgramParameter(aa,ha.LINK_STATUS)===!1)throw console.log(ha.getProgramInfoLog(aa)),new Error("Failed to link vertex and fragment shaders.")}function validateProgram(ha,aa){if(callAndCheck(ha,()=>ha.validateProgram(aa)),ha.getProgramParameter(aa,ha.VALIDATE_STATUS)===!1)throw console.log(ha.getProgramInfoLog(aa)),new Error("Shader program validation failed.")}function createStaticVertexBuffer(ha,aa){const xa=throwIfNull(ha,()=>ha.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(ha,()=>ha.bindBuffer(ha.ARRAY_BUFFER,xa)),callAndCheck(ha,()=>ha.bufferData(ha.ARRAY_BUFFER,aa,ha.STATIC_DRAW)),xa}function createStaticIndexBuffer(ha,aa){const xa=throwIfNull(ha,()=>ha.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(ha,()=>ha.bindBuffer(ha.ELEMENT_ARRAY_BUFFER,xa)),callAndCheck(ha,()=>ha.bufferData(ha.ELEMENT_ARRAY_BUFFER,aa,ha.STATIC_DRAW)),xa}function createTexture(ha){return throwIfNull(ha,()=>ha.createTexture(),"Unable to create WebGLTexture.")}function validateTextureSize(ha,aa){const xa=env().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(ha<=0||aa<=0){const ba=`[${ha}x${aa}]`;throw new Error("Requested texture size "+ba+" is invalid.")}if(ha>xa||aa>xa){const ba=`[${ha}x${aa}]`,Sa=`[${xa}x${xa}]`;throw new Error("Requested texture size "+ba+" greater than WebGL maximum on this browser / GPU "+Sa+".")}}function createFramebuffer(ha){return throwIfNull(ha,()=>ha.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function bindVertexBufferToProgramAttribute(ha,aa,xa,ba,Sa,Ta,wa){const Ea=ha.getAttribLocation(aa,xa);return Ea===-1?!1:(callAndCheck(ha,()=>ha.bindBuffer(ha.ARRAY_BUFFER,ba)),callAndCheck(ha,()=>ha.vertexAttribPointer(Ea,Sa,ha.FLOAT,!1,Ta,wa)),callAndCheck(ha,()=>ha.enableVertexAttribArray(Ea)),!0)}function bindTextureUnit(ha,aa,xa){validateTextureUnit(ha,xa),callAndCheck(ha,()=>ha.activeTexture(ha.TEXTURE0+xa)),callAndCheck(ha,()=>ha.bindTexture(ha.TEXTURE_2D,aa))}function getProgramUniformLocationOrThrow(ha,aa,xa){return throwIfNull(ha,()=>ha.getUniformLocation(aa,xa),'uniform "'+xa+'" not present in program.')}function getProgramUniformLocation(ha,aa,xa){return ha.getUniformLocation(aa,xa)}function bindTextureToProgramUniformSampler(ha,aa,xa,ba){callAndCheck(ha,()=>bindTextureUnit(ha,aa,ba)),callAndCheck(ha,()=>ha.uniform1i(xa,ba))}function bindColorTextureToFramebuffer(ha,aa,xa){callAndCheck(ha,()=>ha.bindFramebuffer(ha.FRAMEBUFFER,xa)),callAndCheck(ha,()=>ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,aa,0))}function unbindColorTextureFromFramebuffer(ha,aa){callAndCheck(ha,()=>ha.bindFramebuffer(ha.FRAMEBUFFER,aa)),callAndCheck(ha,()=>ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,null,0))}function validateFramebuffer(ha){const aa=ha.checkFramebufferStatus(ha.FRAMEBUFFER);if(aa!==ha.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+getFramebufferErrorMessage(ha,aa))}function getFramebufferErrorMessage(ha,aa){switch(aa){case ha.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case ha.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case ha.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case ha.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${aa}`}}function throwIfNull(ha,aa,xa){const ba=callAndCheck(ha,()=>aa());if(ba==null)throw new Error(xa);return ba}function validateTextureUnit(ha,aa){const xa=ha.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,ba=aa+ha.TEXTURE0;if(ba<ha.TEXTURE0||ba>xa){const Sa=`[gl.TEXTURE0, gl.TEXTURE${xa}]`;throw new Error(`textureUnit must be in ${Sa}.`)}}function getBatchDim(ha,aa=2){return sizeFromShape(ha.slice(0,ha.length-aa))}function getRowsCols(ha){if(ha.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[ha.length>1?ha[ha.length-2]:1,ha[ha.length-1]]}function getShapeAs3D(ha){let aa=[1,1,1];return ha.length===0||ha.length===1&&ha[0]===1||(aa=[getBatchDim(ha),...getRowsCols(ha)]),aa}function getTextureShapeFromLogicalShape(ha,aa=!1){let xa=env().getNumber("WEBGL_MAX_TEXTURE_SIZE"),ba=env().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");ba===1/0&&env().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(ba=xa/2),aa&&(xa=xa*2,ba=ba*2,ha=ha.map((Ea,ka)=>ka>=ha.length-2?nearestLargerEven(ha[ka]):ha[ka]),ha.length===1&&(ha=[2,ha[0]])),ha.length!==2&&(ha=squeezeShape(ha).newShape);let Sa=sizeFromShape(ha),Ta=null;ha.length<=1&&Sa<=xa?Ta=[1,Sa]:ha.length===2&&ha[0]<=xa&&ha[1]<=xa?Ta=ha:ha.length===3&&ha[0]*ha[1]<=xa&&ha[2]<=xa?Ta=[ha[0]*ha[1],ha[2]]:ha.length===3&&ha[0]<=xa&&ha[1]*ha[2]<=xa?Ta=[ha[0],ha[1]*ha[2]]:ha.length===4&&ha[0]*ha[1]*ha[2]<=xa&&ha[3]<=xa?Ta=[ha[0]*ha[1]*ha[2],ha[3]]:ha.length===4&&ha[0]<=xa&&ha[1]*ha[2]*ha[3]<=xa&&(Ta=[ha[0],ha[1]*ha[2]*ha[3]]);const wa=Ta!=null&&Math.max(...Ta)>ba&&Math.min(...Ta)<=(aa?2:1)&&Math.min(...Ta)>0;if(Ta==null||wa)if(aa){const Ea=getBatchDim(ha);let ka=2,Aa=2;ha.length&&([ka,Aa]=getRowsCols(ha)),Sa=Ea*(ka/2)*(Aa/2),Ta=sizeToSquarishShape(Sa).map(Fa=>Fa*2)}else Ta=sizeToSquarishShape(Sa);return Ta}function isEven(ha){return ha%2===0}function isReshapeFree(ha,aa){if(ha=ha.slice(-2),aa=aa.slice(-2),arraysEqual(ha,aa)||!ha.length||!aa.length||ha[0]===0||ha[1]===0||aa[0]===0||aa[1]===0)return!0;if(ha.length!==aa.length){const xa=ha[ha.length-1],ba=aa[aa.length-1];if(xa===ba||isEven(xa)&&isEven(ba)&&(ha[0]===1||aa[0]===1))return!0}return ha[1]===aa[1]&&isEven(ha[0])&&isEven(aa[0])}let MAX_TEXTURE_SIZE,MAX_TEXTURES_IN_SHADER;function getWebGLMaxTextureSize(ha){if(MAX_TEXTURE_SIZE==null){const aa=getWebGLContext(ha);MAX_TEXTURE_SIZE=aa.getParameter(aa.MAX_TEXTURE_SIZE)}return MAX_TEXTURE_SIZE}function getMaxTexturesInShader(ha){if(MAX_TEXTURES_IN_SHADER==null){const aa=getWebGLContext(ha);MAX_TEXTURES_IN_SHADER=aa.getParameter(aa.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MAX_TEXTURES_IN_SHADER)}function getWebGLDisjointQueryTimerVersion(ha){if(ha===0)return 0;let aa;const xa=getWebGLContext(ha);return hasExtension(xa,"EXT_disjoint_timer_query_webgl2")&&ha===2?aa=2:hasExtension(xa,"EXT_disjoint_timer_query")?aa=1:aa=0,aa}function hasExtension(ha,aa){return ha.getExtension(aa)!=null}function isWebGLVersionEnabled(ha){try{if(getWebGLContext(ha)!=null)return!0}catch(aa){return console.log("Error when getting WebGL context: ",aa),!1}return!1}function isCapableOfRenderingToFloatTexture(ha){if(ha===0)return!1;const aa=getWebGLContext(ha);if(ha===1){if(!hasExtension(aa,"OES_texture_float"))return!1}else if(!hasExtension(aa,"EXT_color_buffer_float"))return!1;return createFloatTextureAndBindToFramebuffer(aa)}function isDownloadFloatTextureEnabled(ha){if(ha===0)return!1;const aa=getWebGLContext(ha);if(ha===1){if(!hasExtension(aa,"OES_texture_float")||!hasExtension(aa,"WEBGL_color_buffer_float"))return!1}else{if(hasExtension(aa,"EXT_color_buffer_float"))return createFloatTextureAndBindToFramebuffer(aa);const ba="EXT_color_buffer_half_float";if(hasExtension(aa,ba)){const Sa=aa.getExtension(ba);return createHalfFloatTextureAndBindToFramebuffer(aa,Sa)}return!1}return createFloatTextureAndBindToFramebuffer(aa)}function createFloatTextureAndBindToFramebuffer(ha){const aa=getTextureConfig(ha),xa=ha.createTexture();ha.bindTexture(ha.TEXTURE_2D,xa),ha.texImage2D(ha.TEXTURE_2D,0,aa.internalFormatFloat,1,1,0,aa.textureFormatFloat,aa.textureTypeFloat,null);const Ta=ha.createFramebuffer();ha.bindFramebuffer(ha.FRAMEBUFFER,Ta),ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,xa,0);const wa=ha.checkFramebufferStatus(ha.FRAMEBUFFER)===ha.FRAMEBUFFER_COMPLETE;return ha.bindTexture(ha.TEXTURE_2D,null),ha.bindFramebuffer(ha.FRAMEBUFFER,null),ha.deleteTexture(xa),ha.deleteFramebuffer(Ta),wa}function createHalfFloatTextureAndBindToFramebuffer(ha,aa){const xa=getTextureConfig(ha,aa),ba=ha.createTexture();ha.bindTexture(ha.TEXTURE_2D,ba),ha.texImage2D(ha.TEXTURE_2D,0,xa.internalFormatHalfFloat,1,1,0,xa.textureFormatFloat,xa.textureTypeHalfFloat,null);const wa=ha.createFramebuffer();ha.bindFramebuffer(ha.FRAMEBUFFER,wa),ha.framebufferTexture2D(ha.FRAMEBUFFER,ha.COLOR_ATTACHMENT0,ha.TEXTURE_2D,ba,0);const Ea=ha.checkFramebufferStatus(ha.FRAMEBUFFER)===ha.FRAMEBUFFER_COMPLETE;return ha.bindTexture(ha.TEXTURE_2D,null),ha.bindFramebuffer(ha.FRAMEBUFFER,null),ha.deleteTexture(ba),ha.deleteFramebuffer(wa),Ea}function isWebGLFenceEnabled(ha){return ha!==2?!1:getWebGLContext(ha).fenceSync!=null}function assertNotComplex(ha,aa){Array.isArray(ha)||(ha=[ha]),ha.forEach(xa=>{xa!=null&&assert(xa.dtype!=="complex64",()=>`${aa} does not support complex64 tensors in the WebGL backend.`)})}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ENV=env();ENV.registerFlag("HAS_WEBGL",()=>ENV.getNumber("WEBGL_VERSION")>0),ENV.registerFlag("WEBGL_VERSION",()=>isWebGLVersionEnabled(2)?2:isWebGLVersionEnabled(1)?1:0),ENV.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ENV.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>ENV.get("WEBGL_VERSION")===2),ENV.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ENV.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ENV.registerFlag("WEBGL_PACK",()=>ENV.getBool("HAS_WEBGL")),ENV.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_CLIP",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_REDUCE",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_LAZILY_UNPACK",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_CONV_IM2COL",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>ENV.getBool("WEBGL_PACK")),ENV.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>getWebGLMaxTextureSize(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>getMaxTexturesInShader(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const ha=ENV.getNumber("WEBGL_VERSION");return ha===0?0:getWebGLDisjointQueryTimerVersion(ha)}),ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ENV.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!isMobile()),ENV.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>isCapableOfRenderingToFloatTexture(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>ENV.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:ENV.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ENV.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>isDownloadFloatTextureEnabled(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_FENCE_API_ENABLED",()=>isWebGLFenceEnabled(ENV.getNumber("WEBGL_VERSION"))),ENV.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ENV.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ENV.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,ha=>{if(typeof ha!="number")throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${ha}.`);if(ha<0&&ha!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${ha}.`)}),ENV.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>isMobile()?1:-1,ha=>{if(typeof ha!="number")throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${ha}.`);if(ha<0&&ha!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${ha}.`)}),ENV.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),ENV.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),ENV.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),ENV.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),ENV.registerFlag("WEBGL_EXP_CONV",()=>!1),ENV.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>ENV.getBool("IS_TEST")),ENV.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),ENV.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),ENV.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),ENV.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getGlslDifferences(){let ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa;return env().getNumber("WEBGL_VERSION")===2?(ha="#version 300 es",aa="in",xa="out",ba="in",Sa="texture",Ta="outputColor",wa="out vec4 outputColor;",Ea=env().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",ka="",Aa=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(ha="",aa="attribute",xa="varying",ba="varying",Sa="texture2D",Ta="gl_FragColor",wa="",Ea=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,ka=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,Aa=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:ha,attribute:aa,varyingVs:xa,varyingFs:ba,texture2D:Sa,output:Ta,defineOutput:wa,defineSpecialNaN:Ea,defineSpecialInf:ka,defineRound:Aa}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getLogicalCoordinatesFromFlatIndex(ha,aa,xa="index"){const ba=computeStrides(aa);return ba.map((Sa,Ta)=>{const wa=`int ${ha[Ta]} = ${xa} / ${Sa}`,Ea=Ta===ba.length-1?`int ${ha[Ta+1]} = ${xa} - ${ha[Ta]} * ${Sa}`:`index -= ${ha[Ta]} * ${Sa}`;return`${wa}; ${Ea};`}).join("")}function getOutputLogicalCoordinatesFromFlatIndexByUniform(ha,aa,xa="index"){const ba=computeStrides(aa);return ba.map((Sa,Ta)=>{const wa=`int ${ha[Ta]} = ${xa} / outShapeStrides[${Ta}]`,Ea=Ta===ba.length-1?`int ${ha[Ta+1]} = ${xa} - ${ha[Ta]} * outShapeStrides[${Ta}]`:`index -= ${ha[Ta]} * outShapeStrides[${Ta}]`;return`${wa}; ${Ea};`}).join("")}function symbolicallyComputeStrides(ha,aa){const xa=ha.length,ba=ha.map(Ta=>`${aa}[${Ta}]`),Sa=new Array(xa-1);Sa[xa-2]=ba[xa-1];for(let Ta=xa-3;Ta>=0;--Ta)Sa[Ta]=`(${Sa[Ta+1]} * ${ba[Ta+1]})`;return Sa}function getLogicalCoordinatesFromFlatIndexByUniform(ha,aa,xa="index"){const ba=ha.map((Ta,wa)=>wa),Sa=symbolicallyComputeStrides(ba,aa);return Sa.map((Ta,wa)=>{const Ea=`int ${ha[wa]} = ${xa} / ${Sa[wa]}`,ka=wa===Sa.length-1?`int ${ha[wa+1]} = ${xa} - ${ha[wa]} * ${Sa[wa]}`:`index -= ${ha[wa]} * ${Sa[wa]}`;return`${Ea}; ${ka};`}).join("")}function getFlatIndexFrom3D(ha){const aa=computeStrides(ha).map(xa=>xa.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${aa[0]} + coords.y * ${aa[1]} + coords.z;
  }
`}function getFlatIndexFrom3DOutput(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}const ENCODE_FLOAT_SNIPPET=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{getBroadcastDims}=backend_util;function makeShader(ha,aa,xa){const ba=[];if(ha.forEach(tl=>{const nl=sizeFromShape(tl.shapeInfo.logicalShape);if(tl.shapeInfo.isUniform?ba.push(`uniform float ${tl.name}${nl>1?`[${nl}]`:""};`):(ba.push(`uniform sampler2D ${tl.name};`),ba.push(`uniform int offset${tl.name};`)),xa.enableShapeUniforms){const{uniformShape:rl}=getUniformInfoFromShape(xa.packedInputs,tl.shapeInfo.logicalShape,tl.shapeInfo.texShape);switch(rl.length){case 1:ba.push(`uniform int ${tl.name}Shape;`);break;case 2:ba.push(`uniform ivec2 ${tl.name}Shape;`);break;case 3:ba.push(`uniform ivec3 ${tl.name}Shape;`);break;case 4:ba.push(`uniform ivec4 ${tl.name}Shape;`);break}ba.push(`uniform ivec2 ${tl.name}TexShape;`)}}),xa.enableShapeUniforms){switch(aa.logicalShape.length){case 1:ba.push("uniform int outShape;");break;case 2:ba.push("uniform ivec2 outShape;"),ba.push("uniform int outShapeStrides;");break;case 3:ba.push("uniform ivec3 outShape;"),ba.push("uniform ivec2 outShapeStrides;");break;case 4:ba.push("uniform ivec4 outShape;"),ba.push("uniform ivec3 outShapeStrides;");break}ba.push("uniform ivec2 outTexShape;")}xa.customUniforms&&xa.customUniforms.forEach(tl=>{ba.push(`uniform ${tl.type} ${tl.name}${tl.arrayIndex?`[${tl.arrayIndex}]`:""};`)});const Sa=ba.join(`
`),Ta=ha.map(tl=>getInputSamplingSnippet(tl,aa,xa.packedInputs,xa.enableShapeUniforms)).join(`
`),wa=aa.texShape,Ea=getGlslDifferences(),ka=getFloatTextureSampleSnippet(Ea);let Aa,Fa,La=getShaderPrefix(Ea);return aa.isPacked?(Aa=getPackedOutputSamplingSnippet(aa.logicalShape,wa,xa.enableShapeUniforms),Fa=getFloatTextureSetRGBASnippet(Ea)):(Aa=getOutputSamplingSnippet(aa.logicalShape,wa,xa.enableShapeUniforms),Fa=getFloatTextureSetRSnippet(Ea)),xa.packedInputs&&(La+=SHADER_PACKED_PREFIX),[La,ka,Fa,Sa,Aa,Ta,xa.userCode].join(`
`)}function getSamplerFromInInfo(ha,aa=!1){const xa=ha.shapeInfo.logicalShape;switch(xa.length){case 0:return getSamplerScalar(ha,aa);case 1:return getSampler1D(ha,aa);case 2:return getSampler2D(ha,aa);case 3:return getSampler3D(ha,aa);case 4:return getSampler4D(ha,aa);case 5:return getSampler5D(ha);case 6:return getSampler6D(ha);default:throw new Error(`${xa.length}-D input sampling is not yet supported`)}}function getPackedSamplerFromInInfo(ha,aa){switch(ha.shapeInfo.logicalShape.length){case 0:return getPackedSamplerScalar(ha);case 1:return getPackedSampler1D(ha,aa);case 2:return getPackedSampler2D(ha,aa);case 3:return getPackedSampler3D(ha,aa);default:return getPackedSamplerND(ha,aa)}}function getInputSamplingSnippet(ha,aa,xa=!1,ba){let Sa="";xa?Sa+=getPackedSamplerFromInInfo(ha,ba):Sa+=getSamplerFromInInfo(ha,ba);const Ta=ha.shapeInfo.logicalShape,wa=aa.logicalShape;return Ta.length<=wa.length&&(xa?Sa+=getPackedSamplerAtOutputCoords(ha,aa):Sa+=getSamplerAtOutputCoords(ha,aa)),Sa}function getPackedOutputSamplingSnippet(ha,aa,xa){switch(ha.length){case 0:return getOutputScalarCoords();case 1:return getOutputPacked1DCoords(ha,aa,xa);case 2:return getOutputPacked2DCoords(ha,aa,xa);case 3:return getOutputPacked3DCoords(ha,aa,xa);default:return getOutputPackedNDCoords(ha,aa,xa)}}function getOutputSamplingSnippet(ha,aa,xa){switch(ha.length){case 0:return getOutputScalarCoords();case 1:return getOutput1DCoords(ha,aa,xa);case 2:return getOutput2DCoords(ha,aa,xa);case 3:return getOutput3DCoords(ha,aa,xa);case 4:return getOutput4DCoords(ha,aa,xa);case 5:return getOutput5DCoords(ha,aa);case 6:return getOutput6DCoords(ha,aa);default:throw new Error(`${ha.length}-D output sampling is not yet supported`)}}function getFloatTextureSampleSnippet(ha){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${ha.texture2D}(textureSampler, uv).r;
    }
  `}function getFloatTextureSetRSnippet(ha){return`
    void setOutput(float val) {
      ${ha.output} = vec4(val, 0, 0, 0);
    }
  `}function getFloatTextureSetRGBASnippet(ha){return`
    void setOutput(vec4 val) {
      ${ha.output} = val;
    }
  `}function getShaderPrefix(ha){return`${ha.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${ha.varyingFs} vec2 resultUV;
    ${ha.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${ha.defineSpecialNaN}
    ${ha.defineSpecialInf}
    ${ha.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `}const SAMPLE_1D_SNIPPET=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_2D_SNIPPET=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SAMPLE_3D_SNIPPET=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SHADER_PACKED_PREFIX=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function getOutputScalarCoords(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function getOutputPacked1DCoords(ha,aa,xa){const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)];return ba[0]===1?xa?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${ba[1]}.0);
      }
    `:ba[1]===1?xa?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${ba[0]}.0);
      }
    `:xa?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));
      return 2 * (resTexRC.x * ${ba[1]} + resTexRC.y);
    }
  `}function getOutput1DCoords(ha,aa,xa){return aa[0]===1?xa?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${aa[1]}.0);
      }
    `:aa[1]===1?xa?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${aa[0]}.0);
      }
    `:xa?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${aa[0]}, ${aa[1]}));
      return resTexRC.x * ${aa[1]} + resTexRC.y;
    }
  `}function getOutputPacked3DCoords(ha,aa,xa){if(xa)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)],Sa=Math.ceil(ha[2]/2),Ta=Sa*Math.ceil(ha[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));
      int index = resTexRC.x * ${ba[1]} + resTexRC.y;

      int b = index / ${Ta};
      index -= b * ${Ta};

      int r = 2 * (index / ${Sa});
      int c = imod(index, ${Sa}) * 2;

      return ivec3(b, r, c);
    }
  `}function getOutput3DCoords(ha,aa,xa){if(xa)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],ha)}
    return ivec3(r, c, d);
  }
`;const ba=getLogicalCoordinatesFromFlatIndex(["r","c","d"],ha);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;
      ${ba}
      return ivec3(r, c, d);
    }
  `}function getOutputPackedNDCoords(ha,aa,xa){if(xa)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)],Sa=Math.ceil(ha[ha.length-1]/2),Ta=Sa*Math.ceil(ha[ha.length-2]/2);let wa=Ta,Ea="",ka="b, r, c";for(let Aa=2;Aa<ha.length-1;Aa++)wa*=ha[ha.length-Aa-1],Ea=`
      int b${Aa} = index / ${wa};
      index -= b${Aa} * ${wa};
    `+Ea,ka=`b${Aa}, `+ka;return`
    ivec${ha.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));
      int index = resTexRC.x * ${ba[1]} + resTexRC.y;

      ${Ea}

      int b = index / ${Ta};
      index -= b * ${Ta};

      int r = 2 * (index / ${Sa});
      int c = imod(index, ${Sa}) * 2;

      return ivec${ha.length}(${ka});
    }
  `}function getOutput4DCoords(ha,aa,xa){if(xa)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d","d2"],ha)}
      return ivec4(r, c, d, d2);
    }
  `;const ba=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2"],ha);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;
      ${ba}
      return ivec4(r, c, d, d2);
    }
  `}function getOutput5DCoords(ha,aa){const xa=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3"],ha);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${aa[0]},
                             ${aa[1]}));

      int index = resTexRC.x * ${aa[1]} + resTexRC.y;

      ${xa}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function getOutput6DCoords(ha,aa){const xa=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3","d4"],ha);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;

      ${xa}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function getOutputPacked2DCoords(ha,aa,xa){const ba=[Math.ceil(aa[0]/2),Math.ceil(aa[1]/2)];if(arraysEqual(ha,aa))return xa?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${ba[0]}, ${ba[1]}));
      }
    `;const Sa=Math.ceil(ha[1]/2);return xa?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${ba[0]}, ${ba[1]}));

      int index = resTexRC.x * ${ba[1]} + resTexRC.y;
      int r = 2 * (index / ${Sa});
      int c = imod(index, ${Sa}) * 2;

      return ivec2(r, c);
    }
  `}function getOutput2DCoords(ha,aa,xa){return arraysEqual(ha,aa)?xa?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${aa[0]}, ${aa[1]}));
      }
    `:ha[1]===1?xa?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${aa[0]}, ${aa[1]}));
        int index = resTexRC.x * ${aa[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:ha[0]===1?xa?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${aa[0]}, ${aa[1]}));
        int index = resTexRC.x * ${aa[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:xa?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${aa[0]}, ${aa[1]}));
      int index = resTexRC.x * ${aa[1]} + resTexRC.y;
      int r = index / ${ha[1]};
      int c = index - r * ${ha[1]};
      return ivec2(r, c);
    }
  `}function getFlatOffsetUniformName(ha){return`offset${ha}`}function getPackedSamplerScalar(ha){const aa=ha.name,xa="get"+aa.charAt(0).toUpperCase()+aa.slice(1),ba=getGlslDifferences();return`
    vec4 ${xa}() {
      return ${ba.texture2D}(${aa}, halfCR);
    }
  `}function getSamplerScalar(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1);if(ha.shapeInfo.isUniform)return`float ${ba}() {return ${xa};}`;const[Sa,Ta]=ha.shapeInfo.texShape;if(Sa===1&&Ta===1)return`
      float ${ba}() {
        return sampleTexture(${xa}, halfCR);
      }
    `;const wa=getFlatOffsetUniformName(xa);if(aa)return`
    float ${ba}() {
      vec2 uv = uvFromFlat(${xa}TexShape[0], ${xa}TexShape[1], ${wa});
      return sampleTexture(${xa}, uv);
    }
  `;const[Ea,ka]=ha.shapeInfo.texShape;return`
    float ${ba}() {
      vec2 uv = uvFromFlat(${Ea}, ${ka}, ${wa});
      return sampleTexture(${xa}, uv);
    }
  `}function getPackedSampler1D(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),Sa=ha.shapeInfo.texShape,Ta=getGlslDifferences();if(aa)return`
    vec4 ${ba}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${xa}TexShape[0]) / 2.0), ceil(float(${xa}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${Ta.texture2D}(${xa}, uv);
    }
  `;const wa=[Math.ceil(Sa[0]/2),Math.ceil(Sa[1]/2)];return`
    vec4 ${ba}(int index) {
      vec2 uv = packedUVfrom1D(
        ${wa[0]}, ${wa[1]}, index);
      return ${Ta.texture2D}(${xa}, uv);
    }
  `}function getSampler1D(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1);if(ha.shapeInfo.isUniform)return`
      float ${ba}(int index) {
        ${getUniformSampler(ha)}
      }
    `;const Sa=ha.shapeInfo.texShape,Ta=Sa[0],wa=Sa[1];if(wa===1&&Ta===1)return`
      float ${ba}(int index) {
        return sampleTexture(${xa}, halfCR);
      }
    `;const Ea=getFlatOffsetUniformName(xa);return wa===1?aa?`
      float ${ba}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${Ea}) + 0.5) / float(${xa}TexShape[0]));
        return sampleTexture(${xa}, uv);
      }
    `:`
      float ${ba}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${Ea}) + 0.5) / ${Ta}.0);
        return sampleTexture(${xa}, uv);
      }
    `:Ta===1?aa?`
      float ${ba}(int index) {
        vec2 uv = vec2((float(index + ${Ea}) + 0.5) / float(${xa}TexShape[1]), 0.5);
        return sampleTexture(${xa}, uv);
      }
    `:`
      float ${ba}(int index) {
        vec2 uv = vec2((float(index + ${Ea}) + 0.5) / ${wa}.0, 0.5);
        return sampleTexture(${xa}, uv);
      }
    `:aa?`
    float ${ba}(int index) {
      vec2 uv = uvFromFlat(${xa}TexShape[0], ${xa}TexShape[1], index + ${Ea});
      return sampleTexture(${xa}, uv);
    }
  `:`
    float ${ba}(int index) {
      vec2 uv = uvFromFlat(${Ta}, ${wa}, index + ${Ea});
      return sampleTexture(${xa}, uv);
    }
  `}function getPackedSampler2D(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=ha.shapeInfo.texShape,wa=Ta[0],Ea=Ta[1],ka=getGlslDifferences();if(Ta!=null&&arraysEqual(xa,Ta))return aa?`
      vec4 ${Sa}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${ba}TexShape[1], ${ba}TexShape[0]);

        return ${ka.texture2D}(${ba}, uv);
      }
    `:`
      vec4 ${Sa}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${Ea}.0, ${wa}.0);

        return ${ka.texture2D}(${ba}, uv);
      }
    `;if(aa)return`
    vec4 ${Sa}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${ba}TexShape[0]) / 2.0), ceil(float(${ba}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${ba}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${ka.texture2D}(${ba}, uv);
    }
  `;const Aa=[Math.ceil(Ta[0]/2),Math.ceil(Ta[1]/2)],Fa=Math.ceil(xa[1]/2);return`
    vec4 ${Sa}(int row, int col) {
      vec2 uv = packedUVfrom2D(${Fa}, ${Aa[0]}, ${Aa[1]}, row, col);
      return ${ka.texture2D}(${ba}, uv);
    }
  `}function getSampler2D(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=ha.shapeInfo.texShape;if(Ta!=null&&arraysEqual(xa,Ta)){if(aa)return`
      float ${Sa}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `;const el=Ta[0],tl=Ta[1];return`
    float ${Sa}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${tl}.0, ${el}.0);
      return sampleTexture(${ba}, uv);
    }
  `}const{newShape:wa,keptDims:Ea}=squeezeShape(xa),ka=wa;if(ka.length<xa.length){const el=squeezeInputInfo(ha,ka),tl=["row","col"];return`
      ${getSamplerFromInInfo(el,aa)}
      float ${Sa}(int row, int col) {
        return ${Sa}(${getSqueezedParams(tl,Ea)});
      }
    `}if(ha.shapeInfo.isUniform)return`
      float ${Sa}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${xa[1]}, 1)));
        ${getUniformSampler(ha)}
      }
    `;const Aa=Ta[0],Fa=Ta[1],La=getFlatOffsetUniformName(ba);return Fa===1?aa?`
      float ${Sa}(int row, int col) {
        float index = dot(vec3(row, col, ${La}), vec3(${ba}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${ba}TexShape[0]));
        return sampleTexture(${ba}, uv);
      }
    `:`
    float ${Sa}(int row, int col) {
      float index = dot(vec3(row, col, ${La}), vec3(${xa[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${Aa}.0);
      return sampleTexture(${ba}, uv);
    }
  `:Aa===1?aa?`
      float ${Sa}(int row, int col) {
        float index = dot(vec3(row, col, ${La}), vec3(${ba}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${ba}TexShape[1]), 0.5);
        return sampleTexture(${ba}, uv);
      }
    `:`
    float ${Sa}(int row, int col) {
      float index = dot(vec3(row, col, ${La}), vec3(${xa[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${Fa}.0, 0.5);
      return sampleTexture(${ba}, uv);
    }
  `:aa?`
      float ${Sa}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${ba}Shape[1] + col + ${La};
        vec2 uv = uvFromFlat(${ba}TexShape[0], ${ba}TexShape[1], index);
        return sampleTexture(${ba}, uv);
      }
    `:`
  float ${Sa}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${xa[1]} + col + ${La};
    vec2 uv = uvFromFlat(${Aa}, ${Fa}, index);
    return sampleTexture(${ba}, uv);
  }
`}function getPackedSampler3D(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=ha.shapeInfo.texShape,wa=[Math.ceil(Ta[0]/2),Math.ceil(Ta[1]/2)];if(xa[0]===1){const el=xa.slice(1),tl=[1,2],nl=squeezeInputInfo(ha,el),rl=["b","row","col"];return`
        ${getPackedSamplerFromInInfo(nl,aa)}
        vec4 ${Sa}(int b, int row, int col) {
          return ${Sa}(${getSqueezedParams(rl,tl)});
        }
      `}const Ea=getGlslDifferences();if(aa)return`
    vec4 ${Sa}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${ba}TexShape[0]) / 2.0), ceil(float(${ba}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${ba}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${ba}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${Ea.texture2D}(${ba}, uv);
    }
  `;const ka=wa[0],Aa=wa[1],Fa=Math.ceil(xa[2]/2),La=Fa*Math.ceil(xa[1]/2);return`
    vec4 ${Sa}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${ka}, ${Aa}, ${La}, ${Fa}, b, row, col);
      return ${Ea.texture2D}(${ba}, uv);
    }
  `}function getSampler3D(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=xa[1]*xa[2],wa=xa[2],{newShape:Ea,keptDims:ka}=squeezeShape(xa),Aa=Ea;if(Aa.length<xa.length){const rl=squeezeInputInfo(ha,Aa),sl=["row","col","depth"];return`
        ${getSamplerFromInInfo(rl,aa)}
        float ${Sa}(int row, int col, int depth) {
          return ${Sa}(${getSqueezedParams(sl,ka)});
        }
      `}if(ha.shapeInfo.isUniform)return`
      float ${Sa}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${Ta}, ${wa}, 1)));
        ${getUniformSampler(ha)}
      }
    `;const Fa=ha.shapeInfo.texShape,La=Fa[0],el=Fa[1],tl=ha.shapeInfo.flatOffset;if(el===Ta&&tl==null)return aa?`
      float ${Sa}(int row, int col, int depth) {
        int stride1 = ${ba}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
        float ${Sa}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${wa}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${el}.0, ${La}.0);
          return sampleTexture(${ba}, uv);
        }
      `;if(el===wa&&tl==null)return aa?`
      float ${Sa}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${ba}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
    float ${Sa}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${xa[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${el}.0, ${La}.0);
      return sampleTexture(${ba}, uv);
    }
  `;const nl=getFlatOffsetUniformName(ba);return aa?`
    float ${Sa}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${ba}Shape[1] * ${ba}Shape[2];
      int stride1 = ${ba}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${nl};
      vec2 uv = uvFromFlat(${ba}TexShape[0], ${ba}TexShape[1], index);
      return sampleTexture(${ba}, uv);
    }
    `:`
      float ${Sa}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${Ta} + col * ${wa} + depth + ${nl};
        vec2 uv = uvFromFlat(${La}, ${el}, index);
        return sampleTexture(${ba}, uv);
      }
  `}function getPackedSamplerND(ha,aa){const xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),Sa=getGlslDifferences();if(aa)return`
    vec4 ${ba}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${xa}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${xa}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${xa}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${xa}TexShape[0]) / 2.0), ceil(float(${xa}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${Sa.texture2D}(${xa}, uv);
    }
  `;const Ta=ha.shapeInfo.logicalShape,wa=Ta.length,Ea=ha.shapeInfo.texShape,ka=[Math.ceil(Ea[0]/2),Math.ceil(Ea[1]/2)],Aa=ka[0],Fa=ka[1],La=Math.ceil(Ta[wa-1]/2);let el=La*Math.ceil(Ta[wa-2]/2),tl="int b, int row, int col",nl=`b * ${el} + (row / 2) * ${La} + (col / 2)`;for(let rl=2;rl<wa-1;rl++)tl=`int b${rl}, `+tl,el*=Ta[wa-rl-1],nl=`b${rl} * ${el} + `+nl;return`
    vec4 ${ba}(${tl}) {
      int index = ${nl};
      int texR = index / ${Fa};
      int texC = index - texR * ${Fa};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${Fa}, ${Aa});
      return ${Sa.texture2D}(${xa}, uv);
    }
  `}function getSampler4D(ha,aa){const xa=ha.shapeInfo.logicalShape,ba=ha.name,Sa="get"+ba.charAt(0).toUpperCase()+ba.slice(1),Ta=xa[3],wa=xa[2]*Ta,Ea=xa[1]*wa,{newShape:ka,keptDims:Aa}=squeezeShape(xa);if(ka.length<xa.length){const al=squeezeInputInfo(ha,ka),ll=["row","col","depth","depth2"];return`
      ${getSamplerFromInInfo(al,aa)}
      float ${Sa}(int row, int col, int depth, int depth2) {
        return ${Sa}(${getSqueezedParams(ll,Aa)});
      }
    `}if(ha.shapeInfo.isUniform)return`
      float ${Sa}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${Ea}, ${wa}, ${Ta}, 1)));
        ${getUniformSampler(ha)}
      }
    `;const Fa=ha.shapeInfo.flatOffset,La=ha.shapeInfo.texShape,el=La[0],tl=La[1],nl=`int stride2 = ${ba}Shape[3];`,rl=`int stride1 = ${ba}Shape[2] * stride2;`,sl=`int stride0 = ${ba}Shape[1] * stride1;`;if(tl===Ea&&Fa==null)return aa?`
      float ${Sa}(int row, int col, int depth, int depth2) {
        ${nl}
        ${rl}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
      float ${Sa}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${wa}, ${Ta}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${tl}.0, ${el}.0);
        return sampleTexture(${ba}, uv);
      }
    `;if(tl===Ta&&Fa==null)return aa?`
      float ${Sa}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${ba}Shape[1] * ${ba}Shape[2], ${ba}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${ba}TexShape[1], ${ba}TexShape[0]);
        return sampleTexture(${ba}, uv);
      }
    `:`
      float ${Sa}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${xa[1]*xa[2]}, ${xa[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${tl}.0, ${el}.0);
        return sampleTexture(${ba}, uv);
      }
    `;const ol=getFlatOffsetUniformName(ba);return aa?`
    float ${Sa}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${nl}
      ${rl}
      ${sl}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${ba}TexShape[0], ${ba}TexShape[1], index + ${ol});
      return sampleTexture(${ba}, uv);
    }
  `:`
    float ${Sa}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${Ea} + col * ${wa} +
          depth * ${Ta} + depth2;
      vec2 uv = uvFromFlat(${el}, ${tl}, index + ${ol});
      return sampleTexture(${ba}, uv);
    }
  `}function getSampler5D(ha){const aa=ha.shapeInfo.logicalShape,xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),Sa=aa[4],Ta=aa[3]*Sa,wa=aa[2]*Ta,Ea=aa[1]*wa,{newShape:ka,keptDims:Aa}=squeezeShape(aa);if(ka.length<aa.length){const rl=squeezeInputInfo(ha,ka),sl=["row","col","depth","depth2","depth3"];return`
      ${getSamplerFromInInfo(rl)}
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        return ${ba}(${getSqueezedParams(sl,Aa)});
      }
    `}if(ha.shapeInfo.isUniform)return`
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${Ea}, ${wa}, ${Ta}, ${Sa})) +
          depth3;
        ${getUniformSampler(ha)}
      }
    `;const Fa=ha.shapeInfo.flatOffset,La=ha.shapeInfo.texShape,el=La[0],tl=La[1];if(tl===Ea&&Fa==null)return`
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${wa}, ${Ta}, ${Sa}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${tl}.0, ${el}.0);
        return sampleTexture(${xa}, uv);
      }
    `;if(tl===Sa&&Fa==null)return`
      float ${ba}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${aa[1]*aa[2]*aa[3]},
               ${aa[2]*aa[3]}, ${aa[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${tl}.0, ${el}.0);
        return sampleTexture(${xa}, uv);
      }
    `;const nl=getFlatOffsetUniformName(xa);return`
    float ${ba}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${Ea} + col * ${wa} + depth * ${Ta} +
          depth2 * ${Sa} + depth3 + ${nl};
      vec2 uv = uvFromFlat(${el}, ${tl}, index);
      return sampleTexture(${xa}, uv);
    }
  `}function getSampler6D(ha){const aa=ha.shapeInfo.logicalShape,xa=ha.name,ba="get"+xa.charAt(0).toUpperCase()+xa.slice(1),{newShape:Sa,keptDims:Ta}=squeezeShape(aa);if(Sa.length<aa.length){const sl=squeezeInputInfo(ha,Sa),ol=["row","col","depth","depth2","depth3","depth4"];return`
      ${getSamplerFromInInfo(sl)}
      float ${ba}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${ba}(${getSqueezedParams(ol,Ta)});
      }
    `}const wa=aa[5],Ea=aa[4]*wa,ka=aa[3]*Ea,Aa=aa[2]*ka,Fa=aa[1]*Aa;if(ha.shapeInfo.isUniform)return`
      float ${ba}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${Fa}, ${Aa}, ${ka}, ${Ea})) +
          dot(
            vec2(depth3, depth4),
            vec2(${wa}, 1)));
        ${getUniformSampler(ha)}
      }
    `;const La=ha.shapeInfo.flatOffset,el=ha.shapeInfo.texShape,tl=el[0],nl=el[1];if(nl===Fa&&La==null)return`
      float ${ba}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${Aa}, ${ka}, ${Ea}, ${wa})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${nl}.0, ${tl}.0);
        return sampleTexture(${xa}, uv);
      }
    `;if(nl===wa&&La==null)return`
      float ${ba}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${aa[1]*aa[2]*aa[3]*aa[4]},
               ${aa[2]*aa[3]*aa[4]},
               ${aa[3]*aa[4]},
               ${aa[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${nl}.0, ${tl}.0);
        return sampleTexture(${xa}, uv);
      }
    `;const rl=getFlatOffsetUniformName(xa);return`
    float ${ba}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${Fa} + col * ${Aa} + depth * ${ka} +
          depth2 * ${Ea} + depth3 * ${wa} + depth4 + ${rl};
      vec2 uv = uvFromFlat(${tl}, ${nl}, index);
      return sampleTexture(${xa}, uv);
    }
  `}function getUniformSampler(ha){const aa=ha.name,xa=sizeFromShape(ha.shapeInfo.logicalShape);return xa<2?`return ${aa};`:`
    for (int i = 0; i < ${xa}; i++) {
      if (i == index) {
        return ${aa}[i];
      }
    }
  `}function getPackedSamplerAtOutputCoords(ha,aa){const xa=ha.name,ba=xa.charAt(0).toUpperCase()+xa.slice(1),Sa="get"+ba+"AtOutCoords",Ta=ha.shapeInfo.logicalShape.length,wa=aa.logicalShape.length,Ea=getBroadcastDims(ha.shapeInfo.logicalShape,aa.logicalShape),ka=getCoordsDataType(wa),Aa=wa-Ta;let Fa;const La=["x","y","z","w","u","v"];Ta===0?Fa="":wa<2&&Ea.length>=1?Fa="coords = 0;":Fa=Ea.map(al=>`coords.${La[al+Aa]} = 0;`).join(`
`);let el="";wa<2&&Ta>0?el="coords":el=ha.shapeInfo.logicalShape.map((al,ll)=>`coords.${La[ll+Aa]}`).join(", ");let tl="return outputValue;";const rl=sizeFromShape(ha.shapeInfo.logicalShape)===1,ol=sizeFromShape(aa.logicalShape)===1;if(Ta===1&&!rl&&!ol)tl=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(rl&&!ol)wa===1?tl=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:tl=`
        return vec4(outputValue.x);
      `;else if(Ea.length){const al=Ta-2,ll=Ta-1;Ea.indexOf(al)>-1&&Ea.indexOf(ll)>-1?tl="return vec4(outputValue.x);":Ea.indexOf(al)>-1?tl="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":Ea.indexOf(ll)>-1&&(tl="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${Sa}() {
      ${ka} coords = getOutputCoords();
      ${Fa}
      vec4 outputValue = get${ba}(${el});
      ${tl}
    }
  `}function getSamplerAtOutputCoords(ha,aa){const xa=ha.name,ba=xa.charAt(0).toUpperCase()+xa.slice(1),Sa="get"+ba+"AtOutCoords",Ta=aa.texShape,wa=ha.shapeInfo.texShape,Ea=ha.shapeInfo.logicalShape.length,ka=aa.logicalShape.length;if(!ha.shapeInfo.isUniform&&Ea===ka&&ha.shapeInfo.flatOffset==null&&arraysEqual(wa,Ta))return`
      float ${Sa}() {
        return sampleTexture(${xa}, resultUV);
      }
    `;const Aa=getCoordsDataType(ka),Fa=getBroadcastDims(ha.shapeInfo.logicalShape,aa.logicalShape),La=ka-Ea;let el;const tl=["x","y","z","w","u","v"];Ea===0?el="":ka<2&&Fa.length>=1?el="coords = 0;":el=Fa.map(rl=>`coords.${tl[rl+La]} = 0;`).join(`
`);let nl="";return ka<2&&Ea>0?nl="coords":nl=ha.shapeInfo.logicalShape.map((rl,sl)=>`coords.${tl[sl+La]}`).join(", "),`
    float ${Sa}() {
      ${Aa} coords = getOutputCoords();
      ${el}
      return get${ba}(${nl});
    }
  `}function getCoordsDataType(ha){if(ha<=1)return"int";if(ha===2)return"ivec2";if(ha===3)return"ivec3";if(ha===4)return"ivec4";if(ha===5)return"ivec5";if(ha===6)return"ivec6";throw Error(`GPU for rank ${ha} is not yet supported`)}function getUniformInfoFromShape(ha,aa,xa){const{newShape:ba,keptDims:Sa}=squeezeShape(aa),Ta=aa.length,wa=ha&&Ta===3&&aa[0]===1,Ea=wa?aa.slice(1):ba,ka=!ha&&Ta>1&&!arraysEqual(aa,xa)&&ba.length<Ta||wa;return{useSqueezeShape:ka,uniformShape:ka?Ea:aa,keptDims:Sa}}function squeezeInputInfo(ha,aa){const xa=JSON.parse(JSON.stringify(ha));return xa.shapeInfo.logicalShape=aa,xa}function getSqueezedParams(ha,aa){return aa.map(xa=>ha[xa]).join(", ")}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function compileProgram(ha,aa,xa,ba){const Sa=xa.map((Fa,La)=>{const el={logicalShape:Fa.shape,texShape:Fa.isUniform?null:Fa.texData.texShape,isUniform:Fa.isUniform,isPacked:Fa.isUniform?!1:Fa.texData.isPacked,flatOffset:null};return Fa.texData!=null&&Fa.texData.slice!=null&&Fa.texData.slice.flatOffset>0&&(el.flatOffset=Fa.texData.slice.flatOffset),{name:aa.variableNames[La],shapeInfo:el}}),Ta=Sa.map(Fa=>Fa.shapeInfo),wa={logicalShape:ba.shape,texShape:ba.texData.texShape,isUniform:!1,isPacked:ba.texData.isPacked,flatOffset:null},Ea=makeShader(Sa,wa,aa),ka=createFragmentShader(ha.gl,Ea),Aa=ha.createProgram(ka);return env().get("ENGINE_COMPILE_ONLY")?{program:aa,fragmentShader:ka,source:Ea,webGLProgram:Aa,inShapeInfos:Ta,outShapeInfo:wa,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(ha.buildVao(Aa),Object.assign({program:aa,fragmentShader:ka,source:Ea,webGLProgram:Aa,inShapeInfos:Ta,outShapeInfo:wa},getUniformLocations(ha,aa,Aa)))}function getUniformLocations(ha,aa,xa){const ba=[],Sa=[];let Ta,wa,Ea,ka=null,Aa=null;Aa=ha.getUniformLocation(xa,"NAN",!1),env().getNumber("WEBGL_VERSION")===1&&(ka=ha.getUniformLocation(xa,"INFINITY",!1));const Fa=!1;for(const La of aa.variableNames){const el={name:La,uniform:ha.getUniformLocation(xa,La,Fa),offset:ha.getUniformLocation(xa,`offset${La}`,Fa)};aa.enableShapeUniforms&&(el.shape=ha.getUniformLocation(xa,`${La}Shape`,Fa),el.texShape=ha.getUniformLocation(xa,`${La}TexShape`,Fa)),ba.push(el)}if(aa.enableShapeUniforms&&(Ta=ha.getUniformLocation(xa,"outShape",Fa),Ea=ha.getUniformLocation(xa,"outShapeStrides",Fa),wa=ha.getUniformLocation(xa,"outTexShape",Fa)),aa.customUniforms)for(const La of aa.customUniforms)Sa.push(ha.getUniformLocation(xa,La.name,Fa));return{variablesLocations:ba,customUniformLocations:Sa,infLoc:ka,nanLoc:Aa,outShapeLocation:Ta,outShapeStridesLocation:Ea,outTexShapeLocation:wa}}function validateBinaryAndProgram(ha,aa){if(ha.length!==aa.length)throw Error(`Binary was compiled with ${ha.length} inputs, but was executed with ${aa.length} inputs`);ha.forEach((xa,ba)=>{const Sa=xa.logicalShape,Ta=aa[ba],wa=Ta.shape;if(!arraysEqual(Sa,wa))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${Sa} and ${wa} must match`);if(xa.isUniform&&Ta.isUniform)return;const Ea=xa.texShape,ka=Ta.isUniform?null:Ta.texData.texShape;if(!arraysEqual(Ea,ka))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${Ea} and ${ka} must match`)})}function runProgram(ha,aa,xa,ba,Sa){aa.program.enableShapeUniforms||(validateBinaryAndProgram(aa.inShapeInfos,xa),validateBinaryAndProgram([aa.outShapeInfo],[ba]));const Ta=ba.texData.texture,wa=ba.texData.texShape;ba.texData.isPacked?ha.setOutputPackedMatrixTexture(Ta.texture,wa[0],wa[1]):ha.setOutputMatrixTexture(Ta.texture,wa[0],wa[1]),ha.setProgram(aa.webGLProgram),ha.bindVertexArray(aa.webGLProgram.vao),env().getNumber("WEBGL_VERSION")===1&&aa.infLoc!==null&&ha.gl.uniform1f(aa.infLoc,1/0),aa.nanLoc!==null&&ha.gl.uniform1f(aa.nanLoc,NaN);for(let ka=0;ka<xa.length;++ka){const Aa=xa[ka],{uniform:Fa,offset:La,shape:el,texShape:tl}=aa.variablesLocations[ka];if(el){const{uniformShape:nl}=getUniformInfoFromShape(aa.program.packedInputs,Aa.shape,Aa.texData.texShape);switch(nl.length){case 1:ha.gl.uniform1iv(el,new Int32Array(nl));break;case 2:ha.gl.uniform2iv(el,new Int32Array(nl));break;case 3:ha.gl.uniform3iv(el,new Int32Array(nl));break;case 4:ha.gl.uniform4iv(el,new Int32Array(nl));break}}if(tl&&ha.gl.uniform2i(tl,Aa.texData.texShape[0],Aa.texData.texShape[1]),Fa!=null){if(Aa.isUniform){if(sizeFromShape(Aa.shape)<2)ha.gl.uniform1f(Fa,Aa.uniformValues[0]);else{let nl=Aa.uniformValues;nl instanceof Float32Array||(nl=new Float32Array(nl)),ha.gl.uniform1fv(Fa,nl)}continue}Aa.texData.slice!=null&&La!=null&&ha.gl.uniform1i(La,Aa.texData.slice.flatOffset),ha.setInputMatrixTexture(Aa.texData.texture.texture,Fa,ka)}}const Ea=aa.outShapeLocation;if(Ea)switch(ba.shape.length){case 1:ha.gl.uniform1iv(Ea,new Int32Array(ba.shape));break;case 2:ha.gl.uniform2iv(Ea,new Int32Array(ba.shape));break;case 3:ha.gl.uniform3iv(Ea,new Int32Array(ba.shape));break;case 4:ha.gl.uniform4iv(Ea,new Int32Array(ba.shape));break}if(aa.outShapeStridesLocation){const ka=computeStrides(ba.shape);switch(ba.shape.length){case 2:ha.gl.uniform1iv(aa.outShapeStridesLocation,new Int32Array(ka));break;case 3:ha.gl.uniform2iv(aa.outShapeStridesLocation,new Int32Array(ka));break;case 4:ha.gl.uniform3iv(aa.outShapeStridesLocation,new Int32Array(ka));break}}if(aa.outTexShapeLocation&&ha.gl.uniform2i(aa.outTexShapeLocation,ba.texData.texShape[0],ba.texData.texShape[1]),aa.program.customUniforms&&Sa)for(let ka=0;ka<aa.program.customUniforms.length;++ka){const Aa=aa.program.customUniforms[ka],Fa=aa.customUniformLocations[ka],La=Sa[ka];if(Aa.type==="float")ha.gl.uniform1fv(Fa,La);else if(Aa.type==="vec2")ha.gl.uniform2fv(Fa,La);else if(Aa.type==="vec3")ha.gl.uniform3fv(Fa,La);else if(Aa.type==="vec4")ha.gl.uniform4fv(Fa,La);else if(Aa.type==="int")ha.gl.uniform1iv(Fa,La);else if(Aa.type==="ivec2")ha.gl.uniform2iv(Fa,La);else if(Aa.type==="ivec3")ha.gl.uniform3iv(Fa,La);else if(Aa.type==="ivec4")ha.gl.uniform4iv(Fa,La);else throw Error(`uniform type ${Aa.type} is not supported yet.`)}ha.executeProgram()}function makeShaderKey(ha,aa,xa){let ba="";aa.concat(xa).forEach(wa=>{const Ea=wa.texData!=null&&wa.texData.slice!=null&&wa.texData.slice.flatOffset>0;if(ha.enableShapeUniforms&&!wa.isUniform){const ka=wa.texData.texShape,{useSqueezeShape:Aa,uniformShape:Fa,keptDims:La}=getUniformInfoFromShape(ha.packedInputs,wa.shape,ka);let el="",tl="",nl="";if(Fa.length===1&&ha.packedInputs){const cl=[Math.ceil(ka[0]/2),Math.ceil(ka[1]/2)];el=`${cl[0]>1}_${cl[1]>1}`}else if(Fa.length===2&&!ha.packedInputs)tl=`${Fa[0]>1}_${Fa[1]>1}`;else if(Fa.length>2&&!ha.packedInputs){const cl=computeStrides(Fa);nl=`${cl[0]===ka[1]}_${cl[cl.length-1]===ka[1]}`}const rl=wa.shape.length,sl=Fa.length===2&&arraysEqual(wa.shape,ka),ol=sizeFromShape(wa.shape)===1,al=getBroadcastDims$1(wa.shape,xa.shape),ll=!ha.packedInputs&&rl===xa.shape.length&&arraysEqual(ka,xa.texData.texShape),il=ha.packedInputs||Fa.length>2?"":`${ka[0]>1}_${ka[1]>1}`;ba+=`${rl}_${ll}_${Aa?La:""}_${Fa.length}_${ol}_${al}_${sl}_${el}_${tl}_${nl}_${il}_${Ea}`}else{const ka=wa.isUniform?"uniform":wa.texData.texShape;ba+=`${wa.shape}_${ka}_${Ea}`}});const Sa=ha.userCode;let Ta=ha.constructor.name;return Ta+="_"+ba+"_"+Sa+`${env().getNumber("WEBGL_VERSION")}`,Ta}function useShapeUniforms(ha){return env().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&ha<=4}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DecodeMatrixProgram{constructor(aa){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const xa=getGlslDifferences();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],aa):getLogicalCoordinatesFromFlatIndex(["r","c","d"],aa)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${xa.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DecodeMatrixPackedProgram{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const xa=getGlslDifferences();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],aa):getLogicalCoordinatesFromFlatIndex(["r","c","d"],aa)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${xa.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeFloatProgram{constructor(aa){this.variableNames=["A"],this.outTexUsage=TextureUsage.DOWNLOAD;const xa=getGlslDifferences();this.outputShape=aa,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${xa.output} = encode_float(x);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeFloatPackedProgram{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=TextureUsage.DOWNLOAD;const xa=getGlslDifferences();this.outputShape=aa,this.userCode=`
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${xa.output} = encode_float(x);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHANNEL_CHAR_TO_INDEX_MAP={R:0,G:1,B:2,A:3};class EncodeMatrixProgram{constructor(aa,xa=!1,ba="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const Sa=getGlslDifferences();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let Ta="result";xa&&(Ta="floor(result * 255. + 0.5)");let wa="";for(let Ea=0;Ea<ba.length;Ea++){const ka=ba[Ea];wa+=`
          if(offset == ${Ea}) {
            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[ka]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(aa)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${ba.length});

        flatIndex = idiv(flatIndex, ${ba.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${Sa.texture2D}(A, uv);
          ${wa}
        }
        ${Sa.output} = vec4(${Ta}, 0., 0., 0.);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class EncodeMatrixPackedProgram{constructor(aa,xa=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const ba=getGlslDifferences();this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let Sa="",Ta="result";xa&&(Ta="floor(result * 255. + 0.5)");for(let wa=0;wa<=1;wa++)for(let Ea=0;Ea<=1;Ea++){const ka=wa*2+Ea;Sa+=`
          localCoords = coords;
          if(localCoords[2] + ${Ea} < ${this.enableShapeUniforms?"outShape[2]":`${aa[2]}`}) {
          localCoords[2] += ${Ea};
          if (localCoords[1] + ${wa} < ${this.enableShapeUniforms?"outShape[1]":`${aa[1]}`}) {
            localCoords[1] += ${wa};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${ba.texture2D}(A, uv);

            if (offset == 0) {
              result[${ka}] = values[0];
            } else if (offset == 1) {
              result[${ka}] = values[1];
            } else if (offset == 2) {
              result[${ka}] = values[2];
            } else {
              result[${ka}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(aa)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${Sa}

          ${ba.output} = ${Ta};
        }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createVertexShader(ha){const aa=getGlslDifferences(),xa=`${aa.version}
    precision highp float;
    ${aa.attribute} vec3 clipSpacePos;
    ${aa.attribute} vec2 uv;
    ${aa.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return createVertexShader$1(ha,xa)}function createVertexBuffer(ha){const aa=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return createStaticVertexBuffer(ha,aa)}function createIndexBuffer(ha){const aa=new Uint16Array([0,1,2,2,1,3]);return createStaticIndexBuffer(ha,aa)}function createAndConfigureTexture(ha,aa,xa,ba,Sa,Ta){validateTextureSize(aa,xa);const wa=createTexture(ha),Ea=ha.TEXTURE_2D;return callAndCheck(ha,()=>ha.bindTexture(Ea,wa)),callAndCheck(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_WRAP_S,ha.CLAMP_TO_EDGE)),callAndCheck(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_WRAP_T,ha.CLAMP_TO_EDGE)),callAndCheck(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_MIN_FILTER,ha.NEAREST)),callAndCheck(ha,()=>ha.texParameteri(Ea,ha.TEXTURE_MAG_FILTER,ha.NEAREST)),env().getNumber("WEBGL_VERSION")===1?callAndCheck(ha,()=>ha.texImage2D(Ea,0,ba,aa,xa,0,Sa,Ta,null)):callAndCheck(ha,()=>ha.texStorage2D(Ea,1,ba,aa,xa)),callAndCheck(ha,()=>ha.bindTexture(ha.TEXTURE_2D,null)),{texture:wa,texShape:[xa,aa]}}function getInternalFormatForFloat32MatrixTexture(ha){return ha.internalFormatFloat}function createFloat32MatrixTexture(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight(aa,xa);return createAndConfigureTexture(ha,Sa,Ta,getInternalFormatForFloat32MatrixTexture(ba),ba.textureFormatFloat,ha.FLOAT)}function getInternalFormatForFloat16MatrixTexture(ha){return ha.internalFormatHalfFloat}function createFloat16MatrixTexture(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight(aa,xa);return createAndConfigureTexture(ha,Sa,Ta,getInternalFormatForFloat16MatrixTexture(ba),ba.textureFormatFloat,ba.textureTypeHalfFloat)}function getInternalFormatForUnsignedBytesMatrixTexture(ha){return ha.downloadTextureFormat}function createUnsignedBytesMatrixTexture(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight(aa,xa);return createAndConfigureTexture(ha,Sa,Ta,getInternalFormatForUnsignedBytesMatrixTexture(ba),ha.RGBA,ha.UNSIGNED_BYTE)}function getInternalFormatForPackedMatrixTexture(ha){return ha.internalFormatPackedFloat}function createPackedMatrixTexture(ha,aa,xa,ba){const[Sa,Ta]=getPackedMatrixTextureShapeWidthHeight(aa,xa);return createAndConfigureTexture(ha,Sa,Ta,getInternalFormatForPackedMatrixTexture(ba),ha.RGBA,ha.FLOAT)}function getInternalFormatForFloat16PackedMatrixTexture(ha){return ha.internalFormatPackedHalfFloat}function createFloat16PackedMatrixTexture(ha,aa,xa,ba){const[Sa,Ta]=getPackedMatrixTextureShapeWidthHeight(aa,xa);return createAndConfigureTexture(ha,Sa,Ta,getInternalFormatForFloat16PackedMatrixTexture(ba),ha.RGBA,ba.textureTypeHalfFloat)}function bindVertexProgramAttributeStreams(ha,aa,xa){return callAndCheck(ha,()=>ha.bindBuffer(ha.ARRAY_BUFFER,xa)),bindVertexBufferToProgramAttribute(ha,aa,"clipSpacePos",xa,3,20,0)&&bindVertexBufferToProgramAttribute(ha,aa,"uv",xa,2,20,12)}function uploadDenseMatrixToTexture(ha,aa,xa,ba,Sa,Ta){callAndCheck(ha,()=>ha.bindTexture(ha.TEXTURE_2D,aa));let wa,Ea,ka;Sa instanceof Uint8Array?(wa=new Uint8Array(xa*ba*4),Ea=ha.UNSIGNED_BYTE,ka=ha.RGBA):(wa=new Float32Array(xa*ba*4),Ea=ha.FLOAT,ka=Ta.internalFormatPackedFloat),wa.set(Sa),env().getNumber("WEBGL_VERSION")===2?callAndCheck(ha,()=>ha.texSubImage2D(ha.TEXTURE_2D,0,0,0,xa,ba,ha.RGBA,Ea,wa)):callAndCheck(ha,()=>ha.texImage2D(ha.TEXTURE_2D,0,ka,xa,ba,0,ha.RGBA,Ea,wa)),callAndCheck(ha,()=>ha.bindTexture(ha.TEXTURE_2D,null))}function uploadPixelDataToTexture(ha,aa,xa){callAndCheck(ha,()=>ha.bindTexture(ha.TEXTURE_2D,aa)),xa.data instanceof Uint8Array?env().getNumber("WEBGL_VERSION")===2?callAndCheck(ha,()=>ha.texSubImage2D(ha.TEXTURE_2D,0,0,0,xa.width,xa.height,ha.RGBA,ha.UNSIGNED_BYTE,xa.data)):callAndCheck(ha,()=>ha.texImage2D(ha.TEXTURE_2D,0,ha.RGBA,xa.width,xa.height,0,ha.RGBA,ha.UNSIGNED_BYTE,xa.data)):env().getNumber("WEBGL_VERSION")===2?callAndCheck(ha,()=>ha.texSubImage2D(ha.TEXTURE_2D,0,0,0,ha.RGBA,ha.UNSIGNED_BYTE,xa)):callAndCheck(ha,()=>ha.texImage2D(ha.TEXTURE_2D,0,ha.RGBA,ha.RGBA,ha.UNSIGNED_BYTE,xa)),callAndCheck(ha,()=>ha.bindTexture(ha.TEXTURE_2D,null))}function createBufferFromOutputTexture(ha,aa,xa,ba){const Sa=ha.createBuffer();callAndCheck(ha,()=>ha.bindBuffer(ha.PIXEL_PACK_BUFFER,Sa));const Ea=4*4*aa*xa;return callAndCheck(ha,()=>ha.bufferData(ha.PIXEL_PACK_BUFFER,Ea,ha.STREAM_READ)),callAndCheck(ha,()=>ha.readPixels(0,0,xa,aa,ha.RGBA,ha.FLOAT,0)),callAndCheck(ha,()=>ha.bindBuffer(ha.PIXEL_PACK_BUFFER,null)),Sa}function downloadFloat32MatrixFromBuffer(ha,aa,xa){const ba=ha,Sa=new Float32Array(xa);return ba.bindBuffer(ba.PIXEL_PACK_BUFFER,aa),ba.getBufferSubData(ba.PIXEL_PACK_BUFFER,0,Sa),ba.bindBuffer(ba.PIXEL_PACK_BUFFER,null),Sa}function downloadByteEncodedFloatMatrixFromOutputTexture(ha,aa,xa,ba){const[Sa,Ta]=getUnpackedMatrixTextureShapeWidthHeight(aa,xa),wa=4,Ea=new Uint8Array(getUnpackedArraySizeFromMatrixSize(aa*xa,wa));return callAndCheck(ha,()=>ha.readPixels(0,0,Sa,Ta,ba.downloadTextureFormat,ha.UNSIGNED_BYTE,Ea)),new Float32Array(Ea.buffer)}function downloadPackedMatrixFromBuffer(ha,aa,xa,ba,Sa,Ta,wa,Ea){const ka=ha,Aa=new Float32Array(getPackedRGBAArraySizeFromMatrixShape(Ta,wa));return ka.bindBuffer(ka.PIXEL_PACK_BUFFER,aa),ka.getBufferSubData(ka.PIXEL_PACK_BUFFER,0,Aa),ka.bindBuffer(ka.PIXEL_PACK_BUFFER,null),Aa}function downloadMatrixFromPackedOutputTexture(ha,aa,xa){const ba=new Float32Array(aa*xa*4);return callAndCheck(ha,()=>ha.readPixels(0,0,xa,aa,ha.RGBA,ha.FLOAT,ba)),ba}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GPGPUContext{constructor(aa){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const xa=env().getNumber("WEBGL_VERSION");if(aa!=null?(this.gl=aa,setWebGLContext(xa,aa)):this.gl=getWebGLContext(xa),aa=this.gl,env().getNumber("WEBGL_VERSION")===2){const Ta=aa;this.createVertexArray=()=>callAndCheck(Ta,()=>Ta.createVertexArray()),this.bindVertexArray=wa=>callAndCheck(Ta,()=>Ta.bindVertexArray(wa)),this.deleteVertexArray=wa=>callAndCheck(Ta,()=>Ta.deleteVertexArray(wa)),this.getVertexArray=()=>callAndCheck(Ta,()=>Ta.getParameter(Ta.VERTEX_ARRAY_BINDING))}else if(aa!=null){const Ta=aa.getExtension("OES_vertex_array_object");if(Ta==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>callAndCheck(aa,()=>Ta.createVertexArrayOES()),this.bindVertexArray=wa=>callAndCheck(aa,()=>Ta.bindVertexArrayOES(wa)),this.deleteVertexArray=wa=>callAndCheck(aa,()=>Ta.deleteVertexArrayOES(wa)),this.getVertexArray=()=>callAndCheck(aa,()=>aa.getParameter(Ta.VERTEX_ARRAY_BINDING_OES))}let ba="WEBGL_color_buffer_float";const Sa="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),env().getNumber("WEBGL_VERSION")===1){const Ta="OES_texture_float",wa="OES_texture_half_float";if(this.textureFloatExtension=getExtensionOrThrow(this.gl,Ta),hasExtension(this.gl,wa))this.textureHalfFloatExtension=getExtensionOrThrow(this.gl,wa);else if(env().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(ba),hasExtension(this.gl,Sa))this.colorBufferHalfFloatExtension=getExtensionOrThrow(this.gl,Sa);else if(env().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(ba="EXT_color_buffer_float",hasExtension(this.gl,ba))this.colorBufferFloatExtension=this.gl.getExtension(ba);else if(hasExtension(this.gl,Sa))this.colorBufferHalfFloatExtension=this.gl.getExtension(Sa);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=createVertexBuffer(this.gl),this.indexBuffer=createIndexBuffer(this.gl),this.framebuffer=createFramebuffer(this.gl),this.textureConfig=getTextureConfig(this.gl,this.textureHalfFloatExtension)}get debug(){return env().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const aa=this.gl;callAndCheck(aa,()=>aa.finish()),callAndCheck(aa,()=>aa.bindFramebuffer(aa.FRAMEBUFFER,null)),callAndCheck(aa,()=>aa.deleteFramebuffer(this.framebuffer)),callAndCheck(aa,()=>aa.bindBuffer(aa.ARRAY_BUFFER,null)),callAndCheck(aa,()=>aa.bindBuffer(aa.ELEMENT_ARRAY_BUFFER,null)),callAndCheck(aa,()=>aa.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(aa,xa){return this.throwIfDisposed(),createFloat32MatrixTexture(this.gl,aa,xa,this.textureConfig)}createFloat16MatrixTexture(aa,xa){return this.throwIfDisposed(),createFloat16MatrixTexture(this.gl,aa,xa,this.textureConfig)}createUnsignedBytesMatrixTexture(aa,xa){return this.throwIfDisposed(),createUnsignedBytesMatrixTexture(this.gl,aa,xa,this.textureConfig)}uploadPixelDataToTexture(aa,xa){this.throwIfDisposed(),uploadPixelDataToTexture(this.gl,aa,xa)}uploadDenseMatrixToTexture(aa,xa,ba,Sa){this.throwIfDisposed(),uploadDenseMatrixToTexture(this.gl,aa,xa,ba,Sa,this.textureConfig)}createFloat16PackedMatrixTexture(aa,xa){return this.throwIfDisposed(),createFloat16PackedMatrixTexture(this.gl,aa,xa,this.textureConfig)}createPackedMatrixTexture(aa,xa){return this.throwIfDisposed(),createPackedMatrixTexture(this.gl,aa,xa,this.textureConfig)}deleteMatrixTexture(aa){this.throwIfDisposed(),this.outputTexture===aa&&(unbindColorTextureFromFramebuffer(this.gl,this.framebuffer),this.outputTexture=null),callAndCheck(this.gl,()=>this.gl.deleteTexture(aa))}downloadByteEncodedFloatMatrixFromOutputTexture(aa,xa,ba){return this.downloadMatrixDriver(aa,()=>downloadByteEncodedFloatMatrixFromOutputTexture(this.gl,xa,ba,this.textureConfig))}downloadPackedMatrixFromBuffer(aa,xa,ba,Sa,Ta,wa){return downloadPackedMatrixFromBuffer(this.gl,aa,xa,ba,Sa,Ta,wa,this.textureConfig)}downloadFloat32MatrixFromBuffer(aa,xa){return downloadFloat32MatrixFromBuffer(this.gl,aa,xa)}createBufferFromTexture(aa,xa,ba){this.bindTextureToFrameBuffer(aa);const Sa=createBufferFromOutputTexture(this.gl,xa,ba,this.textureConfig);return this.unbindTextureToFrameBuffer(),Sa}createAndWaitForFence(){const aa=this.createFence(this.gl);return this.pollFence(aa)}createFence(aa){let xa,ba;if(env().getBool("WEBGL_FENCE_API_ENABLED")){const Sa=aa,Ta=Sa.fenceSync(Sa.SYNC_GPU_COMMANDS_COMPLETE,0);aa.flush(),ba=()=>{const wa=Sa.clientWaitSync(Ta,0,0);return wa===Sa.ALREADY_SIGNALED||wa===Sa.CONDITION_SATISFIED},xa=Ta}else env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(xa=this.beginQuery(),this.endQuery(),ba=()=>this.isQueryAvailable(xa,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):ba=()=>!0;return{query:xa,isFencePassed:ba}}downloadMatrixFromPackedTexture(aa,xa,ba){return this.downloadMatrixDriver(aa,()=>downloadMatrixFromPackedOutputTexture(this.gl,xa,ba))}createProgram(aa){this.throwIfDisposed();const xa=this.gl;this.vertexShader==null&&(this.vertexShader=createVertexShader(xa));const ba=createProgram(xa);callAndCheck(xa,()=>xa.attachShader(ba,this.vertexShader)),callAndCheck(xa,()=>xa.attachShader(ba,aa)),linkProgram(xa,ba);const Sa=Object.assign(ba,{vao:this.createVertexArray()});return this.debug&&validateProgram(xa,Sa),Sa}buildVao(aa){this.setProgram(aa),this.bindVertexArray(aa.vao);const xa=this.gl;callAndCheck(xa,()=>xa.bindBuffer(xa.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),bindVertexProgramAttributeStreams(xa,aa,this.vertexBuffer)}deleteProgram(aa){this.throwIfDisposed(),aa===this.program&&(this.program=null),aa!=null&&(callAndCheck(this.gl,()=>this.gl.deleteProgram(aa)),this.deleteVertexArray(aa.vao))}setProgram(aa){this.throwIfDisposed(),this.program=aa,this.program!=null&&this.debug&&validateProgram(this.gl,this.program),callAndCheck(this.gl,()=>this.gl.useProgram(aa))}getUniformLocation(aa,xa,ba=!0){return this.throwIfDisposed(),ba?getProgramUniformLocationOrThrow(this.gl,aa,xa):getProgramUniformLocation(this.gl,aa,xa)}getAttributeLocation(aa,xa){return this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.getAttribLocation(aa,xa))}getUniformLocationNoThrow(aa,xa){return this.throwIfDisposed(),this.gl.getUniformLocation(aa,xa)}setInputMatrixTexture(aa,xa,ba){this.throwIfDisposed(),this.throwIfNoProgram(),bindTextureToProgramUniformSampler(this.gl,aa,xa,ba)}setOutputMatrixTexture(aa,xa,ba){this.setOutputMatrixTextureDriver(aa,ba,xa)}setOutputPackedMatrixTexture(aa,xa,ba){this.throwIfDisposed();const[Sa,Ta]=getPackedMatrixTextureShapeWidthHeight(xa,ba);this.setOutputMatrixTextureDriver(aa,Sa,Ta)}setOutputMatrixWriteRegion(aa,xa,ba,Sa){this.setOutputMatrixWriteRegionDriver(ba,aa,Sa,xa)}setOutputPackedMatrixWriteRegion(aa,xa,ba,Sa){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&validateProgram(this.gl,this.program),validateFramebuffer(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const aa=this.gl;if(this.debug){const xa=this.getVertexArray();console.assert(xa===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}callAndCheck(aa,()=>aa.drawElements(aa.TRIANGLES,6,aa.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=getExtensionOrThrow(this.gl,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const ba=this.gl,Sa=this.getQueryTimerExtensionWebGL2(),Ta=ba.createQuery();return ba.beginQuery(Sa.TIME_ELAPSED_EXT,Ta),Ta}const aa=this.getQueryTimerExtensionWebGL1(),xa=aa.createQueryEXT();return aa.beginQueryEXT(aa.TIME_ELAPSED_EXT,xa),xa}endQuery(){if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){const xa=this.gl,ba=this.getQueryTimerExtensionWebGL2();xa.endQuery(ba.TIME_ELAPSED_EXT);return}const aa=this.getQueryTimerExtensionWebGL1();aa.endQueryEXT(aa.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(aa){return await repeatedTry(()=>this.disposed||this.isQueryAvailable(aa,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(aa,env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(aa,xa){if(xa===0)return null;if(xa===2){const ba=this.gl;return ba.getQueryParameter(aa,ba.QUERY_RESULT)/1e6}else{const ba=this.getQueryTimerExtensionWebGL1();return ba.getQueryObjectEXT(aa,ba.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(aa,xa){if(xa===0)return!0;if(xa===2){const ba=this.gl,Sa=this.getQueryTimerExtensionWebGL2(),Ta=ba.getQueryParameter(aa,ba.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(Sa.GPU_DISJOINT_EXT)),Ta&&!this.disjoint}else{const ba=this.getQueryTimerExtensionWebGL1(),Sa=ba.getQueryObjectEXT(aa,ba.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(ba.GPU_DISJOINT_EXT)),Sa&&!this.disjoint}}pollFence(aa){return new Promise(xa=>{this.addItemToPoll(()=>aa.isFencePassed(),()=>xa())})}pollItems(){const aa=linearSearchLastTrue(this.itemsToPoll.map(xa=>xa.isDoneFn));for(let xa=0;xa<=aa;++xa){const{resolveFn:ba}=this.itemsToPoll[xa];ba()}this.itemsToPoll=this.itemsToPoll.slice(aa+1)}addItemToPoll(aa,xa){if(this.itemsToPoll.push({isDoneFn:aa,resolveFn:xa}),this.itemsToPoll.length>1)return;let ba;"setTimeoutCustom"in env().platform&&(ba=env().platform.setTimeoutCustom.bind(env().platform)),repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,ba)}bindTextureToFrameBuffer(aa){this.throwIfDisposed(),bindColorTextureToFramebuffer(this.gl,aa,this.framebuffer),this.debug&&validateFramebuffer(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(bindColorTextureToFramebuffer(this.gl,this.outputTexture,this.framebuffer),this.debug&&validateFramebuffer(this.gl)):unbindColorTextureFromFramebuffer(this.gl,this.framebuffer)}downloadMatrixDriver(aa,xa){this.bindTextureToFrameBuffer(aa);const ba=xa();return this.unbindTextureToFrameBuffer(),ba}setOutputMatrixTextureDriver(aa,xa,ba){this.throwIfDisposed();const Sa=this.gl;bindColorTextureToFramebuffer(Sa,aa,this.framebuffer),this.debug&&validateFramebuffer(Sa),this.outputTexture=aa,callAndCheck(Sa,()=>Sa.viewport(0,0,xa,ba)),callAndCheck(Sa,()=>Sa.scissor(0,0,xa,ba))}setOutputMatrixWriteRegionDriver(aa,xa,ba,Sa){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.scissor(aa,xa,ba,Sa))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}}function linearSearchLastTrue(ha){let aa=0;for(;aa<ha.length&&ha[aa]();++aa);return aa-1}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function simpleAbsImpl(ha){const aa=new Float32Array(ha.length);for(let xa=0;xa<ha.length;++xa)aa[xa]=Math.abs(ha[xa]);return aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleBinaryKernelImpl(ha){return(aa,xa,ba,Sa,Ta)=>{const wa=assertAndGetBroadcastShape(aa,xa),Ea=wa.length,ka=computeStrides(wa),Aa=sizeFromShape(wa),Fa=getTypedArrayFromDType(Ta,Aa),La=aa.length,el=xa.length,tl=computeStrides(aa),nl=computeStrides(xa),rl=getBroadcastDims$1(aa,wa),sl=getBroadcastDims$1(xa,wa);if(rl.length+sl.length===0)for(let ol=0;ol<Fa.length;++ol)Fa[ol]=ha(ba[ol%ba.length],Sa[ol%Sa.length]);else for(let ol=0;ol<Fa.length;++ol){const al=indexToLoc(ol,Ea,ka),ll=al.slice(-La);rl.forEach(dl=>ll[dl]=0);const il=locToIndex(ll,La,tl),cl=al.slice(-el);sl.forEach(dl=>cl[dl]=0);const ul=locToIndex(cl,el,nl);Fa[ol]=ha(ba[il],Sa[ul])}return[Fa,wa]}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function castImpl(ha,aa,xa,ba){if(ba==="int32"){const Sa=Int32Array.from(ha);return[aa,"int32",Sa]}if(ba==="bool"){const Sa=toTypedArray([0],xa),[Ta,wa]=createSimpleBinaryKernelImpl((Ea,ka)=>Ea!==ka?1:0)(aa,[],ha,Sa,"bool");return[wa,"bool",Ta]}throw new Error(`Error in Cast: failed to cast ${xa} to ${ba}`)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const addImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha+aa);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincountImpl(ha,aa,xa,ba,Sa){const Ta=sizeFromShape(ba),wa=makeZerosTypedArray(Sa,xa);for(let Ea=0;Ea<ha.length;Ea++){const ka=ha[Ea];if(ka<0)throw new Error("Input x must be non-negative!");ka>=Sa||(Ta>0?wa[ka]+=aa[Ea]:wa[ka]+=1)}return wa}function bincountReduceImpl(ha,aa,xa,ba=!1){const Sa=ha.shape[0],Ta=ha.shape[1],wa=buffer([Sa,xa],aa.dtype);for(let Ea=0;Ea<Sa;Ea++)for(let ka=0;ka<Ta;ka++){const Aa=ha.get(Ea,ka);if(Aa<0)throw new Error("Input x must be non-negative!");Aa>=xa||(ba?wa.set(1,Ea,Aa):aa.size>0?wa.set(wa.get(Ea,Aa)+aa.get(Ea,ka),Ea,Aa):wa.set(wa.get(Ea,Aa)+1,Ea,Aa))}return wa}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const bitwiseAndImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha&aa);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function createSimpleUnaryImpl(ha){return(aa,xa,ba)=>{const Sa=getArrayFromDType(xa,aa.length);for(let Ta=0;Ta<aa.length;++Ta)Sa[Ta]=ha(aa[Ta],ba);return Sa}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ceilImpl=createSimpleUnaryImpl(ha=>Math.ceil(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl$1(ha,aa,xa,ba){const Sa=getArrayFromDType(xa,sizeFromShape(aa));if(ba&&xa!=="string"){let Ta=0;ha.forEach(wa=>{const Ea=sizeFromShape(wa.shape);Sa.set(wa.vals,Ta),Ta+=Ea})}else{let Ta=0;ha.forEach(wa=>{const Ea=xa==="string"?fromUint8ToStringArray(wa.vals):wa.vals;let ka=0;for(let Aa=0;Aa<wa.shape[0];++Aa){const Fa=Aa*aa[1]+Ta;for(let La=0;La<wa.shape[1];++La)Sa[Fa+La]=Ea[ka++]}Ta+=wa.shape[1]})}return Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const equalImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha===aa?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expImpl=createSimpleUnaryImpl(ha=>Math.exp(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const expm1Impl=createSimpleUnaryImpl(ha=>Math.expm1(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorImpl=createSimpleUnaryImpl(ha=>Math.floor(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const floorDivImpl=createSimpleBinaryKernelImpl((ha,aa)=>Math.floor(ha/aa));/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNdImpl(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka){const Aa=buffer([ba,Ta],xa);for(let Fa=0;Fa<ba;Fa++){const La=[];let el=0;for(let tl=0;tl<Sa;tl++){const nl=ha[Fa*Sa+tl];el+=nl*wa[tl],La.push(nl)}if(el<0||el>=ka/Ta)throw new Error(`Invalid indices: ${La} does not index into ${Ea}`);for(let tl=0;tl<Ta;tl++)Aa.values[Fa*Ta+tl]=aa.get(...aa.indexToLoc(el*Ta+tl))}return Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2Impl(ha,aa,xa){const ba=buffer(xa,ha.dtype);for(let Sa=0;Sa<ba.size;++Sa){const wa=ba.indexToLoc(Sa).slice(),Ea=wa[0],ka=wa[2],Aa=aa.locToIndex([Ea,ka]);wa[2]=aa.values[Aa];const Fa=ha.locToIndex(wa);0<=Fa&&Fa<ha.values.length&&(ba.values[Sa]=ha.values[Fa])}return ba}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha>aa?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const greaterEqualImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha>=aa?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha<aa?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lessEqualImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha<=aa?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpaceImpl(ha,aa,xa){const ba=(aa-ha)/(xa-1),Sa=makeZerosTypedArray(xa,"float32");Sa[0]=ha;for(let Ta=1;Ta<Sa.length;Ta++)Sa[Ta]=Sa[Ta-1]+ba;return Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const logImpl=createSimpleUnaryImpl(ha=>Math.log(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl$1(ha,aa,xa,ba){const Sa=getTypedArrayFromDType(ba,sizeFromShape(xa));for(let Ta=0;Ta<Sa.length;++Ta){const wa=Ta*aa;let Ea=ha[wa];for(let ka=0;ka<aa;++ka){const Aa=ha[wa+ka];(Number.isNaN(Aa)||Aa>Ea)&&(Ea=Aa)}Sa[Ta]=Ea}return Sa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maximumImpl=createSimpleBinaryKernelImpl((ha,aa)=>Math.max(ha,aa));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const minimumImpl=createSimpleBinaryKernelImpl((ha,aa)=>Math.min(ha,aa));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const multiplyImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha*aa);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function negImpl(ha,aa,xa){const ba=createScalarValue(-1,xa);return multiplyImpl([],aa,ba,ha,xa)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const notEqualImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha!==aa?1:0);/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl$1(ha,aa,xa,ba,Sa){const Ta=aa.length,wa=sizeFromShape(aa),Ea=computeStrides(aa),ka=computeStrides(Sa),Aa=getTypedArrayFromDType(xa,sizeFromShape(Sa));for(let Fa=0;Fa<wa;++Fa){const La=indexToLoc(Fa,Ta,Ea),el=new Array(La.length);for(let nl=0;nl<el.length;nl++)el[nl]=La[ba[nl]];const tl=locToIndex(el,Ta,ka);Aa[tl]=ha[Fa]}return Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prodImpl(ha,aa,xa,ba){const[Sa,Ta]=computeOutAndReduceShapes(ha,ba),wa=upcastType(aa,"int32"),Ea=makeZerosTypedArray(sizeFromShape(Sa),wa),ka=sizeFromShape(Ta);for(let Aa=0;Aa<Ea.length;++Aa){const Fa=Aa*ka;let La=1;for(let el=0;el<ka;++el)La*=xa[Fa+el];Ea[Aa]=La}return{outVals:Ea,outShape:Sa,outDtype:wa}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function validateIndices(ha,aa,xa){ha.forEach((ba,Sa)=>{if(ba<0||ba>=xa){const Ta=indexToLoc(Sa,aa.length,computeStrides(aa)).join(",");throw new Error(`indices[${Ta}] = ${ba} is not in [0, ${xa})`)}})}function validateSplits(ha,aa){for(let xa=0;xa<ha.length;++xa){const ba=ha[xa],Sa=xa===ha.length-1?aa:ha[xa+1].length;if(ba.length===0)throw new Error("Ragged splits may not be empty");if(ba[0]<0)throw new Error("Ragged splits must be non-negative");if(ba[ba.length-1]>Sa)throw new Error("Ragged splits must not point past values");for(let Ta=1;Ta<ba.length;++Ta)if(ba[Ta-1]>ba[Ta])throw new Error("Ragged splits must be sorted in ascending order")}}function makeSplits(ha,aa,xa,ba){const Sa=[];let Ta=0;const wa=aa.length-1+xa.length,Ea=new Array(wa).fill(null).map(()=>[0]);validateSplits(xa,ba);let ka=1;for(let Aa=0;Aa<aa.length-1;++Aa){ka*=aa[Aa];const Fa=aa[Aa+1];for(let La=1;La<ka+1;++La)Ea[Aa].push(La*Fa)}for(let Aa=0;Aa<ha.length;++Aa){let Fa=ha[Aa],La=ha[Aa]+1;for(let el=0;el<xa.length;++el){const tl=xa[el],nl=el+aa.length-1;if(nl>=0){const rl=Ea[nl],sl=rl[rl.length-1]-tl[Fa];for(let ol=Fa;ol<La;++ol)Ea[nl].push(tl[ol+1]+sl)}Fa=tl[Fa],La=tl[La]}La!==Fa&&(Sa.push([Fa,La]),Ta+=La-Fa)}return{outSplits:Ea,valueSlices:Sa,numValues:Ta}}function getSplits(ha){const aa=[];for(let xa=0;xa<ha.length;++xa){const ba=ha[xa].length,Sa=getArrayFromDType("int32",ba);aa.push(Sa),ha[xa].forEach((Ta,wa)=>Sa[wa]=Ta)}return aa}function computeFlatOuterDims(ha,aa){const xa=ha.slice(0,aa);for(;xa.length<aa;)xa.push(1);for(let ba=aa;ba<ha.length;ba++)xa[aa-1]*=ha[ba];return xa}function writeValueSlices(ha,aa,xa,ba,Sa,Ta){const wa=computeFlatOuterDims(aa,2)[1],Ea=computeFlatOuterDims(Ta,2)[1];let ka=0;for(const Aa of xa)for(let Fa=Aa[0];Fa<Aa[1];++Fa){for(let La=0;La<ba;++La)Sa[ka*Ea+La]=ha[Fa*wa+La];++ka}}function getValues(ha,aa,xa,ba,Sa){const Ta=aa.slice();Ta[0]=Sa;const wa=getArrayFromDType(xa,sizeFromShape(Ta)),Ea=ha.length,ka=Ea===0?0:Ea/aa[0];return writeValueSlices(ha,aa,ba,ka,wa,Ta),[wa,Ta]}function raggedGatherImpl(ha,aa,xa,ba,Sa,Ta,wa,Ea){if(ha.length===0)throw new Error("paramsNestedSplits must be non empty");if(aa[0].length===0)throw new Error("Split tensors must not be scalars");const ka=aa[0][0]-1;if(validateIndices(Ta,wa,ka),ba.length===0)throw new Error("params.rank must be nonzero");const Aa=ba[0],{outSplits:Fa,valueSlices:La,numValues:el}=makeSplits(Ta,wa,ha,Aa),tl=getSplits(Fa),nl=getValues(xa,ba,Sa,La,el);return[tl,nl[0],nl[1]]}/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT32_MAX=2147483647;function raggedRangeImpl(ha,aa,xa,ba,Sa,Ta,wa){if(aa.length>1)throw new Error("starts must be a scalar or vector");if(Sa.length>1)throw new Error("limits must be a scalar or vector");if(wa.length>1)throw new Error("deltas must be a scalar or vector");const Ea=aa.length===0,ka=Sa.length===0,Aa=wa.length===0,Fa=[];Ea||Fa.push(aa[0]),ka||Fa.push(Sa[0]),Aa||Fa.push(wa[0]);for(let sl=1;sl<Fa.length;++sl)if(Fa[sl]!==Fa[sl-1])throw new Error("starts, limits, and deltas must have the same shape");const La=Fa.length===0?1:Fa[0],el=getArrayFromDType("int32",La+1);el[0]=0;for(let sl=0;sl<La;++sl){const ol=Ea?ha[0]:ha[sl],al=ka?ba[0]:ba[sl],ll=Aa?Ta[0]:Ta[sl];if(ll===0)throw new Error("Requires delta != 0");let il;if(ll>0&&al<ol||ll<0&&al>ol)il=0;else if(il=Math.ceil(Math.abs((al-ol)/ll)),il>INT32_MAX)throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);el[sl+1]=el[sl]+il}const tl=el[La],nl=getArrayFromDType(xa,tl);let rl=0;for(let sl=0;sl<La;++sl){const ol=el[sl+1]-el[sl];let al=Ea?ha[0]:ha[sl];const ll=Aa?Ta[0]:Ta[sl];for(let il=0;il<ol;++il)nl[rl++]=al,al+=ll}return[el,nl]}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var RowPartitionType=RowPartitionType$1;class RaggedTensorToTensorOp{constructor(aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa,Fa){this.shape=aa,this.shapeShape=xa,this.values=ba,this.valuesShape=Sa,this.valuesDType=Ta,this.defaultValue=wa,this.defaultValueShape=Ea,this.rowPartitionValues=ka,this.rowPartitionValuesShapes=Aa,this.rowPartitionTypes=getRowPartitionTypesHelper(Fa),this.raggedRank=getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(aa){return this.rowPartitionTypes[0]===RowPartitionType.FIRST_DIM_SIZE?this.rowPartitionTypes[aa+1]:this.rowPartitionTypes[aa]}getRowPartitionTensor(aa){return this.rowPartitionTypes[0]===RowPartitionType.FIRST_DIM_SIZE?this.rowPartitionValues[aa+1]:this.rowPartitionValues[aa]}getMaxWidth(aa){const xa=this.getRowPartitionTensor(aa-1);switch(this.getRowPartitionTypeByDimension(aa-1)){case RowPartitionType.VALUE_ROWIDS:return RaggedTensorToTensorOp.getMaxWidthValueRowID(xa);case RowPartitionType.ROW_SPLITS:return RaggedTensorToTensorOp.getMaxWidthRowSplit(xa);default:throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(aa-1)]}`)}}static getMaxWidthRowSplit(aa){const xa=aa.length;if(xa===0||xa===1)return 0;let ba=0;for(let Sa=0;Sa<xa-1;++Sa){const Ta=aa[Sa+1]-aa[Sa];Ta>ba&&(ba=Ta)}return ba}static getMaxWidthValueRowID(aa){const xa=aa.length;if(xa===0)return 0;let ba=0,Sa=aa[0],Ta=0;for(let wa=1;wa<xa;++wa){const Ea=aa[wa];Ea!==Sa&&(Sa=Ea,Ta=Math.max(wa-ba,Ta),ba=wa)}return Math.max(xa-ba,Ta)}tensorShapeFromTensor(aa,xa,ba=!0){if(xa.length===0){if(aa[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return makeShape(aa,ba)}calculateOutputSize(aa){const xa=this.valuesShape,ba=this.defaultValueShape;validateDefaultValueShape(ba,xa);const Sa=this.tensorShapeFromTensor(this.shape,this.shapeShape),wa=combineRaggedTensorToTensorShapes(this.raggedRank,Sa,xa);wa[0]<0&&(wa[0]=aa);for(let Ea=1;Ea<=this.raggedRank;++Ea)wa[Ea]<0&&(wa[Ea]=this.getMaxWidth(Ea));return wa}calculateFirstParentOutputIndex(aa,xa,ba){const Sa=Math.min(aa,ba),Ta=[];let wa=0;for(let Ea=0;Ea<Sa;++Ea,wa+=xa)Ta.push(wa);for(let Ea=Sa;Ea<aa;++Ea)Ta.push(-1);return assert(Ta.length===aa,()=>"Final length of result must be equal to firstDimension."),Ta}calculateOutputIndexRowSplit(aa,xa,ba,Sa){const Ta=aa.length,wa=[];for(let Ea=0;Ea<Ta-1;++Ea){const ka=aa[Ea+1]-aa[Ea];let Aa=Math.min(Sa,ka),Fa=xa[Ea];Fa===-1&&(Aa=0);for(let La=0;La<Aa;++La)wa.push(Fa),Fa+=ba;for(let La=0;La<ka-Aa;++La)wa.push(-1)}if(Ta>0&&wa.length!==aa[Ta-1])throw new Error("Invalid row split size.");return wa}calculateOutputIndexValueRowID(aa,xa,ba,Sa){const Ta=aa.length,wa=[];if(Ta===0)return[];let Ea=0,ka=aa[0];if(ka>=xa.length)throw new Error(`Got currentValueRowId=${ka}, which is not less than ${xa.length}`);let Aa=xa[ka];wa.push(Aa);for(let Fa=1;Fa<Ta;++Fa){const La=aa[Fa];if(La===ka)Aa>=0&&(++Ea,Ea<Sa?Aa+=ba:Aa=-1);else{if(Ea=0,ka=La,La>=xa.length)throw new Error(`Got nextValueRowId=${La} which is not less than ${xa.length}`);Aa=xa[La]}wa.push(Aa)}if(wa.length!==aa.length)throw new Error("Invalid row ids.");return wa}calculateOutputIndex(aa,xa,ba,Sa){const Ta=this.getRowPartitionTensor(aa),wa=this.getRowPartitionTypeByDimension(aa);switch(wa){case RowPartitionType.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(Ta,xa,ba,Sa);case RowPartitionType.ROW_SPLITS:if(Ta.length-1>xa.length)throw new Error(`Row partition size is greater than output size: ${Ta.length-1} > ${xa.length}`);return this.calculateOutputIndexRowSplit(Ta,xa,ba,Sa);default:throw new Error(`Unsupported partition type: ${RowPartitionType[wa]}`)}}getFirstDimensionSize(){const aa=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");const xa=this.rowPartitionTypes[0];switch(xa){case RowPartitionType.FIRST_DIM_SIZE:return aa[0];case RowPartitionType.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case RowPartitionType.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${RowPartitionType[xa]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const xa=this.getFirstDimensionSize(),ba=this.calculateOutputSize(xa),Sa=new Array(this.raggedRank+1);Sa[Sa.length-1]=1;for(let ka=Sa.length-2;ka>=0;--ka)Sa[ka]=Sa[ka+1]*ba[ka+1];const Ta=makeShape(ba,!1),wa=getArrayFromDType(this.valuesDType,sizeFromShape(Ta));if(Sa[0]*ba[0]>0){let ka=this.calculateFirstParentOutputIndex(xa,Sa[0],ba[0]);for(let Aa=1;Aa<=this.raggedRank;++Aa)ka=this.calculateOutputIndex(Aa-1,ka,Sa[Aa],ba[Aa]);this.setOutput(this.raggedRank,ka,wa,Ta)}return[Ta,wa]}setOutput(aa,xa,ba,Sa){if(ba.length===0)return;const Ta=this.values,wa=ba;let Ea=Sa.slice();Ea=Ea.slice(aa+1);const ka=sizeFromShape(Ea),Aa=xa.length;let Fa=this.defaultValue;if(Fa.length!==ka&&Fa.length!==1){const nl=this.defaultValueShape;tidy(()=>{const rl=reshape$1(Fa,nl);Fa=broadcastTo(rl,Ea).dataSync()})}let La=0,el=0,tl=0;for(let nl=0;nl<=Aa;++nl){let rl=nl<Aa?xa[nl]:-1;if(rl===tl){++tl;continue}if(el<tl){const sl=Ta.subarray(La*ka),ol=wa.subarray(el*ka),al=(tl-el)*ka;copyArray(ol,sl,al)}if(nl>=Aa){const sl=ba.length;rl=Math.floor(sl/ka)}if(rl>tl)if(this.defaultValue.length===1)wa.subarray(tl*ka,rl*ka).fill(this.defaultValue[0]),tl=rl;else for(;rl>tl;){const sl=wa.slice(tl*ka);copyArray(sl,Fa,ka),++tl}rl<0?(La=nl+1,el=tl):(La=nl,el=tl,tl=el+1)}}}function copyArray(ha,aa,xa){for(let ba=0;ba<xa;ba++)ha[ba]=aa[ba]}function makeShape(ha,aa){const xa=[];for(let ba of ha){if(ba<0){if(!aa)throw new Error(`Dimension ${ba} must be >= 0`);if(ba<-1)throw new Error(`Dimension ${ba} must be >= -1`);ba=-1}xa.push(ba)}return xa}function raggedTensorToTensorImpl(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa){return new RaggedTensorToTensorOp(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa).compute()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function rangeImpl(ha,aa,xa,ba){const Sa=ha===aa,Ta=ha<aa&&xa<0,wa=aa<ha&&xa>1;if(Sa||Ta||wa)return makeZerosTypedArray(0,ba);const Ea=Math.abs(Math.ceil((aa-ha)/xa)),ka=makeZerosTypedArray(Ea,ba);aa<ha&&xa===1&&(xa=-1),ka[0]=ha;for(let Aa=1;Aa<ka.length;Aa++)ka[Aa]=ka[Aa-1]+xa;return ka}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rsqrtImpl=createSimpleUnaryImpl(ha=>1/Math.sqrt(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterImpl(ha,aa,xa,ba,Sa,Ta,wa,Ea,ka,Aa){const Fa=[ba/Sa,Sa],La=ha.values,el=aa.values;if(ba===0)return buffer(xa,aa.dtype);const tl=ka instanceof TensorBuffer?ka:buffer(Fa,aa.dtype);typeof ka=="string"||typeof ka=="number"?tl.values.fill(ka):typeof ka=="boolean"&&tl.values.fill(+ka);for(let nl=0;nl<Ta;nl++){const rl=[];let sl=0;for(let ol=0;ol<wa;ol++){const al=La[nl*wa+ol];rl.push(al),sl+=al*Ea[ol]}if(sl<0||sl>=ba/Sa)throw new Error(`Invalid indices: ${rl} does not index into ${xa}`);for(let ol=0;ol<Sa;ol++)Aa?tl.values[sl*Sa+ol]+=el[nl*Sa+ol]:tl.values[sl*Sa+ol]=aa.rank===0?el[0]:el[nl*Sa+ol]}return tl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sigmoidImpl=createSimpleUnaryImpl(ha=>1/(1+Math.exp(-ha)));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sliceImpl(ha,aa,xa,ba,Sa){const Ta=isSliceContinous(ba,aa,xa),wa=sizeFromShape(xa),Ea=computeStrides(ba);if(Ta){const La=computeFlatOffset(aa,Ea);return Sa==="string"?ha.slice(La,La+wa):ha.subarray(La,La+wa)}const ka=Sa==="string"?fromUint8ToStringArray(ha):ha,Aa=buffer(ba,Sa,ka),Fa=buffer(xa,Sa);for(let La=0;La<Fa.size;++La){const el=Fa.indexToLoc(La),tl=el.map((nl,rl)=>nl+aa[rl]);Fa.set(Aa.get(...tl),...el)}return Sa==="string"?fromStringArrayToUint8(Fa.values):Fa.values}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRowsImpl(ha,aa,xa,ba,Sa,Ta,wa){const Ea=aa[0],ka=Ta[0],Aa=new Array(ka),Fa=new Array(Ea),La=aa[1];if(ka===0){if(Ea!==0)throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch(Ea));const sl=getArrayFromDType(xa,0),ol=getArrayFromDType(Sa,0);return[sl,[0,La],ol,Aa,Fa]}let el=!0,tl=0;const nl=new Array(ka).fill(0);for(let sl=0;sl<Ea;++sl){const ol=ha[sl*La];if(ol<0)throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage(sl,ol));if(ol>=ka)throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(sl,ol,ka));++nl[ol],el=el&&ol>=tl,tl=ol}let rl=!0;for(let sl=0;sl<ka;++sl){const ol=nl[sl]===0;Aa[sl]=ol,rl=rl&&!ol,nl[sl]=Math.max(nl[sl],1),sl>0&&(nl[sl]+=nl[sl-1])}if(rl&&el){const sl=ha,ol=ba;for(let al=0;al<Ea;++al)Fa[al]=al;return[sl,[Ea,La],ol,Aa,Fa]}else{const sl=nl[ka-1],ol=getArrayFromDType(xa,sl*La),al=getArrayFromDType(Sa,sl),ll=new Array(ka).fill(0);for(let il=0;il<Ea;++il){const cl=ha[il*La],ul=ll[cl],dl=(cl===0?0:nl[cl-1])+ul;ll[cl]++;for(let hl=0;hl<La;++hl)ol[dl*La+hl]=ha[il*La+hl];al[dl]=ba[il],Fa[il]=dl}for(let il=0;il<ka;++il)if(ll[il]===0){const ul=il===0?0:nl[il-1];ol[ul*La+0]=il;for(let dl=1;dl<La;++dl)ol[ul*La+dl]=0;al[ul]=wa}return[ol,[sl,La],al,Aa,Fa]}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshapeImpl(ha,aa,xa,ba,Sa){const Ta=sizeFromShape(ba),wa=aa[0],Ea=Sa.length,ka=[];let Aa=1,Fa=-1;for(let sl=0;sl<Ea;++sl){const ol=Sa[sl];if(ol===-1){if(Fa!==-1)throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(Fa,sl));Fa=sl,ka.push(1)}else{if(ol<0)throw new Error(getSparseReshapeNegativeOutputDimErrorMessage(sl,ol));Aa*=ol,ka.push(ol)}}if(Fa!==-1){if(Aa<=0)throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const sl=Math.trunc(Ta/Aa);if(Aa*sl!==Ta)throw new Error(getSparseReshapeInputOutputMultipleErrorMessage(ba,ka));ka[Fa]=sl}if(sizeFromShape(ka)!==Ta)throw new Error(getSparseReshapeInputOutputMismatchErrorMessage(ba,ka));const el=ba.length,tl=[];if(el>0){tl[el-1]=1;for(let sl=el-2;sl>=0;--sl)tl[sl]=tl[sl+1]*ba[sl+1]}const nl=[];if(Ea>0){nl[Ea-1]=1;for(let sl=Ea-2;sl>=0;--sl)nl[sl]=nl[sl+1]*ka[sl+1]}const rl=getArrayFromDType(xa,wa*Ea);for(let sl=0;sl<wa;++sl){let ol=0;for(let al=0;al<el;++al)ol+=ha[sl*el+al]*tl[al];for(let al=0;al<Ea;++al)rl[sl*Ea+al]=Math.trunc(ol/nl[al]),ol%=nl[al]}return[rl,[wa,Ea],ka]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentReductionImpl(ha,aa,xa,ba,Sa,Ta=!1,wa=0){const Ea=ba.length,ka=[aa[0],ha.length/aa[0]],Aa=ka[1],La=Ea>0?Sa[Ea-1]+1:0;if(La<0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const el=aa.slice();el[0]=La;const tl=el.reduce((ll,il)=>ll*il,1),nl=getArrayFromDType(xa,tl);if(Ea===0)return La>0&&nl.fill(wa),[nl,el];if(La<=0)throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let rl=0,sl=1,ol=0,al=Sa[rl];for(;;){let ll=0;if(sl<Ea){if(ll=Sa[sl],al===ll){++sl;continue}if(al>=ll)throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(al<0||al>=La)throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(al,La));al>ol&&nl.fill(wa,ol*Aa,al*Aa);for(let il=rl;il<sl;++il){const cl=ba[il];if(cl<0||cl>=ka[0])throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage(il,ba[il],ka[0]));for(let ul=0;ul<Aa;ul++)nl[al*Aa+ul]+=ha[cl*Aa+ul]}if(Ta)for(let il=0;il<Aa;il++)nl[al*Aa+il]/=sl-rl;if(rl=sl,++sl,ol=al+1,al=ll,sl>Ea)break}return ol<La&&nl.fill(wa,ol*Aa,La*Aa),[nl,el]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const sqrtImpl=createSimpleUnaryImpl(ha=>Math.sqrt(ha));/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const squaredDifferenceImpl=createSimpleBinaryKernelImpl((ha,aa)=>{const xa=ha-aa;return xa*xa});/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const staticRegexReplaceImpl=createSimpleUnaryImpl((ha,aa)=>{const{pattern:xa,replaceGlobal:ba,rewrite:Sa}=aa;return ha.replace(new RegExp(xa,ba?"g":""),Sa)});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSliceImpl(ha,aa,xa,ba){const Sa=buffer(ha,aa.dtype);for(let Ta=0;Ta<Sa.size;Ta++){const wa=Sa.indexToLoc(Ta),Ea=new Array(wa.length);for(let ka=0;ka<Ea.length;ka++)Ea[ka]=wa[ka]*xa[ka]+ba[ka];Sa.set(aa.get(...Ea),...wa)}return Sa}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class StringNGramsOp{constructor(aa,xa,ba,Sa,Ta,wa){this.separator=encodeString(aa),this.nGramWidths=xa,this.leftPad=encodeString(ba),this.rightPad=encodeString(Sa),this.padWidth=Ta,this.preserveShort=wa}getPadWidth(aa){return Math.min(this.padWidth<0?aa-1:this.padWidth,aa-1)}getNumNGrams(aa,xa){const ba=this.getPadWidth(xa);return Math.max(0,aa+2*ba-xa+1)}createNGrams(aa,xa,ba,Sa,Ta,wa){for(let Ea=0;Ea<Ta;++Ea){const ka=this.getPadWidth(wa),Aa=Math.max(0,ka-Ea),Fa=Math.max(0,ka-(Ta-(Ea+1))),La=wa-(Aa+Fa),el=xa+(Aa>0?0:Ea-ka);let tl=0;tl+=Aa*this.leftPad.length;for(let al=0;al<La;++al)tl+=aa[el+al].length;tl+=Fa*this.rightPad.length;const nl=Aa+Fa+La-1;tl+=nl*this.separator.length,ba[Sa+Ea]=new Uint8Array(tl);const rl=ba[Sa+Ea];let sl=0;const ol=al=>al.forEach(ll=>rl[sl++]=ll);for(let al=0;al<Aa;++al)ol(this.leftPad),ol(this.separator);for(let al=0;al<La-1;++al)ol(aa[el+al]),ol(this.separator);if(La>0){ol(aa[el+La-1]);for(let al=0;al<Fa;++al)ol(this.separator),ol(this.rightPad)}else{for(let al=0;al<Fa-1;++al)ol(this.rightPad),ol(this.separator);ol(this.rightPad)}}}compute(aa,xa){const ba=aa.length,Sa=xa.length;if(Sa>0){let ka=xa[0];if(ka!==0)throw new Error(`First split value must be 0, got ${ka}`);for(let Aa=1;Aa<Sa;++Aa){let Fa=xa[Aa]>=ka;if(Fa=Fa&&xa[Aa]<=ba,!Fa)throw new Error(`Invalid split value ${xa[Aa]}, must be in [${ka}, ${ba}]`);ka=xa[Aa]}if(ka!==ba)throw new Error(`Last split value must be data size. Expected ${ba}, got ${ka}`)}const Ta=Sa-1,wa=getArrayFromDType("int32",Sa);if(ba===0||Sa===0){const ka=new Array(ba);for(let Aa=0;Aa<=Ta;++Aa)wa[Aa]=0;return[ka,wa]}wa[0]=0;for(let ka=1;ka<=Ta;++ka){const Aa=xa[ka]-xa[ka-1];let Fa=0;this.nGramWidths.forEach(La=>{Fa+=this.getNumNGrams(Aa,La)}),this.preserveShort&&Aa>0&&Fa===0&&(Fa=1),wa[ka]=wa[ka-1]+Fa}const Ea=new Array(wa[Ta]);for(let ka=0;ka<Ta;++ka){const Aa=xa[ka];let Fa=wa[ka];if(this.nGramWidths.forEach(La=>{const el=xa[ka+1]-xa[ka],tl=this.getNumNGrams(el,La);this.createNGrams(aa,Aa,Ea,Fa,tl,La),Fa+=tl}),this.preserveShort&&Fa===wa[ka]){const La=xa[ka+1]-xa[ka];if(La===0)continue;const el=La+2*this.padWidth;this.createNGrams(aa,Aa,Ea,Fa,1,el)}}return[Ea,wa]}}function stringNGramsImpl(ha,aa,xa,ba,Sa,Ta,wa,Ea){return new StringNGramsOp(xa,ba,Sa,Ta,wa,Ea).compute(ha,aa)}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function split(ha,aa,xa,ba){if(!ha.length)return;if(aa.length===0){for(let Ta=0;Ta<ha.length;++Ta)ba.push(ha.subarray(Ta,Ta+1));return}if(aa.length===1){const Ta=aa[0];let wa=ha.indexOf(Ta);for(;wa!==-1;){const Ea=ha.subarray(0,wa);(!xa||Ea.length!==0)&&ba.push(Ea),ha=ha.subarray(wa+1),wa=ha.indexOf(Ta)}(!xa||ha.length!==0)&&ba.push(ha);return}let Sa=0;for(let Ta=0;Ta<ha.length+1;Ta++)if(Ta===ha.length||aa.indexOf(ha[Ta])!==-1){const wa=ha.subarray(Sa,Ta);(!xa||wa.length!==0)&&ba.push(wa),Sa=Ta+1}}function stringSplitImpl(ha,aa,xa){const ba=ha.length,Sa=[];let Ta=0,wa=0;const Ea=new Array(ba);for(let el=0;el<ba;++el){const tl=Sa.length;split(ha[el],aa,xa,Sa);const nl=Sa.length-tl;Ea[el]=nl,Ta+=nl,wa=Math.max(wa,nl)}const ka=getArrayFromDType("int32",Ta*2),Aa=new Array(Ta),Fa=[ba,wa];let La=0;for(let el=0;el<ba;++el)for(let tl=0;tl<Ea[el];++tl)ka[La*2]=el,ka[La*2+1]=tl,Aa[La]=Sa[La],++La;return[ka,Aa,Fa]}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFastImpl(ha,aa){const xa=getArrayFromDType("int32",ha.length);for(let ba=0;ba<ha.length;++ba)xa[ba]=fingerPrint64(ha[ba]).modulo(aa).getLowBitsUnsigned();return xa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const subImpl=createSimpleBinaryKernelImpl((ha,aa)=>ha-aa);/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tileImpl(ha,aa){const xa=new Array(ha.rank);for(let Sa=0;Sa<xa.length;Sa++)xa[Sa]=ha.shape[Sa]*aa[Sa];const ba=buffer(xa,ha.dtype);for(let Sa=0;Sa<ba.values.length;++Sa){const Ta=ba.indexToLoc(Sa),wa=new Array(ha.rank);for(let ka=0;ka<wa.length;ka++)wa[ka]=Ta[ka]%ha.shape[ka];const Ea=ha.locToIndex(wa);ba.values[Sa]=ha.values[Ea]}return ba}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const comparePair=(ha,aa)=>{const xa=aa.value-ha.value;return xa===0?ha.index-aa.index:xa};function select$1(ha,aa,xa=0,ba=ha.length-1){for(;ba>xa;){if(ba-xa>600){const Ea=ba-xa+1,ka=aa-xa+1,Aa=Math.log(Ea),Fa=.5*Math.exp(2*Aa/3),La=.5*Math.sqrt(Aa*Fa*(Ea-Fa)/Ea)*Math.sign(ka-Ea/2),el=Math.max(xa,Math.floor(aa-ka*Fa/Ea+La)),tl=Math.min(ba,Math.floor(aa+(Ea-ka)*Fa/Ea+La));select$1(ha,aa,el,tl)}const Sa=ha[aa];let Ta=xa,wa=ba;for(swap(ha,xa,aa),comparePair(ha[ba],Sa)>0&&swap(ha,xa,ba);Ta<wa;){for(swap(ha,Ta,wa),Ta++,wa--;comparePair(ha[Ta],Sa)<0;)Ta=Ta+1;for(;comparePair(ha[wa],Sa)>0;)wa=wa-1}comparePair(ha[xa],Sa)===0?swap(ha,xa,wa):(wa=wa+1,swap(ha,wa,ba)),wa<=aa&&(xa=wa+1),aa<=wa&&(ba=wa-1)}}function topKImpl(ha,aa,xa,ba,Sa){const Ta=aa[aa.length-1],[wa,Ea]=[ha.length/Ta,Ta],ka=getTypedArrayFromDType(xa,wa*ba),Aa=getTypedArrayFromDType("int32",wa*ba);for(let La=0;La<wa;La++){const el=La*Ea,tl=ha.subarray(el,el+Ea);let nl=new Array(tl.length);tl.forEach((al,ll)=>nl[ll]={value:al,index:ll}),ba<nl.length&&(select$1(nl,ba),nl=nl.slice(0,ba)),Sa&&nl.sort(comparePair);const rl=La*ba,sl=ka.subarray(rl,rl+ba),ol=Aa.subarray(rl,rl+ba);for(let al=0;al<ba;al++)sl[al]=nl[al].value,ol[al]=nl[al].index}const Fa=aa.slice();return Fa[Fa.length-1]=ba,[buffer(Fa,xa,ka),buffer(Fa,"int32",Aa)]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function uniqueImpl(ha,aa,xa,ba){const Sa=parseAxisParam(aa,xa)[0],Ta=[1,xa[0],1];for(let nl=0;nl<Sa;nl++)Ta[0]*=xa[nl];Ta[1]=xa[Sa];for(let nl=Sa+1;nl<xa.length;nl++)Ta[2]*=xa[nl];const wa=new Map,Ea=new Int32Array(xa[Sa]),ka=new TensorBuffer(Ta,ba,ha),Aa=[],Fa=Ta[0]===1&&Ta[2]===1;for(let nl=0;nl<xa[Sa];nl++){let rl;if(Fa)rl=ha[nl].toString();else{const ol=[];for(let al=0;al<Ta[0];al++)for(let ll=0;ll<Ta[2];ll++)ol.push(ka.get(al,nl,ll));rl=ol.join(",")}const sl=wa.get(rl);if(sl!=null)Ea[nl]=sl;else{const ol=wa.size;wa.set(rl,ol),Ea[nl]=ol,Aa.push(nl)}}const La=Ta.slice();La[1]=wa.size;const el=new TensorBuffer(La,ba);Aa.forEach((nl,rl)=>{for(let sl=0;sl<Ta[0];sl++)for(let ol=0;ol<Ta[2];ol++)el.set(ka.get(sl,nl,ol),sl,rl,ol)});const tl=xa.slice();return tl[Sa]=La[1],{outputValues:el.values,outputShape:tl,indices:Ea}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var shared=Object.freeze({__proto__:null,addImpl,bincountImpl,bincountReduceImpl,bitwiseAndImpl,castImpl,ceilImpl,concatImpl:concatImpl$1,equalImpl,expImpl,expm1Impl,floorDivImpl,floorImpl,gatherNdImpl,gatherV2Impl,greaterEqualImpl,greaterImpl,lessEqualImpl,lessImpl,linSpaceImpl,logImpl,maxImpl:maxImpl$1,maximumImpl,minimumImpl,multiplyImpl,negImpl,notEqualImpl,prodImpl,raggedGatherImpl,raggedRangeImpl,raggedTensorToTensorImpl,rangeImpl,rsqrtImpl,scatterImpl,sigmoidImpl,simpleAbsImpl,sliceImpl,sparseFillEmptyRowsImpl,sparseReshapeImpl,sparseSegmentReductionImpl,sqrtImpl,squaredDifferenceImpl,staticRegexReplaceImpl,stridedSliceImpl,stringNGramsImpl,stringSplitImpl,stringToHashBucketFastImpl,subImpl,tileImpl,topKImpl,transposeImpl:transposeImpl$1,uniqueImpl});/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const{addImpl:addImplCPU,bincountImpl:bincountImplCPU,bincountReduceImpl:bincountReduceImplCPU,bitwiseAndImpl:bitwiseAndImplCPU,castImpl:castImplCPU,ceilImpl:ceilImplCPU,concatImpl:concatImplCPU,equalImpl:equalImplCPU,expImpl:expImplCPU,expm1Impl:expm1ImplCPU,floorImpl:floorImplCPU,gatherNdImpl:gatherNdImplCPU,gatherV2Impl:gatherV2ImplCPU,greaterImpl:greaterImplCPU,greaterEqualImpl:greaterEqualImplCPU,lessImpl:lessImplCPU,lessEqualImpl:lessEqualImplCPU,linSpaceImpl:linSpaceImplCPU,logImpl:logImplCPU,maxImpl:maxImplCPU,maximumImpl:maximumImplCPU,minimumImpl:minimumImplCPU,multiplyImpl:multiplyImplCPU,negImpl:negImplCPU,notEqualImpl:notEqualImplCPU,prodImpl:prodImplCPU,raggedGatherImpl:raggedGatherImplCPU,raggedRangeImpl:raggedRangeImplCPU,raggedTensorToTensorImpl:raggedTensorToTensorImplCPU,rangeImpl:rangeImplCPU,rsqrtImpl:rsqrtImplCPU,scatterImpl:scatterImplCPU,sigmoidImpl:sigmoidImplCPU,simpleAbsImpl:simpleAbsImplCPU,sliceImpl:sliceImplCPU,sparseFillEmptyRowsImpl:sparseFillEmptyRowsImplCPU,sparseReshapeImpl:sparseReshapeImplCPU,sparseSegmentReductionImpl:sparseSegmentReductionImplCPU,sqrtImpl:sqrtImplCPU,staticRegexReplaceImpl:staticRegexReplaceImplCPU,stridedSliceImpl:stridedSliceImplCPU,stringNGramsImpl:stringNGramsImplCPU,stringSplitImpl:stringSplitImplCPU,stringToHashBucketFastImpl:stringToHashBucketFastImplCPU,subImpl:subImplCPU,tileImpl:tileImplCPU,topKImpl:topKImplCPU,transposeImpl:transposeImplCPU,uniqueImpl:uniqueImplCPU}=shared;/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getVecChannels(ha,aa){return["x","y","z","w","u","v"].slice(0,aa).map(xa=>`${ha}.${xa}`)}function getChannels(ha,aa){return aa===1?[ha]:getVecChannels(ha,aa)}function getSourceCoords$2(ha,aa){if(ha===1)return"rc";let xa="";for(let ba=0;ba<ha;ba++)xa+=aa[ba],ba<ha-1&&(xa+=",");return xa}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PackProgram{constructor(aa){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=aa,this.rank=aa.length,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{const xa=getChannels("rc",this.rank),ba=getCoordsDataType(this.rank),Sa=this.getOutOfBoundsCondition(xa),Ta=this.getSetup(xa),wa=this.getOutput(xa);this.userCode=`
        void main() {
          ${ba} rc = getOutputCoords();

          if(${Sa}) {
            setOutput(vec4(0));
          } else {
            ${Ta}

            setOutput(vec4(${wa}));
          }
        }
      `}}getSourceCoordsArr(aa){const xa=[];for(let ba=0;ba<=1;ba++)for(let Sa=0;Sa<=1;Sa++){let Ta=`${ba===0?"r":"rp1"}, ${Sa===0?"c":"cp1"}`;for(let wa=2;wa<this.rank;wa++)Ta=`${aa[aa.length-1-wa]},`+Ta;xa.push(Ta)}return xa}getOutOfBoundsCondition(aa){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let xa="";for(let ba=this.rank-2;ba<this.rank;ba++)xa+=`${aa[ba]} >= ${this.enableShapeUniforms?`outShape[${ba}]`:this.outputShape[ba]}`,ba<this.rank-1&&(xa+="||");return xa}getSetup(aa){if(this.rank===1)return"";const xa=aa.slice(-2),ba=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],Sa=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${xa[0]};
      int c = ${xa[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${ba};
      bool rEdge = rp1 >= ${Sa};
    `}getOutput(aa){const xa=this.getSourceCoordsArr(aa);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${xa[0]}),
            cEdge ? 0. : getA(${xa[1]}),
            rEdge ? 0. : getA(${xa[2]}),
            rEdge || cEdge ? 0. : getA(${xa[3]})`}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReshapePackedProgram{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let ba="";for(let Sa=0;Sa<4;Sa++){let Ta="thisRC = rc;";Sa%2===1&&(Ta+="thisRC.z += 1;"),Sa>1&&(Ta+="thisRC.y += 1;"),ba+=`
        ${Ta}
        ${Sa>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${Sa}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${Sa>0?"}":""}
      `}this.userCode=`
      ${getReshapedInputCoords(xa,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?getFlatIndexFrom3DOutput():getFlatIndexFrom3D(aa)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":aa[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":aa[2]};

        ${ba}

        setOutput(result);
      }
    `}}function getReshapedInputCoords(ha,aa){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${aa?getLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],"inputShape"):getLogicalCoordinatesFromFlatIndex(["r","c","d"],ha)}
      return ivec3(r, c, d);
    }
  `}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TextureManager{constructor(aa){this.gpgpu=aa,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(aa,xa,ba){const Sa=getPhysicalFromLogicalTextureType(xa,ba),Ta=getKeyFromTextureShape(aa,Sa,ba);Ta in this.freeTextures||(this.freeTextures[Ta]=[]),Ta in this.usedTextures||(this.usedTextures[Ta]=[]);const wa=computeBytes(aa,Sa,this.gpgpu.gl,this.gpgpu.textureConfig,ba);if(this.freeTextures[Ta].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=wa,this.log();const ka=this.freeTextures[Ta].pop();return this.usedTextures[Ta].push(ka),ka}let Ea;return Sa===PhysicalTextureType.PACKED_2X2_FLOAT32?Ea=this.gpgpu.createPackedMatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType.PACKED_2X2_FLOAT16?Ea=this.gpgpu.createFloat16PackedMatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType.UNPACKED_FLOAT32?Ea=this.gpgpu.createFloat32MatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType.UNPACKED_FLOAT16?Ea=this.gpgpu.createFloat16MatrixTexture(aa[0],aa[1]):Sa===PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE&&(Ea=this.gpgpu.createUnsignedBytesMatrixTexture(aa[0],aa[1])),this.usedTextures[Ta].push(Ea),this.numUsedTextures++,this._numBytesAllocated+=wa,this.log(),Ea}releaseTexture(aa,xa,ba,Sa){if(this.freeTextures==null)return;const Ta=getPhysicalFromLogicalTextureType(ba,Sa),wa=getKeyFromTextureShape(xa,Ta,Sa);wa in this.freeTextures||(this.freeTextures[wa]=[]);const Ea=computeBytes(xa,Ta,this.gpgpu.gl,this.gpgpu.textureConfig,Sa),ka=env().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");ka!==-1&&this._numBytesAllocated>ka?(this.gpgpu.deleteMatrixTexture(aa.texture),this._numBytesAllocated-=Ea):(this.freeTextures[wa].push(aa),this.numFreeTextures++,this._numBytesFree+=Ea),this.numUsedTextures--;const Aa=this.usedTextures[wa],Fa=Aa&&Aa.indexOf(aa);if(Fa==null||Fa<0)throw new Error("Cannot release a texture that was never provided by this texture manager");Aa[Fa]=Aa[Aa.length-1],Aa.pop(),this.log()}log(){if(!this.logEnabled)return;const aa=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${aa})`);const xa=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*xa)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(const aa in this.freeTextures)this.freeTextures[aa].forEach(xa=>{this.gpgpu.deleteMatrixTexture(xa.texture)});for(const aa in this.usedTextures)this.usedTextures[aa].forEach(xa=>{this.gpgpu.deleteMatrixTexture(xa.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function numBytesForInternalFormat(ha,aa){const xa=ha;if(aa===xa.R32F)return 4;if(aa===xa.R16F)return 2;if(aa===xa.RGBA32F)return 16;if(aa===ha.RGBA)return 16;if(aa===xa.RGBA16F)return 8;if(aa===xa.RGBA8)return 4;throw new Error(`Unknown internal format ${aa}`)}function computeBytes(ha,aa,xa,ba,Sa){const Ta=internalFormatForPhysicalTexType(aa,ba);let wa;if(Sa){const[ka,Aa]=getPackedMatrixTextureShapeWidthHeight(ha[0],ha[1]);wa=ka*Aa}else{const[ka,Aa]=getUnpackedMatrixTextureShapeWidthHeight(ha[0],ha[1]);wa=ka*Aa}const Ea=numBytesForInternalFormat(xa,Ta);return wa*Ea}function internalFormatForPhysicalTexType(ha,aa){switch(ha){case PhysicalTextureType.PACKED_2X2_FLOAT32:return getInternalFormatForPackedMatrixTexture(aa);case PhysicalTextureType.PACKED_2X2_FLOAT16:return getInternalFormatForFloat16PackedMatrixTexture(aa);case PhysicalTextureType.UNPACKED_FLOAT32:return getInternalFormatForFloat32MatrixTexture(aa);case PhysicalTextureType.UNPACKED_FLOAT16:return getInternalFormatForFloat16MatrixTexture(aa);case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:return getInternalFormatForUnsignedBytesMatrixTexture(aa);default:throw new Error(`Unknown physical texture type ${ha}`)}}function getPhysicalTextureForRendering(ha){return env().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?ha?PhysicalTextureType.PACKED_2X2_FLOAT32:PhysicalTextureType.UNPACKED_FLOAT32:ha?PhysicalTextureType.PACKED_2X2_FLOAT16:PhysicalTextureType.UNPACKED_FLOAT16}function getPhysicalFromLogicalTextureType(ha,aa){if(ha===TextureUsage.UPLOAD)return PhysicalTextureType.PACKED_2X2_FLOAT32;if(ha===TextureUsage.RENDER||ha==null)return getPhysicalTextureForRendering(aa);if(ha===TextureUsage.DOWNLOAD||ha===TextureUsage.PIXELS)return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${ha}`)}function getKeyFromTextureShape(ha,aa,xa){return`${ha[0]}_${ha[1]}_${aa}_${xa}`}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnaryOpProgram{constructor(aa,xa){this.variableNames=["A"],this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${xa}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}const CHECK_NAN_SNIPPET$1="if (isnan(x)) return x;",LINEAR$1="return x;",ABS$1="return abs(x);",ELU$2="return (x >= 0.0) ? x : (exp(x) - 1.0);",RELU$2=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : x;
`,RELU6$2=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,CLONE="return x;",SIGMOID$2="return 1.0 / (1.0 + exp(-1.0 * x));";/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LINEAR="return x;",ELU$1=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,RELU$1=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,RELU6$1=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,SIGMOID$1="return 1.0 / (1.0 + exp(-1.0 * x));";class UnaryOpPackedProgram{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${xa}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class UnpackProgram{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const xa=aa.length,ba=getChannels("rc",xa),Sa=getCoordsDataType(xa),Ta=getSourceCoords$2(xa,ba),wa=ba.slice(-2),Ea=xa<=1?"rc":`vec2(${wa.join(",")})`;this.userCode=`
      void main() {
        ${Sa} rc = getOutputCoords();
        vec4 packedInput = getA(${Ta});

        setOutput(getChannel(packedInput, ${Ea}));
      }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const whereImpl=whereImpl$1,EPSILON_FLOAT32=1e-7,EPSILON_FLOAT16=1e-4,binaryCaches={};function getBinaryCache(ha){return ha in binaryCaches||(binaryCaches[ha]={}),binaryCaches[ha]}const CPU_HANDOFF_SIZE_THRESHOLD=env().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),BEFORE_PAGING_CONSTANT=600;function numMBBeforeWarning(){return env().global.screen==null?1024:env().global.screen.height*env().global.screen.width*window.devicePixelRatio*BEFORE_PAGING_CONSTANT/1024/1024}class MathBackendWebGL extends KernelBackend{nextDataId(){return MathBackendWebGL.nextDataId++}constructor(aa){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!env().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let xa;if(aa!=null){if(aa instanceof GPGPUContext)xa=aa;else{const ba=getWebGLContext(env().getNumber("WEBGL_VERSION"),aa);xa=new GPGPUContext(ba)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const ba=getWebGLContext(env().getNumber("WEBGL_VERSION"));xa=new GPGPUContext(ba),this.binaryCache=getBinaryCache(env().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=xa,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new TextureManager(this.gpgpu),this.numMBBeforeWarning=numMBBeforeWarning(),this.texData=new DataStorage(this,engine())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(aa,xa,ba,Sa,Ta,wa){const Ea=this.makeTensorInfo(xa,ba),ka=this.texData.get(Ea.dataId);ka.isPacked=!1,ka.texture={texture:aa,texShape:[Sa,Ta]},ka.texShape=[Sa,Ta];const Aa=getShapeAs3D(xa),Fa=new EncodeMatrixProgram(Aa,!1,wa),La=this.runWebGLProgram(Fa,[Ea],ba,[[Sa,Ta]]);return La.shape=xa,ka.texture=null,this.disposeIntermediateTensorInfo(Ea),La.dataId}write(aa,xa,ba){if((env().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||env().getBool("DEBUG"))&&this.checkNumericalProblems(aa),ba==="complex64"&&aa!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const Sa={id:this.nextDataId()};return this.texData.set(Sa,{shape:xa,dtype:ba,values:aa,usage:TextureUsage.UPLOAD,refCount:1}),Sa}refCount(aa){return this.texData.has(aa)?this.texData.get(aa).refCount:0}incRef(aa){const xa=this.texData.get(aa);xa.refCount++}decRef(aa){if(this.texData.has(aa)){const xa=this.texData.get(aa);xa.refCount--}}move(aa,xa,ba,Sa,Ta){if(env().getBool("DEBUG")&&this.checkNumericalProblems(xa),Sa==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(aa,{shape:ba,dtype:Sa,values:xa,usage:TextureUsage.UPLOAD,refCount:Ta})}disposeIntermediateTensorInfo(aa){this.disposeData(aa.dataId)}readSync(aa){const xa=this.texData.get(aa),{values:ba,dtype:Sa,complexTensorInfos:Ta,slice:wa,shape:Ea,isPacked:ka}=xa;if(wa!=null){let el;ka?el=new UnaryOpPackedProgram(Ea,CLONE):el=new UnaryOpProgram(Ea,CLONE);const tl=this.runWebGLProgram(el,[{dataId:aa,shape:Ea,dtype:Sa}],Sa),nl=this.readSync(tl.dataId);return this.disposeIntermediateTensorInfo(tl),nl}if(ba!=null)return this.convertAndCacheOnCPU(aa);if(Sa==="string")return ba;const Aa=this.activeTimers!=null;let Fa;Aa&&(Fa=now());let La;if(Sa==="complex64"){const el=this.readSync(Ta.real.dataId),tl=this.readSync(Ta.imag.dataId);La=mergeRealAndImagArrays(el,tl)}else La=this.getValuesFromTexture(aa);return Aa&&(this.downloadWaitMs+=now()-Fa),this.convertAndCacheOnCPU(aa,La)}async read(aa){if(this.pendingRead.has(aa)){const nl=this.pendingRead.get(aa);return new Promise(rl=>nl.push(rl))}const xa=this.texData.get(aa),{values:ba,shape:Sa,slice:Ta,dtype:wa,complexTensorInfos:Ea,isPacked:ka}=xa;if(Ta!=null){let nl;ka?nl=new UnaryOpPackedProgram(Sa,CLONE):nl=new UnaryOpProgram(Sa,CLONE);const rl=this.runWebGLProgram(nl,[{dataId:aa,shape:Sa,dtype:wa}],wa),sl=this.read(rl.dataId);return this.disposeIntermediateTensorInfo(rl),sl}if(ba!=null)return this.convertAndCacheOnCPU(aa);if(env().getBool("DEBUG")&&!env().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&env().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let Aa=null,Fa;if(wa!=="complex64"&&env().get("WEBGL_BUFFER_SUPPORTED")){Fa=this.decode(aa);const nl=this.texData.get(Fa.dataId);Aa=this.gpgpu.createBufferFromTexture(nl.texture.texture,...getDenseTexShape(Sa))}this.pendingRead.set(aa,[]),wa!=="complex64"&&await this.gpgpu.createAndWaitForFence();let La;if(wa==="complex64"){const nl=await Promise.all([this.read(Ea.real.dataId),this.read(Ea.imag.dataId)]),rl=nl[0],sl=nl[1];La=mergeRealAndImagArrays(rl,sl)}else if(Aa==null)La=this.getValuesFromTexture(aa);else{const nl=sizeFromShape(Sa);La=this.gpgpu.downloadFloat32MatrixFromBuffer(Aa,nl)}if(Fa!=null&&this.disposeIntermediateTensorInfo(Fa),Aa!=null){const nl=this.gpgpu.gl;callAndCheck(nl,()=>nl.deleteBuffer(Aa))}const el=this.convertAndCacheOnCPU(aa,La),tl=this.pendingRead.get(aa);return this.pendingRead.delete(aa),tl.forEach(nl=>nl(el)),this.pendingDisposal.has(aa)&&(this.pendingDisposal.delete(aa),this.disposeData(aa)&&engine().removeDataId(aa,this),this.pendingDeletes--),el}readToGPU(aa,xa={}){const ba=this.texData.get(aa),{values:Sa,shape:Ta,slice:wa,dtype:Ea,isPacked:ka,texture:Aa}=ba;if(Ea==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(wa!=null){let tl;ka?tl=new UnaryOpPackedProgram(Ta,CLONE):tl=new UnaryOpProgram(Ta,CLONE);const nl=this.runWebGLProgram(tl,[{dataId:aa,shape:Ta,dtype:Ea}],Ea),rl=this.readToGPU(nl,xa);return this.disposeIntermediateTensorInfo(nl),rl}if(Aa==null)throw Sa!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const Fa=this.decode(aa,xa.customTexShape),La=engine().makeTensorFromTensorInfo(Fa),el=this.texData.get(Fa.dataId);return Object.assign({tensorRef:La},el.texture)}bufferSync(aa){const xa=this.readSync(aa.dataId);if(aa.dtype==="string")try{const ba=xa.map(Sa=>decodeString(Sa));return buffer(aa.shape,aa.dtype,ba)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return buffer(aa.shape,aa.dtype,xa)}checkNumericalProblems(aa){if(aa!=null)for(let xa=0;xa<aa.length;xa++){const ba=aa[xa];if(!canBeRepresented(ba))throw env().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${ba} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${ba} cannot be represented on this device.`)}}getValuesFromTexture(aa){const{shape:xa,dtype:ba,isPacked:Sa}=this.texData.get(aa),Ta=sizeFromShape(xa);if(env().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const el=this.decode(aa),tl=this.texData.get(el.dataId),nl=this.gpgpu.downloadMatrixFromPackedTexture(tl.texture.texture,...getDenseTexShape(xa)).subarray(0,Ta);return this.disposeIntermediateTensorInfo(el),nl}const wa=env().getBool("WEBGL_PACK")&&Sa===!0,Ea=wa?getShapeAs3D(xa):xa,ka=wa?new EncodeFloatPackedProgram(Ea):new EncodeFloatProgram(Ea),Aa=this.runWebGLProgram(ka,[{shape:Ea,dtype:ba,dataId:aa}],"float32"),Fa=this.texData.get(Aa.dataId),La=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(Fa.texture.texture,Fa.texShape[0],Fa.texShape[1]).subarray(0,Ta);return this.disposeIntermediateTensorInfo(Aa),La}timerAvailable(){return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(aa){const xa=this.activeTimers,ba=[];let Sa=!1;this.programTimersStack==null?(this.programTimersStack=ba,Sa=!0):this.activeTimers.push(ba),this.activeTimers=ba,aa();const Ta=flatten(this.activeTimers.map(ka=>ka.query)).filter(ka=>ka!=null),wa=flatten(this.activeTimers.map(ka=>ka.name)).filter(ka=>ka!=null);this.activeTimers=xa,Sa&&(this.programTimersStack=null);const Ea={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const ka=await Promise.all(Ta);Ea.kernelMs=sum$2(ka),Ea.getExtraProfileInfo=()=>ka.map((Aa,Fa)=>({name:wa[Fa],ms:Aa})).map(Aa=>`${Aa.name}: ${Aa.ms}`).join(", ")}else Ea.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,Ea})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:now(),endMs:null}}endTimer(aa){return env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),aa):(aa.endMs=now(),aa)}async getQueryTime(aa){if(env().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(aa);const xa=aa;return xa.endMs-xa.startMs}disposeData(aa,xa=!1){if(this.pendingDisposal.has(aa))return!1;if(!this.texData.has(aa))return!0;if(xa?this.texData.get(aa).refCount=0:this.texData.get(aa).refCount--,!xa&&this.texData.get(aa).refCount>0)return!1;if(this.pendingRead.has(aa))return this.pendingDisposal.add(aa),this.pendingDeletes++,!1;this.releaseGPUData(aa);const{complexTensorInfos:ba}=this.texData.get(aa);return ba!=null&&(this.disposeData(ba.real.dataId,xa),this.disposeData(ba.imag.dataId,xa)),this.texData.delete(aa),!0}releaseGPUData(aa){const{texture:xa,dtype:ba,texShape:Sa,usage:Ta,isPacked:wa,slice:Ea}=this.texData.get(aa),ka=Ea&&Ea.origDataId||aa,Aa=this.dataRefCount.get(ka);Aa>1?this.dataRefCount.set(ka,Aa-1):(this.dataRefCount.delete(ka),xa!=null&&(this.numBytesInGPU-=this.computeBytes(Sa,ba),this.textureManager.releaseTexture(xa,Sa,Ta,wa)));const Fa=this.texData.get(aa);Fa.texture=null,Fa.texShape=null,Fa.isPacked=!1,Fa.slice=null}getTexture(aa){return this.uploadToGPU(aa),this.texData.get(aa).texture.texture}getDataInfo(aa){return this.texData.get(aa)}shouldExecuteOnCPU(aa,xa=CPU_HANDOFF_SIZE_THRESHOLD){return env().getBool("WEBGL_CPU_FORWARD")&&aa.every(ba=>this.texData.get(ba.dataId).texture==null&&sizeFromShape(ba.shape)<xa)}getGPGPUContext(){return this.gpgpu}where(aa){warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const xa=aa.dataSync();return whereImpl(aa.shape,xa)}packedUnaryOp(aa,xa,ba){const Sa=new UnaryOpPackedProgram(aa.shape,xa),Ta=this.compileAndRun(Sa,[aa],ba);return engine().makeTensorFromTensorInfo(Ta)}abs(aa){if(this.shouldExecuteOnCPU([aa])&&aa.dtype!=="complex64"){const Sa=simpleAbsImplCPU(this.texData.get(aa.dataId).values);return this.makeOutput(aa.shape,aa.dtype,Sa)}if(env().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(aa,ABS$1,aa.dtype);const xa=new UnaryOpProgram(aa.shape,ABS$1),ba=this.compileAndRun(xa,[aa]);return engine().makeTensorFromTensorInfo(ba)}makeTensorInfo(aa,xa,ba){let Sa;if(xa==="string"&&ba!=null&&ba.length>0&&isString(ba[0])){const Ta=ba.map(wa=>encodeString(wa));Sa=this.write(Ta,aa,xa)}else Sa=this.write(ba,aa,xa);return this.texData.get(Sa).usage=null,{dataId:Sa,shape:aa,dtype:xa}}makeOutput(aa,xa,ba){return engine().makeTensorFromTensorInfo(this.makeTensorInfo(aa,xa,ba),this)}unpackTensor(aa){const xa=new UnpackProgram(aa.shape);return this.runWebGLProgram(xa,[aa],aa.dtype)}packTensor(aa){const xa=new PackProgram(aa.shape);return this.runWebGLProgram(xa,[aa],aa.dtype,null,!0)}packedReshape(aa,xa){const ba=[getBatchDim(aa.shape),...getRowsCols(aa.shape)],Sa={dtype:aa.dtype,shape:ba,dataId:aa.dataId},Ta=[getBatchDim(xa),...getRowsCols(xa)],wa=new ReshapePackedProgram(Ta,ba),Ea=!0,ka=[ba],Aa=this.runWebGLProgram(wa,[Sa],aa.dtype,ka,Ea);return{dataId:Aa.dataId,shape:xa,dtype:Aa.dtype}}decode(aa,xa){const ba=this.texData.get(aa),{isPacked:Sa,shape:Ta,dtype:wa}=ba;if(xa!=null){const el=sizeFromShape(Ta),tl=xa[0]*xa[1]*4;assert(el<=tl,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const Ea=getShapeAs3D(Ta);let ka;Sa?ka=new DecodeMatrixPackedProgram(Ea):ka=new DecodeMatrixProgram(Ea);const Aa=!0,Fa=[xa??getDenseTexShape(Ea)],La=this.runWebGLProgram(ka,[{shape:Ea,dtype:wa,dataId:aa}],wa,Fa,Aa,xa);return{dtype:wa,shape:Ta,dataId:La.dataId}}runWebGLProgram(aa,xa,ba,Sa,Ta=!1,wa){const Ea=this.makeTensorInfo(aa.outputShape,ba),ka=this.texData.get(Ea.dataId);if(aa.packedOutput&&(ka.isPacked=!0),aa.outPackingScheme===PackingScheme.DENSE){const ol=wa??getDenseTexShape(aa.outputShape);ka.texShape=ol.map(al=>al*2)}if(aa.outTexUsage!=null&&(ka.usage=aa.outTexUsage),sizeFromShape(Ea.shape)===0)return ka.values=getTypedArrayFromDType(Ea.dtype,0),Ea;const Aa=[],Fa=xa.map(ol=>{if(ol.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let al=this.texData.get(ol.dataId);if(al.texture==null){if(!aa.packedInputs&&sizeFromShape(ol.shape)<=env().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:ol.shape,texData:null,isUniform:!0,uniformValues:al.values};aa.packedInputs&&(al.isPacked=!0,al.shape=ol.shape)}if(this.uploadToGPU(ol.dataId),!!al.isPacked!=!!aa.packedInputs)ol=al.isPacked?this.unpackTensor(ol):this.packTensor(ol),Aa.push(ol),al=this.texData.get(ol.dataId);else if(al.isPacked&&!isReshapeFree(al.shape,ol.shape)){const ll=ol,il=ol.shape;ol.shape=al.shape,ol=this.packedReshape(ol,il),Aa.push(ol),al=this.texData.get(ol.dataId),ll.shape=il}return{shape:ol.shape,texData:al,isUniform:!1}});this.uploadToGPU(Ea.dataId);const La={shape:Ea.shape,texData:ka,isUniform:!1},el=makeShaderKey(aa,Fa,La),tl=this.getAndSaveBinary(el,()=>compileProgram(this.gpgpu,aa,Fa,La)),nl=this.activeTimers!=null;let rl;nl&&(rl=this.startTimer()),env().get("ENGINE_COMPILE_ONLY")||runProgram(this.gpgpu,tl,Fa,La,Sa),Aa.forEach(ol=>this.disposeIntermediateTensorInfo(ol)),nl&&(rl=this.endTimer(rl),this.activeTimers.push({name:aa.constructor.name,query:this.getQueryTime(rl)}));const sl=env().getNumber("WEBGL_FLUSH_THRESHOLD");if(sl>0){const ol=now();ol-this.lastGlFlushTime>sl&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=ol)}if(!env().getBool("WEBGL_LAZILY_UNPACK")&&ka.isPacked&&Ta===!1){const ol=this.unpackTensor(Ea);return this.disposeIntermediateTensorInfo(Ea),ol}return Ea}compileAndRun(aa,xa,ba,Sa,Ta=!1){return ba=ba||xa[0].dtype,this.runWebGLProgram(aa,xa,ba,Sa,Ta)}getAndSaveBinary(aa,xa){return aa in this.binaryCache||(this.binaryCache[aa]=xa()),this.binaryCache[aa]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(env().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(xa=>{this.gpgpu.deleteProgram(this.binaryCache[xa].webGLProgram),delete this.binaryCache[xa]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=tidy(()=>{if(!env().get("WEBGL_RENDER_FLOAT32_ENABLED")){const aa=env().getBool("DEBUG");env().set("DEBUG",!1);const xa=this.abs(scalar(1e-8)).dataSync()[0];if(env().set("DEBUG",aa),xa>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?EPSILON_FLOAT32:EPSILON_FLOAT16}uploadToGPU(aa){const xa=this.texData.get(aa),{shape:ba,dtype:Sa,values:Ta,texture:wa,usage:Ea,isPacked:ka}=xa;if(wa!=null)return;const Aa=this.activeTimers!=null;let Fa;Aa&&(Fa=now());let La=xa.texShape;if(La==null&&(La=getTextureShapeFromLogicalShape(ba,ka),xa.texShape=La),Ta!=null){const el=getShapeAs3D(ba);let tl,nl=La[1],rl=La[0];const sl=Ta instanceof Uint8Array||Ta instanceof Uint8ClampedArray;(ka||!sl)&&([nl,rl]=getPackedMatrixTextureShapeWidthHeight(La[0],La[1])),ka?tl=new EncodeMatrixPackedProgram(el,sl):tl=new EncodeMatrixProgram(el,sl);const ol=sl?[rl,nl]:La,al=this.makeTensorInfo(ol,Sa),ll=this.texData.get(al.dataId);sl?ll.usage=TextureUsage.PIXELS:ll.usage=TextureUsage.UPLOAD,ll.texShape=ol,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(al.dataId),nl,rl,Ta);const il=[[rl,nl]],ul=this.runWebGLProgram(tl,[al],Sa,il,!0),dl=this.texData.get(ul.dataId);xa.texShape=dl.texShape,xa.isPacked=dl.isPacked,xa.usage=dl.usage,env().get("ENGINE_COMPILE_ONLY")?this.disposeData(ul.dataId):(xa.texture=dl.texture,xa.values=null,this.texData.delete(ul.dataId)),this.disposeIntermediateTensorInfo(al),Aa&&(this.uploadWaitMs+=now()-Fa)}else{const el=this.acquireTexture(La,Ea,Sa,ka);xa.texture=el}}convertAndCacheOnCPU(aa,xa){const ba=this.texData.get(aa),{dtype:Sa}=ba;return xa!=null&&(ba.values=float32ToTypedArray(xa,Sa)),ba.values}acquireTexture(aa,xa,ba,Sa){if(this.numBytesInGPU+=this.computeBytes(aa,ba),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){const Ta=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${Ta} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(aa,xa,Sa)}computeBytes(aa,xa){return aa[0]*aa[1]*bytesPerElement(xa)}checkCompileCompletion(){for(const[,aa]of Object.entries(this.binaryCache))this.checkCompletion_(aa)}async checkCompileCompletionAsync(){const aa=[];if(this.gpgpu.parallelCompilationExtension){for(const[,xa]of Object.entries(this.binaryCache))aa.push(this.checkCompletionAsync_(xa));return Promise.all(aa)}else{for(const[,xa]of Object.entries(this.binaryCache)){const ba=new Promise(Sa=>{try{this.checkCompletion_(xa),Sa(!0)}catch(Ta){throw Ta}});aa.push(ba)}return Promise.all(aa)}}async checkCompletionAsync_(aa){return this.gpgpu.gl.getProgramParameter(aa.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(aa):(await nextFrame(),this.checkCompletionAsync_(aa))}checkCompletion_(aa){if(this.gpgpu.gl.getProgramParameter(aa.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(aa.webGLProgram)),this.gpgpu.gl.getShaderParameter(aa.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(logShaderSourceAndInfoLog(aa.source,this.gpgpu.gl.getShaderInfoLog(aa.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const aa of Object.values(this.binaryCache)){this.gpgpu.buildVao(aa.webGLProgram);const{variablesLocations:xa,customUniformLocations:ba,infLoc:Sa,nanLoc:Ta,outShapeLocation:wa,outShapeStridesLocation:Ea,outTexShapeLocation:ka}=getUniformLocations(this.gpgpu,aa.program,aa.webGLProgram);aa.variablesLocations=xa,aa.customUniformLocations=ba,aa.infLoc=Sa,aa.nanLoc=Ta,aa.outShapeLocation=wa,aa.outShapeStridesLocation=Ea,aa.outTexShapeLocation=ka}}createTensorFromGPUData(aa,xa,ba){aa.channels=aa.channels||"RGBA";const{texture:Sa,height:Ta,width:wa,channels:Ea}=aa,ka=engine().backend;if(!ka.gpgpu.gl.isTexture(Sa))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const Aa=ka.writeTexture(Sa,xa,ba,Ta,wa,Ea);return engine().makeTensorFromDataId(Aa,xa,ba,ka)}}MathBackendWebGL.nextDataId=0;function float32ToTypedArray(ha,aa){if(aa==="float32"||aa==="complex64")return ha;if(aa==="int32"||aa==="bool"){const xa=aa==="int32"?new Int32Array(ha.length):new Uint8Array(ha.length);for(let ba=0;ba<xa.length;++ba)xa[ba]=Math.round(ha[ba]);return xa}else throw new Error(`Unknown dtype ${aa}`)}/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */isBrowser()&&registerBackend("webgl",()=>new MathBackendWebGL,2);/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;class BinaryOpProgram{constructor(aa,xa,ba){this.variableNames=["A","B"],this.outputShape=assertAndGetBroadcastShape(xa,ba),this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${aa}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_PACKED=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class BinaryOpPackedProgram{constructor(aa,xa,ba,Sa=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=assertAndGetBroadcastShape(xa,ba);const Ta=this.outputShape.length;this.enableShapeUniforms=useShapeUniforms(Ta);let wa="";if(Sa)if(Ta===0||sizeFromShape(this.outputShape)===1)wa=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(wa=`
          ${getCoordsDataType(Ta)} coords = getOutputCoords();
        `,Ta===1)this.enableShapeUniforms?wa+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:wa+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{const ka=getChannels("coords",Ta);this.enableShapeUniforms?wa+=`
            bool nextRowOutOfBounds =
              (${ka[Ta-2]} + 1) >= outShape[${Ta} - 2];
            bool nextColOutOfBounds =
              (${ka[Ta-1]} + 1) >= outShape[${Ta} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:wa+=`
            bool nextRowOutOfBounds =
              (${ka[Ta-2]} + 1) >= ${this.outputShape[Ta-2]};
            bool nextColOutOfBounds =
              (${ka[Ta-1]} + 1) >= ${this.outputShape[Ta-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${aa}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${wa}

        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function identity(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;return xa.incRef(ba.dataId),{dataId:ba.dataId,shape:ba.shape,dtype:ba.dtype}}const identityConfig={kernelName:Identity,backendName:"webgl",kernelFunc:identity};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function complex(ha){const{inputs:aa,backend:xa}=ha,{real:ba,imag:Sa}=aa,Ta=xa.makeTensorInfo(ba.shape,"complex64"),wa=xa.texData.get(Ta.dataId),Ea=identity({inputs:{x:ba},backend:xa}),ka=identity({inputs:{x:Sa},backend:xa});return wa.complexTensorInfos={real:Ea,imag:ka},Ta}const complexConfig={kernelName:Complex,backendName:"webgl",kernelFunc:complex};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LEAKYRELU="return (a < 0.) ? b * a : a;",LEAKYRELU_PACKED=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function leakyRelu(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{alpha:Ta}=ba,wa=xa.makeTensorInfo([],"float32",createScalarValue(Ta,"float32")),Ea=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(LEAKYRELU_PACKED,Sa.shape,wa.shape):new BinaryOpProgram(LEAKYRELU,Sa.shape,wa.shape),ka=xa.runWebGLProgram(Ea,[Sa,wa],"float32");return xa.disposeIntermediateTensorInfo(wa),ka}const leakyReluConfig={kernelName:LeakyRelu,backendName:"webgl",kernelFunc:leakyRelu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PRELU="return (a < 0.) ? b * a : a;",PRELU_PACKED=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function prelu(ha){const{inputs:aa,backend:xa}=ha,{x:ba,alpha:Sa}=aa,Ta=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(PRELU_PACKED,ba.shape,Sa.shape):new BinaryOpProgram(PRELU,ba.shape,Sa.shape);return xa.runWebGLProgram(Ta,[ba,Sa],"float32")}const preluConfig={kernelName:Prelu,backendName:"webgl",kernelFunc:prelu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CHECK_NAN_SNIPPET_UNARY="if (isnan(x)) return x;";function unaryKernelFunc({opSnippet:ha,packedOpSnippet:aa,cpuKernelImpl:xa,dtype:ba}){return({inputs:Sa,backend:Ta})=>{const{x:wa}=Sa,Ea=Ta,ka=ba||wa.dtype;if(Ea.shouldExecuteOnCPU([wa])&&xa!=null){const La=Ea.texData.get(wa.dataId),el=xa(La.values,ka);return Ea.makeTensorInfo(wa.shape,ka,el)}const Aa=env().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&aa!=null;let Fa;return Aa?Fa=new UnaryOpPackedProgram(wa.shape,aa):Fa=new UnaryOpProgram(wa.shape,ha),Ea.runWebGLProgram(Fa,[wa],ka)}}function binaryKernelFunc({opSnippet:ha,packedOpSnippet:aa,checkOutOfBounds:xa=!1,supportsComplex:ba=!1,cpuKernelImpl:Sa,dtype:Ta}){return({inputs:wa,backend:Ea})=>{const{a:ka,b:Aa}=wa,Fa=Ea;if(ba&&ka.dtype==="complex64"){const nl=Fa.texData.get(ka.dataId),rl=Fa.texData.get(Aa.dataId),[sl,ol]=[[nl.complexTensorInfos.real,rl.complexTensorInfos.real],[nl.complexTensorInfos.imag,rl.complexTensorInfos.imag]].map(ll=>{const[il,cl]=ll,ul={dataId:il.dataId,dtype:il.dtype,shape:ka.shape},dl={dataId:cl.dataId,dtype:cl.dtype,shape:Aa.shape},hl=new BinaryOpProgram(ha,ka.shape,Aa.shape);return Fa.runWebGLProgram(hl,[ul,dl],upcastType(il.dtype,cl.dtype))}),al=complex({inputs:{real:sl,imag:ol},backend:Fa});return Fa.disposeIntermediateTensorInfo(sl),Fa.disposeIntermediateTensorInfo(ol),al}const La=Ta||upcastType(ka.dtype,Aa.dtype);if((ka.dtype==="string"||Aa.dtype==="string"||Fa.shouldExecuteOnCPU([ka,Aa]))&&Sa!=null){const nl=Fa.texData.get(ka.dataId).values,rl=Fa.texData.get(Aa.dataId).values,sl=ka.dtype==="string"?fromUint8ToStringArray(nl):nl,ol=ka.dtype==="string"?fromUint8ToStringArray(rl):rl,[al,ll]=Sa(ka.shape,Aa.shape,sl,ol,La),il=Fa.makeTensorInfo(ll,La),cl=Fa.texData.get(il.dataId);return cl.values=al,il}const el=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&aa!=null;let tl;return el?tl=new BinaryOpPackedProgram(aa,ka.shape,Aa.shape,xa):tl=new BinaryOpProgram(ha,ka.shape,Aa.shape),Fa.runWebGLProgram(tl,[ka,Aa],La)}}function mapActivationToShaderProgram(ha,aa=!1){if(ha==="linear")return aa?LINEAR:LINEAR$1;if(ha==="relu")return aa?RELU$1:RELU$2;if(ha==="elu")return aa?ELU$1:ELU$2;if(ha==="relu6")return aa?RELU6$1:RELU6$2;if(ha==="prelu")return aa?PRELU_PACKED:PRELU;if(ha==="leakyrelu")return aa?LEAKYRELU_PACKED:LEAKYRELU;if(ha==="sigmoid")return aa?SIGMOID$1:SIGMOID$2;throw new Error(`Activation ${ha} has not been implemented for the WebGL backend.`)}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MatMulPackedProgram{constructor(aa,xa,ba,Sa=!1,Ta=!1,wa=!1,Ea=null,ka=!1,Aa=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=ba,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const Fa=Sa?aa[1]:aa[2],La=Math.ceil(Fa/2),el=Sa?"i * 2, rc.y":"rc.y, i * 2",tl=Ta?"rc.z, i * 2":"i * 2, rc.z",nl=Sa?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],rl=Ta?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let sl="",ol="";Ea&&(ka?sl=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${Ea}
        }`:Aa?sl=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${Ea}
        }`:sl=`vec4 activation(vec4 x) {
          ${Ea}
        }`,ol="result = activation(result);");const al=wa?"result += getBiasAtOutCoords();":"";wa&&this.variableNames.push("bias"),ka&&this.variableNames.push("preluActivationWeights"),Aa&&this.variableNames.push("leakyreluAlpha");let ll="rc.x",il="rc.x";aa[0]<xa[0]?ll=`imod(rc.x, ${aa[0]})`:xa[0]<aa[0]&&(il=`imod(rc.x, ${xa[0]})`),this.userCode=`
      ${sl}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${La}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${ll};
        int batchB = ${il};
        for (int i = 0; i < ${La}; i++) {
          vec4 a = getMatrixA(batchA, ${el});
          vec4 b = getMatrixB(batchB, ${tl});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${nl[0]} * ${rl[0]});
          result += (${nl[1]} * ${rl[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${al}

        ${ol}

        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COMPLEX_MULTIPLY={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class BinaryOpComplexProgram{constructor(aa,xa,ba){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=assertAndGetBroadcastShape(xa,ba),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${aa}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MUL="return a * b;";function multiply(ha){const{inputs:aa,backend:xa}=ha,{a:ba,b:Sa}=aa,Ta=upcastType(ba.dtype,Sa.dtype);if(ba.dtype==="complex64"){const Ea=xa.texData.get(ba.dataId),ka=xa.texData.get(Sa.dataId),Aa=new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL,ba.shape,Sa.shape),Fa=new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG,ba.shape,Sa.shape),La=[{dataId:Ea.complexTensorInfos.real.dataId,dtype:Ea.complexTensorInfos.real.dtype,shape:ba.shape},{dataId:Ea.complexTensorInfos.imag.dataId,dtype:Ea.complexTensorInfos.imag.dtype,shape:ba.shape},{dataId:ka.complexTensorInfos.real.dataId,dtype:ka.complexTensorInfos.real.dtype,shape:Sa.shape},{dataId:ka.complexTensorInfos.imag.dataId,dtype:ka.complexTensorInfos.imag.dtype,shape:Sa.shape}],el=xa.runWebGLProgram(Aa,La,"float32"),tl=xa.runWebGLProgram(Fa,La,"float32"),nl=complex({inputs:{real:el,imag:tl},backend:xa});return xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),nl}if(xa.shouldExecuteOnCPU([ba,Sa])){const Ea=xa.texData.get(ba.dataId),ka=xa.texData.get(Sa.dataId),[Aa,Fa]=multiplyImplCPU(ba.shape,Sa.shape,Ea.values,ka.values,Ta),La=xa.makeTensorInfo(Fa,Ta),el=xa.texData.get(La.dataId);return el.values=Aa,La}let wa;return env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?wa=new BinaryOpPackedProgram(MUL,ba.shape,Sa.shape):wa=new BinaryOpProgram(MUL,ba.shape,Sa.shape),xa.runWebGLProgram(wa,[ba,Sa],Ta)}const multiplyConfig={kernelName:Multiply,backendName:"webgl",kernelFunc:multiply};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function packedReshape(ha,aa,xa){const ba=[getBatchDim(ha.shape),...getRowsCols(ha.shape)],Sa={dtype:ha.dtype,shape:ba,dataId:ha.dataId},Ta=[getBatchDim(aa),...getRowsCols(aa)],wa=new ReshapePackedProgram(Ta,ba),Ea=!0,ka=[ba],Aa=xa.runWebGLProgram(wa,[Sa],ha.dtype,ka,Ea);return{dataId:Aa.dataId,shape:aa,dtype:Aa.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reshape(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{shape:Ta}=ba,wa=xa,Ea=sizeFromShape(Sa.shape),ka=inferFromImplicitShape(Ta,Ea),Aa=sizeFromShape(ka);assert(Ea===Aa,()=>`The new shape (${ka}) has ${Aa} elements and the old shape (${Sa.shape}) has ${Ea} elements. The new shape and old shape must have the same number of elements.`);const Fa=wa.texData.get(Sa.dataId);return Fa.isPacked&&!isReshapeFree(Sa.shape,ka)&&!(Fa.texture!==null&&isReshapeFree(Fa.shape,ka))?packedReshape(Sa,ka,wa):(wa.incRef(Sa.dataId),{dataId:Sa.dataId,shape:ka,dtype:Sa.dtype})}const reshapeConfig={kernelName:Reshape,backendName:"webgl",kernelFunc:reshape};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MeanProgram{constructor(aa,xa){this.variableNames=["x"];const{windowSize:ba,batchSize:Sa,inSize:Ta,outSize:wa}=aa;this.outputShape=[Sa,wa];const Ea=Math.floor(ba/4)*4,ka=ba%4;let Aa="sumValue += dot(values, ones);";if(xa!=null){const La=1/xa;Aa=`sumValue += dot(values * ${isInt(La)?La.toPrecision(2):La}, ones);`}let Fa="";Ta%ba>0&&(Fa=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${Fa}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${ba};

        float sumValue = 0.0;

        for (int i = 0; i < ${Ea}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${Aa}
        }

        int inIdx = inOffset + ${Ea};
        if (${ka===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${Aa}
        } else if (${ka===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${Aa}
        } else if (${ka===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${Aa}
        }
        setOutput(sumValue);
      }
    `}}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReduceProgram{constructor(aa,xa){this.variableNames=["x"];const{windowSize:ba,batchSize:Sa,inSize:Ta,outSize:wa}=aa;this.outputShape=[Sa,wa];let Ea="0.0",ka="";xa==="prod"?Ea="1.0":xa==="min"?(Ea="1.0 / 1e-20",ka="min"):xa==="max"&&(Ea="-1.0 / 1e-20",ka="max");let Aa=`${xa}(${xa}(${xa}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;xa==="sum"?Aa="sumValue":xa==="prod"?Aa="prodValue":xa==="all"?Aa="allValue":xa==="any"&&(Aa="anyValue");const Fa=Math.floor(ba/4)*4,La=ba%4;let el=`
      if (${xa==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${xa==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${ka}(values, minMaxValue);
        if (${xa==="min"} || ${xa==="max"}) {
          minMaxValue = ${ka}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,tl="vec4";xa==="all"?(Ea="1.0",el=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,tl="bvec4"):xa==="any"&&(Ea="0.0",el=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,tl="bvec4");let nl="";Ta%ba>0&&(nl=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${Ea};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${nl}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${ba};

        vec4 minMaxValue = vec4(${Ea});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${Fa}; i += 4) {
          int inIdx = inOffset + i;
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${el}
        }

        int inIdx = inOffset + ${Fa};
        if (${La===1}) {
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${el}
        } else if (${La===2}) {
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${el}
        } else if (${La===3}) {
          ${tl} values = ${tl}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${el}
        }
        setOutput(${Aa});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getReductionStages(ha){const aa=[];for(;aa.length===0||aa[aa.length-1].outSize!==1;){const xa=aa.length?aa[aa.length-1].outSize:ha[1],ba=computeOptimalWindowSize(xa);aa.push({inSize:xa,windowSize:ba,outSize:Math.ceil(xa/ba)})}return aa}function reduce(ha,aa,xa,ba){const Sa=getReductionStages(ha.shape);let Ta=ha;for(let wa=0;wa<Sa.length;wa++){const{inSize:Ea,windowSize:ka,outSize:Aa}=Sa[wa];let Fa,La;xa==="mean"?Fa=wa===0?new MeanProgram({windowSize:ka,inSize:Ea,batchSize:ha.shape[0],outSize:Aa},Ea):new MeanProgram({windowSize:ka,inSize:Ea,batchSize:ha.shape[0],outSize:Aa}):Fa=new ReduceProgram({windowSize:ka,inSize:Ea,batchSize:ha.shape[0],outSize:Aa},xa),La=Ta,Ta=ba.runWebGLProgram(Fa,[Ta],aa),La.dataId!==ha.dataId&&ba.disposeIntermediateTensorInfo(La)}return Ta}/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposeProgram{constructor(aa,xa){this.variableNames=["A"];const ba=new Array(aa.length);for(let wa=0;wa<ba.length;wa++)ba[wa]=aa[xa[wa]];this.outputShape=ba,this.rank=ba.length;const Sa=getCoordsDataType(this.rank),Ta=getSwitchedCoords(xa);this.userCode=`
    void main() {
      ${Sa} resRC = getOutputCoords();
      setOutput(getA(${Ta}));
    }
    `}}function getSwitchedCoords(ha){const aa=ha.length;if(aa>6)throw Error(`Transpose for rank ${aa} is not yet supported`);const xa=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],ba=new Array(aa);for(let Sa=0;Sa<ha.length;Sa++)ba[ha[Sa]]=xa[Sa];return ba.join()}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransposePackedProgram{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const ba=new Array(aa.length);for(let Fa=0;Fa<ba.length;Fa++)ba[Fa]=aa[xa[Fa]];if(this.outputShape=ba,this.rank=ba.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const Sa=getCoordsDataType(this.rank),Ta=getVecChannels("rc",this.rank),wa=new Array(this.rank);for(let Fa=0;Fa<xa.length;Fa++)wa[xa[Fa]]=Ta[Fa];const Ea=`vec2(${wa.slice(-2).join()})`,ka=`++${Ta[this.rank-1]} < ${ba[this.rank-1]}`,Aa=`getChannel(getA(${wa.join()}), ${Ea})`;this.userCode=`
    void main() {
      ${Sa} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${Aa};
      if(${ka}) {
        result[1] = ${Aa};
      }
      --${Ta[this.rank-1]};
      if(++${Ta[this.rank-2]} < ${ba[this.rank-2]}) {
        result[2] = ${Aa};
        if(${ka}) {
          result[3] = ${Aa};
        }
      }
      setOutput(result);
    }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transposeImpl(ha,aa,xa){const ba=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TransposePackedProgram(ha.shape,aa):new TransposeProgram(ha.shape,aa);return xa.runWebGLProgram(ba,[ha],ha.dtype)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sumImpl(ha,aa,xa,ba){const Sa=aa,Ta=ha.shape.length,wa=parseAxisParam(Sa,ha.shape);let Ea=wa;const ka=getAxesPermutation(Ea,Ta),Aa=ka!=null;let Fa=ha;Aa&&(Fa=transposeImpl(ha,ka,ba),Ea=getInnerMostAxes(Ea.length,Ta)),assertAxesAreInnerMostDims("sum",Ea,Ta);const[La,el]=computeOutAndReduceShapes(Fa.shape,Ea);let tl=La;xa&&(tl=expandShapeToKeepDim(La,wa));const nl=sizeFromShape(el),sl=sizeFromShape(ha.shape)/nl,ol=reshape({inputs:{x:Fa},attrs:{shape:[sl,nl]},backend:ba}),al=sumOutType(ha.dtype),ll=reduce(ol,al,"sum",ba),il=reshape({inputs:{x:ll},attrs:{shape:tl},backend:ba});return ba.disposeIntermediateTensorInfo(ol),ba.disposeIntermediateTensorInfo(ll),Aa&&ba.disposeIntermediateTensorInfo(Fa),il}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sum(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba;return sumImpl(Sa,Ta,wa,xa)}const sumConfig={kernelName:Sum,backendName:"webgl",kernelFunc:sum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transpose(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{perm:Ta}=ba,wa=xa,Ea=Sa.shape.length,ka=new Array(Ea);for(let Fa=0;Fa<ka.length;Fa++)ka[Fa]=Sa.shape[Ta[Fa]];let Aa;if(wa.shouldExecuteOnCPU([Sa])){const La=wa.texData.get(Sa.dataId).values,el=transposeImplCPU(La,Sa.shape,Sa.dtype,Ta,ka);Aa=wa.makeTensorInfo(ka,Sa.dtype);const tl=wa.texData.get(Aa.dataId);tl.values=el}else Aa=transposeImpl(Sa,Ta,wa);return Aa}const transposeConfig={kernelName:Transpose,backendName:"webgl",kernelFunc:transpose};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MATMUL_SHARED_DIM_THRESHOLD=1e3;function batchMatMulImpl({a:ha,b:aa,transposeA:xa,transposeB:ba,backend:Sa,bias:Ta=null,preluActivationWeights:wa=null,leakyreluAlpha:Ea=0,activation:ka=null}){const Aa=ha.shape.length,Fa=aa.shape.length,La=xa?ha.shape[Aa-2]:ha.shape[Aa-1],el=ba?aa.shape[Fa-1]:aa.shape[Fa-2],tl=xa?ha.shape[Aa-1]:ha.shape[Aa-2],nl=ba?aa.shape[Fa-2]:aa.shape[Fa-1],rl=ha.shape.slice(0,-2),sl=aa.shape.slice(0,-2),ol=sizeFromShape(rl),al=sizeFromShape(sl),il=assertAndGetBroadcastShape(ha.shape.slice(0,-2),aa.shape.slice(0,-2)).concat([tl,nl]);assert(La===el,()=>`Error in matMul: inner shapes (${La}) and (${el}) of Tensors with shapes ${ha.shape} and ${aa.shape} and transposeA=${xa} and transposeB=${ba} must match.`);const cl=xa?[ol,La,tl]:[ol,tl,La],ul=ba?[al,nl,el]:[al,el,nl],dl=reshape({inputs:{x:ha},backend:Sa,attrs:{shape:cl}}),hl=reshape({inputs:{x:aa},backend:Sa,attrs:{shape:ul}}),pl=[dl,hl],fl=Math.max(ol,al),ml=xa?dl.shape[1]:dl.shape[2],gl=Ta!=null,$l=wa!=null,xl=ka==="leakyrelu",yl=ka!=null?mapActivationToShaderProgram(ka,!0):null,bl=gl||$l||xl||yl!=null;let Sl;if((tl===1||nl===1)&&ml>MATMUL_SHARED_DIM_THRESHOLD&&bl===!1){let Tl=dl,Il=hl;xa&&(Tl=transpose({inputs:{x:dl},backend:Sa,attrs:{perm:[0,2,1]}}),pl.push(Tl)),ba&&(Il=transpose({inputs:{x:hl},backend:Sa,attrs:{perm:[0,2,1]}}),pl.push(Il));const wl=nl!==1,Nl=nl===1;let vl=Tl;wl&&(vl=reshape({inputs:{x:Tl},backend:Sa,attrs:{shape:[fl,ml,1]}}),pl.push(vl));const kl=nl===1?2:1;let El=Il;Nl&&(El=reshape({inputs:{x:Il},backend:Sa,attrs:{shape:[fl,1,ml]}}),pl.push(El));const Al=multiply({inputs:{a:vl,b:El},backend:Sa});Sl=sum({inputs:{x:Al},backend:Sa,attrs:{axis:kl,keepDims:!0}}),pl.push(Al)}else{const Tl=upcastType(ha.dtype,aa.dtype),Il=new MatMulPackedProgram(cl,ul,[fl,tl,nl],xa,ba,gl,yl,$l,xl),wl=[dl,hl];if(Ta!=null&&wl.push(Ta),$l&&wl.push(wa),xl){const Nl=Sa.makeTensorInfo([],"float32",createScalarValue(Ea,"float32"));wl.push(Nl),pl.push(Nl)}Sl=Sa.runWebGLProgram(Il,wl,Tl)}const Cl=reshape({inputs:{x:Sl},backend:Sa,attrs:{shape:il}});pl.push(Sl);for(const Tl of pl)Sa.disposeIntermediateTensorInfo(Tl);return Cl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function _fusedMatMul(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{a:Sa,b:Ta,bias:wa,preluActivationWeights:Ea}=aa,{transposeA:ka,transposeB:Aa,activation:Fa,leakyreluAlpha:La}=ba;return batchMatMulImpl({a:Sa,b:Ta,transposeA:ka,transposeB:Aa,backend:xa,bias:wa,preluActivationWeights:Ea,leakyreluAlpha:La,activation:Fa})}const _fusedMatMulConfig={kernelName:_FusedMatMul,backendName:"webgl",kernelFunc:_fusedMatMul};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ABS="return abs(x);";function abs(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(xa.shouldExecuteOnCPU([ba])&&ba.dtype!=="complex64"){const Ta=xa.texData.get(ba.dataId),wa=simpleAbsImplCPU(Ta.values);return xa.makeTensorInfo(ba.shape,ba.dtype,wa)}let Sa;return env().getBool("WEBGL_PACK_UNARY_OPERATIONS")?Sa=new UnaryOpPackedProgram(ba.shape,ABS):Sa=new UnaryOpProgram(ba.shape,ABS),xa.runWebGLProgram(Sa,[ba],ba.dtype)}const absConfig={kernelName:Abs,backendName:"webgl",kernelFunc:abs};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOS=CHECK_NAN_SNIPPET$1+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,acos=unaryKernelFunc({opSnippet:ACOS}),acosConfig={kernelName:Acos,backendName:"webgl",kernelFunc:acos};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ACOSH=CHECK_NAN_SNIPPET$1+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,acosh=unaryKernelFunc({opSnippet:ACOSH}),acoshConfig={kernelName:Acosh,backendName:"webgl",kernelFunc:acosh};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ADD="return a + b;",addKernelFunc=binaryKernelFunc({opSnippet:ADD,packedOpSnippet:ADD,supportsComplex:!0,cpuKernelImpl:addImplCPU}),addConfig={kernelName:Add,backendName:"webgl",kernelFunc:addKernelFunc};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AddNProgram{constructor(aa,xa){this.outputShape=[],this.outputShape=aa,this.variableNames=xa.map((Ta,wa)=>`T${wa}`);const ba=[];this.variableNames.forEach(Ta=>{ba.push(`float v${Ta} = get${Ta}AtOutCoords();`)});const Sa=this.variableNames.map(Ta=>`v${Ta}`).join(" + ");this.userCode=`
      void main() {
        ${ba.join(`
        `)}

        float result = ${Sa};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AddNPackedProgram{constructor(aa,xa){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=aa,this.variableNames=xa.map((Ta,wa)=>`T${wa}`);const ba=[];this.variableNames.forEach(Ta=>{ba.push(`vec4 v${Ta} = get${Ta}AtOutCoords();`)});const Sa=this.variableNames.map(Ta=>`v${Ta}`).join(" + ");this.userCode=`
      void main() {
        ${ba.join(`
        `)}

        vec4 result = ${Sa};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function addN(ha){const{inputs:aa,backend:xa}=ha,ba=aa;if(ba.length===1)return identity({inputs:{x:ba[0]},backend:xa});if(ba.length>env().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const ka=Math.floor(ba.length/2),Aa=addN({inputs:ba.slice(0,ka),backend:xa}),Fa=addN({inputs:ba.slice(ka),backend:xa});return addN({inputs:[Aa,Fa],backend:xa})}const Sa=ba.map(ka=>ka.dtype).reduce((ka,Aa)=>upcastType(ka,Aa)),Ta=ba.map(ka=>ka.shape),Ea=env().getBool("WEBGL_PACK")?new AddNPackedProgram(ba[0].shape,Ta):new AddNProgram(ba[0].shape,Ta);return xa.runWebGLProgram(Ea,ba,Sa)}const addNConfig={kernelName:AddN,backendName:"webgl",kernelFunc:addN};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function all(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation(Aa,Ea);let La=Sa;Fa!=null&&(La=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),Aa=getInnerMostAxes(Aa.length,Ea)),assertAxesAreInnerMostDims("all",Aa,Ea);const[el,tl]=computeOutAndReduceShapes(La.shape,Aa),nl=sizeFromShape(tl),rl=reshape({inputs:{x:La},backend:xa,attrs:{shape:[-1,nl]}}),sl=reduce(rl,rl.dtype,"all",xa);let ol;if(wa){const al=expandShapeToKeepDim(el,ka);ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:al}})}else ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),Fa!=null&&xa.disposeIntermediateTensorInfo(La),ol}const allConfig={kernelName:All,backendName:"webgl",kernelFunc:all};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function any(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation(Aa,Ea);let La=Sa;Fa!=null&&(La=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),Aa=getInnerMostAxes(Aa.length,Ea)),assertAxesAreInnerMostDims("any",Aa,Ea);const[el,tl]=computeOutAndReduceShapes(La.shape,Aa),nl=sizeFromShape(tl),rl=reshape({inputs:{x:La},backend:xa,attrs:{shape:[-1,nl]}}),sl=reduce(rl,rl.dtype,"any",xa);let ol;if(wa){const al=expandShapeToKeepDim(el,ka);ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:al}})}else ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),Fa!=null&&xa.disposeIntermediateTensorInfo(La),ol}const anyConfig={kernelName:Any,backendName:"webgl",kernelFunc:any};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ArgMinMaxProgram{constructor(aa,xa,ba){this.variableNames=["A"];const{windowSize:Sa,batchSize:Ta,outSize:wa}=aa;ba||this.variableNames.push("bestIndicesA"),this.outputShape=[Ta,wa];const Ea=xa==="max"?">":"<",ka=ba?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${Sa};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${Sa}; i++) {
          int inIdx = ${ka};
          float candidate = getA(batch, inIdx);
          if (candidate ${Ea} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ArgMinMaxPackedProgram{constructor(aa,xa,ba,Sa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,assert(aa.length>2,()=>`Packed arg${ba.charAt(0).toUpperCase()+ba.slice(1)} supports only inputs with rank above 2.`);const Ta=aa[aa.length-1],wa=Math.ceil(Ta/xa);this.outputShape=aa.slice(0,-1),wa>1&&this.outputShape.push(wa),Sa||this.variableNames.push("bestIndicesA");const Ea=this.outputShape,ka=Ea.length,Aa=getCoordsDataType(ka),Fa=getChannels("coords",ka);let La,el;if(wa===1){el=ka+1;const hl=getCoordsDataType(el);La=`
        ${hl} sourceLocR = ${hl}(${Fa.join()}, 0);
        ++${Fa[ka-1]};
        ${hl} sourceLocG = ${hl}(${Fa.join()}, 0);
        ++${Fa[ka-2]};
        ${hl} sourceLocA = ${hl}(${Fa.join()}, 0);
        --${Fa[ka-1]};
        ${hl} sourceLocB = ${hl}(${Fa.join()}, 0);
        --${Fa[ka-2]};`}else el=ka,La=`
        ${Aa} sourceLocR = coords;
        ++${Fa[ka-1]};
        ${Aa} sourceLocG = coords;
        ++${Fa[ka-2]};
        ${Aa} sourceLocA = coords;
        --${Fa[ka-1]};
        ${Aa} sourceLocB = coords;
        --${Fa[ka-2]};`;const tl=["x","y","z","w","u","v"].slice(0,el),nl="."+tl[el-1],rl=tl.map(hl=>"int "+hl),sl=getChannels("sourceLocR",el-1).concat("inIdx.r"),ol=getChannels("sourceLocG",el-1).concat("inIdx.g"),al=getChannels("sourceLocB",el-1).concat("inIdx.b"),ll=getChannels("sourceLocA",el-1).concat("inIdx.a"),il=ba==="max"?"greaterThan":"lessThan",cl=Sa?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${sl.join()}),
                             getBestIndicesAChannel(${ol.join()}),
                             getBestIndicesAChannel(${al.join()}),
                             getBestIndicesAChannel(${ll.join()})));`,ul=`vec4(
            getAChannel(${sl.join()}),
            hasNextCol ? getAChannel(${ol.join()}) : 0.,
            hasNextRow ? getAChannel(${al.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${ll.join()}) : 0.)`,dl=Sa?"":`
      float getBestIndicesAChannel(${rl.join()}) {
        return getChannel(getBestIndicesA(${tl.join()}),
                                          vec2(${tl.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${rl.join()}) {
        return getChannel(getA(${tl.join()}),
                               vec2(${tl.slice(-2).join()}));
      }
      ${dl}
      void main() {
        ${Aa} coords = getOutputCoords();
        bool hasNextCol = ${Fa[ka-1]} < ${Ea[ka-1]-1};
        bool hasNextRow = ${Fa[ka-2]} < ${Ea[ka-2]-1};
        ${La}
        ivec4 srcIdx = ivec4(sourceLocR${nl}, sourceLocG${nl},
          sourceLocB${nl}, sourceLocA${nl}) * ${xa};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${ul};

        for (int i = 0; i < ${xa}; i++) {
          inIdx = srcIdx;
          ${cl}
          vec4 candidate = ${ul};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${il}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argReduce(ha,aa,xa,ba=null){let Sa=aa.shape[0],Ta=aa.shape[1];ba!=null&&(Sa=ba.shape[0],Ta=ba.shape[1]);const wa=computeOptimalWindowSize(Ta),Ea={windowSize:wa,inSize:Ta,batchSize:Sa,outSize:Math.ceil(Ta/wa)},ka=new ArgMinMaxProgram(Ea,xa,ba==null),Aa=[aa];ba!=null&&Aa.push(ba);const Fa=ha.runWebGLProgram(ka,Aa,"int32");if(Fa.shape[1]===1)return Fa;const La=argReduce(ha,aa,xa,Fa);return ha.disposeIntermediateTensorInfo(Fa),La}function argReducePacked(ha,aa,xa,ba=null){const Sa=ba!=null?ba.shape:aa.shape,Ta=Sa[Sa.length-1],wa=computeOptimalWindowSize(Ta),Ea=new ArgMinMaxPackedProgram(Sa,wa,xa,ba==null),ka=ba==null?[aa]:[aa,ba],Aa=ha.runWebGLProgram(Ea,ka,"int32");if(Aa.shape.length===aa.shape.length){const Fa=argReducePacked(ha,aa,xa,Aa);return ha.disposeIntermediateTensorInfo(Aa),Fa}return Aa}function argMinMaxReduce(ha,aa,xa,ba){const Sa=[xa];if(assertAxesAreInnerMostDims("arg"+ba.charAt(0).toUpperCase()+ba.slice(1),Sa,aa.shape.length),!env().getBool("WEBGL_PACK_REDUCE")||aa.shape.length<=2){const Ta=[],wa=ha.texData.get(aa.dataId),Ea=wa!==null&&wa.isPacked;let ka=aa;Ea&&(ka=ha.unpackTensor(aa),Ta.push(ka));const[Aa,Fa]=computeOutAndReduceShapes(ka.shape,Sa),La=sizeFromShape(Fa),el=reshape({inputs:{x:ka},backend:ha,attrs:{shape:[-1,La]}});Ta.push(el);const tl=argReduce(ha,el,ba);Ta.push(tl);const nl=reshape({inputs:{x:tl},backend:ha,attrs:{shape:Aa}});return Ta.forEach(rl=>ha.disposeIntermediateTensorInfo(rl)),nl}return argReducePacked(ha,aa,ba)}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMax(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta}=ba;let wa=parseAxisParam(Ta,Sa.shape);const Ea=getAxesPermutation(wa,Sa.shape.length);let ka=Sa;const Aa=[];Ea!=null&&(ka=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:Ea}}),Aa.push(ka),wa=getInnerMostAxes(wa.length,ka.shape.length)),assertAxesAreInnerMostDims("argMax",[wa[0]],ka.shape.length);const Fa=argMinMaxReduce(xa,ka,wa[0],"max");return Aa.forEach(La=>xa.disposeIntermediateTensorInfo(La)),Fa}const argMaxConfig={kernelName:ArgMax,backendName:"webgl",kernelFunc:argMax};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function argMin(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta}=ba;let wa=parseAxisParam(Ta,Sa.shape);const Ea=getAxesPermutation(wa,Sa.shape.length);let ka=Sa;const Aa=[];Ea!=null&&(ka=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:Ea}}),Aa.push(ka),wa=getInnerMostAxes(wa.length,ka.shape.length)),assertAxesAreInnerMostDims("argMin",[wa[0]],ka.shape.length);const Fa=argMinMaxReduce(xa,ka,wa[0],"min");return Aa.forEach(La=>xa.disposeIntermediateTensorInfo(La)),Fa}const argMinConfig={kernelName:ArgMin,backendName:"webgl",kernelFunc:argMin};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASIN=CHECK_NAN_SNIPPET$1+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,asin=unaryKernelFunc({opSnippet:ASIN}),asinConfig={kernelName:Asin,backendName:"webgl",kernelFunc:asin};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ASINH=CHECK_NAN_SNIPPET$1+"return log(x + sqrt(x * x + 1.0));",asinh=unaryKernelFunc({opSnippet:ASINH}),asinhConfig={kernelName:Asinh,backendName:"webgl",kernelFunc:asinh};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN=CHECK_NAN_SNIPPET$1+`
  return atan(x);
`,atan=unaryKernelFunc({opSnippet:ATAN}),atanConfig={kernelName:Atan,backendName:"webgl",kernelFunc:atan};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATAN2=CHECK_NAN_SNIPPET+`
  return atan(a, b);
`,ATAN2_PACKED=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,atan2=binaryKernelFunc({opSnippet:ATAN2,packedOpSnippet:ATAN2_PACKED}),atan2Config={kernelName:Atan2,backendName:"webgl",kernelFunc:atan2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ATANH=CHECK_NAN_SNIPPET$1+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,atanh=unaryKernelFunc({opSnippet:ATANH}),atanhConfig={kernelName:Atanh,backendName:"webgl",kernelFunc:atanh};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Pool2DProgram{constructor(aa,xa,ba,Sa=!1,Ta=!1){if(this.variableNames=["x"],xa==="avg"&&ba)throw new Error("Cannot compute positions for average pool.");const wa=aa.filterWidth,Ea=aa.strideHeight,ka=aa.strideWidth,Aa=aa.dilationHeight,Fa=aa.dilationWidth,La=aa.effectiveFilterHeight,el=aa.effectiveFilterWidth,tl=aa.padInfo.top,nl=aa.padInfo.left;this.outputShape=aa.outShape;const rl=xa==="avg",sl=`((batch  * ${aa.inHeight} + xR) * ${aa.inWidth} + xC) * ${aa.inChannels} + d`,ol=`(xR * ${aa.inWidth} + xC) * ${aa.inChannels} + d`;let al="0.0";if(rl||(al="-1.0 / 1e-20"),ba){const hl=">=";this.userCode=`
        const ivec2 strides = ivec2(${Ea}, ${ka});
        const ivec2 pads = ivec2(${tl}, ${nl});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${La};
              wR += ${Aa}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${el};
                wC += ${Fa}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${hl} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${Sa?Ta?sl:ol:`wR * ${el} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const ll="max";let il=`${xa}(${xa}(${xa}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;xa==="avg"&&(il="avgValue / max(count, 1.0)");const cl=Math.floor(wa/4)*4,ul=wa%4,dl=`
      if (${rl}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${ll}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${Ea}, ${ka});
      const ivec2 pads = ivec2(${tl}, ${nl});
      const float initializationValue = ${al};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${aa.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${al});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${La};
            wR += ${Aa}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${aa.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${cl}; wC += 4) {
            int xC = xCCorner + wC * ${Fa};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${Fa}, d),
              getValue(batch, xR, xC + 2 * ${Fa}, d),
              getValue(batch, xR, xC + 3 * ${Fa}, d)
            );

            ${dl}
          }

          int xC = xCCorner + ${cl};
          if (${ul===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${dl}
          } else if (${ul===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${Fa}, d),
              initializationValue,
              initializationValue
            );

            ${dl}
          } else if (${ul===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${Fa}, d),
              getValue(batch, xR, xC + 2 * ${Fa}, d),
              initializationValue
            );

            ${dl}
          }
        }
        setOutput(${il});
      }
    `}}class Pool3DProgram{constructor(aa,xa,ba,Sa=!1,Ta=!1){if(this.variableNames=["x"],xa==="avg"&&ba)throw new Error("Cannot compute positions for average pool.");const wa=aa.filterWidth,Ea=aa.strideDepth,ka=aa.strideHeight,Aa=aa.strideWidth,Fa=aa.dilationDepth,La=aa.dilationHeight,el=aa.dilationWidth,tl=aa.effectiveFilterDepth,nl=aa.effectiveFilterHeight,rl=aa.effectiveFilterWidth,sl=aa.padInfo.front,ol=aa.padInfo.top,al=aa.padInfo.left;this.outputShape=aa.outShape;const ll=xa==="avg";let il="0.0";if(ll||(il="-1.0 / 1e-20"),ba){const fl=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${Ea}, ${ka}, ${Aa});
        const ivec3 pads = ivec3(${sl}, ${ol}, ${al});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${tl};
              wD += ${Fa}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${aa.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${nl};
                wR += ${La}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${aa.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${rl};
                  wC += ${el}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${aa.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${fl} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${Sa?Ta?`(((batch * ${aa.inDepth} + xD) * ${aa.inHeight} + xR) * ${aa.inWidth} + xC) * ${aa.inChannels} + ch`:`((xD * ${aa.inHeight} + xR) * ${aa.inWidth} + xC) * ${aa.inChannels} + ch`:`wD * ${nl} * ${rl} +
                      wR * ${rl} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}const cl="max";let ul=`${xa}(${xa}(${xa}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;xa==="avg"&&(ul="avgValue / max(count, 1.0)");const dl=Math.floor(wa/4)*4,hl=wa%4,pl=`
      if (${ll}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${cl}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${Ea}, ${ka}, ${Aa});
      const ivec3 pads = ivec3(${sl}, ${ol}, ${al});
      const float initializationValue = ${il};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${aa.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${il});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${tl};
            wD += ${Fa}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${aa.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${nl};
            wR += ${La}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${dl}; wC += 4) {
              int xC = xCCorner + wC * ${el};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${el}, ch),
                getValue(batch, xD, xR, xC + 2 * ${el}, ch),
                getValue(batch, xD, xR, xC + 3 * ${el}, ch)
              );

              ${pl}
            }

            int xC = xCCorner + ${dl};
            if (${hl===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${pl}
            } else if (${hl===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${el}, ch),
                initializationValue,
                initializationValue
              );

              ${pl}
            } else if (${hl===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${el}, ch),
                getValue(batch, xD, xR, xC + 2 * ${el}, ch),
                initializationValue
              );

              ${pl}
            }
          }
        }
        setOutput(${ul});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;assertNotComplex(Sa,"avgPool");const{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=ba,Aa=1;assert(eitherStridesOrDilationsAreOne(wa,Aa),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Aa}'`);const Fa=computePool2DInfo(Sa.shape,Ta,wa,Aa,Ea,ka);if(Fa.filterWidth===1&&Fa.filterHeight===1&&arraysEqual(Fa.inShape,Fa.outShape))return identity({inputs:{x:Sa},backend:xa});const La=new Pool2DProgram(Fa,"avg",!1);return xa.runWebGLProgram(La,[Sa],"float32")}const avgPoolConfig={kernelName:AvgPool,backendName:"webgl",kernelFunc:avgPool};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka,dataFormat:Aa}=ba,Fa=[1,1,1],La=computePool3DInfo(Sa.shape,Ta,wa,Fa,Ea,ka,Aa),el=new Pool3DProgram(La,"avg",!1);return xa.runWebGLProgram(el,[Sa],"float32")}const avgPool3DConfig={kernelName:AvgPool3D,backendName:"webgl",kernelFunc:avgPool3D};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class AvgPool2DBackpropProgram{constructor(aa){this.variableNames=["dy"],this.outputShape=aa.inShape;const xa=aa.filterHeight,ba=aa.filterWidth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=aa.dilationHeight,Ea=aa.dilationWidth,ka=aa.effectiveFilterHeight,Aa=aa.effectiveFilterWidth,Fa=ka-1-aa.padInfo.top,La=Aa-1-aa.padInfo.left,el=1/(xa*ba);this.userCode=`
      const ivec2 pads = ivec2(${Fa}, ${La});
      const float avgMultiplier = float(${el});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${ka};
            wR += ${wa}) {
          float dyR = float(dyRCorner + wR) / ${Sa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${Aa};
            wC+= ${Ea}) {
            float dyC = float(dyCCorner + wC) / ${Ta}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class AvgPool3DBackpropProgram{constructor(aa){this.variableNames=["dy"],this.outputShape=aa.inShape;const xa=aa.filterDepth,ba=aa.filterHeight,Sa=aa.filterWidth,Ta=aa.strideDepth,wa=aa.strideHeight,Ea=aa.strideWidth,ka=aa.dilationDepth,Aa=aa.dilationHeight,Fa=aa.dilationWidth,La=aa.effectiveFilterDepth,el=aa.effectiveFilterHeight,tl=aa.effectiveFilterWidth,nl=La-1-aa.padInfo.front,rl=el-1-aa.padInfo.top,sl=tl-1-aa.padInfo.left,ol=1/(xa*ba*Sa);this.userCode=`
      const ivec3 pads = ivec3(${nl}, ${rl}, ${sl});
      const float avgMultiplier = float(${ol});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${La};
            wD += ${ka}) {
          float dyD = float(dyDCorner + wD) / ${Ta}.0;

          if (dyD < 0.0 || dyD >= ${aa.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${el};
              wR += ${Aa}) {
            float dyR = float(dyRCorner + wR) / ${wa}.0;

            if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${tl};
                wC += ${Fa}) {
              float dyC = float(dyCCorner + wC) / ${Ea}.0;

              if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPool3DGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta,{filterSize:Ea,strides:ka,pad:Aa,dimRoundingMode:Fa}=ba,La=[1,1,1],el=computePool3DInfo(wa.shape,Ea,ka,La,Aa,Fa),tl=new AvgPool3DBackpropProgram(el);return xa.runWebGLProgram(tl,[Sa],wa.dtype)}const avgPool3DGradConfig={kernelName:AvgPool3DGrad,backendName:"webgl",kernelFunc:avgPool3DGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function avgPoolGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta;assertNotComplex([Sa,Ta],"avgPoolGrad");const{filterSize:Ea,strides:ka,pad:Aa}=ba,Fa=computePool2DInfo(wa.shape,Ea,ka,1,Aa),La=new AvgPool2DBackpropProgram(Fa);return xa.runWebGLProgram(La,[Sa],wa.dtype)}const avgPoolGradConfig={kernelName:AvgPoolGrad,backendName:"webgl",kernelFunc:avgPoolGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function batchMatMul(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{a:Sa,b:Ta}=aa,{transposeA:wa,transposeB:Ea}=ba;return batchMatMulImpl({a:Sa,b:Ta,transposeA:wa,transposeB:Ea,backend:xa})}const batchMatMulConfig={kernelName:BatchMatMul,backendName:"webgl",kernelFunc:batchMatMul};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BatchNormProgram{constructor(aa,xa,ba,Sa,Ta,wa){this.outputShape=[],this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape(aa,xa),assertAndGetBroadcastShape(aa,ba);let Ea="0.0";Sa!=null&&(assertAndGetBroadcastShape(aa,Sa),this.variableNames.push("offset"),Ea="getOffsetAtOutCoords()");let ka="1.0";Ta!=null&&(assertAndGetBroadcastShape(aa,Ta),this.variableNames.push("scale"),ka="getScaleAtOutCoords()"),this.outputShape=aa,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${Ea};
        float scale = ${ka};
        float inv = scale * inversesqrt(variance + float(${wa}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class BatchNormPackedProgram{constructor(aa,xa,ba,Sa,Ta,wa){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],assertAndGetBroadcastShape(aa,xa),assertAndGetBroadcastShape(aa,ba);let Ea="vec4(0.0)";Sa!=null&&(assertAndGetBroadcastShape(aa,Sa),this.variableNames.push("offset"),Ea="getOffsetAtOutCoords()");let ka="vec4(1.0)";Ta!=null&&(assertAndGetBroadcastShape(aa,Ta),this.variableNames.push("scale"),ka="getScaleAtOutCoords()"),this.outputShape=aa,this.userCode=`
      void main() {
        vec4 offset = ${Ea};
        vec4 scale = ${ka};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${wa}));

        setOutput((x - mean) * inv + offset);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchNorm=({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba,mean:Sa,variance:Ta,offset:wa,scale:Ea}=ha;assert(Sa.shape.length===Ta.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),assert(wa==null||Sa.shape.length===wa.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),assert(Ea==null||Sa.shape.length===Ea.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:ka}=xa;ka==null&&(ka=.001);const Aa=[ba,Sa,Ta];let Fa=null;wa!=null&&(Fa=wa.shape,Aa.push(wa));let La=null;Ea!=null&&(La=Ea.shape,Aa.push(Ea));const el=env().getBool("WEBGL_PACK_NORMALIZATION")?new BatchNormPackedProgram(ba.shape,Sa.shape,Ta.shape,Fa,La,ka):new BatchNormProgram(ba.shape,Sa.shape,Ta.shape,Fa,La,ka);return aa.runWebGLProgram(el,Aa,Aa[0].dtype)},batchNormConfig={kernelName:FusedBatchNorm,backendName:"webgl",kernelFunc:batchNorm};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SliceProgram{constructor(aa){this.variableNames=["source"],this.outputShape=aa,this.rank=aa.length;const xa=getCoordsDataType(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const ba=getCoords$1(this.rank);let Sa;const Ta=aa.map((wa,Ea)=>`sourceLoc.${coords[Ea]} = start[${Ea}] + coords.${coords[Ea]};`);Sa=`
        ${xa} sourceLoc;
        ${xa} coords = getOutputCoords();
        ${Ta.join(`
`)}
      `,this.userCode=`
      void main() {
        ${Sa}
        setOutput(getSource(${ba}));
      }
    `}}const coords=["x","y","z","w","u","v"];function getCoords$1(ha){if(ha===1)return"sourceLoc";if(ha<=6)return coords.slice(0,ha).map(aa=>"sourceLoc."+aa).join(",");throw Error(`Slicing for rank ${ha} is not yet supported`)}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SlicePackedProgram{constructor(aa){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=aa,this.rank=aa.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const xa=getCoordsDataType(this.rank),ba=getChannels("coords",this.rank),Sa=getChannels("sourceLoc",this.rank),Ta=this.rank===1?"sourceLoc":`vec2(${Sa.slice(-2).join()})`,wa=`getChannel(getSource(${Sa.join()}), ${Ta})`,Ea=`
      result.x = ${wa};
      if (++${ba[this.rank-1]} < ${aa[this.rank-1]}) {
        ++${Sa[this.rank-1]};
        result.y = ${wa};
        --${Sa[this.rank-1]};
      }
    `,ka=this.rank===1?"":`
      --${ba[this.rank-1]};
      if (++${ba[this.rank-2]} < ${aa[this.rank-2]}) {
        ++${Sa[this.rank-2]};
        result.z = ${wa};
        if (++${ba[this.rank-1]} < ${aa[this.rank-1]}) {
          ++${Sa[this.rank-1]};
          result.w = ${wa};
        }
      }
    `,Aa=this.rank<=4?`sourceLoc = coords +
            ${xa}(${aa.map((Fa,La)=>`start[${La}]`).join()});`:aa.map((Fa,La)=>`${Sa[La]} = ${ba[La]} + start[${La}];`).join(`
`);this.userCode=`
      void main() {
        ${xa} coords = getOutputCoords();
        ${xa} sourceLoc;
        ${Aa}
        vec4 result = vec4(0.);
        ${Ea}
        ${ka}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function shallowSlice(ha,aa,xa,ba){const Sa=ba.texData.get(ha.dataId),Ta=ba.makeTensorInfo(xa,ha.dtype),wa=ba.texData.get(Ta.dataId);Object.assign(wa,Sa),wa.refCount=1,wa.shape=xa,wa.dtype=ha.dtype;let Ea=computeFlatOffset(aa,computeStrides(ha.shape));Sa.slice&&(Ea+=Sa.slice.flatOffset),wa.slice={flatOffset:Ea,origDataId:Sa.slice&&Sa.slice.origDataId||ha.dataId};const ka=ba.dataRefCount.get(wa.slice.origDataId)||1;return ba.dataRefCount.set(wa.slice.origDataId,ka+1),Ta}function slice(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{begin:Ta,size:wa}=ba,[Ea,ka]=parseSliceParams(Sa,Ta,wa);if(assertParamsValid(Sa,Ea,ka),sizeFromShape(ka)===0)return xa.makeTensorInfo(ka,Sa.dtype,[]);if(xa.shouldExecuteOnCPU([Sa])||Sa.dtype==="string"){const La=xa.texData.get(Sa.dataId),el=sliceImplCPU(La.values,Ea,ka,Sa.shape,Sa.dtype);return xa.makeTensorInfo(ka,Sa.dtype,el)}const{isPacked:Aa}=xa.texData.get(Sa.dataId),Fa=isSliceContinous(Sa.shape,Ea,ka);if(Aa||!Fa){const La=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SlicePackedProgram(ka):new SliceProgram(ka),el=[Ea];return xa.runWebGLProgram(La,[Sa],Sa.dtype,el)}return xa.uploadToGPU(Sa.dataId),shallowSlice(Sa,Ea,ka,xa)}const sliceConfig={kernelName:Slice,backendName:"webgl",kernelFunc:slice};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const batchToSpaceND=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockShape:Ta,crops:wa}=ba;assert(Sa.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const Ea=Ta.reduce((al,ll)=>al*ll),ka=getReshaped(Sa.shape,Ta,Ea),Aa=getPermuted(ka.length,Ta.length),Fa=getReshapedPermuted(Sa.shape,Ta,Ea),La=getSliceBeginCoords(wa,Ta.length),el=getSliceSize(Fa,wa,Ta.length),tl=[],nl=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:ka}}),rl=transpose({inputs:{x:nl},backend:xa,attrs:{perm:Aa}}),sl=reshape({inputs:{x:rl},backend:xa,attrs:{shape:Fa}}),ol=slice({inputs:{x:sl},backend:xa,attrs:{begin:La,size:el}});return tl.push(nl),tl.push(rl),tl.push(sl),tl.forEach(al=>xa.disposeIntermediateTensorInfo(al)),ol},batchToSpaceNDConfig={kernelName:BatchToSpaceND,backendName:"webgl",kernelFunc:batchToSpaceND};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bincount(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,weights:Ta}=aa,{size:wa}=ba,Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),Aa=bincountImplCPU(Ea,ka,Ta.dtype,Ta.shape,wa);return xa.makeTensorInfo([wa],Ta.dtype,Aa)}const bincountConfig={kernelName:Bincount,backendName:"webgl",kernelFunc:bincount};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const BITWISEAND=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,BITWISEAND_UNPACKED=`
  return float(int(a.r) & int(b.r));
`;function bitwiseAnd(ha){const{inputs:aa,backend:xa}=ha,{a:ba,b:Sa}=aa,Ta=env().getBool("WEBGL_PACK_BINARY_OPERATIONS"),wa=env().getNumber("WEBGL_VERSION");if(xa.shouldExecuteOnCPU([ba,Sa])||wa===1){const ka=xa.texData.get(ba.dataId).values,Aa=xa.texData.get(Sa.dataId).values,[Fa,La]=bitwiseAndImplCPU(ba.shape,Sa.shape,ka,Aa,ba.dtype),el=xa.makeTensorInfo(La,ba.dtype),tl=xa.texData.get(el.dataId);return tl.values=Fa,el}let Ea;return Ta?Ea=new BinaryOpPackedProgram(BITWISEAND,ba.shape,Sa.shape,!1):Ea=new BinaryOpProgram(BITWISEAND_UNPACKED,ba.shape,Sa.shape),xa.runWebGLProgram(Ea,[ba,Sa],ba.dtype)}const bitwiseAndConfig={kernelName:BitwiseAnd,backendName:"webgl",kernelFunc:bitwiseAnd};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function broadcastArgs(ha){const{inputs:aa,backend:xa}=ha,{s0:ba,s1:Sa}=aa,Ta=xa.readSync(ba.dataId),wa=xa.readSync(Sa.dataId),Ea=assertAndGetBroadcastShape(Array.from(Ta),Array.from(wa));return xa.makeTensorInfo([Ea.length],"int32",Int32Array.from(Ea))}const broadcastArgsConfig={kernelName:BroadcastArgs,backendName:"webgl",kernelFunc:broadcastArgs};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NOT_EQUAL="return float(a != b);",notEqual=binaryKernelFunc({opSnippet:NOT_EQUAL,cpuKernelImpl:notEqualImplCPU,dtype:"bool"}),notEqualConfig={kernelName:NotEqual,backendName:"webgl",kernelFunc:notEqual};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function real(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=xa.texData.get(ba.dataId);return identity({inputs:{x:Sa.complexTensorInfos.real},backend:xa})}const realConfig={kernelName:Real,backendName:"webgl",kernelFunc:real};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TO_INT="return float(int(x));";function int(ha,aa){const xa=new UnaryOpProgram(ha.shape,TO_INT),ba=aa.runWebGLProgram(xa,[ha],"int32");return{dataId:ba.dataId,shape:ba.shape,dtype:ba.dtype}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cast(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{dtype:Ta}=ba;if(Ta==="complex64"){if(Sa.dtype==="complex64")return identity({inputs:{x:Sa},backend:xa});const wa=zeros(Sa.shape),Ea=cast({inputs:{x:Sa},backend:xa,attrs:{dtype:"float32"}}),ka=complex({inputs:{real:Ea,imag:wa},backend:xa});return wa.dispose(),xa.disposeIntermediateTensorInfo(Ea),ka}if(Sa.dtype==="complex64"){const wa=real({inputs:{input:Sa},backend:xa}),Ea=cast({inputs:{x:wa},backend:xa,attrs:{dtype:Ta}});return xa.disposeIntermediateTensorInfo(wa),Ea}if(!hasEncodingLoss(Sa.dtype,Ta)){const wa=identity({inputs:{x:Sa},backend:xa});return{dataId:wa.dataId,shape:wa.shape,dtype:Ta}}if(xa.shouldExecuteOnCPU([Sa])){const wa=xa.texData.get(Sa.dataId).values,[Ea,ka,Aa]=castImplCPU(wa,Sa.shape,Sa.dtype,Ta);return xa.makeTensorInfo(Ea,ka,Aa)}if(Ta==="int32")return int(Sa,xa);if(Ta==="bool"){const wa=xa.makeTensorInfo([],"bool",getTypedArrayFromDType("bool",1)),ka=notEqual({inputs:{a:Sa,b:wa},backend:xa});return xa.disposeIntermediateTensorInfo(wa),ka}throw new Error(`Error in Cast: failed to cast ${Sa.dtype} to ${Ta}`)}const castConfig={kernelName:Cast,backendName:"webgl",kernelFunc:cast};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const CEIL="return ceil(x);",ceil=unaryKernelFunc({opSnippet:CEIL,packedOpSnippet:CEIL,cpuKernelImpl:ceilImplCPU}),ceilConfig={kernelName:Ceil,backendName:"webgl",kernelFunc:ceil};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipProgram{constructor(aa){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=aa,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ClipPackedProgram{constructor(aa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=aa,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function clipByValue(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{clipValueMin:Ta,clipValueMax:wa}=ba;let Ea;env().getBool("WEBGL_PACK_CLIP")?Ea=new ClipPackedProgram(Sa.shape):Ea=new ClipProgram(Sa.shape);const ka=[[Ta],[wa]];return xa.runWebGLProgram(Ea,[Sa],Sa.dtype,ka)}const clipByValueConfig={kernelName:ClipByValue,backendName:"webgl",kernelFunc:clipByValue};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ComplexAbsProgram{constructor(aa){this.variableNames=["real","imag"],this.outputShape=aa,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function makeComplexComponentTensorInfo(ha,aa){return{dataId:aa.dataId,dtype:aa.dtype,shape:ha.shape}}function complexAbs(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa,Sa=xa.texData.get(ba.dataId),Ta=new ComplexAbsProgram(ba.shape),wa=[makeComplexComponentTensorInfo(ba,Sa.complexTensorInfos.real),makeComplexComponentTensorInfo(ba,Sa.complexTensorInfos.imag)];return xa.runWebGLProgram(Ta,wa,wa[0].dtype)}const complexAbsConfig={kernelName:ComplexAbs,backendName:"webgl",kernelFunc:complexAbs};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ConcatProgram{constructor(aa){this.outputShape=[],this.outputShape=computeOutShape$1(aa,1),this.variableNames=aa.map((wa,Ea)=>`T${Ea}`);const xa=new Array(aa.length-1);xa[0]=aa[0][1];for(let wa=1;wa<xa.length;wa++)xa[wa]=xa[wa-1]+aa[wa][1];const ba=[`if (yC < ${xa[0]}) setOutput(getT0(yR, yC));`];for(let wa=1;wa<xa.length;wa++){const Ea=xa[wa-1];ba.push(`else if (yC < ${xa[wa]}) setOutput(getT${wa}(yR, yC-${Ea}));`)}const Sa=xa.length,Ta=xa[xa.length-1];ba.push(`else setOutput(getT${Sa}(yR, yC-${Ta}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${ba.join(`
        `)}
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ConcatPackedProgram{constructor(aa,xa){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=computeOutShape$1(aa,xa);const ba=this.outputShape,Sa=ba.length,Ta=getCoordsDataType(Sa),wa=getChannels("coords",Sa),Ea=["x","y","z","w","u","v"].slice(0,Sa);this.variableNames=aa.map((rl,sl)=>`T${sl}`);const ka=new Array(aa.length-1);ka[0]=aa[0][xa];for(let rl=1;rl<ka.length;rl++)ka[rl]=ka[rl-1]+aa[rl][xa];const Aa=Ea[xa],Fa=Ea.slice(-2),La=Ea.join();let el=`if (${Aa} < ${ka[0]}) {
        return getChannel(
            getT0(${La}), vec2(${Fa.join()}));
        }`;for(let rl=1;rl<ka.length;rl++){const sl=ka[rl-1];el+=`
        if (${Aa} < ${ka[rl]}  && ${Aa} >= ${ka[rl-1]}) {
          return getChannel(
            getT${rl}(${shiftedChannels(Ea,Aa,sl)}),
            vec2(${shiftedChannels(Fa,Aa,sl)}));
        }`}const tl=ka.length,nl=ka[ka.length-1];el+=`
        return getChannel(
          getT${tl}(${shiftedChannels(Ea,Aa,nl)}),
          vec2(${shiftedChannels(Fa,Aa,nl)}));`,this.userCode=`
      float getValue(${Ea.map(rl=>"int "+rl)}) {
        ${el}
      }

      void main() {
        ${Ta} coords = getOutputCoords();
        vec4 result = vec4(getValue(${wa}), 0., 0., 0.);

        ${wa[Sa-1]} = ${wa[Sa-1]} + 1;
        if (${wa[Sa-1]} < ${ba[Sa-1]}) {
          result.g = getValue(${wa});
        }

        ${wa[Sa-2]} = ${wa[Sa-2]} + 1;
        if (${wa[Sa-2]} < ${ba[Sa-2]}) {
          result.a = getValue(${wa});
        }

        ${wa[Sa-1]} = ${wa[Sa-1]} - 1;
        if (${wa[Sa-2]} < ${ba[Sa-2]} &&
            ${wa[Sa-1]} < ${ba[Sa-1]}) {
          result.b = getValue(${wa});
        }
        setOutput(result);
      }
    `}}function shiftedChannels(ha,aa,xa){const ba=ha.indexOf(aa);return ha.map((Ta,wa)=>wa===ba?`${Ta} - ${xa}`:Ta).join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function imag(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa,Sa=xa.texData.get(ba.dataId);return identity({inputs:{x:Sa.complexTensorInfos.imag},backend:xa})}const imagConfig={kernelName:Imag,backendName:"webgl",kernelFunc:imag};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concatImpl(ha,aa,xa){const ba=ha[0].dtype;if(ba==="complex64"){const tl=ha.map(al=>real({inputs:{input:al},backend:xa})),nl=ha.map(al=>imag({inputs:{input:al},backend:xa})),rl=concatImpl(tl,aa,xa),sl=concatImpl(nl,aa,xa),ol=complex({inputs:{real:rl,imag:sl},backend:xa});return tl.forEach(al=>xa.disposeIntermediateTensorInfo(al)),nl.forEach(al=>xa.disposeIntermediateTensorInfo(al)),xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),ol}let Sa=xa.shouldExecuteOnCPU(ha);if(ba==="string"&&(Sa=!0),Sa){const tl=ha.map(il=>{const ul=[-1,sizeFromShape(il.shape.slice(aa))];return reshape({inputs:{x:il},backend:xa,attrs:{shape:ul}})}),nl=tl.map(il=>({vals:xa.readSync(il.dataId),shape:il.shape})),rl=computeOutShape$1(tl.map(il=>il.shape),1),sl=tl[0].shape[0]===1,ol=concatImplCPU(nl,rl,ba,sl),al=computeOutShape$1(ha.map(il=>il.shape),aa),ll=xa.makeTensorInfo(al,ba,ol);return tl.forEach(il=>xa.disposeIntermediateTensorInfo(il)),ll}const Ta=ha.filter(tl=>sizeFromShape(tl.shape)>0),wa=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&Ta[0].shape.length>1;if(Ta.length===1){const tl=wa?new UnaryOpProgram(ha[0].shape,CLONE):new UnaryOpPackedProgram(ha[0].shape,CLONE);return xa.runWebGLProgram(tl,ha,ba)}const Ea=env().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(Ta.length>Ea){const tl=[];for(let rl=0;rl<Ta.length;rl+=Ea){const sl=Ta.slice(rl,rl+Ea);tl.push(concatImpl(sl,aa,xa))}const nl=concatImpl(tl,aa,xa);for(const rl of tl)xa.disposeIntermediateTensorInfo(rl);return nl}if(wa){const tl=new ConcatPackedProgram(Ta.map(nl=>nl.shape),aa);return xa.runWebGLProgram(tl,Ta,ba)}const{tensors2D:ka,outShape:Aa}=computeTensors2D(Ta,aa,xa),Fa=new ConcatProgram(ka.map(tl=>tl.shape)),La=xa.runWebGLProgram(Fa,ka,ba);ka.forEach(tl=>xa.disposeIntermediateTensorInfo(tl));const el=reshape({inputs:{x:La},attrs:{shape:Aa},backend:xa});return xa.disposeIntermediateTensorInfo(La),el}function computeTensors2D(ha,aa,xa){const ba=computeOutShape$1(ha.map(Ta=>Ta.shape),aa);return{tensors2D:ha.map(Ta=>reshape({inputs:{x:Ta},attrs:{shape:[-1,sizeFromShape(Ta.shape.slice(aa))]},backend:xa})),outShape:ba}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function concat(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{axis:Sa}=ba,Ta=parseAxisParam(Sa,aa[0].shape)[0],wa=aa.map(Aa=>Aa.shape);assertParamsConsistent(wa,Ta);const Ea=computeOutShape$1(aa.map(Aa=>Aa.shape),Ta);if(sizeFromShape(Ea)===0)return xa.makeTensorInfo(Ea,aa[0].dtype,[]);const ka=aa.filter(Aa=>sizeFromShape(Aa.shape)>0);return ka.length===1?identity({inputs:{x:ka[0]},backend:xa}):concatImpl(ka,Ta,xa)}const concatConfig={kernelName:Concat,backendName:"webgl",kernelFunc:concat};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DProgram{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.outputShape=aa.outShape;const wa=aa.padInfo.top,Ea=aa.padInfo.left,ka=aa.strideHeight,Aa=aa.strideWidth,Fa=aa.dilationHeight,La=aa.dilationWidth,el=aa.filterHeight,tl=aa.filterWidth,nl=Math.floor(aa.inChannels/4)*4,rl=aa.inChannels%4,sl=aa.dataFormat==="channelsLast",ol=sl?1:2,al=sl?2:3,ll=sl?3:1;let il="",cl="";ba&&(Sa?il=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${ba}
        }`:Ta?il=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${ba}
        }`:il=`
          float activation(float x) {
            ${ba}
          }
        `,cl="result = activation(result);");const ul=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${il}

      const ivec2 strides = ivec2(${ka}, ${Aa});
      const ivec2 pads = ivec2(${wa}, ${Ea});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${ll}];

        ivec2 xRCCorner =
            ivec2(coords[${ol}], coords[${al}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${el}; wR++) {
          int xR = xRCorner + wR * ${Fa};

          if (xR < 0 || xR >= ${aa.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${tl}; wC++) {
            int xC = xCCorner + wC * ${La};

            if (xC < 0 || xC >= ${aa.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${nl}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${sl}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${rl===1}) {

              if (${sl}) {
                dotProd +=
                    getX(batch, xR, xC, ${nl}) *
                    getW(wR, wC, ${nl}, d2);
              } else {
                dotProd +=
                    getX(batch, ${nl}, xR, xC) *
                    getW(wR, wC, ${nl}, d2);
              }

            } else if (${rl===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${nl}, d2),
                getW(wR, wC, ${nl} + 1, d2)
              );

              if (${sl}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${nl}),
                  getX(batch, xR, xC, ${nl} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${nl}, xR, xC),
                  getX(batch, ${nl} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${rl===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${nl}, d2),
                getW(wR, wC, ${nl} + 1, d2),
                getW(wR, wC, ${nl} + 2, d2)
              );

              if (${sl}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${nl}),
                  getX(batch, xR, xC, ${nl} + 1),
                  getX(batch, xR, xC, ${nl} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${nl}, xR, xC),
                  getX(batch, ${nl} + 1, xR, xC),
                  getX(batch, ${nl} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${ul}
        ${cl}
        setOutput(result);
      }
    `}}class Conv3DProgram{constructor(aa){this.variableNames=["x","W"],this.outputShape=aa.outShape;const xa=aa.padInfo.front,ba=aa.padInfo.top,Sa=aa.padInfo.left,Ta=aa.strideDepth,wa=aa.strideHeight,Ea=aa.strideWidth,ka=aa.dilationDepth,Aa=aa.dilationHeight,Fa=aa.dilationWidth,La=aa.filterDepth,el=aa.filterHeight,tl=aa.filterWidth,nl=Math.floor(aa.inChannels/4)*4,rl=aa.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${Ta}, ${wa}, ${Ea});
      const ivec3 pads = ivec3(${xa}, ${ba}, ${Sa});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${La}; wF++) {
          int xF = xFCorner + wF * ${ka};

          if (xF < 0 || xF >= ${aa.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${el}; wR++) {
            int xR = xRCorner + wR * ${Aa};

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${tl}; wC++) {
              int xC = xCCorner + wC * ${Fa};

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${nl}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${rl===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${nl}) *
                  getW(wF, wR, wC, ${nl}, d2);
              } else if (${rl===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${nl}),
                  getX(batch, xF, xR, xC, ${nl} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${nl}, d2),
                  getW(wF, wR, wC, ${nl} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${rl===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${nl}),
                  getX(batch, xF, xR, xC, ${nl} + 1),
                  getX(batch, xF, xR, xC, ${nl} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${nl}, d2),
                  getW(wF, wR, wC, ${nl} + 1, d2),
                  getW(wF, wR, wC, ${nl} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DPackedProgram{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=aa.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const wa=aa.padInfo.left,Ea=aa.strideWidth,ka=aa.dilationWidth,Aa=aa.filterHeight,Fa=aa.filterWidth,La=Fa;let el=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let sl=0;sl<Fa;sl++)el+=`
           vec4 xTexelC${sl*2};
           int xTexelC${sl*2}Ready;
           vec4 xTexelC${sl*2+1};
           int xTexelC${sl*2+1}Ready;
           vec4 xC${sl};`;el+=`
     for (int r = 0; r < ${Aa}; r++) {
      for (int d1 = 0; d1 < ${aa.inChannels}; d1 += 2) {
       `;for(let sl=0;sl<Fa;sl++)el+=`
           xTexelC${sl*2} = vec4(0.0);
           xTexelC${sl*2}Ready = 0;
           xTexelC${sl*2+1} = vec4(0.0);
           xTexelC${sl*2+1}Ready = 0;
           xC${sl} = vec4(0.0);`;el+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let sl=0;sl<(La+1)/2;sl++){const ol=sl*2;if(el+=`
           xC = xCCorner + ${ol*ka};
           `,Ea===1){if(ol<Fa&&(wa%2===1?(el+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }
               `,ka===1&&ol>0?el+=`
                 xC${ol} = vec4(xTexelC${ol-2}.zw, xTexelC${ol}.xy);
                 `:el+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${ol} = vec4(previous.zw, xTexelC${ol}.xy);
                   } else {
                     xC${ol} = vec4(0.0, 0.0, xTexelC${ol}.xy);
                   }
                   `):el+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }

                 xC${ol} = xTexelC${ol};
                 `,ol+1<Fa)){const al=wa%2===0?nearestLargerEven(ka):ka;ka%2===0&&wa%2===1||ka%2!==0&&wa%2!==1?(el+=`
                   xCOffset = xC + imod(pads[1], 2) + ${al};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol+1}Ready == 0) {
                     xTexelC${ol+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${ol+1}.zw = vec2(0.0);
                     }
                     xTexelC${ol+1}Ready = 1;
                   }
                   `,ka>1?el+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${ol+1} = vec4(previous.zw, xTexelC${ol+1}.xy);
                     } else {
                      xC${ol+1} = vec4(0.0, 0.0, xTexelC${ol+1}.xy);
                     }
                     `:el+=`
                     xC${ol+1} = vec4(xTexelC${ol}.zw, xTexelC${ol+1}.xy);
                     `):al===1?el+=`
                     xC${ol+1} = xTexelC${ol};
                     `:el+=`
                     xCOffset = xC + ${al};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol+1}Ready == 0) {
                       xTexelC${ol+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${ol+1}.zw = vec2(0.0);
                       }
                       xTexelC${ol+1}Ready = 1;
                     }

                     xC${ol+1} = xTexelC${ol+1};
                     `}}else ol<Fa&&(wa%2===1?(el+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${ol+1}Ready == 0) {
                   xTexelC${ol+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${ol+1}.zw = vec2(0.0);
                   }
                   xTexelC${ol+1}Ready = 1;
                 }

                 xC${ol} = vec4(xTexelC${ol}.zw, xTexelC${ol+1}.zw);
               `,ol+1<Fa&&(el+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${ol+1} = vec4(xTexelC${ol+1}.xy, final.xy);
                 `)):(el+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${ol}Ready == 0) {
                   xTexelC${ol} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${ol}.zw = vec2(0.0);
                   }
                   xTexelC${ol}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${ol+1}Ready == 0) {
                   xTexelC${ol+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${ol+1}.zw = vec2(0.);
                   }
                   xTexelC${ol+1}Ready = 1;
                 }

                 xC${ol} = vec4(
                   xTexelC${ol}.xy, xTexelC${ol+1}.xy);
               `,ol+1<Fa&&(el+=`
                   xC${ol+1} = vec4(xTexelC${ol}.zw, xTexelC${ol+1}.zw);
                 `)));ol<Fa&&(el+=`
             wTexel = getW(r, ${ol}, d1, d2);
             dotProd += xC${ol}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${aa.inChannels}) {
               dotProd += xC${ol}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,ol+1<Fa&&(el+=`
               wTexel = getW(r, ${ol+1}, d1, d2);
               dotProd += xC${ol+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${aa.inChannels}) {
                 dotProd += xC${ol+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}el+=`
     }
   `,el+=`
     }
   `,el+=`
     }
   `;let tl="",nl="";ba&&(Sa?tl=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${ba}
         }`:Ta?tl=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${ba}
         }`:tl=`vec4 activation(vec4 x) {
           ${ba}
         }`,nl="result = activation(result);");const rl=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${tl}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${el}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${rl}
         ${nl}
         setOutput(result);
       }
     `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Im2ColPackedProgram{constructor(aa,xa){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=aa,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const{dataFormat:ba}=xa,Sa=getGlslDifferences(),Ta=ba==="channelsLast",wa=Ta?1:2,Ea=Ta?2:3,ka=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${aa[2]} && pos < ${aa[1]}) {`;let Aa="";for(let Fa=0;Fa<=1;Fa++)for(let La=0;La<=1;La++)Aa+=`
          blockIndex = rc.z + ${La};
          pos = rc.y + ${Fa};

          ${ka}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${wa}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${Ea}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${Ta}) {
                  innerDims = vec2(d1, ch);
                  result[${Fa*2+La}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${Fa*2+La}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${Aa}

        ${Sa.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function getShapeForBatchMatMul(ha,aa){const xa=ha.length;return xa>=3?aa?[...ha.slice(0,-3),ha[xa-3]*ha[xa-2],ha[xa-1]]:[...ha.slice(0,-3),ha[xa-3],ha[xa-2]*ha[xa-1]]:!aa&&xa===1&&ha[0]>1?[ha[0],1]:null}function conv2dByMatMul({x:ha,filter:aa,convInfo:xa,backend:ba,bias:Sa=null,preluActivationWeights:Ta=null,leakyreluAlpha:wa=0,activation:Ea=null}){const ka=ha.shape,Aa=ba.texData.get(ha.dataId),Fa=xa.inChannels,La=ka[0]*ka[1]*ka[2],el=xa.outChannels,tl=xa.dataFormat==="channelsLast",nl=!1,rl=!1;let sl;const ol=[];if(Ta!=null){const il=getShapeForBatchMatMul(Ta.shape,tl);il!=null&&(Ta=reshape({inputs:{x:Ta},backend:ba,attrs:{shape:il}}),ol.push(Ta))}if(Sa!=null){const il=getShapeForBatchMatMul(Sa.shape,tl);il!=null&&(Sa=reshape({inputs:{x:Sa},backend:ba,attrs:{shape:il}}),ol.push(Sa))}if(!((La===1||el===1)&&Fa>MATMUL_SHARED_DIM_THRESHOLD)&&Aa.isPacked&&tl&&Aa.texture!=null&&ka[2]%2!==0&&arraysEqual(Aa.shape.slice(-3),ka.slice(-3))){const il=ka[0]*ka[1]*(ka[2]+1),cl={dataId:ha.dataId,shape:[1,il,xa.inChannels],dtype:ha.dtype},ul=Aa.shape;Aa.shape=Aa.shape.slice(),Aa.shape[Aa.shape.length-2]++,assert(isReshapeFree(Aa.shape,cl.shape),()=>`packed reshape ${Aa.shape} to ${cl.shape} isn't free`);const dl=reshape({inputs:{x:aa},backend:ba,attrs:{shape:[1,xa.inChannels,xa.outChannels]}});ol.push(dl);const hl=batchMatMulImpl({a:cl,b:dl,backend:ba,transposeA:nl,transposeB:rl,bias:Sa,activation:Ea,preluActivationWeights:Ta,leakyreluAlpha:wa}),pl=ba.texData.get(hl.dataId);assert(pl.isPacked,()=>"batchMatMul result is expected to be packed"),Aa.shape=ul,pl.shape=xa.outShape,sl=identity({inputs:{x:hl},backend:ba}),sl.shape=xa.outShape,ol.push(hl)}else{const il=xa.outHeight*xa.outWidth,cl=reshape({inputs:{x:ha},backend:ba,attrs:{shape:tl?[xa.batchSize,il,xa.inChannels]:[xa.batchSize,xa.inChannels,il]}}),ul=reshape({inputs:{x:aa},backend:ba,attrs:{shape:[1,xa.inChannels,xa.outChannels]}}),dl=batchMatMulImpl({a:tl?cl:ul,b:tl?ul:cl,transposeA:!tl,transposeB:rl,backend:ba,bias:Sa,activation:Ea,preluActivationWeights:Ta,leakyreluAlpha:wa});sl=reshape({inputs:{x:dl},backend:ba,attrs:{shape:xa.outShape}}),ol.push(cl),ol.push(ul),ol.push(dl)}for(const il of ol)ba.disposeIntermediateTensorInfo(il);return sl}function conv2dWithIm2Row({x:ha,filter:aa,convInfo:xa,backend:ba,bias:Sa=null,preluActivationWeights:Ta=null,leakyreluAlpha:wa=0,activation:Ea=null}){const{filterWidth:ka,filterHeight:Aa,inChannels:Fa,outWidth:La,outHeight:el,dataFormat:tl}=xa,nl=tl==="channelsLast",rl=ka*Aa*Fa,sl=el*La,ol=[xa.batchSize,rl,sl],al=!0,ll=!1,il=[];if(Ta!=null){const Cl=getShapeForBatchMatMul(Ta.shape,nl);Cl!=null&&(Ta=reshape({inputs:{x:Ta},backend:ba,attrs:{shape:Cl}}),il.push(Ta))}if(Sa!=null){const Cl=getShapeForBatchMatMul(Sa.shape,nl);Cl!=null&&(Sa=reshape({inputs:{x:Sa},backend:ba,attrs:{shape:Cl}}),il.push(Sa))}const cl=reshape({inputs:{x:aa},backend:ba,attrs:{shape:[1,rl,sizeFromShape(aa.shape)/rl]}});il.push(cl);const ul=new Im2ColPackedProgram(ol,xa),dl=[ha.shape,[xa.padInfo.top,xa.padInfo.left],[xa.strideHeight,xa.strideWidth],[xa.dilationHeight,xa.dilationWidth],[xa.inChannels],[xa.filterWidth*xa.inChannels],[xa.outWidth]],hl=ba.runWebGLProgram(ul,[ha],"float32",dl),pl=reshape({inputs:{x:hl},backend:ba,attrs:{shape:ol}});il.push(hl),il.push(pl);const fl=Sa!=null,ml=Ta!=null,gl=Ea==="leakyrelu",$l=Ea?mapActivationToShaderProgram(Ea,!0):null,xl=new MatMulPackedProgram(nl?pl.shape:cl.shape,nl?cl.shape:pl.shape,nl?[xa.batchSize,sl,xa.outChannels]:[xa.batchSize,xa.outChannels,sl],al,ll,fl,$l,ml,gl),yl=nl?[pl,cl]:[cl,pl];if(Sa&&yl.push(Sa),ml&&yl.push(Ta),gl){const Cl=ba.makeTensorInfo([],"float32",createScalarValue(wa,"float32"));yl.push(Cl),il.push(Cl)}const bl=ba.runWebGLProgram(xl,yl,"float32"),Sl=reshape({inputs:{x:bl},backend:ba,attrs:{shape:xa.outShape}});il.push(bl);for(const Cl of il)ba.disposeIntermediateTensorInfo(Cl);return Sl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2d(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dataFormat:ka,dilations:Aa,dimRoundingMode:Fa}=ba,La=convertConv2DDataFormat(ka),el=computeConv2DInfo(Sa.shape,Ta.shape,wa,Aa,Ea,Fa,!1,La);let tl;if(el.filterHeight===1&&el.filterWidth===1&&el.dilationHeight===1&&el.dilationWidth===1&&el.strideHeight===1&&el.strideWidth===1&&(el.padInfo.type==="SAME"||el.padInfo.type==="VALID"))tl=conv2dByMatMul({x:Sa,filter:Ta,convInfo:el,backend:xa});else if(el.strideWidth<=2&&La==="channelsLast"&&env().getBool("WEBGL_EXP_CONV")){const rl=new Conv2DPackedProgram(el),sl=[[el.padInfo.top,el.padInfo.left],[el.strideHeight,el.strideWidth],[el.dilationHeight,el.dilationWidth],[el.inHeight,el.inWidth]];tl=xa.runWebGLProgram(rl,[Sa,Ta],"float32",sl)}else if(env().getBool("WEBGL_CONV_IM2COL"))tl=conv2dWithIm2Row({x:Sa,filter:Ta,convInfo:el,backend:xa});else{const rl=new Conv2DProgram(el);tl=xa.runWebGLProgram(rl,[Sa,Ta],"float32")}const nl=reshape({inputs:{x:tl},backend:xa,attrs:{shape:el.outShape}});return xa.disposeIntermediateTensorInfo(tl),nl}const conv2DConfig={kernelName:Conv2D,backendName:"webgl",kernelFunc:conv2d};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DDerFilterProgram{constructor(aa){this.variableNames=["x","dy"],this.outputShape=aa.filterShape;const xa=aa.strideHeight,ba=aa.strideWidth,Sa=aa.padInfo.top,Ta=aa.padInfo.left,wa=aa.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${aa.batchSize}; b++) {
          for (int yR = 0; yR < ${aa.outHeight}; yR++) {
            int xR = wR + yR * ${xa} - ${Sa};

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${aa.outWidth}; yC++) {
              int xC = wC + yC * ${ba} - ${Ta};

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              ${wa?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Conv2DDerInputProgram{constructor(aa){this.variableNames=["dy","W"],this.outputShape=aa.inShape;const xa=aa.filterHeight,ba=aa.filterWidth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=aa.dataFormat==="channelsLast",Ea=xa-1-aa.padInfo.top,ka=ba-1-aa.padInfo.left,Aa=wa?1:2,Fa=wa?2:3,La=wa?3:1;this.userCode=`
      const ivec2 pads = ivec2(${Ea}, ${ka});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${La}];

        ivec2 dyCorner = ivec2(coords[${Aa}], coords[${Fa}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${xa}; wR++) {
          float dyR = float(dyRCorner + wR) / ${Sa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${xa} - 1 - wR;

          for (int wC = 0; wC < ${ba}; wC++) {
            float dyC = float(dyCCorner + wC) / ${Ta}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${ba} - 1 - wC;

            for (int d2 = 0; d2 < ${aa.outChannels}; d2++) {

              if (${wa}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Conv3DDerFilterProgram{constructor(aa){this.variableNames=["x","dy"],this.outputShape=aa.filterShape;const xa=aa.strideDepth,ba=aa.strideHeight,Sa=aa.strideWidth,Ta=aa.padInfo.front,wa=aa.padInfo.top,Ea=aa.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${aa.batchSize}; b++) {
          for (int yF = 0; yF < ${aa.outDepth}; yF++) {
            int xF = wF + yF * ${xa} - ${Ta};

            if (xF < 0 || xF >= ${aa.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${aa.outHeight}; yR++) {
              int xR = wR + yR * ${ba} - ${wa};

              if (xR < 0 || xR >= ${aa.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${aa.outWidth}; yC++) {
                int xC = wC + yC * ${Sa} - ${Ea};

                if (xC < 0 || xC >= ${aa.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Conv3DDerInputProgram{constructor(aa){this.variableNames=["dy","W"],this.outputShape=aa.inShape;const xa=aa.filterDepth,ba=aa.filterHeight,Sa=aa.filterWidth,Ta=aa.strideDepth,wa=aa.strideHeight,Ea=aa.strideWidth,ka=xa-1-aa.padInfo.front,Aa=ba-1-aa.padInfo.top,Fa=Sa-1-aa.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${ka}, ${Aa}, ${Fa});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${xa}; wF++) {
          float dyF = float(dyFCorner + wF) / ${Ta}.0;

          if (dyF < 0.0 || dyF >= ${aa.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${xa} - 1 - wF;

          for (int wR = 0; wR < ${ba}; wR++) {
            float dyR = float(dyRCorner + wR) / ${wa}.0;

            if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${ba} - 1 - wR;

            for (int wC = 0; wC < ${Sa}; wC++) {
              float dyC = float(dyCCorner + wC) / ${Ea}.0;

              if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${Sa} - 1 - wC;

              for (int d2 = 0; d2 < ${aa.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropFilter(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,pad:Ea,dataFormat:ka,dimRoundingMode:Aa,filterShape:Fa}=ba,La=convertConv2DDataFormat(ka),el=computeConv2DInfo(Sa.shape,Fa,wa,1,Ea,Aa,!1,La),tl=new Conv2DDerFilterProgram(el);return xa.runWebGLProgram(tl,[Sa,Ta],"float32")}const conv2DBackpropFilterConfig={kernelName:Conv2DBackpropFilter,backendName:"webgl",kernelFunc:conv2DBackpropFilter};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Conv2DDerInputPackedProgram{constructor(aa){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=aa.inShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const xa=aa.filterHeight,ba=aa.filterWidth,Sa=xa-1-aa.padInfo.top,Ta=ba-1-aa.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${Sa}, ${Ta});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${xa}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${xa} - 1 - wR;

          for (int wC = 0; wC < ${ba}; wC++) {
            int wCPerm = ${ba} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${aa.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${aa.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${aa.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${aa.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${aa.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv2DBackpropInput(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{inputShape:wa,strides:Ea,pad:ka,dataFormat:Aa,dimRoundingMode:Fa}=ba,La=convertConv2DDataFormat(Aa),el=computeConv2DInfo(wa,Ta.shape,Ea,1,ka,Fa,!1,La);if(env().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&La==="channelsLast"){const tl=[[el.strideHeight,el.strideWidth]],nl=new Conv2DDerInputPackedProgram(el);return xa.runWebGLProgram(nl,[Sa,Ta],"float32",tl)}else{const tl=new Conv2DDerInputProgram(el);return xa.runWebGLProgram(tl,[Sa,Ta],"float32")}}const conv2DBackpropInputConfig={kernelName:Conv2DBackpropInput,backendName:"webgl",kernelFunc:conv2DBackpropInput};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka}=ba,Aa=computeConv3DInfo(Sa.shape,Ta.shape,wa,ka,Ea),Fa=new Conv3DProgram(Aa);return xa.runWebGLProgram(Fa,[Sa,Ta],"float32")}const conv3DConfig={kernelName:Conv3D,backendName:"webgl",kernelFunc:conv3D};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropFilterV2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,pad:Ea,filterShape:ka}=ba,Aa=computeConv3DInfo(Sa.shape,ka,wa,1,Ea),Fa=new Conv3DDerFilterProgram(Aa);return xa.runWebGLProgram(Fa,[Sa,Ta],"float32")}const conv3DBackpropFilterV2Config={kernelName:Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:conv3DBackpropFilterV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function conv3DBackpropInput(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{pad:wa,strides:Ea,inputShape:ka}=ba,Aa=computeConv3DInfo(ka,Ta.shape,Ea,1,wa),Fa=new Conv3DDerInputProgram(Aa);return xa.runWebGLProgram(Fa,[Sa,Ta],"float32")}const conv3DBackpropInputConfig={kernelName:Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:conv3DBackpropInput};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COS=CHECK_NAN_SNIPPET_UNARY+`
  return cos(x);
`,COS_PACKED=`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED}
  return result;
`,cos=unaryKernelFunc({opSnippet:COS,packedOpSnippet:COS_PACKED}),cosConfig={kernelName:Cos,backendName:"webgl",kernelFunc:cos};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const COSH=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,cosh=unaryKernelFunc({opSnippet:COSH}),coshConfig={kernelName:Cosh,backendName:"webgl",kernelFunc:cosh};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class CropAndResizeProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[wa,Ea,ka,Aa]=aa,[Fa]=xa,[La,el]=ba;this.outputShape=[Fa,La,el,Aa];const tl=Sa==="bilinear"?1:0,[nl,rl]=[`${Ea-1}.0`,`${ka-1}.0`],[sl,ol,al]=La>1?[`${(Ea-1)/(La-1)}`,"(y2-y1) * height_ratio",`y1*${nl} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${nl}`],[ll,il,cl]=el>1?[`${(ka-1)/(el-1)}`,"(x2-x1) * width_ratio",`x1*${rl} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${rl}`];this.userCode=`
      const float height_ratio = float(${sl});
      const float width_ratio = float(${ll});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${wa}) {
          return;
        }

        float height_scale = ${ol};
        float width_scale = ${il};

        float in_y = ${al};
        if( in_y < 0.0 || in_y > ${nl} ) {
          setOutput(float(${Ta}));
          return;
        }
        float in_x = ${cl};
        if( in_x < 0.0 || in_x > ${rl} ) {
          setOutput(float(${Ta}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${tl} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const cropAndResize=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{image:Sa,boxes:Ta,boxInd:wa}=aa,{cropSize:Ea,method:ka,extrapolationValue:Aa}=ba,Fa=new CropAndResizeProgram(Sa.shape,Ta.shape,Ea,ka,Aa);return xa.runWebGLProgram(Fa,[Sa,Ta,wa],"float32")},cropAndResizeConfig={kernelName:CropAndResize,backendName:"webgl",kernelFunc:cropAndResize};var CumOpType;(function(ha){ha.Prod="*",ha.Sum="+"})(CumOpType||(CumOpType={}));class CumProgram{constructor(aa,xa,ba,Sa){this.op=aa,this.outputShape=xa,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const Ta=this.outputShape.length,wa=this.op===CumOpType.Prod?"1.0":"0.0",Ea=ba?wa:`getX(${getCoords(Ta,"coords",this.op)})`,ka=this.outputShape[this.outputShape.length-1];let Aa="",Fa="";ba?(Aa=Sa?`end != ${ka-1}`:"end != 0",Fa=Sa?"end + 1":"end - 1"):(Aa=Sa?`end + pow2 < ${ka}`:"end >= pow2",Fa=Sa?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${getCoordsDataType(Ta)} coords = getOutputCoords();
        int end = ${getFinalCoord(Ta,"coords",this.op)};
        float val = ${Ea};
        int pow2 = int(pow(2.0, index));
        if (${Aa}) {
          int idx = ${Fa};
          ${getFinalCoord(Ta,"coords",this.op)} = idx;
          val ${this.op}= getX(${getCoords(Ta,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function getCoords(ha,aa,xa){if(ha===1)return`${aa}`;if(ha===2)return`${aa}.x, ${aa}.y`;if(ha===3)return`${aa}.x, ${aa}.y, ${aa}.z`;if(ha===4)return`${aa}.x, ${aa}.y, ${aa}.z, ${aa}.w`;throw new Error(`Cumulative ${xa} for rank ${ha} is not yet supported`)}function getFinalCoord(ha,aa,xa){if(ha===1)return`${aa}`;if(ha===2)return`${aa}.y`;if(ha===3)return`${aa}.z`;if(ha===4)return`${aa}.w`;throw new Error(`Cumulative ${xa} for rank ${ha} is not yet supported`)}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumImpl(ha,aa,xa,ba,Sa,Ta){const wa=aa.shape.length,Ea=getAxesPermutation([ba],wa);let ka=aa;Ea!=null&&(ka=transpose({inputs:{x:aa},backend:xa,attrs:{perm:Ea}}));const Aa=getInnerMostAxes(1,wa)[0];if(Aa!==wa-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${aa.shape.length-1} but got axis=${ba}`);const Fa=ka.shape[Aa];let La=identity({inputs:{x:ka},backend:xa});for(let el=0;el<=Math.ceil(Math.log2(Fa))-1;el++){const tl=new CumProgram(ha,ka.shape,!1,Ta),nl=[[el]],rl=La;La=xa.runWebGLProgram(tl,[La],La.dtype,nl),xa.disposeIntermediateTensorInfo(rl)}if(Sa){const el=new CumProgram(ha,ka.shape,Sa,Ta),tl=La;La=xa.runWebGLProgram(el,[La],La.dtype),xa.disposeIntermediateTensorInfo(tl)}if(Ea!=null){const el=getUndoAxesPermutation(Ea),tl=transpose({inputs:{x:La},backend:xa,attrs:{perm:el}});return xa.disposeIntermediateTensorInfo(La),xa.disposeIntermediateTensorInfo(ka),tl}return La}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumprod(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,exclusive:wa,reverse:Ea}=ba;return cumImpl(CumOpType.Prod,Sa,xa,Ta,wa,Ea)}const cumprodConfig={kernelName:Cumprod,backendName:"webgl",kernelFunc:cumprod};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cumsum(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,exclusive:wa,reverse:Ea}=ba;return cumImpl(CumOpType.Sum,Sa,xa,Ta,wa,Ea)}const cumsumConfig={kernelName:Cumsum,backendName:"webgl",kernelFunc:cumsum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function denseBincount(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,weights:Ta}=aa,{size:wa,binaryOutput:Ea}=ba;if(Sa.shape.length===1){const ka=xa.readSync(Sa.dataId),Aa=xa.readSync(Ta.dataId),Fa=bincountImplCPU(ka,Aa,Ta.dtype,Ta.shape,wa);return xa.makeTensorInfo([wa],Ta.dtype,Fa)}else if(Sa.shape.length===2){const ka=xa.bufferSync(Sa),Aa=xa.bufferSync(Ta),Fa=bincountReduceImplCPU(ka,Aa,wa,Ea);return xa.makeTensorInfo(Fa.shape,Ta.dtype,Fa.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${Sa.shape.length}.`)}const denseBincountConfig={kernelName:DenseBincount,backendName:"webgl",kernelFunc:denseBincount};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthToSpaceProgram{constructor(aa,xa,ba){this.variableNames=["x"],this.outputShape=[],this.outputShape=aa,this.blockSize=xa,this.dataFormat=ba,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${xa};
      int offset_h = imod(h, ${xa});
      int in_w = w / ${xa};
      int offset_w = imod(w, ${xa});
      int offset_d = (offset_h * ${xa} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthToSpace(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockSize:Ta,dataFormat:wa}=ba,Ea=Sa.shape[0],ka=wa==="NHWC"?Sa.shape[1]:Sa.shape[2],Aa=wa==="NHWC"?Sa.shape[2]:Sa.shape[3],Fa=wa==="NHWC"?Sa.shape[3]:Sa.shape[1],La=ka*Ta,el=Aa*Ta,tl=Fa/(Ta*Ta),nl=wa==="NHWC"?[Ea,La,el,tl]:[Ea,tl,La,el],rl=new DepthToSpaceProgram(nl,Ta,wa);return xa.runWebGLProgram(rl,[Sa],Sa.dtype)}const depthToSpaceConfig={kernelName:DepthToSpace,backendName:"webgl",kernelFunc:depthToSpace};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DProgram{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=aa.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const wa=aa.filterHeight,Ea=aa.filterWidth,ka=aa.outChannels/aa.inChannels;let Aa="",Fa="";ba&&(Sa?Aa=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${ba}
        }`:Ta?Aa=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${ba}
        }`:Aa=`
          float activation(float x) {
            ${ba}
          }
        `,Fa="result = activation(result);");const La=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${Aa}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${ka};
        int q = d2 - d1 * ${ka};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${wa}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${Ea}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${La}
        ${Fa}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConvPacked2DProgram{constructor(aa,xa=!1,ba=null,Sa=!1,Ta=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=aa.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const wa=aa.outChannels/aa.inChannels,Ea=aa.padInfo.left,ka=aa.strideWidth,Aa=aa.dilationWidth,Fa=aa.filterHeight,La=aa.filterWidth,el=La;let tl=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let ol=0;ol<La;ol++)tl+=`
          vec4 xTexelC${ol*2};
          int xTexelC${ol*2}Ready;
          vec4 xTexelC${ol*2+1};
          int xTexelC${ol*2+1}Ready;
          vec4 xC${ol};`;tl+=`
    for (int r = 0; r < ${Fa}; r++) {
      `;for(let ol=0;ol<La;ol++)tl+=`
          xTexelC${ol*2} = vec4(0.0);
          xTexelC${ol*2}Ready = 0;
          xTexelC${ol*2+1} = vec4(0.0);
          xTexelC${ol*2+1}Ready = 0;
          xC${ol} = vec4(0.0);`;tl+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let ol=0;ol<(el+1)/2;ol++){const al=ol*2;if(tl+=`
          xC = xCCorner + ${al*Aa};
          `,ka===1){if(al<La&&(Ea%2===1?(tl+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }
              `,Aa===1&&al>0?tl+=`
                xC${al} = vec4(xTexelC${al-2}.zw, xTexelC${al}.xy);
                `:tl+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${al} = vec4(previous.zw, xTexelC${al}.xy);
                  } else {
                    xC${al} = vec4(0.0, 0.0, xTexelC${al}.xy);
                  }
                  `):tl+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }

                xC${al} = xTexelC${al};
                `,al+1<La)){const ll=Ea%2===0?nearestLargerEven(Aa):Aa;Aa%2===0&&Ea%2===1||Aa%2!==0&&Ea%2!==1?(tl+=`
                  xCOffset = xC + imod(pads[1], 2) + ${ll};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al+1}Ready == 0) {
                    xTexelC${al+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${al+1}.zw = vec2(0.0);
                    }
                    xTexelC${al+1}Ready = 1;
                  }
                  `,Aa>1?tl+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${al+1} = vec4(previous.zw, xTexelC${al+1}.xy);
                    } else {
                     xC${al+1} = vec4(0.0, 0.0, xTexelC${al+1}.xy);
                    }
                    `:tl+=`
                    xC${al+1} = vec4(xTexelC${al}.zw, xTexelC${al+1}.xy);
                    `):ll===1?tl+=`
                    xC${al+1} = xTexelC${al};
                    `:tl+=`
                    xCOffset = xC + ${ll};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al+1}Ready == 0) {
                      xTexelC${al+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${al+1}.zw = vec2(0.0);
                      }
                      xTexelC${al+1}Ready = 1;
                    }

                    xC${al+1} = xTexelC${al+1};
                    `}}else al<La&&(Ea%2===1?(tl+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${al+1}Ready == 0) {
                  xTexelC${al+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${al+1}.zw = vec2(0.0);
                  }
                  xTexelC${al+1}Ready = 1;
                }

                xC${al} = vec4(xTexelC${al}.zw, xTexelC${al+1}.zw);
              `,al+1<La&&(tl+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${al+1} = vec4(xTexelC${al+1}.xy, final.xy);
                `)):(tl+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${al}Ready == 0) {
                  xTexelC${al} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${al}.zw = vec2(0.0);
                  }
                  xTexelC${al}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${al+1}Ready == 0) {
                  xTexelC${al+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${al+1}.zw = vec2(0.);
                  }
                  xTexelC${al+1}Ready = 1;
                }

                xC${al} = vec4(
                  xTexelC${al}.xy, xTexelC${al+1}.xy);
              `,al+1<La&&(tl+=`
                  xC${al+1} = vec4(xTexelC${al}.zw, xTexelC${al+1}.zw);
                `)));al<La&&(tl+=`
            wTexel = getW(r, ${al}, d1, q);
            dotProd += xC${al} * vec4(wTexel.xz, wTexel.xz);
          `,al+1<La&&(tl+=`
              wTexel = getW(r, ${al+1}, d1, q);
              dotProd += xC${al+1} * vec4(wTexel.xz, wTexel.xz);
            `))}tl+=`
    }
  `,tl+=`
      }
    `;let nl="",rl="";ba&&(Sa?nl=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${ba}
        }`:Ta?nl=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${ba}
        }`:nl=`vec4 activation(vec4 x) {
          ${ba}
        }`,rl="result = activation(result);");const sl=xa?"result += getBiasAtOutCoords();":"";xa&&this.variableNames.push("bias"),Sa&&this.variableNames.push("preluActivationWeights"),Ta&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${nl}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${wa};
        int q = d2 - d1 * ${wa};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${tl}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${sl}
        ${rl}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNative(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka,dimRoundingMode:Aa}=ba;let Fa=ka;Fa==null&&(Fa=[1,1]),assert(eitherStridesOrDilationsAreOne(wa,Fa),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Fa}'`);const La=computeConv2DInfo(Sa.shape,Ta.shape,wa,Fa,Ea,Aa,!0);let el;env().getBool("WEBGL_PACK_DEPTHWISECONV")&&La.strideWidth<=2&&La.outChannels/La.inChannels===1?el=new DepthwiseConvPacked2DProgram(La):el=new DepthwiseConv2DProgram(La);const tl=[[La.padInfo.top,La.padInfo.left],[La.strideHeight,La.strideWidth],[La.dilationHeight,La.dilationWidth],[La.inHeight,La.inWidth]];return xa.runWebGLProgram(el,[Sa,Ta],"float32",tl)}const depthwiseConv2dNativeConfig={kernelName:DepthwiseConv2dNative,backendName:"webgl",kernelFunc:depthwiseConv2dNative};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DepthwiseConv2DDerFilterProgram{constructor(aa){this.variableNames=["x","dy"],this.outputShape=aa.filterShape;const xa=aa.strideHeight,ba=aa.strideWidth,Sa=aa.padInfo.top,Ta=aa.padInfo.left,wa=aa.outChannels/aa.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${wa} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${aa.batchSize}; b++) {
          for (int yR = 0; yR < ${aa.outHeight}; yR++) {
            int xR = wR + yR * ${xa} - ${Sa};

            if (xR < 0 || xR >= ${aa.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${aa.outWidth}; yC++) {
              int xC = wC + yC * ${ba} - ${Ta};

              if (xC < 0 || xC >= ${aa.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class DepthwiseConv2DDerInputProgram{constructor(aa){this.variableNames=["dy","W"],this.outputShape=aa.inShape;const xa=aa.filterHeight,ba=aa.filterWidth,Sa=aa.strideHeight,Ta=aa.strideWidth,wa=xa-1-aa.padInfo.top,Ea=ba-1-aa.padInfo.left,ka=aa.outChannels/aa.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${wa}, ${Ea});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${xa}; wR++) {
          float dyR = float(dyRCorner + wR) / ${Sa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${xa} - 1 - wR;

          for (int wC = 0; wC < ${ba}; wC++) {
            float dyC = float(dyCCorner + wC) / ${Ta}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${ba} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${ka}; dm++) {
              int d2 = d1 * ${ka} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropFilter(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,dy:Ta}=aa,{strides:wa,dilations:Ea,pad:ka,dimRoundingMode:Aa,filterShape:Fa}=ba,La=computeConv2DInfo(Sa.shape,Fa,wa,Ea,ka,Aa,!0),el=new DepthwiseConv2DDerFilterProgram(La);return xa.runWebGLProgram(el,[Sa,Ta],"float32")}const depthwiseConv2dNativeBackpropFilterConfig={kernelName:DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropFilter};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function depthwiseConv2dNativeBackpropInput(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,filter:Ta}=aa,{strides:wa,dilations:Ea,pad:ka,dimRoundingMode:Aa,inputShape:Fa}=ba,La=computeConv2DInfo(Fa,Ta.shape,wa,Ea,ka,Aa,!0),el=new DepthwiseConv2DDerInputProgram(La);return xa.runWebGLProgram(el,[Sa,Ta],"float32")}const depthwiseConv2dNativeBackpropInputConfig={kernelName:DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:depthwiseConv2dNativeBackpropInput};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class DiagProgram{constructor(aa){this.variableNames=["X"],this.outputShape=[aa,aa],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function diag(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa,Sa=[...ba.shape,...ba.shape],Ta=sizeFromShape(ba.shape),wa=reshape({inputs:{x:ba},backend:xa,attrs:{shape:[Ta]}}),Ea=new DiagProgram(Ta),ka=xa.runWebGLProgram(Ea,[wa],wa.dtype),Aa=reshape({inputs:{x:ka},backend:xa,attrs:{shape:Sa}});return xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(ka),Aa}const diagConfig={kernelName:Diag,backendName:"webgl",kernelFunc:diag};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Dilation2DProgram{constructor(aa){this.variableNames=["x","W"],this.outputShape=aa.outShape;const{inHeight:xa,inWidth:ba,padInfo:Sa,strideHeight:Ta,strideWidth:wa,filterHeight:Ea,filterWidth:ka,dilationHeight:Aa,dilationWidth:Fa}=aa,{top:La,left:el}=Sa;this.userCode=`
      const ivec2 strides = ivec2(${Ta}, ${wa});
      const ivec2 pads = ivec2(${La}, ${el});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${Ea}; h++) {
          int hIn = hBeg + h * ${Aa};

          if (hIn >= 0 && hIn < ${xa}) {
            for (int w = 0; w < ${ka}; w++) {
              int wIn = wBeg + w * ${Fa};

              if (wIn >= 0 && wIn < ${ba}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dilation2D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta}=aa,{strides:wa,pad:Ea,dilations:ka}=ba,Aa=computeDilation2DInfo(Sa.shape,Ta.shape,wa,Ea,"NHWC",ka);let Fa;const La=new Dilation2DProgram(Aa);Fa=xa.runWebGLProgram(La,[Sa,Ta],"float32");const el=reshape({inputs:{x:Fa},backend:xa,attrs:{shape:Aa.outShape}});return xa.disposeIntermediateTensorInfo(Fa),el}const dilation2DConfig={kernelName:Dilation2D,backendName:"webgl",kernelFunc:dilation2D};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function einsum(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{equation:Sa}=ba,Ta=aa,{allDims:wa,summedDims:Ea,idDims:ka}=decodeEinsumEquation(Sa,Ta.length);checkEinsumDimSizes(wa.length,ka,Ta);const{path:Aa,steps:Fa}=getEinsumComputePath(Ea,ka),La=Fa.length;let el=null,tl=wa.length;const nl=[];for(let rl=0;rl<La;++rl){for(const sl of Fa[rl]){const{permutationIndices:ol,expandDims:al}=getEinsumPermutation(tl,ka[sl]);let ll;isIdentityPermutation(ol)?ll=Ta[sl]:(ll=transpose({inputs:{x:Ta[sl]},backend:xa,attrs:{perm:ol}}),nl.push(ll));const il=ll.shape.slice();for(let cl=0;cl<al.length;++cl)il.splice(al[cl],0,1);arraysEqual(ll.shape,il)||(ll=reshape({inputs:{x:ll},backend:xa,attrs:{shape:il}}),nl.push(ll)),el===null?el=ll:(el=multiply({inputs:{a:ll,b:el},backend:xa}),nl.push(el))}rl<La-1&&(Aa[rl]>=0&&(el=sum({inputs:{x:el},backend:xa,attrs:{axis:Aa[rl]-(wa.length-tl),keepDims:!1}}),nl.push(el)),tl--)}for(const rl of nl)rl!==el&&xa.disposeIntermediateTensorInfo(rl);return el}const einsumConfig={kernelName:Einsum,backendName:"webgl",kernelFunc:einsum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU="return (x >= 0.0) ? x : (exp(x) - 1.0);",ELU_PACKED=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,elu=unaryKernelFunc({opSnippet:ELU,packedOpSnippet:ELU_PACKED}),eluConfig={kernelName:Elu,backendName:"webgl",kernelFunc:elu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ELU_DER="return (b >= 0.0) ? a : a * (b + 1.0);",ELU_DER_PACKED=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,eluGrad=ha=>{const{inputs:aa,backend:xa}=ha,{dy:ba,y:Sa}=aa,Ta=env().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BinaryOpPackedProgram(ELU_DER_PACKED,ba.shape,Sa.shape):new BinaryOpProgram(ELU_DER,ba.shape,Sa.shape);return xa.runWebGLProgram(Ta,[ba,Sa],ba.dtype)},eluGradConfig={kernelName:EluGrad,backendName:"webgl",kernelFunc:eluGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const PACKED_EQUAL=`
  return vec4(equal(a, b));
`,EQUAL="return float(a == b);",equal=binaryKernelFunc({opSnippet:EQUAL,packedOpSnippet:PACKED_EQUAL,dtype:"bool",cpuKernelImpl:equalImplCPU}),equalConfig={kernelName:Equal,backendName:"webgl",kernelFunc:equal};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ERF=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ERF_P};
  float a1 = ${ERF_A1};
  float a2 = ${ERF_A2};
  float a3 = ${ERF_A3};
  float a4 = ${ERF_A4};
  float a5 = ${ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,erf=unaryKernelFunc({opSnippet:ERF}),erfConfig={kernelName:Erf,backendName:"webgl",kernelFunc:erf};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXP=CHECK_NAN_SNIPPET_UNARY+`
  return exp(x);
`,EXP_PACKED=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,exp=unaryKernelFunc({opSnippet:EXP,packedOpSnippet:EXP_PACKED,cpuKernelImpl:expImplCPU,dtype:"float32"}),expConfig={kernelName:Exp,backendName:"webgl",kernelFunc:exp};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function expandDims(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{dim:Sa}=xa,{input:Ta}=aa,wa=Ta.shape.length,Ea=Ta.shape.slice();let ka=Sa;return Sa<0&&(assert(-(wa+1)<=Sa,()=>`Axis must be in the interval [${-(wa+1)}, ${wa}]`),ka=wa+Sa+1),Ea.splice(ka,0,1),reshape({inputs:{x:Ta},backend:ba,attrs:{shape:Ea}})}const expandDimsConfig={kernelName:ExpandDims,backendName:"webgl",kernelFunc:expandDims};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const EXPM1="return exp(x) - 1.0;",expm1=unaryKernelFunc({opSnippet:EXPM1,packedOpSnippet:EXPM1,cpuKernelImpl:expm1ImplCPU}),expm1Config={kernelName:Expm1,backendName:"webgl",kernelFunc:expm1};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FFTProgram{constructor(aa,xa,ba){this.variableNames=["real","imag"];const Sa=xa[1];this.outputShape=xa;const Ta=ba?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,wa=ba?`${Sa}.0`:"1.0";let Ea;if(aa==="real")Ea="return real * expR - imag * expI;";else if(aa==="imag")Ea="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${aa}.`);this.userCode=`
      const float exponentMultiplier = ${Ta};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${Ea}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${Sa});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${Sa}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${wa};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fftImpl(ha,aa,xa){const ba=xa.texData.get(ha.dataId),Sa=sizeFromShape(ha.shape),Ta=ha.shape[ha.shape.length-1],wa=Sa/Ta,Ea=reshape({inputs:{x:ha},backend:xa,attrs:{shape:[wa,Ta]}}),ka=Ea.shape,Aa=new FFTProgram("real",ka,aa),Fa=new FFTProgram("imag",ka,aa),La=[{dataId:ba.complexTensorInfos.real.dataId,dtype:ba.complexTensorInfos.real.dtype,shape:ka},{dataId:ba.complexTensorInfos.imag.dataId,dtype:ba.complexTensorInfos.imag.dtype,shape:ka}],el=xa.runWebGLProgram(Aa,La,"float32"),tl=xa.runWebGLProgram(Fa,La,"float32"),nl=complex({inputs:{real:el,imag:tl},backend:xa});xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl);const rl=reshape({inputs:{x:nl},backend:xa,attrs:{shape:ha.shape}});return xa.disposeIntermediateTensorInfo(Ea),xa.disposeIntermediateTensorInfo(nl),rl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fft(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa;return fftImpl(ba,!1,xa)}const fftConfig={kernelName:FFT,backendName:"webgl",kernelFunc:fft};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FillProgram{constructor(aa,xa){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=aa,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fill(ha){const{backend:aa,attrs:xa}=ha,{shape:ba,value:Sa}=xa;let{dtype:Ta}=xa;if(Ta=Ta||inferDtype(Sa),Ta==="string"){const wa=getArrayFromDType(Ta,sizeFromShape(ba));return wa.fill(Sa),aa.makeTensorInfo(ba,Ta,wa)}else{const wa=new FillProgram(ba,Sa),Ea=[[Sa]];return aa.runWebGLProgram(wa,[],Ta,Ea)}}const fillConfig={kernelName:Fill,backendName:"webgl",kernelFunc:fill};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FlipLeftRightProgram{constructor(aa){this.variableNames=["Image"],this.outputShape=[];const xa=aa[2];this.outputShape=aa,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${xa} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${xa}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const flipLeftRightConfig={kernelName:FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:ha,backend:aa})=>{const{image:xa}=ha,ba=aa,Sa=new FlipLeftRightProgram(xa.shape);return ba.runWebGLProgram(Sa,[xa],xa.dtype)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const FLOOR="return floor(x);",floor=unaryKernelFunc({opSnippet:FLOOR,packedOpSnippet:FLOOR,cpuKernelImpl:floorImplCPU}),floorConfig={kernelName:Floor,backendName:"webgl",kernelFunc:floor};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const INT_DIV=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,INT_DIV_PACKED=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,floorDiv=binaryKernelFunc({opSnippet:INT_DIV,packedOpSnippet:INT_DIV_PACKED,dtype:"int32"}),floorDivConfig={kernelName:FloorDiv,backendName:"webgl",kernelFunc:floorDiv};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FromPixelsProgram{constructor(aa){this.variableNames=["A"];const xa=getGlslDifferences(),[ba,Sa]=aa;this.outputShape=aa,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${Sa}.0, ${ba}.0);

        vec4 values = ${xa.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class FromPixelsPackedProgram{constructor(aa){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const xa=getGlslDifferences(),[ba,Sa]=aa;this.outputShape=aa,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${Sa}.0, ${ba}.0);
            vec4 values = ${xa.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${xa.output} = result;
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fromPixelsConfig={kernelName:FromPixels,backendName:"webgl",kernelFunc:fromPixels};let fromPixels2DContext,willReadFrequently=env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function fromPixels(ha){const{inputs:aa,backend:xa,attrs:ba}=ha;let{pixels:Sa}=aa;const{numChannels:Ta}=ba,wa=typeof HTMLVideoElement<"u"&&Sa instanceof HTMLVideoElement,Ea=typeof HTMLImageElement<"u"&&Sa instanceof HTMLImageElement,[ka,Aa]=wa?[Sa.videoWidth,Sa.videoHeight]:[Sa.width,Sa.height],Fa=[Aa,ka],La=[Aa,ka,Ta];if(Ea||wa){const rl=env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(fromPixels2DContext==null||rl!==willReadFrequently)&&(willReadFrequently=rl,fromPixels2DContext=document.createElement("canvas").getContext("2d",{willReadFrequently})),fromPixels2DContext.canvas.width=ka,fromPixels2DContext.canvas.height=Aa,fromPixels2DContext.drawImage(Sa,0,0,ka,Aa),Sa=fromPixels2DContext.canvas}const el=xa.makeTensorInfo(Fa,"int32");xa.texData.get(el.dataId).usage=TextureUsage.PIXELS,xa.gpgpu.uploadPixelDataToTexture(xa.getTexture(el.dataId),Sa);const tl=env().getBool("WEBGL_PACK")?new FromPixelsPackedProgram(La):new FromPixelsProgram(La),nl=xa.runWebGLProgram(tl,[el],"int32");return xa.disposeData(el.dataId),nl}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedConv2d(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta,bias:wa,preluActivationWeights:Ea}=aa,{strides:ka,pad:Aa,dataFormat:Fa,dilations:La,dimRoundingMode:el,activation:tl,leakyreluAlpha:nl}=ba,rl=convertConv2DDataFormat(Fa),sl=computeConv2DInfo(Sa.shape,Ta.shape,ka,La,Aa,el,!1,rl);let ol;const al=[],ll=wa!=null,il=Ea!=null,cl=tl==="leakyrelu",ul=()=>{const hl=[Sa,Ta],pl=(fl,ml)=>{if(ml==="NCHW"&&fl.shape.length===1&&fl.shape[0]!==1){const gl=reshape({inputs:{x:fl},backend:xa,attrs:{shape:[fl.shape[0],1,1]}});return al.push(gl),gl}return fl};if(ll&&hl.push(pl(wa,Fa)),il&&hl.push(pl(Ea,Fa)),cl){const fl=xa.makeTensorInfo([],"float32",createScalarValue(nl,"float32"));hl.push(fl),al.push(fl)}return hl};if(sl.filterHeight===1&&sl.filterWidth===1&&sl.dilationHeight===1&&sl.dilationWidth===1&&sl.strideHeight===1&&sl.strideWidth===1&&(sl.padInfo.type==="SAME"||sl.padInfo.type==="VALID"))ol=conv2dByMatMul({x:Sa,filter:Ta,convInfo:sl,backend:xa,bias:wa,activation:tl,preluActivationWeights:Ea,leakyreluAlpha:nl});else if(sl.strideWidth<=2&&rl==="channelsLast"&&env().getBool("WEBGL_EXP_CONV")){const hl=tl?mapActivationToShaderProgram(tl,!0):null,pl=new Conv2DPackedProgram(sl,ll,hl,il,cl),fl=[[sl.padInfo.top,sl.padInfo.left],[sl.strideHeight,sl.strideWidth],[sl.dilationHeight,sl.dilationWidth],[sl.inHeight,sl.inWidth]],ml=ul();ol=xa.runWebGLProgram(pl,ml,"float32",fl)}else if(env().getBool("WEBGL_CONV_IM2COL"))ol=conv2dWithIm2Row({x:Sa,filter:Ta,convInfo:sl,backend:xa,bias:wa,activation:tl,preluActivationWeights:Ea,leakyreluAlpha:nl});else{const hl=tl?mapActivationToShaderProgram(tl,!1):null,pl=new Conv2DProgram(sl,ll,hl,il,cl),fl=ul();ol=xa.runWebGLProgram(pl,fl,"float32")}const dl=reshape({inputs:{x:ol},backend:xa,attrs:{shape:sl.outShape}});return al.push(ol),al.forEach(hl=>xa.disposeIntermediateTensorInfo(hl)),dl}const fusedConv2DConfig={kernelName:FusedConv2D,backendName:"webgl",kernelFunc:fusedConv2d};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function fusedDepthwiseConv2D(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,filter:Ta,bias:wa,preluActivationWeights:Ea}=aa,{strides:ka,pad:Aa,dilations:Fa,dimRoundingMode:La,activation:el,leakyreluAlpha:tl}=ba,nl=[];let rl=Fa;rl==null&&(rl=[1,1]),assert(eitherStridesOrDilationsAreOne(ka,rl),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${ka} and dilations '${rl}'`);const sl=computeConv2DInfo(Sa.shape,Ta.shape,ka,rl,Aa,La,!0),ol=env().getBool("WEBGL_PACK_DEPTHWISECONV")&&sl.strideWidth<=2&&sl.outChannels/sl.inChannels===1,al=el?mapActivationToShaderProgram(el,ol):null,ll=[Sa,Ta],il=wa!=null,cl=Ea!=null,ul=el==="leakyrelu";if(il&&ll.push(wa),cl&&ll.push(Ea),ul){const fl=xa.makeTensorInfo([],"float32",createScalarValue(tl,"float32"));ll.push(fl),nl.push(fl)}let dl;ol?dl=new DepthwiseConvPacked2DProgram(sl,il,al,cl,ul):dl=new DepthwiseConv2DProgram(sl,il,al,cl,ul);const hl=[[sl.padInfo.top,sl.padInfo.left],[sl.strideHeight,sl.strideWidth],[sl.dilationHeight,sl.dilationWidth],[sl.inHeight,sl.inWidth]],pl=xa.runWebGLProgram(dl,ll,"float32",hl);return nl.forEach(fl=>xa.disposeIntermediateTensorInfo(fl)),pl}const fusedDepthwiseConv2DConfig={kernelName:FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:fusedDepthwiseConv2D};class GatherNDProgram{constructor(aa,xa,ba,Sa){this.sliceDim=aa,this.strides=xa,this.paramsShape=Sa,this.variableNames=["x","indices"],this.outputShape=ba;const Ta=getCoordsDataType(ba.length);let wa=`
    int index;`;for(let Ea=0;Ea<this.sliceDim;Ea++)wa+=`
          index = round(getIndices(coords[0], ${Ea}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[Ea]};
          flattenIndex += index * ${this.strides[Ea]};`;this.userCode=`
         void main() {
          ${Ta} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${wa}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherNd(ha){const{inputs:aa,backend:xa}=ha,{params:ba,indices:Sa}=aa,Ta=Sa.shape,wa=Ta[Ta.length-1],Ea=sizeFromShape(ba.shape),[ka,Aa,Fa,La]=prepareAndValidate(ba,Sa),el=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:[Aa,wa]}}),tl=reshape({inputs:{x:ba},backend:xa,attrs:{shape:[sizeFromShape(ba.shape)/Fa,Fa]}});if(xa.shouldExecuteOnCPU([ba,Sa])||ba.dtype==="string"){const ol=xa.readSync(Sa.dataId),al=xa.bufferSync(ba),ll=gatherNdImplCPU(ol,al,ba.dtype,Aa,wa,Fa,La,ba.shape,Ea);return xa.makeTensorInfo(ka,ba.dtype,ll.values)}const nl=new GatherNDProgram(wa,La,[Aa,Fa],ba.shape),rl=xa.runWebGLProgram(nl,[tl,el],tl.dtype),sl=reshape({inputs:{x:rl},backend:xa,attrs:{shape:ka}});return xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(rl),sl}const gatherNdConfig={kernelName:GatherNd,backendName:"webgl",kernelFunc:gatherNd};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class GatherProgram{constructor(aa,xa){this.variableNames=["A","indices"],this.outputShape=xa,this.rank=xa.length;const ba=getCoordsDataType(this.rank),Sa=getSourceCoords$1(aa);this.userCode=`
      void main() {
        ${ba} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${aa[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${Sa}));
      }
    `}}function getSourceCoords$1(ha,aa){const xa=["resRC.x","resRC.y","resRC.z","resRC.w"],ba=[];for(let Sa=0;Sa<ha.length;Sa++)Sa===2?ba.push("index"):ba.push(`${xa[Sa]}`);return ba.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gatherV2(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,indices:Ta}=aa,{axis:wa,batchDims:Ea}=ba,ka=parseAxisParam(wa,Sa.shape)[0];if(env().get("DEBUG")){const al=xa.readSync(Ta.dataId),ll=Sa.shape[ka];for(let il=0;il<al.length;++il){const cl=al[il];assert(cl<=ll-1&&cl>=0,()=>`GatherV2: the index value ${cl} is not in [0, ${ll-1}]`)}}const Aa=collectGatherOpShapeInfo(Sa,Ta,ka,Ea),Fa=sizeFromShape(Ta.shape),La=[],el=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:[Aa.batchSize,Aa.outerSize,Aa.dimSize,Aa.sliceSize]}}),tl=reshape({inputs:{x:Ta},backend:xa,attrs:{shape:[Aa.batchSize,Fa/Aa.batchSize]}});La.push(el),La.push(tl);const nl=[Aa.batchSize,Aa.outerSize,Fa/Aa.batchSize,Aa.sliceSize];if(xa.shouldExecuteOnCPU([Sa,Ta])||Sa.dtype==="string"){const al=xa.bufferSync(tl),ll=xa.bufferSync(el),il=gatherV2ImplCPU(ll,al,nl);return La.forEach(cl=>xa.disposeIntermediateTensorInfo(cl)),xa.makeTensorInfo(Aa.outputShape,il.dtype,il.values)}const rl=new GatherProgram(el.shape,nl),sl=xa.runWebGLProgram(rl,[el,tl],el.dtype);La.push(sl);const ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:Aa.outputShape}});return La.forEach(al=>xa.disposeIntermediateTensorInfo(al)),ol}const gatherV2Config={kernelName:GatherV2,backendName:"webgl",kernelFunc:gatherV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER="return float(a > b);",GREATER_PACKED=`
  return vec4(greaterThan(a, b));
`,greater=binaryKernelFunc({opSnippet:GREATER,packedOpSnippet:GREATER_PACKED,cpuKernelImpl:greaterImplCPU,dtype:"bool"}),greaterConfig={kernelName:Greater,backendName:"webgl",kernelFunc:greater};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const GREATER_EQUAL="return float(a >= b);",GREATER_EQUAL_PACKED=`
  return vec4(greaterThanEqual(a, b));
`,greaterEqual=binaryKernelFunc({opSnippet:GREATER_EQUAL,packedOpSnippet:GREATER_EQUAL_PACKED,dtype:"bool",cpuKernelImpl:greaterEqualImplCPU}),greaterEqualConfig={kernelName:GreaterEqual,backendName:"webgl",kernelFunc:greaterEqual};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ifft(ha){const{inputs:aa,backend:xa}=ha,{input:ba}=aa;return fftImpl(ba,!0,xa)}const ifftConfig={kernelName:IFFT,backendName:"webgl",kernelFunc:ifft};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_FINITE="return float(!isnan(x) && !isinf(x));",isFinite$1=unaryKernelFunc({opSnippet:IS_FINITE,dtype:"bool"}),isFiniteConfig={kernelName:IsFinite,backendName:"webgl",kernelFunc:isFinite$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_INF="return float(isinf(x));",isInf=unaryKernelFunc({opSnippet:IS_INF,dtype:"bool"}),isInfConfig={kernelName:IsInf,backendName:"webgl",kernelFunc:isInf};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const IS_NAN="return float(isnan(x));",isNaN$1=unaryKernelFunc({opSnippet:IS_NAN,dtype:"bool"}),isNaNConfig={kernelName:IsNan,backendName:"webgl",kernelFunc:isNaN$1};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS="return float(a < b);",LESS_PACKED=`
  return vec4(lessThan(a, b));
`,less=binaryKernelFunc({opSnippet:LESS,packedOpSnippet:LESS_PACKED,cpuKernelImpl:lessImplCPU,dtype:"bool"}),lessConfig={kernelName:Less,backendName:"webgl",kernelFunc:less};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LESS_EQUAL="return float(a <= b);",LESS_EQUAL_PACKED=`
  return vec4(lessThanEqual(a, b));
`,lessEqual=binaryKernelFunc({opSnippet:LESS_EQUAL,packedOpSnippet:LESS_EQUAL_PACKED,cpuKernelImpl:lessEqualImplCPU,dtype:"bool"}),lessEqualConfig={kernelName:LessEqual,backendName:"webgl",kernelFunc:lessEqual};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function linSpace(ha){const{backend:aa,attrs:xa}=ha,{start:ba,stop:Sa,num:Ta}=xa,wa=linSpaceImplCPU(ba,Sa,Ta);return aa.makeTensorInfo([wa.length],"float32",wa)}const linSpaceConfig={kernelName:LinSpace,backendName:"webgl",kernelFunc:linSpace};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG=CHECK_NAN_SNIPPET_UNARY+`
  return x < 0.0 ? 0./0. : log(x);
`,LOG_PACKED=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,log=unaryKernelFunc({opSnippet:LOG,packedOpSnippet:LOG_PACKED,cpuKernelImpl:logImplCPU}),logConfig={kernelName:Log,backendName:"webgl",kernelFunc:log};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOG1P=CHECK_NAN_SNIPPET_UNARY+`
  return log(1.0 + x);
`,log1p=unaryKernelFunc({opSnippet:LOG1P}),log1pConfig={kernelName:Log1p,backendName:"webgl",kernelFunc:log1p};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_AND="return float(a >= 1.0 && b >= 1.0);",LOGICAL_AND_PACKED=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,logicalAnd=binaryKernelFunc({opSnippet:LOGICAL_AND,packedOpSnippet:LOGICAL_AND_PACKED,dtype:"bool"}),logicalAndConfig={kernelName:LogicalAnd,backendName:"webgl",kernelFunc:logicalAnd};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_NOT="return float(!(x >= 1.0));",logicalNot=unaryKernelFunc({opSnippet:LOGICAL_NOT}),logicalNotConfig={kernelName:LogicalNot,backendName:"webgl",kernelFunc:logicalNot};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const LOGICAL_OR="return float(a >= 1.0 || b >= 1.0);",LOGICAL_OR_PACKED=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,logicalOr=binaryKernelFunc({opSnippet:LOGICAL_OR,packedOpSnippet:LOGICAL_OR_PACKED,dtype:"bool"}),logicalOrConfig={kernelName:LogicalOr,backendName:"webgl",kernelFunc:logicalOr};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["x"],this.outputShape=[];const wa=xa,Ea=aa[3]-1;this.outputShape=aa;let ka;const Aa=`float(${ba}) + float(${Sa}) * sum`;Ta===.5?ka=`inversesqrt(${Aa})`:Ta===1?ka=`1.0/(${Aa})`:ka=`exp(log(${Aa}) * float(-${Ta}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${wa}; j <= ${wa}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${Ea}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${ka};
        setOutput(val);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNPackedProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const wa=xa,Ea=aa[3]-1;this.outputShape=aa;let ka;const Aa=`float(${ba}) + float(${Sa}) * sum`;Ta===.5?ka=`inversesqrt(${Aa})`:Ta===1?ka=`1.0/(${Aa})`:ka=`exp(log(${Aa}) * float(-${Ta}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${wa};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${wa}; j <= ${wa}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${Ea}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${ka};
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrn=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{depthRadius:Ta,bias:wa,alpha:Ea,beta:ka}=ba,Aa=env().getBool("WEBGL_PACK_NORMALIZATION")?new LRNPackedProgram(Sa.shape,Ta,wa,Ea,ka):new LRNProgram(Sa.shape,Ta,wa,Ea,ka);return xa.runWebGLProgram(Aa,[Sa],Sa.dtype)},LRNConfig={kernelName:LRN,backendName:"webgl",kernelFunc:lrn};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class LRNGradProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=aa,this.depth=aa[3],this.depthRadius=xa,this.bias=ba,this.alpha=Sa,this.beta=Ta,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${xa})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${xa} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${Sa}) * norm + float(${ba});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${Sa})
                * float(${Ta})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${Ta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const lrnGrad=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,y:Ta,dy:wa}=aa,{depthRadius:Ea,bias:ka,alpha:Aa,beta:Fa}=ba,La=new LRNGradProgram(Sa.shape,Ea,ka,Aa,Fa);return xa.runWebGLProgram(La,[Sa,Ta,wa],Sa.dtype)},LRNGradConfig={kernelName:LRNGrad,backendName:"webgl",kernelFunc:lrnGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxImpl(ha,aa,xa,ba){const Sa=sizeFromShape(aa),wa=sizeFromShape(ha.shape)/Sa,Ea=reshape({inputs:{x:ha},attrs:{shape:[wa,Sa]},backend:ba}),ka=reduce(Ea,ha.dtype,"max",ba),Aa=reshape({inputs:{x:ka},attrs:{shape:xa},backend:ba});return ba.disposeIntermediateTensorInfo(Ea),ba.disposeIntermediateTensorInfo(ka),Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function max(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{reductionIndices:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation(Aa,Ea),La=Fa!=null,el=xa.shouldExecuteOnCPU([Sa]);let tl=Sa;if(La){if(el){const ll=xa.texData.get(tl.dataId).values,il=new Array(Ea);for(let dl=0;dl<il.length;dl++)il[dl]=Sa.shape[Fa[dl]];const cl=transposeImplCPU(ll,Sa.shape,Sa.dtype,Fa,il);tl=xa.makeTensorInfo(il,Sa.dtype);const ul=xa.texData.get(tl.dataId);ul.values=cl}else tl=transposeImpl(Sa,Fa,xa);Aa=getInnerMostAxes(Aa.length,Ea)}assertAxesAreInnerMostDims("max",Aa,Ea);const[nl,rl]=computeOutAndReduceShapes(tl.shape,Aa);let sl=nl;wa&&(sl=expandShapeToKeepDim(nl,ka));let ol;if(el){const ll=xa.texData.get(tl.dataId).values,il=maxImplCPU(ll,sizeFromShape(rl),sl,Sa.dtype);ol=xa.makeTensorInfo(sl,Sa.dtype);const cl=xa.texData.get(ol.dataId);cl.values=il}else ol=maxImpl(tl,rl,sl,xa);return La&&xa.disposeIntermediateTensorInfo(tl),ol}const maxConfig={kernelName:Max,backendName:"webgl",kernelFunc:max};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MAXIMUM=CHECK_NAN_SNIPPET+`
  return max(a, b);
`,MAXIMUM_PACKED=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,maximum=binaryKernelFunc({opSnippet:MAXIMUM,packedOpSnippet:MAXIMUM_PACKED,cpuKernelImpl:maximumImplCPU}),maximumConfig={kernelName:Maximum,backendName:"webgl",kernelFunc:maximum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;assertNotComplex(Sa,"maxPool");const{filterSize:Ta,strides:wa,pad:Ea,dimRoundingMode:ka}=ba,Aa=1;assert(eitherStridesOrDilationsAreOne(wa,Aa),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${wa} and dilations '${Aa}'`);const Fa=computePool2DInfo(Sa.shape,Ta,wa,Aa,Ea,ka);if(Fa.filterWidth===1&&Fa.filterHeight===1&&arraysEqual(Fa.inShape,Fa.outShape))return identity({inputs:{x:Sa},backend:xa});const La=new Pool2DProgram(Fa,"max",!1);return xa.runWebGLProgram(La,[Sa],Sa.dtype)}const maxPoolConfig={kernelName:MaxPool,backendName:"webgl",kernelFunc:maxPool};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3d(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{filterSize:Ta,strides:wa,pad:Ea,dataFormat:ka,dimRoundingMode:Aa}=ba,Fa=[1,1,1],La=computePool3DInfo(Sa.shape,Ta,wa,Fa,Ea,Aa,ka),el=new Pool3DProgram(La,"max",!1);return xa.runWebGLProgram(el,[Sa],Sa.dtype)}const maxPool3DConfig={kernelName:MaxPool3D,backendName:"webgl",kernelFunc:maxPool3d};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MaxPool2DBackpropProgram{constructor(aa){this.variableNames=["dy","maxPos"],this.outputShape=aa.inShape;const xa=aa.strideHeight,ba=aa.strideWidth,Sa=aa.dilationHeight,Ta=aa.effectiveFilterHeight,wa=aa.effectiveFilterWidth,Ea=Ta-1-aa.padInfo.top,ka=wa-1-aa.padInfo.left,Aa=Ta*wa-1;this.userCode=`
      const ivec2 pads = ivec2(${Ea}, ${ka});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${Ta};
          wR += ${Sa}) {
          float dyR = float(dyRCorner + wR) / ${xa}.0;

          if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${wa}; wC++) {
            float dyC = float(dyCCorner + wC) / ${ba}.0;

            if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${Aa} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${wa} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class MaxPool3DBackpropProgram{constructor(aa){this.variableNames=["dy","maxPos"],this.outputShape=aa.inShape;const xa=aa.strideDepth,ba=aa.strideHeight,Sa=aa.strideWidth,Ta=aa.dilationDepth,wa=aa.dilationHeight,Ea=aa.dilationWidth,ka=aa.effectiveFilterDepth,Aa=aa.effectiveFilterHeight,Fa=aa.effectiveFilterWidth,La=ka-1-aa.padInfo.front,el=Aa-1-aa.padInfo.top,tl=Fa-1-aa.padInfo.left,nl=ka*Aa*Fa-1;this.userCode=`
      const ivec3 pads = ivec3(${La}, ${el}, ${tl});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${ka};
           wD += ${Ta}) {
          float dyD = float(dyDCorner + wD) / ${xa}.0;

          if (dyD < 0.0 || dyD >= ${aa.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${Aa};
              wR += ${wa}) {
            float dyR = float(dyRCorner + wR) / ${ba}.0;

            if (dyR < 0.0 || dyR >= ${aa.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${Fa};
                wC += ${Ea}) {
              float dyC = float(dyCCorner + wC) / ${Sa}.0;

              if (dyC < 0.0 || dyC >= ${aa.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${nl} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${Aa} * ${Fa} +
                  wR * ${Fa} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPool3DGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta}=aa,wa=Ta,{filterSize:Ea,strides:ka,pad:Aa,dimRoundingMode:Fa}=ba,La=[1,1,1],el=computePool3DInfo(wa.shape,Ea,ka,La,Aa,Fa),tl=new Pool3DProgram(el,"max",!0),nl=xa.runWebGLProgram(tl,[wa],wa.dtype),rl=new MaxPool3DBackpropProgram(el),sl=xa.runWebGLProgram(rl,[Sa,nl],wa.dtype);return xa.disposeIntermediateTensorInfo(nl),sl}const maxPool3DGradConfig={kernelName:MaxPool3DGrad,backendName:"webgl",kernelFunc:maxPool3DGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{dy:Sa,input:Ta,output:wa}=aa,Ea=Ta;assertNotComplex([Ta,wa],"maxPoolGrad");const{filterSize:ka,strides:Aa,pad:Fa,dimRoundingMode:La}=ba,el=computePool2DInfo(Ea.shape,ka,Aa,1,Fa,La),tl=!0,nl=new Pool2DProgram(el,"max",tl),rl=xa.runWebGLProgram(nl,[Ea],Ea.dtype),sl=new MaxPool2DBackpropProgram(el),ol=xa.runWebGLProgram(sl,[Sa,rl],Ea.dtype);return xa.disposeIntermediateTensorInfo(rl),ol}const maxPoolGradConfig={kernelName:MaxPoolGrad,backendName:"webgl",kernelFunc:maxPoolGrad};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function maxPoolWithArgmaxImpl(ha,aa,xa,ba){let Sa=new Pool2DProgram(xa,"max",!1);const Ta=ba.runWebGLProgram(Sa,[ha],"float32");Sa=new Pool2DProgram(xa,"max",!0,!0,aa);const wa=ba.runWebGLProgram(Sa,[ha],"float32");return[Ta,wa]}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const maxPoolWithArgmaxConfig={kernelName:MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{x:ba}=ha,{filterSize:Sa,strides:Ta,pad:wa,includeBatchInIndex:Ea}=aa,ka=xa;assert(ba.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${ba.shape.length}.`);const Aa=[1,1];assert(eitherStridesOrDilationsAreOne(Ta,Aa),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${Ta} and dilations '${Aa}'`);const Fa=computePool2DInfo(ba.shape,Sa,Ta,Aa,wa),[La,el]=maxPoolWithArgmaxImpl(ba,Ea,Fa,ka);return[La,el]}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function meanImpl(ha,aa,xa,ba){const Sa=sizeFromShape(aa),wa=sizeFromShape(ha.shape)/Sa,Ea=reshape({inputs:{x:ha},attrs:{shape:[wa,Sa]},backend:ba}),ka=reduce(Ea,"float32","mean",ba),Aa=reshape({inputs:{x:ka},attrs:{shape:xa},backend:ba});return ba.disposeIntermediateTensorInfo(Ea),ba.disposeIntermediateTensorInfo(ka),Aa}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const meanConfig={kernelName:Mean,backendName:"webgl",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{x:ba}=ha,{keepDims:Sa,axis:Ta}=aa,wa=xa,Ea=ba.shape.length,ka=parseAxisParam(Ta,ba.shape);let Aa=ka;const Fa=getAxesPermutation(Aa,Ea),La=Fa!=null,el=wa.shouldExecuteOnCPU([ba]),tl=[];let nl=ba;if(La){if(el){const il=wa.texData.get(nl.dataId).values,cl=new Array(Ea);for(let hl=0;hl<cl.length;hl++)cl[hl]=ba.shape[Fa[hl]];const ul=transposeImplCPU(il,ba.shape,ba.dtype,Fa,cl);nl=wa.makeTensorInfo(cl,ba.dtype);const dl=wa.texData.get(nl.dataId);dl.values=ul}else nl=transposeImpl(ba,Fa,wa);tl.push(nl),Aa=getInnerMostAxes(Aa.length,Ea)}assertAxesAreInnerMostDims("sum",Aa,Ea);const[rl,sl]=computeOutAndReduceShapes(nl.shape,Aa);let ol=rl;Sa&&(ol=expandShapeToKeepDim(rl,ka));const al=meanImpl(nl,sl,ol,wa);for(const ll of tl)wa.disposeIntermediateTensorInfo(ll);return al}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function min(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=parseAxisParam(Ta,Sa.shape);let Aa=ka;const Fa=getAxesPermutation(Aa,Ea);let La=Sa;Fa!=null&&(La=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),Aa=getInnerMostAxes(Aa.length,Sa.shape.length)),assertAxesAreInnerMostDims("min",Aa,Ea);const[el,tl]=computeOutAndReduceShapes(La.shape,Aa),nl=sizeFromShape(tl),rl=reshape({inputs:{x:La},backend:xa,attrs:{shape:[-1,nl]}}),sl=reduce(rl,rl.dtype,"min",xa);let ol;if(wa){const al=expandShapeToKeepDim(el,ka);ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:al}})}else ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:el}});return xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(sl),Fa!=null&&xa.disposeIntermediateTensorInfo(La),ol}const minConfig={kernelName:Min,backendName:"webgl",kernelFunc:min};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MINIMUM=CHECK_NAN_SNIPPET+`
  return min(a, b);
`,MINIMUM_PACKED=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,minimum=binaryKernelFunc({opSnippet:MINIMUM,packedOpSnippet:MINIMUM_PACKED,cpuKernelImpl:minimumImplCPU}),minimumConfig={kernelName:Minimum,backendName:"webgl",kernelFunc:minimum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MirrorPadProgram{constructor(aa,xa,ba){this.variableNames=["x"],this.outputShape=xa.map((Fa,La)=>Fa[0]+aa[La]+Fa[1]);const Sa=aa.length,Ta=getCoordsDataType(Sa),wa=xa.map(Fa=>Fa[0]).join(","),Ea=xa.map((Fa,La)=>Fa[0]+aa[La]).join(","),ka=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,Sa),Aa=ba==="reflect"?0:1;if(Sa===1){this.userCode=`
        int start = ${wa};
        int end = ${Ea};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${Aa};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${Aa};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${Ta} start = ${Ta}(${wa});
      ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outC = getOutputCoords();
        for (int i = 0; i < ${Sa}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${Aa};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${Aa};
          }
        }
        ${Ta} coords = outC - start;
        setOutput(getX(${ka}));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MirrorPadPackedProgram{constructor(aa,xa,ba){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=xa.map((nl,rl)=>nl[0]+aa[rl]+nl[1]);const Sa=aa.length,Ta=getCoordsDataType(Sa),wa=xa.map(nl=>nl[0]).join(","),Ea=xa.map((nl,rl)=>nl[0]+aa[rl]).join(","),ka=getChannels("rc",Sa),Aa=getChannels("source",Sa),Fa=`${ka[Sa-1]} < ${this.outputShape[Sa-1]}`,La=Sa===1?"source":`vec2(${Aa.slice(-2).join()})`,el=ba==="reflect"?0:1;let tl="";if(Sa===1){const nl=`
        ${Ta} source = rc;
        if (source < start) {
          source = start * 2 - source - ${el};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${el};
        }
        source -= start;
      `;tl=`
        ${Ta} rc = outputLoc;
        ${nl}
        result[0] = getChannel(getX(${Aa.join()}), ${La});
        ${ka[Sa-1]} += 1;
        if(${Fa}) {
          ${nl}
          result[1] = getChannel(getX(${Aa.join()}), ${La});
        }
      `}else{const nl=`
        ${Ta} source = rc;
        ${Ta} lt = ${Ta}(lessThan(source, start));
        ${Ta} gte = ${Ta}(greaterThanEqual(source, end));
        ${Ta} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${el}) +
                gte * ((end - 1) * 2 - source + ${el});
        source -= start;
      `;tl=`
        ${Ta} rc = outputLoc;
        ${nl}
        result[0] = getChannel(getX(${Aa.join()}), ${La});
        ${ka[Sa-1]} += 1;
        if(${Fa}) {
          ${nl}
          result[1] = getChannel(getX(${Aa.join()}), ${La});
        }
        rc = outputLoc;
        ${ka[Sa-2]} += 1;
        if(${ka[Sa-2]} < ${this.outputShape[Sa-2]}) {
          ${nl}
          result[2] = getChannel(getX(${Aa.join()}), ${La});
          ${ka[Sa-1]} += 1;
          if(${Fa}) {
            ${nl}
            result[3] = getChannel(getX(${Aa.join()}), ${La});
          }
        }
      `}this.userCode=`
      const ${Ta} start = ${Ta}(${wa});
      const ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${tl}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const mirrorPadKernelFunc=({inputs:ha,backend:aa,attrs:xa})=>{const{x:ba}=ha,{paddings:Sa,mode:Ta}=xa,wa=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new MirrorPadPackedProgram(ba.shape,Sa,Ta):new MirrorPadProgram(ba.shape,Sa,Ta);return aa.runWebGLProgram(wa,[ba],ba.dtype)},mirrorPadConfig={kernelName:MirrorPad,backendName:"webgl",kernelFunc:mirrorPadKernelFunc};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MOD=`if (b == 0.0) return NAN;
  return mod(a, b);`,MOD_PACKED=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,mod=binaryKernelFunc({opSnippet:MOD,packedOpSnippet:MOD_PACKED}),modConfig={kernelName:Mod,backendName:"webgl",kernelFunc:mod};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class MultinomialProgram{constructor(aa,xa,ba){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[aa,ba],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${xa-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${xa-1}));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const DIV=`
if (a == b) {
  return 1.0;
};
return a / b;`,DIV_PACKED=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,realDiv=binaryKernelFunc({opSnippet:DIV,packedOpSnippet:DIV_PACKED,checkOutOfBounds:!0}),realDivConfig={kernelName:RealDiv,backendName:"webgl",kernelFunc:realDiv};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SUB="return a - b;",sub=binaryKernelFunc({opSnippet:SUB,packedOpSnippet:SUB,supportsComplex:!0,cpuKernelImpl:subImplCPU}),subConfig={kernelName:Sub,backendName:"webgl",kernelFunc:sub};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function softmax(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{logits:Sa}=aa,{dim:Ta}=ba,wa=parseAxisParam([Ta],Sa.shape),Ea=max({inputs:{x:Sa},backend:xa,attrs:{reductionIndices:wa,keepDims:!1}}),ka=expandShapeToKeepDim(Ea.shape,wa),Aa=reshape({inputs:{x:Ea},backend:xa,attrs:{shape:ka}}),Fa=sub({inputs:{a:Sa,b:Aa},backend:xa}),La=exp({inputs:{x:Fa},backend:xa}),el=sum({inputs:{x:La},backend:xa,attrs:{axis:wa,keepDims:!1}}),tl=reshape({inputs:{x:el},backend:xa,attrs:{shape:ka}}),nl=realDiv({inputs:{a:La,b:tl},backend:xa});return xa.disposeIntermediateTensorInfo(Ea),xa.disposeIntermediateTensorInfo(Aa),xa.disposeIntermediateTensorInfo(Fa),xa.disposeIntermediateTensorInfo(La),xa.disposeIntermediateTensorInfo(el),xa.disposeIntermediateTensorInfo(tl),nl}const softmaxConfig={kernelName:Softmax,backendName:"webgl",kernelFunc:softmax};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function multinomial(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{logits:Sa}=aa,{numSamples:Ta,seed:wa,normalized:Ea}=ba,ka=Ea?Sa:softmax({inputs:{logits:Sa},backend:xa,attrs:{dim:Sa.shape.length-1}}),Aa=ka.shape[0],Fa=ka.shape[1],La=new MultinomialProgram(Aa,Fa,Ta),el=[[wa]],tl=xa.runWebGLProgram(La,[ka],"int32",el);return Ea||xa.disposeIntermediateTensorInfo(ka),tl}const multinomialConfig={kernelName:Multinomial,backendName:"webgl",kernelFunc:multinomial};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const NEG=CHECK_NAN_SNIPPET$1+`
  return -x;
`,NEG_PACKED=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function neg(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(xa.shouldExecuteOnCPU([ba])){const Ta=xa.texData.get(ba.dataId),[wa,Ea]=negImplCPU(Ta.values,ba.shape,ba.dtype);return xa.makeTensorInfo(Ea,ba.dtype,wa)}let Sa;return env().getBool("WEBGL_PACK_UNARY_OPERATIONS")?Sa=new UnaryOpPackedProgram(ba.shape,NEG_PACKED):Sa=new UnaryOpProgram(ba.shape,NEG),xa.runWebGLProgram(Sa,[ba],ba.dtype)}const negConfig={kernelName:Neg,backendName:"webgl",kernelFunc:neg};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV3Impl=nonMaxSuppressionV3Impl$1;function nonMaxSuppressionV3(ha){warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka}=ba,Aa=xa.readSync(Sa.dataId),Fa=xa.readSync(Ta.dataId),{selectedIndices:La}=nonMaxSuppressionV3Impl(Aa,Fa,wa,Ea,ka);return xa.makeTensorInfo([La.length],"int32",new Int32Array(La))}const nonMaxSuppressionV3Config={kernelName:NonMaxSuppressionV3,backendName:"webgl",kernelFunc:nonMaxSuppressionV3};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV4Impl=nonMaxSuppressionV4Impl$1;function nonMaxSuppressionV4(ha){warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka,padToMaxOutputSize:Aa}=ba,Fa=xa.readSync(Sa.dataId),La=xa.readSync(Ta.dataId),{selectedIndices:el,validOutputs:tl}=nonMaxSuppressionV4Impl(Fa,La,wa,Ea,ka,Aa);return[xa.makeTensorInfo([el.length],"int32",new Int32Array(el)),xa.makeTensorInfo([],"int32",new Int32Array([tl]))]}const nonMaxSuppressionV4Config={kernelName:NonMaxSuppressionV4,backendName:"webgl",kernelFunc:nonMaxSuppressionV4};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nonMaxSuppressionV5Impl=nonMaxSuppressionV5Impl$1;function nonMaxSuppressionV5(ha){warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:aa,backend:xa,attrs:ba}=ha,{boxes:Sa,scores:Ta}=aa,{maxOutputSize:wa,iouThreshold:Ea,scoreThreshold:ka,softNmsSigma:Aa}=ba,Fa=xa.readSync(Sa.dataId),La=xa.readSync(Ta.dataId),el=wa,tl=Ea,nl=ka,rl=Aa,{selectedIndices:sl,selectedScores:ol}=nonMaxSuppressionV5Impl(Fa,La,el,tl,nl,rl);return[xa.makeTensorInfo([sl.length],"int32",new Int32Array(sl)),xa.makeTensorInfo([ol.length],"float32",new Float32Array(ol))]}const nonMaxSuppressionV5Config={kernelName:NonMaxSuppressionV5,backendName:"webgl",kernelFunc:nonMaxSuppressionV5};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class OneHotProgram{constructor(aa,xa,ba,Sa){this.variableNames=["indices"],this.outputShape=[aa,xa],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${Sa}), float(${ba}),
                      float(index == coords.y)));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const oneHot=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{indices:Sa}=aa,{dtype:Ta,depth:wa,onValue:Ea,offValue:ka}=ba,Aa=sizeFromShape(Sa.shape),Fa=new OneHotProgram(Aa,wa,Ea,ka),La=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:[Aa]}}),el=xa.runWebGLProgram(Fa,[La],Ta);xa.disposeIntermediateTensorInfo(La);const tl=[...Sa.shape,wa],nl=reshape({inputs:{x:el},backend:xa,attrs:{shape:tl}});return xa.disposeIntermediateTensorInfo(el),nl},oneHotConfig={kernelName:OneHot,backendName:"webgl",kernelFunc:oneHot};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function zerosLike(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(ba.dtype==="complex64"){const Sa=real({inputs:{input:ba},backend:xa}),Ta=zerosLike({inputs:{x:Sa},backend:xa}),wa=imag({inputs:{input:ba},backend:xa}),Ea=zerosLike({inputs:{x:wa},backend:xa}),ka=complex({inputs:{real:Ta,imag:Ea},backend:xa});return xa.disposeIntermediateTensorInfo(Sa),xa.disposeIntermediateTensorInfo(Ta),xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(Ea),ka}else return fill({attrs:{shape:ba.shape,dtype:ba.dtype,value:ba.dtype==="string"?"":0},backend:xa})}const zerosLikeConfig={kernelName:ZerosLike,backendName:"webgl",kernelFunc:zerosLike};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function onesLike(ha){const{inputs:aa,backend:xa}=ha,{x:ba}=aa;if(ba.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(ba.dtype==="complex64"){const Sa=real({inputs:{input:ba},backend:xa}),Ta=onesLike({inputs:{x:Sa},backend:xa}),wa=imag({inputs:{input:ba},backend:xa}),Ea=zerosLike({inputs:{x:wa},backend:xa}),ka=complex({inputs:{real:Ta,imag:Ea},backend:xa});return xa.disposeIntermediateTensorInfo(Sa),xa.disposeIntermediateTensorInfo(Ta),xa.disposeIntermediateTensorInfo(wa),xa.disposeIntermediateTensorInfo(Ea),ka}else return fill({attrs:{shape:ba.shape,dtype:ba.dtype,value:1},backend:xa})}const onesLikeConfig={kernelName:OnesLike,backendName:"webgl",kernelFunc:onesLike};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function pack(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{axis:Sa}=ba;if(aa.length===1)return expandDims({inputs:{input:aa[0]},backend:xa,attrs:{dim:Sa}});const Ta=aa[0].shape,wa=aa[0].dtype;aa.forEach(Fa=>{assertShapesMatch(Ta,Fa.shape,"All tensors passed to stack must have matching shapes"),assert(wa===Fa.dtype,()=>"All tensors passed to stack must have matching dtypes")});const Ea=[],ka=aa.map(Fa=>{const La=expandDims({inputs:{input:Fa},backend:xa,attrs:{dim:Sa}});return Ea.push(La),La}),Aa=concat({inputs:ka,backend:xa,attrs:{axis:Sa}});return Ea.forEach(Fa=>xa.disposeIntermediateTensorInfo(Fa)),Aa}const packConfig={kernelName:Pack,backendName:"webgl",kernelFunc:pack};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PadProgram{constructor(aa,xa,ba){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=xa.map((Aa,Fa)=>Aa[0]+aa[Fa]+Aa[1]);const Sa=aa.length,Ta=getCoordsDataType(Sa),wa=xa.map(Aa=>Aa[0]).join(","),Ea=xa.map((Aa,Fa)=>Aa[0]+aa[Fa]).join(","),ka=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,Sa);if(Sa===1){this.userCode=`
        int start = ${wa};
        int end = ${Ea};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${Ta} start = ${Ta}(${wa});
      ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${Ta} coords = outC - start;
          setOutput(getX(${ka}));
        }
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class PadPackedProgram{constructor(aa,xa,ba){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=xa.map((rl,sl)=>rl[0]+aa[sl]+rl[1]);const Sa=aa.length,Ta=getCoordsDataType(Sa),wa=xa.map(rl=>rl[0]).join(","),Ea=xa.map((rl,sl)=>rl[0]+aa[sl]).join(","),ka=getChannels("rc",Sa),Aa=getChannels("source",Sa),Fa=`${ka[Sa-1]} < ${this.outputShape[Sa-1]}`,La=Sa===1?"source":`vec2(${Aa.slice(-2).join()})`,el=[`${Ta} rc = outputLoc;`,`${ka[Sa-1]} += 1;
       if(${Fa}) {
      `,Sa===1?"":`}
       rc = outputLoc;
       ${ka[Sa-2]} += 1;
       if(${ka[Sa-2]} < ${this.outputShape[Sa-2]}) {`,Sa===1?"":`  ${ka[Sa-1]} += 1;
         if(${Fa}) {`],tl=Sa===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let nl="";for(let rl=0,sl=Sa===1?2:4;rl<sl;rl++)nl+=`
        ${el[rl]}
        if (${tl}) {
          result[${rl}] = float(value);
        } else {
          ${Ta} source = rc - start;
          result[${rl}] = getChannel(getX(${Aa.join()}), ${La});
        }
      `;nl+=Sa===1?"} ":"}}",this.userCode=`
      const ${Ta} start = ${Ta}(${wa});
      const ${Ta} end = ${Ta}(${Ea});

      void main() {
        ${Ta} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${nl}
        setOutput(result);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const padV2=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{paddings:Ta,constantValue:wa}=ba;if(sizeFromShape(Sa.shape)===0){const Aa=Ta.map((Fa,La)=>Fa[0]+Sa.shape[La]+Fa[1]);return fill({backend:xa,attrs:{shape:Aa,value:wa,dtype:Sa.dtype}})}const Ea=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PadPackedProgram(Sa.shape,Ta,wa):new PadProgram(Sa.shape,Ta,wa),ka=[[wa]];return xa.runWebGLProgram(Ea,[Sa],Sa.dtype,ka)},padV2Config={kernelName:PadV2,backendName:"webgl",kernelFunc:padV2};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const POW=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,POW_PACKED=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,pow=binaryKernelFunc({opSnippet:POW,packedOpSnippet:POW_PACKED}),powConfig={kernelName:Pow,backendName:"webgl",kernelFunc:pow};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function prod(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{axis:Ta,keepDims:wa}=ba,Ea=Sa.shape.length,ka=[],Aa=parseAxisParam(Ta,Sa.shape);let Fa=Aa;const La=getAxesPermutation(Fa,Ea);let el=Sa;La!=null&&(el=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:La}}),Fa=getInnerMostAxes(Fa.length,Ea),ka.push(el)),assertAxesAreInnerMostDims("prod",Fa,Ea);let tl;if(xa.shouldExecuteOnCPU([el])){const nl=xa.texData.get(el.dataId).values,{outVals:rl,outShape:sl,outDtype:ol}=prodImplCPU(el.shape,el.dtype,nl,Fa);tl=xa.makeTensorInfo(sl,ol,rl)}else{const[nl,rl]=computeOutAndReduceShapes(el.shape,Fa),sl=sizeFromShape(rl),ol=reshape({inputs:{x:el},backend:xa,attrs:{shape:[-1,sl]}}),al=sumOutType(Sa.dtype),ll=reduce(ol,al,"prod",xa);tl=reshape({inputs:{x:ll},backend:xa,attrs:{shape:nl}}),ka.push(ol),ka.push(ll)}if(wa){ka.push(tl);const nl=expandShapeToKeepDim(tl.shape,Aa);tl=reshape({inputs:{x:tl},backend:xa,attrs:{shape:nl}})}return ka.forEach(nl=>xa.disposeIntermediateTensorInfo(nl)),tl}const prodConfig={kernelName:Prod,backendName:"webgl",kernelFunc:prod};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedGather(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{paramsNestedSplits:Sa,paramsDenseValues:Ta,indices:wa}=aa,{outputRaggedRank:Ea}=ba,ka=Sa.map(ol=>xa.readSync(ol.dataId)),Aa=Sa.map(ol=>ol.shape),Fa=xa.readSync(Ta.dataId),La=xa.readSync(wa.dataId),[el,tl,nl]=raggedGatherImplCPU(ka,Aa,Fa,Ta.shape,Ta.dtype,La,wa.shape,Ea),rl=el.map(ol=>xa.makeTensorInfo([ol.length],"int32",ol)),sl=xa.makeTensorInfo(nl,Ta.dtype,tl);return rl.concat([sl])}const raggedGatherConfig={kernelName:RaggedGather,backendName:"webgl",kernelFunc:raggedGather};/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedRange(ha){const{inputs:aa,backend:xa}=ha,{starts:ba,limits:Sa,deltas:Ta}=aa,wa=xa.readSync(ba.dataId),Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),[Aa,Fa]=raggedRangeImplCPU(wa,ba.shape,ba.dtype,Ea,Sa.shape,ka,Ta.shape),La=xa.makeTensorInfo([Aa.length],"int32",Aa),el=xa.makeTensorInfo([Fa.length],ba.dtype,Fa);return[La,el]}const raggedRangeConfig={kernelName:RaggedRange,backendName:"webgl",kernelFunc:raggedRange};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function raggedTensorToTensor(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{shape:Sa,values:Ta,defaultValue:wa,rowPartitionTensors:Ea}=aa,{rowPartitionTypes:ka}=ba,Aa=xa.readSync(Sa.dataId),Fa=xa.readSync(Ta.dataId),La=xa.readSync(wa.dataId),el=Ea.map(sl=>xa.readSync(sl.dataId)),tl=Ea.map(sl=>sl.shape),[nl,rl]=raggedTensorToTensorImplCPU(Aa,Sa.shape,Fa,Ta.shape,Ta.dtype,La,wa.shape,el,tl,ka);return xa.makeTensorInfo(nl,Ta.dtype,rl)}const raggedTensorToTensorConfig={kernelName:RaggedTensorToTensor,backendName:"webgl",kernelFunc:raggedTensorToTensor};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const range=ha=>{const{backend:aa,attrs:xa}=ha,{start:ba,stop:Sa,step:Ta,dtype:wa}=xa,Ea=rangeImplCPU(ba,Sa,Ta,wa);return aa.makeTensorInfo([Ea.length],wa,Ea)},rangeConfig={kernelName:Range,backendName:"webgl",kernelFunc:range};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RECIPROCAL="return 1.0 / x;",reciprocal=unaryKernelFunc({opSnippet:RECIPROCAL}),reciprocalConfig={kernelName:Reciprocal,backendName:"webgl",kernelFunc:reciprocal};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : x;
`,RELU_PACKED=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu=unaryKernelFunc({opSnippet:RELU,packedOpSnippet:RELU_PACKED}),reluConfig={kernelName:Relu,backendName:"webgl",kernelFunc:relu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RELU6=CHECK_NAN_SNIPPET$1+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,RELU6_PACKED=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,relu6=unaryKernelFunc({opSnippet:RELU6,packedOpSnippet:RELU6_PACKED}),relu6Config={kernelName:Relu6,backendName:"webgl",kernelFunc:relu6};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba];let el;Ta?el="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":el="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]});
      const vec2 inputShapeRC = vec2(${Ea}.0, ${ka}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${el};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearPackedProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba];let el;Ta?el="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":el="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]},
          ${Fa[1]/La[1]});
      const vec3 inputShapeRC = vec3(${Ea}.0, ${ka}.0,
                                     ${ka}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${el};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${Aa-1};
        bool hasNextRow = coords.z < ${ba-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinear(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa}=aa,{alignCorners:Ta,halfPixelCenters:wa,size:Ea}=ba,[ka,Aa]=Ea,Fa=env().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeBilinearPackedProgram(Sa.shape,ka,Aa,Ta,wa):new ResizeBilinearProgram(Sa.shape,ka,Aa,Ta,wa);return xa.runWebGLProgram(Fa,[Sa],"float32")}const resizeBilinearConfig={kernelName:ResizeBilinear,backendName:"webgl",kernelFunc:resizeBilinear};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeBilinearBackpropProgram{constructor(aa,xa,ba){this.variableNames=["dy"],this.outputShape=[],this.outputShape=xa;const[,Sa,Ta]=xa,[,wa,Ea]=aa,ka=[ba&&wa>1?Sa-1:Sa,ba&&Ea>1?Ta-1:Ta],Aa=[ba&&wa>1?wa-1:wa,ba&&Ea>1?Ea-1:Ea],Fa=ka[0]/Aa[0],La=ka[1]/Aa[1],el=1/Fa,tl=1/La,nl=Math.ceil(el)*2+2,rl=Math.ceil(tl)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${Fa});
        const float widthScale = float(${La});

        const float invHeightScale = float(${el});
        const float invWidthScale = float(${tl});

        const int winHeight = int(${nl});
        const int winWidth = int(${rl});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${wa}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${Ea}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${Sa-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${Ta-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeBilinearGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa,dy:Ta}=aa,{alignCorners:wa}=ba,Ea=new ResizeBilinearBackpropProgram(Ta.shape,Sa.shape,wa);return xa.runWebGLProgram(Ea,[Ta],Ta.dtype)}const resizeBilinearGradConfig={kernelName:ResizeBilinearGrad,backendName:"webgl",kernelFunc:resizeBilinearGrad};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeighborProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba],el=Sa?"0.5":"0.0";let tl;Ta?tl="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":tl="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]});
      const vec2 inputShapeRC = vec2(${Ea}.0, ${ka}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${tl};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${el})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeighborPackedProgram{constructor(aa,xa,ba,Sa,Ta){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[wa,Ea,ka,Aa]=aa;this.outputShape=[wa,xa,ba,Aa];const Fa=[Sa&&xa>1?Ea-1:Ea,Sa&&ba>1?ka-1:ka],La=[Sa&&xa>1?xa-1:xa,Sa&&ba>1?ba-1:ba],el=Sa?"0.5":"0.0";let tl;Ta?tl="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":tl="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${Fa[0]/La[0]},
          ${Fa[1]/La[1]},
          ${Fa[1]/La[1]});
      const vec3 inputShapeRC = vec3(${Ea}.0, ${ka}.0,
                                     ${ka}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${tl};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${el})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${Aa-1};
        bool hasNextRow = coords.z < ${ba-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighbor(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa}=aa,{alignCorners:Ta,halfPixelCenters:wa,size:Ea}=ba,[ka,Aa]=Ea,Fa=env().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeNearestNeighborPackedProgram(Sa.shape,ka,Aa,Ta,wa):new ResizeNearestNeighborProgram(Sa.shape,ka,Aa,Ta,wa);return xa.runWebGLProgram(Fa,[Sa],Sa.dtype)}const resizeNearestNeighborConfig={kernelName:ResizeNearestNeighbor,backendName:"webgl",kernelFunc:resizeNearestNeighbor};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ResizeNearestNeigborBackpropProgram{constructor(aa,xa,ba){this.variableNames=["dy"],this.outputShape=[],this.outputShape=xa;const[,Sa,Ta]=xa,[,wa,Ea]=aa,ka=[ba&&wa>1?Sa-1:Sa,ba&&Ea>1?Ta-1:Ta],Aa=[ba&&wa>1?wa-1:wa,ba&&Ea>1?Ea-1:Ea],Fa=ka[0]/Aa[0],La=ka[1]/Aa[1],el=1/Fa,tl=1/La,nl=Math.ceil(el)*2+2,rl=Math.ceil(tl)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${Fa});
        const float widthScale = float(${La});

        const float invHeightScale = float(${el});
        const float invWidthScale = float(${tl});

        const int winHeight = int(${nl});
        const int winWidth = int(${rl});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${wa}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${Ea}) {
              continue;
            }

            float sourceFracRow =
              float(${ka[0]}) *
                (float(dyR) / float(${Aa[0]}));

            float sourceFracCol =
                float(${ka[1]}) *
                  (float(dyC) / float(${Aa[1]}));

            int sourceNearestRow = int(min(
                float(int(${Sa}) - 1),
                ${ba} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${Ta}) - 1),
                ${ba} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function resizeNearestNeighborGrad(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{images:Sa,dy:Ta}=aa,{alignCorners:wa}=ba,Ea=new ResizeNearestNeigborBackpropProgram(Ta.shape,Sa.shape,wa);return xa.runWebGLProgram(Ea,[Ta],Ta.dtype)}const resizeNearestNeighborGradConfig={kernelName:ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:resizeNearestNeighborGrad};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReverseProgram{constructor(aa,xa){this.variableNames=["x"];const ba=aa.length;if(ba>4)throw new Error(`WebGL backend: Reverse of rank-${ba} tensor is not yet supported`);if(this.outputShape=aa,ba===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${aa[0]} - coord - 1));
        }
      `;return}const Sa=Ea=>xa.indexOf(Ea)!==-1&&aa[Ea]!==1?`${aa[Ea]} - coords[${Ea}] - 1`:`coords[${Ea}]`,Ta=aa.map((Ea,ka)=>Sa(ka)).join(","),wa=getCoordsDataType(ba);this.userCode=`
      void main() {
        ${wa} coords = getOutputCoords();
        setOutput(getX(${Ta}));
      }
    `}}/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ReversePackedProgram{constructor(aa,xa){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const ba=aa.length;if(ba>4)throw new Error(`WebGL backend: Reverse of rank-${ba} tensor is not yet supported`);this.outputShape=aa;const Sa=getChannels("rc",ba),Ta=`${Sa[ba-1]} + 1 < ${this.outputShape[ba-1]}`,wa=`${Sa[ba-2]} + 1 < ${this.outputShape[ba-2]}`,Ea=getCoordsDataType(ba);ba===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${aa[0]} - rc - 1),
            ${aa[0]} - rc - 1);
          if(${Ta}){
              result.g = getChannel(getX(${aa[0]} - (rc  + 1) - 1),
                ${aa[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${Ea} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${ka(Sa.slice())};
          if(${Ta}){
            result.g = ${Aa(Sa.slice())};
          }
          if(${wa}) {
            result.b = ${Fa(Sa.slice())};
            if(${Ta}) {
              result.a = ${La(Sa.slice())};
            }
          }
          setOutput(result);
        }
    `;function ka(nl){return el(nl)}function Aa(nl){return nl[ba-1]="("+nl[ba-1]+" + 1)",el(nl)}function Fa(nl){return nl[ba-2]="("+nl[ba-2]+" + 1)",el(nl)}function La(nl){return nl[ba-1]="("+nl[ba-1]+" + 1)",nl[ba-2]="("+nl[ba-2]+" + 1)",el(nl)}function el(nl){const rl=aa.map((al,ll)=>tl(ll,nl)),sl=rl.join(","),ol=rl.slice(-2).join(",");return`getChannel(getX(${sl}), vec2(${ol}))`}function tl(nl,rl){return xa.indexOf(nl)!==-1&&aa[nl]!==1?`${aa[nl]} - ${rl[nl]} - 1`:`${rl[nl]}`}}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function reverse(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{dims:Ta}=ba,wa=Sa.shape.length,Ea=parseAxisParam(Ta,Sa.shape);if(wa===0)return identity({inputs:{x:Sa},backend:xa});const ka=env().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ReversePackedProgram(Sa.shape,Ea):new ReverseProgram(Sa.shape,Ea);return xa.runWebGLProgram(ka,[Sa],Sa.dtype)}const reverseConfig={kernelName:Reverse,backendName:"webgl",kernelFunc:reverse};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class RotateProgram{constructor(aa,xa){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const ba=aa[1],Sa=aa[2];this.outputShape=aa;let Ta="";typeof xa=="number"?Ta=`float outputValue = ${xa.toFixed(2)};`:Ta=`
        vec3 fill = vec3(${xa.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${Ta}
          if(coordX >= 0 && coordX < ${Sa} && coordY >= 0 && coordY < ${ba}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const rotateWithOffsetConfig={kernelName:RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:ha,attrs:aa,backend:xa})=>{const{image:ba}=ha,{radians:Sa,fillValue:Ta,center:wa}=aa,Ea=xa,ka=new RotateProgram(ba.shape,Ta),[Aa,Fa]=getImageCenter(wa,ba.shape[1],ba.shape[2]),La=[[Aa,Fa,Math.sin(Sa),Math.cos(Sa)]];return Ea.runWebGLProgram(ka,[ba],ba.dtype,La)}};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const ROUND=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,round=unaryKernelFunc({opSnippet:ROUND}),roundConfig={kernelName:Round,backendName:"webgl",kernelFunc:round};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const RSQRT="return inversesqrt(x);",rsqrt=unaryKernelFunc({opSnippet:RSQRT,cpuKernelImpl:rsqrtImplCPU}),rsqrtConfig={kernelName:Rsqrt,backendName:"webgl",kernelFunc:rsqrt};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ScatterProgram{constructor(aa,xa,ba,Sa,Ta,wa,Ea=!0,ka=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=wa;const Aa=getCoordsDataType(Ta.length),Fa=getCoordsDataType(wa.length);let La="";ba===1?La="i":ba===2&&(La="i, j");const el=`getIndices(${La})`;let tl="";Sa===1?tl="i":Sa===2&&(tl="i, coords[1]");const nl=`getUpdates(${tl})`;let rl="";ka&&(rl="coords[0], coords[1]");const sl=`getDefaultValue(${rl})`,ol=xa>1?"strides[j]":"strides";this.userCode=`
        ${Aa} strides = ${Aa}(${Ta});

        void main() {
          ${Fa} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${aa}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${xa}; j++) {
              int index = round(${el});
              flattenedIndex += index * ${ol};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${nl};
              found = true;
            }
          }
          setOutput(mix(${sl}, sum, float(found)));
        }
      `}}/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class ScatterPackedProgram{constructor(aa,xa,ba,Sa,Ta,wa,Ea=!0,ka=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=wa;const Aa=getCoordsDataType(Ta.length),Fa=getCoordsDataType(wa.length);let La="";ba===1?La="i":ba===2&&(La="i, j");const el=`getIndices(${La})`;let tl="";Sa===1?tl="i":Sa===2&&(tl="i, coords[1]");const nl=`getUpdates(${tl})`;let rl="";ka&&(rl="coords[0], coords[1]");const sl=`getDefaultValue(${rl})`,ol=xa>1?"strides[j]":"strides",al=xa>1?"strides[j + 1]":"strides";this.userCode=`
        ${Aa} strides = ${Aa}(${Ta});

        void main() {
          ${Fa} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${aa}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${xa}; j+=2) {
              ivec4 index = round(${el});
              flattenedIndex += index.xz * ${ol};
              if (j + 1 < ${xa}) {
                flattenedIndex += index.yw * ${al};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${nl};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${sl}, sum, found));
        }
      `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function scatterNd(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{indices:Sa,updates:Ta}=aa,{shape:wa}=ba,{sliceRank:Ea,numUpdates:ka,sliceSize:Aa,strides:Fa,outputSize:La}=calculateShapes(Ta,Sa,wa),el=[La/Aa,Aa];if(La===0)return xa.makeTensorInfo(wa,Sa.dtype);const tl=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:[ka,Ea]}}),nl=reshape({inputs:{x:Ta},backend:xa,attrs:{shape:[ka,Aa]}}),rl=xa.makeTensorInfo([],"float32",new Float32Array([0]));let sl;env().getBool("WEBGL_PACK")?sl=new ScatterPackedProgram(ka,Ea,tl.shape.length,nl.shape.length,Fa,el):sl=new ScatterProgram(ka,Ea,tl.shape.length,nl.shape.length,Fa,el);const ol=xa.runWebGLProgram(sl,[nl,tl,rl],nl.dtype),al=reshape({inputs:{x:ol},backend:xa,attrs:{shape:wa}});return xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(ol),xa.disposeIntermediateTensorInfo(rl),al}const scatterNdConfig={kernelName:ScatterNd,backendName:"webgl",kernelFunc:scatterNd};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SearchSortedProgram{constructor(aa,xa,ba,Sa){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[aa,ba];const Ta="while (left < right) {",wa=`for (int i = 0; i < ${Math.ceil(Math.log2(xa+1))}; ++i) { if (left >= right) break;`,Ea=env().getNumber("WEBGL_VERSION")===2?Ta:wa,ka=Sa==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${Ea}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${ka} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function searchSorted(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{sortedSequence:Sa,values:Ta}=aa,{side:wa}=ba,Ea=new SearchSortedProgram(Sa.shape[0],Sa.shape[1],Ta.shape[1],wa),ka=[[Sa.shape[1]]];return xa.runWebGLProgram(Ea,[Sa,Ta],"int32",ka)}const searchSortedConfig={kernelName:SearchSorted,backendName:"webgl",kernelFunc:searchSorted};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SelectProgram{constructor(aa,xa,ba){this.variableNames=["c","a","b"],this.outputShape=xa;let Sa,Ta;if(ba>4)throw Error(`Where for rank ${ba} is not yet supported`);if(ba===1)Ta="resRC",Sa="resRC";else{const Ea=["resRC.x","resRC.y","resRC.z","resRC.w"],ka=[],Aa=[];for(let Fa=0;Fa<xa.length;Fa++)Aa.push(`${Ea[Fa]}`),Fa<aa&&ka.push(`${Ea[Fa]}`);Sa=ka.join(),Ta=Aa.join()}const wa=getCoordsDataType(ba);this.userCode=`
      void main() {
        ${wa} resRC = getOutputCoords();
        float cVal = getC(${Sa});
        if (cVal >= 1.0) {
          setOutput(getA(${Ta}));
        } else {
          setOutput(getB(${Ta}));
        }
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function select(ha){const{inputs:aa,backend:xa}=ha,{condition:ba,t:Sa,e:Ta}=aa,wa=new SelectProgram(ba.shape.length,Sa.shape,Sa.shape.length);return xa.runWebGLProgram(wa,[ba,Sa,Ta],upcastType(Sa.dtype,Ta.dtype))}const selectConfig={kernelName:Select,backendName:"webgl",kernelFunc:select};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SELU=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${SELU_SCALEALPHA};
  float scale = ${SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,selu=unaryKernelFunc({opSnippet:SELU}),seluConfig={kernelName:Selu,backendName:"webgl",kernelFunc:selu};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGMOID=CHECK_NAN_SNIPPET_UNARY+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,SIGMOID_PACKED=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,sigmoid=unaryKernelFunc({opSnippet:SIGMOID,packedOpSnippet:SIGMOID_PACKED,cpuKernelImpl:sigmoidImplCPU}),sigmoidConfig={kernelName:Sigmoid,backendName:"webgl",kernelFunc:sigmoid};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIGN=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,sign=unaryKernelFunc({opSnippet:SIGN}),signConfig={kernelName:Sign,backendName:"webgl",kernelFunc:sign};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SIN=CHECK_NAN_SNIPPET_UNARY+`
  return sin(x);
`,SIN_PACKED=`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${CHECK_NAN_SNIPPET_PACKED}
  return result;
`,sin=unaryKernelFunc({opSnippet:SIN,packedOpSnippet:SIN_PACKED}),sinConfig={kernelName:Sin,backendName:"webgl",kernelFunc:sin};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SINH=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,sinh=unaryKernelFunc({opSnippet:SINH}),sinhConfig={kernelName:Sinh,backendName:"webgl",kernelFunc:sinh};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SOFTPLUS=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,softplus=unaryKernelFunc({opSnippet:SOFTPLUS}),softplusConfig={kernelName:Softplus,backendName:"webgl",kernelFunc:softplus};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const spaceToBatchND=ha=>{const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{blockShape:Ta,paddings:wa}=ba;assert(Sa.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const Ea=Ta.reduce((ol,al)=>ol*al),ka=[[0,0]];ka.push(...wa);for(let ol=1+Ta.length;ol<Sa.shape.length;++ol)ka.push([0,0]);const Aa=[],Fa=padV2({inputs:{x:Sa},backend:xa,attrs:{paddings:ka,constantValue:0}}),La=getReshaped(Fa.shape,Ta,Ea,!1),el=getPermuted(La.length,Ta.length,!1),tl=getReshapedPermuted(Fa.shape,Ta,Ea,!1),nl=reshape({inputs:{x:Fa},backend:xa,attrs:{shape:La}}),rl=transpose({inputs:{x:nl},backend:xa,attrs:{perm:el}}),sl=reshape({inputs:{x:rl},backend:xa,attrs:{shape:tl}});return Aa.push(Fa),Aa.push(nl),Aa.push(rl),Aa.forEach(ol=>xa.disposeIntermediateTensorInfo(ol)),sl},spaceToBatchNDConfig={kernelName:SpaceToBatchND,backendName:"webgl",kernelFunc:spaceToBatchND};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseFillEmptyRows(ha){const{inputs:aa,backend:xa}=ha,{indices:ba,values:Sa,denseShape:Ta,defaultValue:wa}=aa;if(Ta.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${Ta.shape}`);if(ba.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${ba.shape}`);if(Sa.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${Sa.shape}`);if(wa.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${wa.shape}`);const Ea=xa.readSync(ba.dataId),ka=xa.readSync(Sa.dataId),Aa=xa.readSync(Ta.dataId),Fa=xa.readSync(wa.dataId)[0],[La,el,tl,nl,rl]=sparseFillEmptyRowsImplCPU(Ea,ba.shape,ba.dtype,ka,Sa.dtype,Aa,Fa);return[xa.makeTensorInfo(el,ba.dtype,La),xa.makeTensorInfo([el[0]],Sa.dtype,tl),xa.makeTensorInfo([nl.length],"bool",new Uint8Array(nl.map(sl=>Number(sl)))),xa.makeTensorInfo([rl.length],ba.dtype,new Int32Array(rl))]}const sparseFillEmptyRowsConfig={kernelName:SparseFillEmptyRows,backendName:"webgl",kernelFunc:sparseFillEmptyRows};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseReshape(ha){const{inputs:aa,backend:xa}=ha,{inputIndices:ba,inputShape:Sa,newShape:Ta}=aa;if(ba.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${ba.shape}`);if(Sa.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${Ta.shape}`);const wa=Array.from(xa.readSync(Sa.dataId)),Ea=xa.readSync(ba.dataId),ka=Array.from(xa.readSync(Ta.dataId)),[Aa,Fa,La]=sparseReshapeImplCPU(Ea,ba.shape,ba.dtype,wa,ka);return[xa.makeTensorInfo(Fa,ba.dtype,Aa),xa.makeTensorInfo([La.length],Ta.dtype,new Int32Array(La))]}const sparseReshapeConfig={kernelName:SparseReshape,backendName:"webgl",kernelFunc:sparseReshape};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentMean(ha){const{inputs:aa,backend:xa}=ha,{data:ba,indices:Sa,segmentIds:Ta}=aa;if(ba.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${Ta.shape}`);const wa=xa.readSync(ba.dataId),Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),[Aa,Fa]=sparseSegmentReductionImplCPU(wa,ba.shape,ba.dtype,Ea,ka,!0);return xa.makeTensorInfo(Fa,ba.dtype,Aa)}const sparseSegmentMeanConfig={kernelName:SparseSegmentMean,backendName:"webgl",kernelFunc:sparseSegmentMean};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseSegmentSum(ha){const{inputs:aa,backend:xa}=ha,{data:ba,indices:Sa,segmentIds:Ta}=aa;if(ba.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(Sa.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${Sa.shape}`);if(Ta.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${Ta.shape}`);const wa=xa.readSync(ba.dataId),Ea=xa.readSync(Sa.dataId),ka=xa.readSync(Ta.dataId),[Aa,Fa]=sparseSegmentReductionImplCPU(wa,ba.shape,ba.dtype,Ea,ka);return xa.makeTensorInfo(Fa,ba.dtype,Aa)}const sparseSegmentSumConfig={kernelName:SparseSegmentSum,backendName:"webgl",kernelFunc:sparseSegmentSum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function sparseToDense(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{sparseIndices:Sa,sparseValues:Ta,defaultValue:wa}=aa,{outputShape:Ea}=ba,{sliceRank:ka,numUpdates:Aa,sliceSize:Fa,strides:La,outputSize:el}=calculateShapes(Ta,Sa,Ea),tl=!1;if(Ta.dtype==="string"){const ol=xa.bufferSync(Sa),al=xa.bufferSync(Ta),ll=decodeString(xa.readSync(wa.dataId)[0]),il=scatterImplCPU(ol,al,Ea,el,Fa,Aa,ka,La,ll,tl);return xa.makeTensorInfo(Ea,il.dtype,il.values)}const nl=new ScatterProgram(Aa,ka,Sa.shape.length,Ta.shape.length,La,[el,1],tl),rl=xa.runWebGLProgram(nl,[Ta,Sa,wa],Ta.dtype),sl=reshape({inputs:{x:rl},backend:xa,attrs:{shape:Ea}});return xa.disposeIntermediateTensorInfo(rl),sl}const sparseToDenseConfig={kernelName:SparseToDense,backendName:"webgl",kernelFunc:sparseToDense};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function splitV(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{numOrSizeSplits:Ta,axis:wa}=ba,Ea=parseAxisParam(wa,Sa.shape)[0],ka=prepareSplitSize(Sa,Ta,Ea),Aa=Sa.shape.length,Fa=new Array(Aa).fill(0),La=Sa.shape.slice();return ka.map(el=>{const tl=[...La];tl[Ea]=el;const nl=slice({inputs:{x:Sa},backend:xa,attrs:{begin:Fa,size:tl}});return Fa[Ea]+=el,nl})}const splitVConfig={kernelName:SplitV,backendName:"webgl",kernelFunc:splitV};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQRT="return sqrt(x);",sqrt=unaryKernelFunc({opSnippet:SQRT,packedOpSnippet:SQRT,cpuKernelImpl:sqrtImplCPU}),sqrtConfig={kernelName:Sqrt,backendName:"webgl",kernelFunc:sqrt};/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARE="return x * x;",square=unaryKernelFunc({opSnippet:SQUARE}),squareConfig={kernelName:Square,backendName:"webgl",kernelFunc:square};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SQUARED_DIFFERENCE="return (a - b) * (a - b);",squaredDifference=binaryKernelFunc({opSnippet:SQUARED_DIFFERENCE,packedOpSnippet:SQUARED_DIFFERENCE}),squaredDifferenceConfig={kernelName:SquaredDifference,backendName:"webgl",kernelFunc:squaredDifference};/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function staticRegexReplace(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa;if(Sa.dtype!=="string")throw new Error("Input must be of datatype string");const Ta=xa.readSync(Sa.dataId),wa=fromUint8ToStringArray(Ta),Ea=staticRegexReplaceImplCPU(wa,"string",ba);return xa.makeTensorInfo(Sa.shape,"string",Ea)}const staticRegexReplaceConfig={kernelName:StaticRegexReplace,backendName:"webgl",kernelFunc:staticRegexReplace};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function step({inputs:ha,attrs:aa,backend:xa}){const{x:ba}=ha,Sa=CHECK_NAN_SNIPPET$1+`
    return x > 0.0 ? 1.0 : float(${aa.alpha});
  `,Ta=new UnaryOpProgram(ba.shape,Sa);return xa.runWebGLProgram(Ta,[ba],ba.dtype)}const stepConfig={kernelName:Step,backendName:"webgl",kernelFunc:step};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class StridedSliceProgram{constructor(aa,xa,ba){this.variableNames=["x"],this.outputShape=ba;const Sa=ba.length,Ta=getCoordsDataType(ba.length),wa=getCoordsDataType(ba.length);let Ea="";if(Sa===1)Ea="coords * strides + begin";else{let ka=0;Ea=ba.map((Aa,Fa)=>(ka++,ba.length===1?`coords * strides[${Fa}] + begin[${Fa}]`:`coords[${ka-1}] * strides[${Fa}] + begin[${Fa}]`)).join(",")}this.userCode=`
      ${Ta} begin = ${Ta}(${aa});
      ${Ta} strides = ${Ta}(${xa});

      void main() {
        ${wa} coords = getOutputCoords();
        setOutput(getX(${Ea}));
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stridedSlice(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{begin:Ta,end:wa,strides:Ea,beginMask:ka,endMask:Aa,ellipsisMask:Fa,newAxisMask:La,shrinkAxisMask:el}=ba,{finalShapeSparse:tl,finalShape:nl,isIdentity:rl,sliceDim0:sl,isSimpleSlice:ol,begin:al,end:ll,strides:il}=sliceInfo(Sa.shape,Ta,wa,Ea,ka,Aa,Fa,La,el);let cl;if(rl)cl=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:nl}});else if(sl||ol){assert(Sa.shape.length>=1,()=>`Input must have rank at least 1, got: ${Sa.shape.length}`);const dl=computeOutShape$2(al,ll,il),hl=slice({inputs:{x:Sa},backend:xa,attrs:{begin:al,size:dl}});cl=reshape({inputs:{x:hl},backend:xa,attrs:{shape:nl}}),xa.disposeIntermediateTensorInfo(hl)}else if(xa.shouldExecuteOnCPU([Sa])){const hl=xa.readSync(Sa.dataId),pl=buffer(Sa.shape,Sa.dtype,hl),fl=stridedSliceImplCPU(tl,pl,il,al);cl=xa.makeTensorInfo(nl,Sa.dtype,fl.values)}else{const hl=new StridedSliceProgram(al,il,tl);cl=xa.runWebGLProgram(hl,[Sa],Sa.dtype)}const ul=reshape({inputs:{x:cl},backend:xa,attrs:{shape:nl}});return xa.disposeIntermediateTensorInfo(cl),ul}const stridedSliceConfig={kernelName:StridedSlice,backendName:"webgl",kernelFunc:stridedSlice};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringNGrams(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{separator:Sa,nGramWidths:Ta,leftPad:wa,rightPad:Ea,padWidth:ka,preserveShortSequences:Aa}=ba,{data:Fa,dataSplits:La}=aa,el=xa.readSync(Fa.dataId),tl=xa.readSync(La.dataId),[nl,rl]=stringNGramsImplCPU(el,tl,Sa,Ta,wa,Ea,ka,Aa);return[xa.makeTensorInfo([nl.length],"string",nl),xa.makeTensorInfo(La.shape,"int32",rl)]}const stringNGramsConfig={kernelName:StringNGrams,backendName:"webgl",kernelFunc:stringNGrams};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringSplit(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{skipEmpty:Sa}=ba,{input:Ta,delimiter:wa}=aa;if(Ta.dtype!=="string")throw new Error("Input must be of datatype string");if(Ta.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${Ta.shape}`);if(wa.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${wa.shape}`);const Ea=xa.readSync(Ta.dataId),ka=xa.readSync(wa.dataId)[0],[Aa,Fa,La]=stringSplitImplCPU(Ea,ka,Sa),el=Fa.length;return[xa.makeTensorInfo([el,2],"int32",Aa),xa.makeTensorInfo([el],"string",Fa),xa.makeTensorInfo([2],"int32",new Int32Array(La))]}const stringSplitConfig={kernelName:StringSplit,backendName:"webgl",kernelFunc:stringSplit};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function stringToHashBucketFast(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{numBuckets:Sa}=ba,{input:Ta}=aa;if(Ta.dtype!=="string")throw new Error("Input must be of datatype string");if(Sa<=0)throw new Error("Number of buckets must be at least 1");const wa=xa.readSync(Ta.dataId),Ea=stringToHashBucketFastImplCPU(wa,Sa);return xa.makeTensorInfo(Ta.shape,"int32",Ea)}const stringToHashBucketFastConfig={kernelName:StringToHashBucketFast,backendName:"webgl",kernelFunc:stringToHashBucketFast};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TAN="return tan(x);",tan=unaryKernelFunc({opSnippet:TAN}),tanConfig={kernelName:Tan,backendName:"webgl",kernelFunc:tan};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const TANH=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,tanh=unaryKernelFunc({opSnippet:TANH}),tanhConfig={kernelName:Tanh,backendName:"webgl",kernelFunc:tanh};/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tensorScatterUpdate(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{tensor:Sa,indices:Ta,updates:wa}=aa,{sliceRank:Ea,numUpdates:ka,sliceSize:Aa,strides:Fa,outputSize:La}=calculateShapes(wa,Ta,Sa.shape),el=[La/Aa,Aa];if(La===0)return xa.makeTensorInfo(Sa.shape,Ta.dtype);const tl=reshape({inputs:{x:Ta},backend:xa,attrs:{shape:[ka,Ea]}}),nl=reshape({inputs:{x:wa},backend:xa,attrs:{shape:[ka,Aa]}}),rl=reshape({inputs:{x:Sa},backend:xa,attrs:{shape:el}}),sl=new ScatterProgram(ka,Ea,tl.shape.length,nl.shape.length,Fa,el,!1,!0),ol=xa.runWebGLProgram(sl,[nl,tl,rl],rl.dtype),al=reshape({inputs:{x:ol},backend:xa,attrs:{shape:Sa.shape}});return xa.disposeIntermediateTensorInfo(tl),xa.disposeIntermediateTensorInfo(nl),xa.disposeIntermediateTensorInfo(rl),xa.disposeIntermediateTensorInfo(ol),al}const tensorScatterUpdateConfig={kernelName:TensorScatterUpdate,backendName:"webgl",kernelFunc:tensorScatterUpdate};/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TileProgram{constructor(aa,xa){this.variableNames=["A"];const ba=new Array(aa.length);for(let wa=0;wa<ba.length;wa++)ba[wa]=aa[wa]*xa[wa];this.outputShape=ba,this.rank=ba.length;const Sa=getCoordsDataType(this.rank),Ta=getSourceCoords(aa);this.userCode=`
      void main() {
        ${Sa} resRC = getOutputCoords();
        setOutput(getA(${Ta}));
      }
    `}}function getSourceCoords(ha){const aa=ha.length;if(aa>5)throw Error(`Tile for rank ${aa} is not yet supported`);if(aa===1)return`imod(resRC, ${ha[0]})`;const xa=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],ba=[];for(let Sa=0;Sa<ha.length;Sa++)ba.push(`imod(${xa[Sa]}, ${ha[Sa]})`);return ba.join()}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function tile(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{reps:Ta}=ba;if(Sa.dtype==="string"||Sa.shape.length>5){const ka=xa.readSync(Sa.dataId),Aa=Sa.dtype==="string"?ka.map(el=>decodeString(el)):ka,Fa=buffer(Sa.shape,Sa.dtype,Aa),La=tileImplCPU(Fa,Ta);return xa.makeTensorInfo(La.shape,La.dtype,La.values)}const wa=new TileProgram(Sa.shape,Ta);return xa.runWebGLProgram(wa,[Sa],Sa.dtype)}const tileConfig={kernelName:Tile,backendName:"webgl",kernelFunc:tile};class SwapProgram{constructor(aa){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=aa,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class MergeProgram{constructor(aa){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=aa,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function disposeIntermediateTensorInfoOrNull(ha,aa){aa!==null&&ha.disposeIntermediateTensorInfo(aa)}function roundUpToPow2(ha){let aa=1;for(;aa<ha;)aa*=2;return aa}function topK(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa}=aa,{k:Ta,sorted:wa}=ba,Ea=env().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),ka=env().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),Aa=Sa.shape,Fa=Aa[Aa.length-1];if(xa.shouldExecuteOnCPU([Sa])||Fa<Ea||Ta>ka){const fl=xa.readSync(Sa.dataId),[ml,gl]=topKImplCPU(fl,Aa,Sa.dtype,Ta,wa);return[xa.makeTensorInfo(ml.shape,ml.dtype,ml.values),xa.makeTensorInfo(gl.shape,gl.dtype,gl.values)]}if(Ta===0)return Aa[Aa.length-1]=0,[xa.makeTensorInfo(Aa,Sa.dtype,[]),xa.makeTensorInfo(Aa,"int32",[])];if(Fa===1)return[Sa,fill({attrs:{shape:Aa,dtype:"int32",value:0},backend:xa})];const La=xa.texData.get(Sa.dataId),el=La!==null&&La.isPacked,tl=el?xa.unpackTensor(Sa):Sa,rl=sizeFromShape(Aa)/Fa,sl=reshape({inputs:{x:tl},attrs:{shape:[rl,Fa]},backend:xa});el&&disposeIntermediateTensorInfoOrNull(xa,tl);const ol=roundUpToPow2(Ta),al=roundUpToPow2(Fa);let ll=null;const il=()=>ll===null?[sl,sl]:[sl,ll],cl=(fl,ml,gl)=>{const $l=il(),xl=new SwapProgram(gl),bl=[[Fa],[ll===null?1:0],[Number.NEGATIVE_INFINITY],[fl],[ml]],Sl=ll;ll=xa.runWebGLProgram(xl,$l,"int32",bl),disposeIntermediateTensorInfoOrNull(xa,Sl)};for(let fl=1;fl<ol;fl*=2){const ml=fl*2;for(let gl=fl;gl>=1;gl/=2)cl(ml,gl,[rl,al])}for(let fl=al;fl>ol;fl/=2){const ml=il(),gl=new MergeProgram([rl,fl/2]),xl=[[Fa],[ll===null?1:0],[ol]],yl=ll;ll=xa.runWebGLProgram(gl,ml,"int32",xl),disposeIntermediateTensorInfoOrNull(xa,yl);const bl=ol/2,Sl=bl*2;for(let Cl=bl;Cl>=1;Cl/=2)cl(Sl,Cl,ll.shape)}let ul=ll;ll=slice({inputs:{x:ll},backend:xa,attrs:{begin:0,size:[rl,Ta]}}),disposeIntermediateTensorInfoOrNull(xa,ul);let dl=gatherV2({inputs:{x:sl,indices:ll},backend:xa,attrs:{axis:1,batchDims:1}});disposeIntermediateTensorInfoOrNull(xa,sl);const hl=Aa.slice(0,-1);hl.push(Ta),ul=ll,ll=reshape({inputs:{x:ll},attrs:{shape:hl},backend:xa}),disposeIntermediateTensorInfoOrNull(xa,ul);const pl=dl;return dl=reshape({inputs:{x:dl},attrs:{shape:hl},backend:xa}),disposeIntermediateTensorInfoOrNull(xa,pl),[dl,ll]}const topKConfig={kernelName:TopK,backendName:"webgl",kernelFunc:topK};/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class TransformProgram{constructor(aa,xa,ba,Sa,Ta,wa){this.variableNames=["Image","Transforms"],this.outputShape=wa;const Ea=ba==="nearest"?1:2;let ka;switch(Sa){case"constant":ka=1;break;case"reflect":ka=2;break;case"wrap":ka=3;break;case"nearest":ka=4;break;default:ka=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${ka} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${ka} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${ka} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${aa} && 0 <= coordX && coordX < ${xa}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${Ta});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${Ta});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${xa}));
                float mapY = mapCoord(inY, float(${aa}));

                if (${Ea} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function transform(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{image:Sa,transforms:Ta}=aa,{interpolation:wa,fillMode:Ea,fillValue:ka,outputShape:Aa}=ba,[Fa,La,el,tl]=Sa.shape,[nl,rl]=Aa??[La,el],sl=[Fa,nl,rl,tl],ol=new TransformProgram(La,el,wa,Ea,ka,sl);return xa.runWebGLProgram(ol,[Sa,Ta],"float32")}const transformConfig={kernelName:Transform,backendName:"webgl",kernelFunc:transform};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unique(ha){const{inputs:aa,attrs:xa,backend:ba}=ha,{axis:Sa}=xa,{x:Ta}=aa;assertNotComplex(Ta,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const wa=ba.readSync(Ta.dataId),{outputValues:Ea,outputShape:ka,indices:Aa}=uniqueImplCPU(wa,Sa,Ta.shape,Ta.dtype);return[ba.makeTensorInfo(ka,Ta.dtype,Ea),ba.makeTensorInfo([Aa.length],"int32",Aa)]}const uniqueConfig={kernelName:Unique,backendName:"webgl",kernelFunc:unique};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unpack(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{value:Sa}=aa;let{axis:Ta}=ba;Ta<0&&(Ta+=Sa.shape.length);const wa=Sa,Ea=wa.shape.length,ka=Sa.shape[Ta],Aa=new Array(Ea-1);let Fa=0;for(let rl=0;rl<Ea;rl++)rl!==Ta&&(Aa[Fa++]=wa.shape[rl]);const La=[],el=new Array(Ea).fill(0),tl=wa.shape.slice();tl[Ta]=1;const nl=new Array(ka);for(let rl=0;rl<nl.length;rl++){el[Ta]=rl;const sl=slice({inputs:{x:wa},backend:xa,attrs:{begin:el,size:tl}}),ol=reshape({inputs:{x:sl},backend:xa,attrs:{shape:Aa}});nl[rl]=ol,La.push(sl)}return La.forEach(rl=>xa.disposeIntermediateTensorInfo(rl)),nl}const unpackConfig={kernelName:Unpack,backendName:"webgl",kernelFunc:unpack};/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class SegmentOpProgram{constructor(aa,xa){this.variableNames=["x","segmentIds"];const ba=aa.windowSize,Sa=aa.batchSize,Ta=aa.inSize,wa=aa.numSegments,Ea=wa*Math.ceil(Ta/ba);this.outputShape=[Sa,Ea];const ka="0.0",Aa="sumValue",Fa=Math.floor(ba/4)*4,La=ba%4,el=`
        sumValue += dot(values, segFilter);
    `;let tl="";Ta%ba>0&&(tl=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return initializationValue;
        }
      `);let nl="";Ta%ba>0&&(nl=`
        if (inIdx < 0 || inIdx >= ${Ta}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${ka};

      float getValue(int batch, int inIdx) {
        ${tl}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${nl}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${wa})) * float(${ba}));
        int currentSeg = int(mod(float(outIdx), float(${wa})));

        float sumValue = 0.0;

        for (int i = 0; i < ${Fa}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${el}
        }

        int inIdx = inOffset + ${Fa};
        if (${La===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${el}
        } else if (${La===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${el}
        } else if (${La===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${el}
        }
        setOutput(${Aa});
      }
    `}}/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function unsortedSegmentSum(ha){const{inputs:aa,backend:xa,attrs:ba}=ha,{x:Sa,segmentIds:Ta}=aa,{numSegments:wa}=ba,Ea=Sa.shape.length,ka=[];let Aa=0;const Fa=getAxesPermutation([Aa],Ea);let La=Sa;Fa!=null&&(La=transpose({inputs:{x:Sa},backend:xa,attrs:{perm:Fa}}),ka.push(La),Aa=getInnerMostAxes(1,Ea)[0]);const el=computeOutShape(La.shape,Aa,wa),tl=sizeFromShape([La.shape[Aa]]),nl=reshape({inputs:{x:La},backend:xa,attrs:{shape:[-1,tl]}});ka.push(nl);const rl=sumOutType(Sa.dtype),sl=(il,cl,ul,dl,hl)=>{const pl=il.shape[0],fl=il.shape[1],ml=segOpComputeOptimalWindowSize(fl,hl),gl={windowSize:ml,inSize:fl,batchSize:pl,numSegments:hl},$l=new SegmentOpProgram(gl,cl),xl=xa.compileAndRun($l,[il,ul],dl);if(ka.push(xl),xl.shape[1]===hl)return xl;const yl=range({backend:xa,attrs:{start:0,stop:hl,step:1,dtype:"float32"}}),bl=tile({inputs:{x:yl},backend:xa,attrs:{reps:[fl/ml]}});return ka.push(yl),ka.push(bl),sl(xl,cl,bl,dl,hl)},ol=sl(nl,"unsortedSegmentSum",Ta,rl,wa),al=reshape({inputs:{x:ol},backend:xa,attrs:{shape:el}});let ll=al;if(Fa!=null){ka.push(al);const il=getUndoAxesPermutation(Fa);ll=transpose({inputs:{x:ll},backend:xa,attrs:{perm:il}})}return ka.forEach(il=>xa.disposeIntermediateTensorInfo(il)),ll}const unsortedSegmentSumConfig={kernelName:UnsortedSegmentSum,backendName:"webgl",kernelFunc:unsortedSegmentSum};/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const kernelConfigs=[_fusedMatMulConfig,absConfig,acosConfig,acoshConfig,addConfig,addNConfig,allConfig,anyConfig,argMaxConfig,argMinConfig,asinConfig,asinhConfig,atanConfig,atan2Config,atanhConfig,avgPoolConfig,avgPool3DConfig,avgPool3DGradConfig,avgPoolGradConfig,batchMatMulConfig,batchNormConfig,batchToSpaceNDConfig,bincountConfig,bitwiseAndConfig,broadcastArgsConfig,castConfig,ceilConfig,clipByValueConfig,complexConfig,complexAbsConfig,concatConfig,conv2DConfig,conv2DBackpropFilterConfig,conv2DBackpropInputConfig,conv3DConfig,conv3DBackpropFilterV2Config,conv3DBackpropInputConfig,cosConfig,coshConfig,cropAndResizeConfig,cumprodConfig,cumsumConfig,denseBincountConfig,depthToSpaceConfig,depthwiseConv2dNativeConfig,depthwiseConv2dNativeBackpropFilterConfig,depthwiseConv2dNativeBackpropInputConfig,diagConfig,dilation2DConfig,einsumConfig,eluConfig,eluGradConfig,equalConfig,erfConfig,expConfig,expandDimsConfig,expm1Config,fftConfig,fillConfig,flipLeftRightConfig,floorConfig,floorDivConfig,fromPixelsConfig,fusedConv2DConfig,fusedDepthwiseConv2DConfig,gatherNdConfig,gatherV2Config,greaterConfig,greaterEqualConfig,identityConfig,ifftConfig,imagConfig,isFiniteConfig,isInfConfig,isNaNConfig,leakyReluConfig,lessConfig,lessEqualConfig,linSpaceConfig,logConfig,log1pConfig,logicalAndConfig,logicalNotConfig,logicalOrConfig,LRNConfig,LRNGradConfig,maxConfig,maximumConfig,maxPoolConfig,maxPool3DConfig,maxPool3DGradConfig,maxPoolGradConfig,maxPoolWithArgmaxConfig,meanConfig,minConfig,minimumConfig,mirrorPadConfig,modConfig,multinomialConfig,multiplyConfig,negConfig,nonMaxSuppressionV3Config,nonMaxSuppressionV4Config,nonMaxSuppressionV5Config,notEqualConfig,oneHotConfig,onesLikeConfig,packConfig,padV2Config,powConfig,preluConfig,prodConfig,raggedGatherConfig,raggedRangeConfig,raggedTensorToTensorConfig,rangeConfig,realConfig,realDivConfig,reciprocalConfig,reluConfig,relu6Config,reshapeConfig,resizeBilinearConfig,resizeBilinearGradConfig,resizeNearestNeighborConfig,resizeNearestNeighborGradConfig,reverseConfig,rotateWithOffsetConfig,roundConfig,rsqrtConfig,scatterNdConfig,searchSortedConfig,selectConfig,seluConfig,sigmoidConfig,signConfig,sinConfig,sinhConfig,sliceConfig,softmaxConfig,softplusConfig,spaceToBatchNDConfig,sparseFillEmptyRowsConfig,sparseReshapeConfig,sparseSegmentMeanConfig,sparseSegmentSumConfig,sparseToDenseConfig,splitVConfig,sqrtConfig,squareConfig,squaredDifferenceConfig,staticRegexReplaceConfig,stepConfig,stridedSliceConfig,stringNGramsConfig,stringSplitConfig,stringToHashBucketFastConfig,subConfig,sumConfig,tanConfig,tanhConfig,tensorScatterUpdateConfig,tileConfig,topKConfig,transformConfig,transposeConfig,uniqueConfig,unpackConfig,unsortedSegmentSumConfig,zerosLikeConfig];for(const ha of kernelConfigs)registerKernel(ha);class InferenceError extends Error{constructor(aa,xa){super(aa instanceof Error?aa.message:typeof aa=="string"?aa:JSON.stringify(aa)),this.code=xa}}class ModelDownloadQuotaExhausted extends InferenceError{constructor(aa){super(aa,429)}}class ModelDownloadError extends InferenceError{constructor(aa){super(aa,404)}}class ModelNotInitialized extends InferenceError{constructor(aa){super(aa,404)}}class RequestTooOld extends InferenceError{constructor(aa){super(aa,404)}}class CVModel{constructor(){env$1().set("PROD",!0)}async initialize(...aa){}async infer(aa){throw new Error("Not implemented")}configure(...aa){}async _loadRoboflowModel(aa){let xa;const ba=await loadGraphModel(aa,{fetchFunc:async(Sa,Ta)=>{if(typeof Sa!="string")return fetch(Sa,Ta);const wa=Sa.match(/(https:\/\/storage\.googleapis\.com\/.+\/group.+shard.+\.bin)\?publishable_key=.*/);if(wa){const Fa=wa[1];return fetch(Fa,Ta)}const Ea=await fetch(Sa,Ta),ka=Ea.status,Aa=await Ea.json().catch(()=>null);if(ka==429)throw new ModelDownloadQuotaExhausted("Model download quota exhausted. "+JSON.stringify(Aa));if(ka!=200)throw new ModelDownloadError("Error happened during model downloading. "+JSON.stringify(Aa));return xa=Aa,Response.json(Aa.tfjs.model)}});return[xa,ba]}}async function initModuleFactory(ha){const aa=self;aa.exports={},aa.dbg=()=>{},aa.module={exports:self.exports},await import(ha),aa.ModuleFactory=self.module.exports,delete aa.module,delete aa.exports}self.importScripts=(...ha)=>{};class Gaze extends CVModel{constructor(){super(),this.isDebugMode=!1}async initialize(aa,xa,ba,Sa,Ta=!1){this.workerId=aa,this.isDebugMode=Ta,this.isDebugMode&&console.log(`${this.workerId} Loading face detector...`),await initModuleFactory("https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.12/wasm/vision_wasm_internal.js");const wa=await Co.forVisionTasks("https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.12/wasm");this.faceDetector=await qa.createFromOptions(wa,{baseOptions:{modelAssetPath:"https://storage.googleapis.com/mediapipe-models/face_detector/blaze_face_short_range/float16/1/blaze_face_short_range.tflite",delegate:"GPU"},runningMode:"IMAGE"}),await this.faceDetector.detect(new ImageData(Uint8ClampedArray.from({length:100*200*4},()=>Math.floor(Math.random()*255)),100)),this.isDebugMode&&(console.log(`${this.workerId} Loading face detector DONE`),console.log(`${this.workerId} Loading gaze detector...`));const Ea=`https://api.roboflow.com/tfjs_core/${xa}/${ba}?publishable_key=${Sa}`,[ka,Aa]=await this._loadRoboflowModel(Ea);if(this.rfModel=ka,this.gazeDetector=Aa,!this.gazeDetector){console.error(`${this.workerId} Loading gaze detector FAILED (model not found)`);return}await this.gazeDetector.predict(randomUniform([1,448,448,3])),this.isDebugMode&&console.log(`${this.workerId} Loading gaze detector DONE`)}detectGazes(aa,xa){let ba=[];const Sa=this.gazeDetector,Ta=this;return Sa?(tidy$1(()=>{const wa=aa.tensor().toFloat().div(255).expandDims(0),Ea=wa.shape[1],ka=wa.shape[2];if(!Ea||!ka){console.error(`${this.workerId} image has invalid dimensions`);return}for(let Aa=0;Aa<xa.length;++Aa){const Fa=xa[Aa],La=Fa.boundingBox;if(!La){console.error(`${this.workerId} No bounding box found for face ${Aa}`);continue}const el=performance.now(),tl=La.originY/Ea,nl=La.originX/ka,rl=(La.originY+La.height)/Ea,sl=(La.originX+La.width)/ka,ol=[[tl,nl,rl,sl]],al=image$1.cropAndResize(wa,ol,[0],[448,448]).squeeze(),ll=al.slice([0,0,0],[-1,-1,1]).sub(scalar$1(.485)).div(scalar$1(.229)),il=al.slice([0,0,1],[-1,-1,1]).sub(scalar$1(.456)).div(scalar$1(.224)),cl=al.slice([0,0,2],[-1,-1,1]).sub(scalar$1(.406)).div(scalar$1(.225)),ul=concat$3([ll,il,cl],2).expandDims(0),dl=performance.now(),hl=Sa.predict(ul),pl=performance.now();if(!Array.isArray(hl)||hl.length<2){console.error(`${Ta.workerId} Gaze detector returned invalid output`);return}const fl=tensor([...Array(90).keys()],[90],"float32"),ml=softmax$3(hl[0],1).squeeze().mul(fl).sum(),gl=softmax$3(hl[1],1).squeeze().mul(fl).sum(),$l=ml.dataSync(),xl=gl.dataSync(),yl=($l*4-180)*Math.PI/180,bl=(xl*4-180)*Math.PI/180;ba.push({leftEye:Fa.keypoints[0],rightEye:Fa.keypoints[1],yaw:yl,pitch:bl});const Sl=performance.now();Ta.isDebugMode&&console.log(Ta.workerId+"gaze -->  yaw: "+(yl*180/Math.PI).toFixed(2)+"  pitch: "+(bl*180/Math.PI).toFixed(2)+"  pre: "+(dl-el).toFixed(2)+"  infer: "+(pl-dl).toFixed(2)+"  post: "+(Sl-pl).toFixed(2))}}),ba):(console.error(`${this.workerId} Gaze detector not found`),[])}async infer(aa){const xa=performance.now(),ba=this.faceDetector;if(!ba)return console.error(`${this.workerId} Face detector not found`),[];const Sa=await aa.bitmap();if(!Sa)return console.error(`${this.workerId} Image not found`),[];const Ta=ba.detect(Sa).detections;if(Ta.length===0)return this.isDebugMode&&console.log(`${this.workerId} --------> No face detected!`),[];const wa=performance.now(),Ea=this.detectGazes(aa,Ta),ka=performance.now();if(this.isDebugMode){let Aa=`${this.workerId}  `;for(let Fa=0;Fa<Ta.length;++Fa){let La=Ea[Fa];Aa+="yaw: "+(La.yaw*180/Math.PI).toFixed(2)+"  pitch: "+(La.pitch*180/Math.PI).toFixed(2)+`
`}Aa+="time(ms): face "+(wa-xa).toFixed(2)+" gaze "+(ka-wa).toFixed(2)+" all "+(ka-xa).toFixed(2)+`
FPS:      face `+(1e3/(wa-xa)).toFixed(2)+" gaze "+(1e3/(ka-wa)).toFixed(2)+" all "+(1e3/(ka-xa)).toFixed(2)+`
`,console.log(Aa)}return Ea}}class CVImage{constructor(aa){aa instanceof Tensor$1?(aa.shape.length==4&&(aa=reshape$4(aa,aa.shape.slice(1))),this.tensorImage=aa):aa instanceof ImageBitmap?this.bitmapImage=aa:(aa instanceof HTMLImageElement||aa instanceof HTMLVideoElement)&&(this.htmlImage=aa)}async bitmap(){if(this.bitmapImage)return this.bitmapImage;if(this.htmlImage)this.bitmapImage=await createImageBitmap(this.htmlImage);else if(this.tensorImage)throw new Error("Not implemented");return this.bitmapImage}tensor(){const aa=this.bitmapImage||this.htmlImage;if(!aa)throw new Error("No image");return this.tensorImage||(this.tensorImage=fromPixels$2(aa)),this.tensorImage}async tensor4D(){if(!this.tensor4DImage){let aa=await this.tensor();this.tensor4DImage=expandDims$4(aa)}return this.tensor4DImage}async array(){return this.tensorImage?this.tensorImage.array():(await this.tensor()).array()}dims(){return this.bitmapImage?[this.bitmapImage.width,this.bitmapImage.height]:this.tensorImage?[this.tensorImage.shape[0],this.tensorImage.shape[1]]:this.htmlImage instanceof HTMLImageElement?[this.htmlImage.width,this.htmlImage.height]:[0,0]}dispose(){this.tensorImage&&dispose$1(this.tensorImage),this.tensor4DImage&&dispose$1(this.tensor4DImage)}static fromArray(aa){let xa=tensor(aa);return new CVImage(xa)}}const MAX_REQUEST_AGE=1e3*10;class JSONHandler{constructor(aa){this.path="",this.weightPathPrefix="",this.requestInit={},this.fetch=fetch,this.onProgress=()=>{},this.weightUrlConverter=null,this.json=aa}async load(){const aa=this.json,xa=aa.modelTopology,ba=aa.weightsManifest,Sa=aa.generatedBy,Ta=aa.convertedBy,wa=aa.format,Ea=aa.userDefinedMetadata;if(xa==null&&ba==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let ka=[],Aa=new ArrayBuffer(0);ba!=null&&([ka,Aa]=await this.loadWeights(ba));const Fa={modelTopology:xa,weightSpecs:ka,weightData:Aa,userDefinedMetadata:Ea,generatedBy:Sa,convertedBy:Ta,format:wa},La=aa.modelInitializer;return La&&(Fa.modelInitializer=La),Fa}async loadWeights(aa){Array.isArray(this.path)?this.path[1]:this.path;const[xa,ba]=["",""],Sa=this.weightPathPrefix||xa,Ta=[];for(const Aa of aa)Ta.push(...Aa.weights);const wa=[],Ea=[];for(const Aa of aa)for(const Fa of Aa.paths)this.weightUrlConverter?Ea.push(this.weightUrlConverter(Fa)):wa.push(Sa+Fa+ba);this.weightUrlConverter&&wa.push(...await Promise.all(Ea));const ka=await loadWeightsAsArrayBuffer(wa,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[Ta,concatenateArrayBuffers(ka)]}}function concatenateArrayBuffers(ha){if(ha.length===1)return ha[0];let aa=0;ha.forEach(Sa=>{aa+=Sa.byteLength});const xa=new Uint8Array(aa);let ba=0;return ha.forEach(Sa=>{xa.set(new Uint8Array(Sa),ba),ba+=Sa.byteLength}),xa.buffer}async function loadWeightsAsArrayBuffer(ha,aa){aa==null&&(aa={});const xa=aa.fetchFunc==null?fetch:aa.fetchFunc,ba=ha.map(Ea=>xa(Ea,aa?aa.requestInit:{})),Ta=(await Promise.all(ba)).map(Ea=>Ea.arrayBuffer());return await Promise.all(Ta)}class DefaultYOLOOptions{constructor(aa){this.model=null,this.size=640,this.maxNumBoxes=20,this.scoreThreshold=.5,this.iouThreshold=.5,this.classes=[],this.colors={},this.update(aa)}update(aa){this.model=aa.model??this.model,this.size=aa.size??this.size,this.maxNumBoxes=aa.maxNumBoxes??this.maxNumBoxes,this.scoreThreshold=aa.scoreThreshold??this.scoreThreshold,this.iouThreshold=aa.iouThreshold??this.iouThreshold,this.classes=aa.classes??this.classes,this.colors=aa.colors??this.colors}}class YOLOv8 extends CVModel{constructor(aa){super(),this.async_model=!1,this.options=new DefaultYOLOOptions(aa)}async initialize(){const aa=new JSONHandler(this.options.model);this.model=await loadGraphModel(aa);const xa=this.zeros();var ba;try{ba=this.model.execute(xa)}catch{ba=await this.model.executeAsync(xa),this.async_model=!0}dispose$1(ba),dispose$1(xa)}configure(aa){this.options.update(aa)}zeros(){return zeros$2([1,3,this.options.size,this.options.size],"float32")}async preprocess(aa){let xa=await aa.tensor4D(),ba=tidy$1(()=>transpose$3(div$2(xa.resizeNearestNeighbor([this.options.size,this.options.size]).asType("float32"),255),[0,3,1,2]));return xa.dispose(),ba}async infer(aa){let xa=await this.preprocess(aa);if(performance.now(),!this.model)throw new Error("Model not loaded");const ba=this.async_model?await this.model.executeAsync(xa):this.model.execute(xa);let Sa=transpose$3(ba,[0,2,1]);const Ta=Sa.dataSync(),wa=Sa.shape[1],Ea=Sa.shape[2]-4,ka=this.calculateMaxScoresYolov5(Ta,wa,Ea),Aa=ka.scores,Fa=ka.classes,La=this.getBoxesYoloV5(Ta,wa,Ea,this.options.size);dispose$1(xa),dispose$1(ba),dispose$1(Sa);const el=getBackend();setBackend("cpu");const tl=tidy$1(()=>{const rl=tensor2d(La,[wa,4]);return image$1.nonMaxSuppression(rl,Aa,this.options.maxNumBoxes,this.options.iouThreshold,this.options.scoreThreshold)}),nl=tl.dataSync();return tl.dispose(),setBackend(el),performance.now(),this.buildDetectedObjects(aa.dims()[0],aa.dims()[1],La,Aa,nl,Fa)}buildDetectedObjects(aa,xa,ba,Sa,Ta,wa){const Ea=Ta.length,ka=[];for(let Aa=0;Aa<Ea;Aa++){const Fa=[];for(let rl=0;rl<4;rl++)Fa[rl]=ba[Ta[Aa]*4+rl];const La=Fa[0]*xa,el=Fa[1]*aa,tl=Fa[2]*xa,nl=Fa[3]*aa;ka.push({class:this.options.classes[wa[Ta[Aa]]],confidence:Sa[Ta[Aa]],bbox:{x:(el+nl)/2,y:(La+tl)/2,width:nl-el,height:tl-La},color:this.options.colors?this.options.colors[this.options.classes[wa[Ta[Aa]]]]:"#000"})}return ka}calculateMaxScoresYolov5(aa,xa,ba){const Sa=[],Ta=[];for(let wa=0;wa<xa;wa++){let Ea=Number.MIN_VALUE,ka=-1;for(let Aa=0;Aa<ba;Aa++)aa[wa*ba+(wa+1)*4+Aa]>Ea&&(Ea=aa[wa*ba+(wa+1)*4+Aa],ka=Aa);Sa[wa]=Ea,Ta[wa]=ka}return{classes:Ta,scores:Sa}}getBoxesYoloV5(aa,xa,ba,Sa){const Ta=[];for(let wa=0;wa<xa;wa++){const Ea=aa[wa*(ba+4)+0],ka=aa[wa*(ba+4)+1],Aa=aa[wa*(ba+4)+2],Fa=aa[wa*(ba+4)+3],La=Ea-Aa/2,el=ka-Fa/2,tl=Ea+Aa/2,nl=ka+Fa/2;Ta[wa*4]=el/Sa,Ta[wa*4+1]=La/Sa,Ta[wa*4+2]=nl/Sa,Ta[wa*4+3]=tl/Sa}return new Float32Array(Ta)}}class YOLOv5 extends YOLOv8{constructor(aa){super(aa),this.async_model=!1}async initialize(){const aa=new JSONHandler(this.options.model);this.model=await loadGraphModel(aa);const xa=zeros$2([1,this.options.size,this.options.size,3],"float32");var ba;try{ba=this.model.execute(xa)}catch{ba=await this.model.executeAsync(xa),this.async_model=!0}dispose$1(ba),xa.dispose()}async infer(aa){let xa=await aa.tensor4D(),ba=tidy$1(()=>div$2(xa.resizeNearestNeighbor([this.options.size,this.options.size]).asType("float32"),255)),Sa=transpose$3(ba,[0,1,2,3]);if(ba.dispose(),performance.now(),!this.model)throw new Error("Model not loaded");const Ta=this.async_model?await this.model.executeAsync(Sa):this.model.execute(Sa);let wa=Ta;const Ea=wa.dataSync(),ka=wa.shape[1],Aa=wa.shape[2]-5,Fa=this.calculateMaxScoresYolov5(Ea,ka,Aa),La=this.getConfidenceYoloV5(Ea,ka,Aa),el=this.getBoxesYoloV5(Ea,ka,Aa,this.options.size);dispose$1(Sa),dispose$1(Ta),dispose$1(wa);const tl=getBackend();setBackend("cpu");const nl=tidy$1(()=>{const sl=tensor2d(el,[ka,4]);return image$1.nonMaxSuppression(sl,La,this.options.maxNumBoxes,this.options.iouThreshold,this.options.scoreThreshold)}),rl=nl.dataSync();return nl.dispose(),setBackend(tl),this.buildDetectedObjects(aa.dims()[0],aa.dims()[1],el,La,rl,Fa)}calculateMaxScoresYolov5(aa,xa,ba){const Sa=[];for(let Ta=0;Ta<xa;Ta++){let wa=Number.MIN_VALUE,Ea=-1;for(let ka=0;ka<ba;ka++)aa[Ta*ba+(Ta+1)*5+ka]>wa&&(wa=aa[Ta*ba+(Ta+1)*5+ka],Ea=ka);Sa[Ta]=Ea}return Sa}getConfidenceYoloV5(aa,xa,ba){const Sa=[];for(let Ta=0;Ta<xa;Ta++)Sa[Ta]=aa[Ta*(ba+5)+4];return Sa}getBoxesYoloV5(aa,xa,ba,Sa){const Ta=[];for(let wa=0;wa<xa;wa++){const Ea=aa[wa*(ba+5)+0],ka=aa[wa*(ba+5)+1],Aa=aa[wa*(ba+5)+2],Fa=aa[wa*(ba+5)+3],La=Ea-Aa/2,el=ka-Fa/2,tl=Ea+Aa/2,nl=ka+Fa/2;Ta[wa*4]=el,Ta[wa*4+1]=La,Ta[wa*4+2]=nl,Ta[wa*4+3]=tl}return new Float32Array(Ta)}}function getDevicePixelRatio(){return window.devicePixelRatio}function getUserAgent(){return navigator.userAgent}function getPlatform(){return navigator.platform}function getPlugins(){return Array.from(navigator.plugins).map(ha=>`${ha.name} - ${ha.filename}`).join(", ")}async function getHeaders(){let ha=await fetch("https://httpbin.org/headers"),{headers:aa}=await ha.json();return["Accept","Accept-Encoding","Accept-Language","User-Agent"].map(xa=>`${xa}: ${aa[xa]}`).join(`
`)}function getDateFormat(){return new Date(0).toString()}function getFonts(){return["-apple-system","BlinkMacSystemFont","Cantarell","Consolas","Courier New","Droid Sans","Fira Sans","Helvetica Neue","Menlo","Monaco","Oxygen","Roboto","source-code-pro","Segoe UI","Ubuntu"].filter(aa=>document.fonts.check(`12px "${aa}"`)).join(", ")}function getCanvas2dRender(){let ha=document.createElement("canvas");ha.width=200,ha.height=50;let aa=ha.getContext("2d");aa.font="21.5px Arial",aa.fillText("😉",0,20),aa.font="15.7px serif",aa.fillText("abcdefghijklmnopqrtsuvwxyz",0,40),aa.font="20.5px Arial";let xa=aa.createLinearGradient(0,0,ha.width,ha.height);return xa.addColorStop(0,"red"),xa.addColorStop(.5,"green"),xa.addColorStop(1,"blue"),aa.fillStyle=xa,aa.fillText("Lorem ipsum!",30,20),aa.beginPath(),aa.moveTo(170,5),aa.lineTo(160,25),aa.lineTo(185,20),aa.fill(),ha.toDataURL()}function getWebglRenderer(){let aa=document.createElement("canvas").getContext("webgl");if(!aa)return null;let xa=aa.getExtension("WEBGL_debug_renderer_info");return[aa.getParameter(xa.UNMASKED_VENDOR_WEBGL),aa.getParameter(xa.UNMASKED_RENDERER_WEBGL)].join(", ")}function getWebglRender(){let ha=document.createElement("canvas");ha.width=50,ha.height=50;let aa=ha.getContext("webgl");if(!aa)return null;let xa=[[-.1,.8,0],[-.8,-.8,0],[.8,-.7,0]].flat(),ba=aa.createBuffer();aa.bindBuffer(aa.ARRAY_BUFFER,ba),aa.bufferData(aa.ARRAY_BUFFER,new Float32Array(xa),aa.STATIC_DRAW);let Sa=[0,1,2],Ta=aa.createBuffer();aa.bindBuffer(aa.ELEMENT_ARRAY_BUFFER,Ta),aa.bufferData(aa.ELEMENT_ARRAY_BUFFER,new Uint16Array(Sa),aa.STATIC_DRAW);let wa=`
    attribute vec3 coordinates;
    void main(void) {
      gl_Position = vec4(coordinates, 1.0);
    }
   `,Ea=aa.createShader(aa.VERTEX_SHADER);aa.shaderSource(Ea,wa),aa.compileShader(Ea);let ka=`
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 0.5);
    }
  `,Aa=aa.createShader(aa.FRAGMENT_SHADER);aa.shaderSource(Aa,ka),aa.compileShader(Aa);let Fa=aa.createProgram();aa.attachShader(Fa,Ea),aa.attachShader(Fa,Aa),aa.linkProgram(Fa),aa.useProgram(Fa);let La=aa.getAttribLocation(Fa,"coordinates");return aa.vertexAttribPointer(La,3,aa.FLOAT,!1,0,0),aa.enableVertexAttribArray(La),aa.clearColor(1,1,1,1),aa.enable(aa.DEPTH_TEST),aa.clear(aa.COLOR_BUFFER_BIT),aa.viewport(0,0,ha.width,ha.height),aa.drawElements(aa.TRIANGLES,Sa.length,aa.UNSIGNED_SHORT,0),ha.toDataURL()}var sha1$1={exports:{}};/*
 * [js-sha1]{@link https://github.com/emn178/js-sha1}
 *
 * @version 0.6.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */(function(module){(function(){var root=typeof window=="object"?window:{},NODE_JS=!root.JS_SHA1_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS&&(root=commonjsGlobal);var COMMON_JS=!root.JS_SHA1_NO_COMMON_JS&&!0&&module.exports,HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[],createOutputMethod=function(ha){return function(aa){return new Sha1(!0).update(aa)[ha]()}},createMethod=function(){var ha=createOutputMethod("hex");NODE_JS&&(ha=nodeWrap(ha)),ha.create=function(){return new Sha1},ha.update=function(ba){return ha.create().update(ba)};for(var aa=0;aa<OUTPUT_TYPES.length;++aa){var xa=OUTPUT_TYPES[aa];ha[xa]=createOutputMethod(xa)}return ha},nodeWrap=function(method){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),nodeMethod=function(ha){if(typeof ha=="string")return crypto.createHash("sha1").update(ha,"utf8").digest("hex");if(ha.constructor===ArrayBuffer)ha=new Uint8Array(ha);else if(ha.length===void 0)return method(ha);return crypto.createHash("sha1").update(new Buffer(ha)).digest("hex")};return nodeMethod};function Sha1(ha){ha?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],this.h0=1732584193,this.h1=4023233417,this.h2=2562383102,this.h3=271733878,this.h4=3285377520,this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0}Sha1.prototype.update=function(ha){if(!this.finalized){var aa=typeof ha!="string";aa&&ha.constructor===root.ArrayBuffer&&(ha=new Uint8Array(ha));for(var xa,ba=0,Sa,Ta=ha.length||0,wa=this.blocks;ba<Ta;){if(this.hashed&&(this.hashed=!1,wa[0]=this.block,wa[16]=wa[1]=wa[2]=wa[3]=wa[4]=wa[5]=wa[6]=wa[7]=wa[8]=wa[9]=wa[10]=wa[11]=wa[12]=wa[13]=wa[14]=wa[15]=0),aa)for(Sa=this.start;ba<Ta&&Sa<64;++ba)wa[Sa>>2]|=ha[ba]<<SHIFT[Sa++&3];else for(Sa=this.start;ba<Ta&&Sa<64;++ba)xa=ha.charCodeAt(ba),xa<128?wa[Sa>>2]|=xa<<SHIFT[Sa++&3]:xa<2048?(wa[Sa>>2]|=(192|xa>>6)<<SHIFT[Sa++&3],wa[Sa>>2]|=(128|xa&63)<<SHIFT[Sa++&3]):xa<55296||xa>=57344?(wa[Sa>>2]|=(224|xa>>12)<<SHIFT[Sa++&3],wa[Sa>>2]|=(128|xa>>6&63)<<SHIFT[Sa++&3],wa[Sa>>2]|=(128|xa&63)<<SHIFT[Sa++&3]):(xa=65536+((xa&1023)<<10|ha.charCodeAt(++ba)&1023),wa[Sa>>2]|=(240|xa>>18)<<SHIFT[Sa++&3],wa[Sa>>2]|=(128|xa>>12&63)<<SHIFT[Sa++&3],wa[Sa>>2]|=(128|xa>>6&63)<<SHIFT[Sa++&3],wa[Sa>>2]|=(128|xa&63)<<SHIFT[Sa++&3]);this.lastByteIndex=Sa,this.bytes+=Sa-this.start,Sa>=64?(this.block=wa[16],this.start=Sa-64,this.hash(),this.hashed=!0):this.start=Sa}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha1.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var ha=this.blocks,aa=this.lastByteIndex;ha[16]=this.block,ha[aa>>2]|=EXTRA[aa&3],this.block=ha[16],aa>=56&&(this.hashed||this.hash(),ha[0]=this.block,ha[16]=ha[1]=ha[2]=ha[3]=ha[4]=ha[5]=ha[6]=ha[7]=ha[8]=ha[9]=ha[10]=ha[11]=ha[12]=ha[13]=ha[14]=ha[15]=0),ha[14]=this.hBytes<<3|this.bytes>>>29,ha[15]=this.bytes<<3,this.hash()}},Sha1.prototype.hash=function(){var ha=this.h0,aa=this.h1,xa=this.h2,ba=this.h3,Sa=this.h4,Ta,wa,Ea,ka=this.blocks;for(wa=16;wa<80;++wa)Ea=ka[wa-3]^ka[wa-8]^ka[wa-14]^ka[wa-16],ka[wa]=Ea<<1|Ea>>>31;for(wa=0;wa<20;wa+=5)Ta=aa&xa|~aa&ba,Ea=ha<<5|ha>>>27,Sa=Ea+Ta+Sa+1518500249+ka[wa]<<0,aa=aa<<30|aa>>>2,Ta=ha&aa|~ha&xa,Ea=Sa<<5|Sa>>>27,ba=Ea+Ta+ba+1518500249+ka[wa+1]<<0,ha=ha<<30|ha>>>2,Ta=Sa&ha|~Sa&aa,Ea=ba<<5|ba>>>27,xa=Ea+Ta+xa+1518500249+ka[wa+2]<<0,Sa=Sa<<30|Sa>>>2,Ta=ba&Sa|~ba&ha,Ea=xa<<5|xa>>>27,aa=Ea+Ta+aa+1518500249+ka[wa+3]<<0,ba=ba<<30|ba>>>2,Ta=xa&ba|~xa&Sa,Ea=aa<<5|aa>>>27,ha=Ea+Ta+ha+1518500249+ka[wa+4]<<0,xa=xa<<30|xa>>>2;for(;wa<40;wa+=5)Ta=aa^xa^ba,Ea=ha<<5|ha>>>27,Sa=Ea+Ta+Sa+1859775393+ka[wa]<<0,aa=aa<<30|aa>>>2,Ta=ha^aa^xa,Ea=Sa<<5|Sa>>>27,ba=Ea+Ta+ba+1859775393+ka[wa+1]<<0,ha=ha<<30|ha>>>2,Ta=Sa^ha^aa,Ea=ba<<5|ba>>>27,xa=Ea+Ta+xa+1859775393+ka[wa+2]<<0,Sa=Sa<<30|Sa>>>2,Ta=ba^Sa^ha,Ea=xa<<5|xa>>>27,aa=Ea+Ta+aa+1859775393+ka[wa+3]<<0,ba=ba<<30|ba>>>2,Ta=xa^ba^Sa,Ea=aa<<5|aa>>>27,ha=Ea+Ta+ha+1859775393+ka[wa+4]<<0,xa=xa<<30|xa>>>2;for(;wa<60;wa+=5)Ta=aa&xa|aa&ba|xa&ba,Ea=ha<<5|ha>>>27,Sa=Ea+Ta+Sa-1894007588+ka[wa]<<0,aa=aa<<30|aa>>>2,Ta=ha&aa|ha&xa|aa&xa,Ea=Sa<<5|Sa>>>27,ba=Ea+Ta+ba-1894007588+ka[wa+1]<<0,ha=ha<<30|ha>>>2,Ta=Sa&ha|Sa&aa|ha&aa,Ea=ba<<5|ba>>>27,xa=Ea+Ta+xa-1894007588+ka[wa+2]<<0,Sa=Sa<<30|Sa>>>2,Ta=ba&Sa|ba&ha|Sa&ha,Ea=xa<<5|xa>>>27,aa=Ea+Ta+aa-1894007588+ka[wa+3]<<0,ba=ba<<30|ba>>>2,Ta=xa&ba|xa&Sa|ba&Sa,Ea=aa<<5|aa>>>27,ha=Ea+Ta+ha-1894007588+ka[wa+4]<<0,xa=xa<<30|xa>>>2;for(;wa<80;wa+=5)Ta=aa^xa^ba,Ea=ha<<5|ha>>>27,Sa=Ea+Ta+Sa-899497514+ka[wa]<<0,aa=aa<<30|aa>>>2,Ta=ha^aa^xa,Ea=Sa<<5|Sa>>>27,ba=Ea+Ta+ba-899497514+ka[wa+1]<<0,ha=ha<<30|ha>>>2,Ta=Sa^ha^aa,Ea=ba<<5|ba>>>27,xa=Ea+Ta+xa-899497514+ka[wa+2]<<0,Sa=Sa<<30|Sa>>>2,Ta=ba^Sa^ha,Ea=xa<<5|xa>>>27,aa=Ea+Ta+aa-899497514+ka[wa+3]<<0,ba=ba<<30|ba>>>2,Ta=xa^ba^Sa,Ea=aa<<5|aa>>>27,ha=Ea+Ta+ha-899497514+ka[wa+4]<<0,xa=xa<<30|xa>>>2;this.h0=this.h0+ha<<0,this.h1=this.h1+aa<<0,this.h2=this.h2+xa<<0,this.h3=this.h3+ba<<0,this.h4=this.h4+Sa<<0},Sha1.prototype.hex=function(){this.finalize();var ha=this.h0,aa=this.h1,xa=this.h2,ba=this.h3,Sa=this.h4;return HEX_CHARS[ha>>28&15]+HEX_CHARS[ha>>24&15]+HEX_CHARS[ha>>20&15]+HEX_CHARS[ha>>16&15]+HEX_CHARS[ha>>12&15]+HEX_CHARS[ha>>8&15]+HEX_CHARS[ha>>4&15]+HEX_CHARS[ha&15]+HEX_CHARS[aa>>28&15]+HEX_CHARS[aa>>24&15]+HEX_CHARS[aa>>20&15]+HEX_CHARS[aa>>16&15]+HEX_CHARS[aa>>12&15]+HEX_CHARS[aa>>8&15]+HEX_CHARS[aa>>4&15]+HEX_CHARS[aa&15]+HEX_CHARS[xa>>28&15]+HEX_CHARS[xa>>24&15]+HEX_CHARS[xa>>20&15]+HEX_CHARS[xa>>16&15]+HEX_CHARS[xa>>12&15]+HEX_CHARS[xa>>8&15]+HEX_CHARS[xa>>4&15]+HEX_CHARS[xa&15]+HEX_CHARS[ba>>28&15]+HEX_CHARS[ba>>24&15]+HEX_CHARS[ba>>20&15]+HEX_CHARS[ba>>16&15]+HEX_CHARS[ba>>12&15]+HEX_CHARS[ba>>8&15]+HEX_CHARS[ba>>4&15]+HEX_CHARS[ba&15]+HEX_CHARS[Sa>>28&15]+HEX_CHARS[Sa>>24&15]+HEX_CHARS[Sa>>20&15]+HEX_CHARS[Sa>>16&15]+HEX_CHARS[Sa>>12&15]+HEX_CHARS[Sa>>8&15]+HEX_CHARS[Sa>>4&15]+HEX_CHARS[Sa&15]},Sha1.prototype.toString=Sha1.prototype.hex,Sha1.prototype.digest=function(){this.finalize();var ha=this.h0,aa=this.h1,xa=this.h2,ba=this.h3,Sa=this.h4;return[ha>>24&255,ha>>16&255,ha>>8&255,ha&255,aa>>24&255,aa>>16&255,aa>>8&255,aa&255,xa>>24&255,xa>>16&255,xa>>8&255,xa&255,ba>>24&255,ba>>16&255,ba>>8&255,ba&255,Sa>>24&255,Sa>>16&255,Sa>>8&255,Sa&255]},Sha1.prototype.array=Sha1.prototype.digest,Sha1.prototype.arrayBuffer=function(){this.finalize();var ha=new ArrayBuffer(20),aa=new DataView(ha);return aa.setUint32(0,this.h0),aa.setUint32(4,this.h1),aa.setUint32(8,this.h2),aa.setUint32(12,this.h3),aa.setUint32(16,this.h4),ha};var exports=createMethod();COMMON_JS?module.exports=exports:root.sha1=exports})()})(sha1$1);var sha1Exports=sha1$1.exports,sha1=getDefaultExportFromCjs(sha1Exports);async function runCatching(ha){try{return await ha()}catch{return null}}async function computeStableComponents(){return{devicePixelRatio:await runCatching(getDevicePixelRatio),userAgent:await runCatching(getUserAgent),platform:await runCatching(getPlatform),plugins:await runCatching(getPlugins),headers:await runCatching(getHeaders),dateFormat:await runCatching(getDateFormat),fonts:await runCatching(getFonts),canvas2dRender:await runCatching(getCanvas2dRender),webglRenderer:await runCatching(getWebglRenderer),webglRender:await runCatching(getWebglRender)}}async function computeFingerprint(){let ha=await computeStableComponents(),aa=Object.values(ha).map(String).join(`
`);return sha1(aa)}class DefaultRFDETROptions{constructor(aa){this.model=null,this.size=384,this.maxNumBoxes=20,this.scoreThreshold=.5,this.classes=[],this.colors={},this.update(aa)}update(aa){this.model=aa.model??this.model,this.size=aa.size??this.size,this.maxNumBoxes=aa.maxNumBoxes??this.maxNumBoxes,this.scoreThreshold=aa.scoreThreshold??this.scoreThreshold,this.classes=aa.classes??this.classes,this.colors=aa.colors??this.colors}}class RFDetr extends CVModel{constructor(aa){super(),this.async_model=!1,this.imagenetMeans=tensor([.485,.456,.406],[1,1,3]),this.imagenetStds=tensor([.229,.224,.225],[1,1,3]),this.options=new DefaultRFDETROptions(aa)}async initialize(){const aa=new JSONHandler(this.options.model);this.model=await loadGraphModel(aa);const xa=this.zeros();var ba;try{ba=this.model.execute(xa)}catch{ba=await this.model.executeAsync(xa),this.async_model=!0}dispose$1(ba),dispose$1(xa)}configure(aa){this.options.update(aa)}zeros(){return zeros$2([1,this.options.size,this.options.size,3],"float32")}async preprocess(aa){let xa=await aa.tensor4D(),ba=tidy$1(()=>{const Sa=xa.resizeNearestNeighbor([this.options.size,this.options.size]).asType("float32"),Ta=div$2(Sa,255),wa=sub$4(Ta,this.imagenetMeans);return div$2(wa,this.imagenetStds)});return xa.dispose(),ba}async infer(aa){let xa=await this.preprocess(aa);if(performance.now(),!this.model)throw new Error("Model not loaded");const ba=this.async_model?await this.model.executeAsync(xa):this.model.execute(xa),Sa=ba[0].shape[2]===4?ba[0]:ba[1],Ta=ba[0].shape[2]===4?ba[1]:ba[0],wa=sigmoid$4(Ta),Ea=this.processDetections(Sa.dataSync(),wa.dataSync(),Sa.shape,wa.shape,this.options.scoreThreshold,aa.dims()[0],aa.dims()[1]);return xa.dispose(),ba.forEach(ka=>ka.dispose()),wa.dispose(),Sa.dispose(),Ta.dispose(),Ea}processDetections(aa,xa,ba,Sa,Ta,wa,Ea){const[ka,Aa,Fa]=ba,[,,La]=Sa,el=[];for(let tl=0;tl<Aa;tl++){const nl=tl*4,rl=aa[nl+0]*wa,sl=aa[nl+1]*Ea,ol=aa[nl+2]*wa,al=aa[nl+3]*Ea,ll=tl*La;let il=0,cl=0;for(let ul=0;ul<La;ul++){const dl=xa[ll+ul];dl>il&&(il=dl,cl=ul)}il>Ta&&el.push({bbox:{x:rl,y:sl,width:ol,height:al},class:this.options.classes[cl],confidence:il,color:this.options.colors[this.options.classes[cl]]})}return el.sort((tl,nl)=>nl.confidence-tl.confidence),el}}class YOLOv11 extends YOLOv8{zeros(){return zeros$2([1,this.options.size,this.options.size,3],"float32")}async preprocess(aa){let xa=await aa.tensor4D(),ba=tidy$1(()=>div$2(xa.resizeNearestNeighbor([this.options.size,this.options.size]).asType("float32"),255));return xa.dispose(),ba}}class Roboflow{constructor(aa,xa,ba,Sa,Ta){this.fingerprint="",this.url=aa,this.dataset=xa,this.version=ba,this.publishable_key=Sa,this.options=Ta?Object.assign({},...Ta):{}}async generateFingerprint(){this.fingerprint=await computeFingerprint()}hashCode(aa){for(var xa=0,ba=0;ba<aa.length;ba++){var Sa=aa.charCodeAt(ba);xa=(xa<<5)-xa+Sa,xa=xa&xa}return xa}async fetchAndLoadModel(){await this.generateFingerprint();let aa=await this.fetchWeights();if(aa.modelType.startsWith("yolov8"))return new YOLOv8({...aa,...this.options});if(aa.modelType.startsWith("yolov5"))return new YOLOv5({...aa,...this.options});if(aa.modelType.startsWith("rfdetr"))return new RFDetr({...aa,...this.options});if(aa.modelType.startsWith("yolov11"))return new YOLOv11({...aa,...this.options});throw new Error("Unsupported model type: "+aa.modelType)}async fetchWeights(){var aa=this.url+"/tfjs",xa=[aa,this.dataset,this.version].join("/")+"?"+new URLSearchParams({publishable_key:this.publishable_key,host:typeof window<"u"?window.location.host:typeof self!=null&&self.location!=null?self.location.host:"node",u:this.fingerprint});let ba=await fetch(decodeURIComponent(this.publishable_key)).catch(function(wa){throw new Error("Error happened while requesting model metadata. "+JSON.stringify(wa))}),Sa=await ba.json();if(Sa.error||!(Sa!=null&&Sa.tfjs))throw new Error("Error happened while parsing model metadata. "+JSON.stringify(ba));var Ta=Sa.tfjs;return Ta}}let model=null,modelInitialized=!1;async function initModel(ha,aa,xa,ba,Sa,Ta=[]){const wa=`${xa}/${ba}`;try{wa=="gaze/1"?model=new Gaze:model=await new Roboflow(ha,xa,ba.toString(),Sa,Ta).fetchAndLoadModel()}catch(Ea){throw new Error(`Error loading model ${wa}: ${Ea}`)}return await model.initialize(aa,xa,ba,Sa,!1,...Ta),model}self.onmessage=async function ha(aa){const xa=aa.data,ba=xa.reqId;try{switch(xa.cmd){case"init":await initModel(xa.url,xa.workerId,xa.modelName,xa.modelVersion,xa.publishableKey,xa.options),modelInitialized=!0,self.postMessage({reqId:ba,cmd:xa.cmd,res:"model initialized",status:200});break;case"infer":if(!modelInitialized||!model)throw new ModelNotInitialized("Model not initialized");if(Date.now()-xa.timestamp>MAX_REQUEST_AGE)throw new RequestTooOld(`Request is older than ${MAX_REQUEST_AGE} ms.`);const Sa=new CVImage(xa.img);xa.options&&model.configure(...xa.options);const Ta=await model.infer(Sa);Sa.dispose(),self.postMessage({reqId:ba,cmd:xa.cmd,res:Ta,status:200});break}}catch(Sa){if(Sa instanceof InferenceError)return self.postMessage({reqId:ba,cmd:xa.cmd,res:Sa.message,status:Sa.code});if(xa.cmd=="init")return console.error(Sa),self.postMessage({reqId:ba,cmd:xa.cmd,res:"Model initialization failed",status:500});throw Sa}}})();

